(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, window.gogocode = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var main$3 = {};

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': empty
	});

	var require$$0$5 = /*@__PURE__*/getAugmentedNamespace(empty$1);

	var main$2 = {};

	var fork = {exports: {}};

	var types$a = {};

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(types$a, "__esModule", { value: true });
	var Op = Object.prototype;
	var objToStr = Op.toString;
	var hasOwn$9 = Op.hasOwnProperty;
	var BaseType = /** @class */ (function () {
	    function BaseType() {
	    }
	    BaseType.prototype.assert = function (value, deep) {
	        if (!this.check(value, deep)) {
	            var str = shallowStringify(value);
	            throw new Error(str + " does not match type " + this);
	        }
	        return true;
	    };
	    BaseType.prototype.arrayOf = function () {
	        var elemType = this;
	        return new ArrayType(elemType);
	    };
	    return BaseType;
	}());
	var ArrayType = /** @class */ (function (_super) {
	    __extends(ArrayType, _super);
	    function ArrayType(elemType) {
	        var _this = _super.call(this) || this;
	        _this.elemType = elemType;
	        _this.kind = "ArrayType";
	        return _this;
	    }
	    ArrayType.prototype.toString = function () {
	        return "[" + this.elemType + "]";
	    };
	    ArrayType.prototype.check = function (value, deep) {
	        var _this = this;
	        return Array.isArray(value) && value.every(function (elem) { return _this.elemType.check(elem, deep); });
	    };
	    return ArrayType;
	}(BaseType));
	var IdentityType = /** @class */ (function (_super) {
	    __extends(IdentityType, _super);
	    function IdentityType(value) {
	        var _this = _super.call(this) || this;
	        _this.value = value;
	        _this.kind = "IdentityType";
	        return _this;
	    }
	    IdentityType.prototype.toString = function () {
	        return String(this.value);
	    };
	    IdentityType.prototype.check = function (value, deep) {
	        var result = value === this.value;
	        if (!result && typeof deep === "function") {
	            deep(this, value);
	        }
	        return result;
	    };
	    return IdentityType;
	}(BaseType));
	var ObjectType = /** @class */ (function (_super) {
	    __extends(ObjectType, _super);
	    function ObjectType(fields) {
	        var _this = _super.call(this) || this;
	        _this.fields = fields;
	        _this.kind = "ObjectType";
	        return _this;
	    }
	    ObjectType.prototype.toString = function () {
	        return "{ " + this.fields.join(", ") + " }";
	    };
	    ObjectType.prototype.check = function (value, deep) {
	        return (objToStr.call(value) === objToStr.call({}) &&
	            this.fields.every(function (field) {
	                return field.type.check(value[field.name], deep);
	            }));
	    };
	    return ObjectType;
	}(BaseType));
	var OrType = /** @class */ (function (_super) {
	    __extends(OrType, _super);
	    function OrType(types) {
	        var _this = _super.call(this) || this;
	        _this.types = types;
	        _this.kind = "OrType";
	        return _this;
	    }
	    OrType.prototype.toString = function () {
	        return this.types.join(" | ");
	    };
	    OrType.prototype.check = function (value, deep) {
	        return this.types.some(function (type) {
	            return type.check(value, deep);
	        });
	    };
	    return OrType;
	}(BaseType));
	var PredicateType = /** @class */ (function (_super) {
	    __extends(PredicateType, _super);
	    function PredicateType(name, predicate) {
	        var _this = _super.call(this) || this;
	        _this.name = name;
	        _this.predicate = predicate;
	        _this.kind = "PredicateType";
	        return _this;
	    }
	    PredicateType.prototype.toString = function () {
	        return this.name;
	    };
	    PredicateType.prototype.check = function (value, deep) {
	        var result = this.predicate(value, deep);
	        if (!result && typeof deep === "function") {
	            deep(this, value);
	        }
	        return result;
	    };
	    return PredicateType;
	}(BaseType));
	var Def = /** @class */ (function () {
	    function Def(type, typeName) {
	        this.type = type;
	        this.typeName = typeName;
	        this.baseNames = [];
	        this.ownFields = Object.create(null);
	        // Includes own typeName. Populated during finalization.
	        this.allSupertypes = Object.create(null);
	        // Linear inheritance hierarchy. Populated during finalization.
	        this.supertypeList = [];
	        // Includes inherited fields.
	        this.allFields = Object.create(null);
	        // Non-hidden keys of allFields.
	        this.fieldNames = [];
	        // This property will be overridden as true by individual Def instances
	        // when they are finalized.
	        this.finalized = false;
	        // False by default until .build(...) is called on an instance.
	        this.buildable = false;
	        this.buildParams = [];
	    }
	    Def.prototype.isSupertypeOf = function (that) {
	        if (that instanceof Def) {
	            if (this.finalized !== true ||
	                that.finalized !== true) {
	                throw new Error("");
	            }
	            return hasOwn$9.call(that.allSupertypes, this.typeName);
	        }
	        else {
	            throw new Error(that + " is not a Def");
	        }
	    };
	    Def.prototype.checkAllFields = function (value, deep) {
	        var allFields = this.allFields;
	        if (this.finalized !== true) {
	            throw new Error("" + this.typeName);
	        }
	        function checkFieldByName(name) {
	            var field = allFields[name];
	            var type = field.type;
	            var child = field.getValue(value);
	            return type.check(child, deep);
	        }
	        return value !== null &&
	            typeof value === "object" &&
	            Object.keys(allFields).every(checkFieldByName);
	    };
	    Def.prototype.bases = function () {
	        var supertypeNames = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            supertypeNames[_i] = arguments[_i];
	        }
	        var bases = this.baseNames;
	        if (this.finalized) {
	            if (supertypeNames.length !== bases.length) {
	                throw new Error("");
	            }
	            for (var i = 0; i < supertypeNames.length; i++) {
	                if (supertypeNames[i] !== bases[i]) {
	                    throw new Error("");
	                }
	            }
	            return this;
	        }
	        supertypeNames.forEach(function (baseName) {
	            // This indexOf lookup may be O(n), but the typical number of base
	            // names is very small, and indexOf is a native Array method.
	            if (bases.indexOf(baseName) < 0) {
	                bases.push(baseName);
	            }
	        });
	        return this; // For chaining.
	    };
	    return Def;
	}());
	types$a.Def = Def;
	var Field = /** @class */ (function () {
	    function Field(name, type, defaultFn, hidden) {
	        this.name = name;
	        this.type = type;
	        this.defaultFn = defaultFn;
	        this.hidden = !!hidden;
	    }
	    Field.prototype.toString = function () {
	        return JSON.stringify(this.name) + ": " + this.type;
	    };
	    Field.prototype.getValue = function (obj) {
	        var value = obj[this.name];
	        if (typeof value !== "undefined") {
	            return value;
	        }
	        if (typeof this.defaultFn === "function") {
	            value = this.defaultFn.call(obj);
	        }
	        return value;
	    };
	    return Field;
	}());
	function shallowStringify(value) {
	    if (Array.isArray(value)) {
	        return "[" + value.map(shallowStringify).join(", ") + "]";
	    }
	    if (value && typeof value === "object") {
	        return "{ " + Object.keys(value).map(function (key) {
	            return key + ": " + value[key];
	        }).join(", ") + " }";
	    }
	    return JSON.stringify(value);
	}
	function typesPlugin(_fork) {
	    var Type = {
	        or: function () {
	            var types = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                types[_i] = arguments[_i];
	            }
	            return new OrType(types.map(function (type) { return Type.from(type); }));
	        },
	        from: function (value, name) {
	            if (value instanceof ArrayType ||
	                value instanceof IdentityType ||
	                value instanceof ObjectType ||
	                value instanceof OrType ||
	                value instanceof PredicateType) {
	                return value;
	            }
	            // The Def type is used as a helper for constructing compound
	            // interface types for AST nodes.
	            if (value instanceof Def) {
	                return value.type;
	            }
	            // Support [ElemType] syntax.
	            if (isArray.check(value)) {
	                if (value.length !== 1) {
	                    throw new Error("only one element type is permitted for typed arrays");
	                }
	                return new ArrayType(Type.from(value[0]));
	            }
	            // Support { someField: FieldType, ... } syntax.
	            if (isObject.check(value)) {
	                return new ObjectType(Object.keys(value).map(function (name) {
	                    return new Field(name, Type.from(value[name], name));
	                }));
	            }
	            if (typeof value === "function") {
	                var bicfIndex = builtInCtorFns.indexOf(value);
	                if (bicfIndex >= 0) {
	                    return builtInCtorTypes[bicfIndex];
	                }
	                if (typeof name !== "string") {
	                    throw new Error("missing name");
	                }
	                return new PredicateType(name, value);
	            }
	            // As a last resort, toType returns a type that matches any value that
	            // is === from. This is primarily useful for literal values like
	            // toType(null), but it has the additional advantage of allowing
	            // toType to be a total function.
	            return new IdentityType(value);
	        },
	        // Define a type whose name is registered in a namespace (the defCache) so
	        // that future definitions will return the same type given the same name.
	        // In particular, this system allows for circular and forward definitions.
	        // The Def object d returned from Type.def may be used to configure the
	        // type d.type by calling methods such as d.bases, d.build, and d.field.
	        def: function (typeName) {
	            return hasOwn$9.call(defCache, typeName)
	                ? defCache[typeName]
	                : defCache[typeName] = new DefImpl(typeName);
	        },
	        hasDef: function (typeName) {
	            return hasOwn$9.call(defCache, typeName);
	        }
	    };
	    var builtInCtorFns = [];
	    var builtInCtorTypes = [];
	    var builtInTypes = {};
	    function defBuiltInType(example, name) {
	        var objStr = objToStr.call(example);
	        var type = new PredicateType(name, function (value) { return objToStr.call(value) === objStr; });
	        builtInTypes[name] = type;
	        if (example && typeof example.constructor === "function") {
	            builtInCtorFns.push(example.constructor);
	            builtInCtorTypes.push(type);
	        }
	        return type;
	    }
	    // These types check the underlying [[Class]] attribute of the given
	    // value, rather than using the problematic typeof operator. Note however
	    // that no subtyping is considered; so, for instance, isObject.check
	    // returns false for [], /./, new Date, and null.
	    defBuiltInType("truthy", "string");
	    var isFunction = defBuiltInType(function () { }, "function");
	    var isArray = defBuiltInType([], "array");
	    var isObject = defBuiltInType({}, "object");
	    defBuiltInType(/./, "RegExp");
	    defBuiltInType(new Date, "Date");
	    defBuiltInType(3, "number");
	    defBuiltInType(true, "boolean");
	    defBuiltInType(null, "null");
	    var isUndefined = defBuiltInType(void 0, "undefined");
	    // In order to return the same Def instance every time Type.def is called
	    // with a particular name, those instances need to be stored in a cache.
	    var defCache = Object.create(null);
	    function defFromValue(value) {
	        if (value && typeof value === "object") {
	            var type = value.type;
	            if (typeof type === "string" &&
	                hasOwn$9.call(defCache, type)) {
	                var d = defCache[type];
	                if (d.finalized) {
	                    return d;
	                }
	            }
	        }
	        return null;
	    }
	    var DefImpl = /** @class */ (function (_super) {
	        __extends(DefImpl, _super);
	        function DefImpl(typeName) {
	            var _this = _super.call(this, new PredicateType(typeName, function (value, deep) { return _this.check(value, deep); }), typeName) || this;
	            return _this;
	        }
	        DefImpl.prototype.check = function (value, deep) {
	            if (this.finalized !== true) {
	                throw new Error("prematurely checking unfinalized type " + this.typeName);
	            }
	            // A Def type can only match an object value.
	            if (value === null || typeof value !== "object") {
	                return false;
	            }
	            var vDef = defFromValue(value);
	            if (!vDef) {
	                // If we couldn't infer the Def associated with the given value,
	                // and we expected it to be a SourceLocation or a Position, it was
	                // probably just missing a "type" field (because Esprima does not
	                // assign a type property to such nodes). Be optimistic and let
	                // this.checkAllFields make the final decision.
	                if (this.typeName === "SourceLocation" ||
	                    this.typeName === "Position") {
	                    return this.checkAllFields(value, deep);
	                }
	                // Calling this.checkAllFields for any other type of node is both
	                // bad for performance and way too forgiving.
	                return false;
	            }
	            // If checking deeply and vDef === this, then we only need to call
	            // checkAllFields once. Calling checkAllFields is too strict when deep
	            // is false, because then we only care about this.isSupertypeOf(vDef).
	            if (deep && vDef === this) {
	                return this.checkAllFields(value, deep);
	            }
	            // In most cases we rely exclusively on isSupertypeOf to make O(1)
	            // subtyping determinations. This suffices in most situations outside
	            // of unit tests, since interface conformance is checked whenever new
	            // instances are created using builder functions.
	            if (!this.isSupertypeOf(vDef)) {
	                return false;
	            }
	            // The exception is when deep is true; then, we recursively check all
	            // fields.
	            if (!deep) {
	                return true;
	            }
	            // Use the more specific Def (vDef) to perform the deep check, but
	            // shallow-check fields defined by the less specific Def (this).
	            return vDef.checkAllFields(value, deep)
	                && this.checkAllFields(value, false);
	        };
	        DefImpl.prototype.build = function () {
	            var _this = this;
	            var buildParams = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                buildParams[_i] = arguments[_i];
	            }
	            // Calling Def.prototype.build multiple times has the effect of merely
	            // redefining this property.
	            this.buildParams = buildParams;
	            if (this.buildable) {
	                // If this Def is already buildable, update self.buildParams and
	                // continue using the old builder function.
	                return this;
	            }
	            // Every buildable type will have its "type" field filled in
	            // automatically. This includes types that are not subtypes of Node,
	            // like SourceLocation, but that seems harmless (TODO?).
	            this.field("type", String, function () { return _this.typeName; });
	            // Override Dp.buildable for this Def instance.
	            this.buildable = true;
	            var addParam = function (built, param, arg, isArgAvailable) {
	                if (hasOwn$9.call(built, param))
	                    return;
	                var all = _this.allFields;
	                if (!hasOwn$9.call(all, param)) {
	                    throw new Error("" + param);
	                }
	                var field = all[param];
	                var type = field.type;
	                var value;
	                if (isArgAvailable) {
	                    value = arg;
	                }
	                else if (field.defaultFn) {
	                    // Expose the partially-built object to the default
	                    // function as its `this` object.
	                    value = field.defaultFn.call(built);
	                }
	                else {
	                    var message = "no value or default function given for field " +
	                        JSON.stringify(param) + " of " + _this.typeName + "(" +
	                        _this.buildParams.map(function (name) {
	                            return all[name];
	                        }).join(", ") + ")";
	                    throw new Error(message);
	                }
	                if (!type.check(value)) {
	                    throw new Error(shallowStringify(value) +
	                        " does not match field " + field +
	                        " of type " + _this.typeName);
	                }
	                built[param] = value;
	            };
	            // Calling the builder function will construct an instance of the Def,
	            // with positional arguments mapped to the fields original passed to .build.
	            // If not enough arguments are provided, the default value for the remaining fields
	            // will be used.
	            var builder = function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var argc = args.length;
	                if (!_this.finalized) {
	                    throw new Error("attempting to instantiate unfinalized type " +
	                        _this.typeName);
	                }
	                var built = Object.create(nodePrototype);
	                _this.buildParams.forEach(function (param, i) {
	                    if (i < argc) {
	                        addParam(built, param, args[i], true);
	                    }
	                    else {
	                        addParam(built, param, null, false);
	                    }
	                });
	                Object.keys(_this.allFields).forEach(function (param) {
	                    // Use the default value.
	                    addParam(built, param, null, false);
	                });
	                // Make sure that the "type" field was filled automatically.
	                if (built.type !== _this.typeName) {
	                    throw new Error("");
	                }
	                return built;
	            };
	            // Calling .from on the builder function will construct an instance of the Def,
	            // using field values from the passed object. For fields missing from the passed object,
	            // their default value will be used.
	            builder.from = function (obj) {
	                if (!_this.finalized) {
	                    throw new Error("attempting to instantiate unfinalized type " +
	                        _this.typeName);
	                }
	                var built = Object.create(nodePrototype);
	                Object.keys(_this.allFields).forEach(function (param) {
	                    if (hasOwn$9.call(obj, param)) {
	                        addParam(built, param, obj[param], true);
	                    }
	                    else {
	                        addParam(built, param, null, false);
	                    }
	                });
	                // Make sure that the "type" field was filled automatically.
	                if (built.type !== _this.typeName) {
	                    throw new Error("");
	                }
	                return built;
	            };
	            Object.defineProperty(builders, getBuilderName(this.typeName), {
	                enumerable: true,
	                value: builder
	            });
	            return this;
	        };
	        // The reason fields are specified using .field(...) instead of an object
	        // literal syntax is somewhat subtle: the object literal syntax would
	        // support only one key and one value, but with .field(...) we can pass
	        // any number of arguments to specify the field.
	        DefImpl.prototype.field = function (name, type, defaultFn, hidden) {
	            if (this.finalized) {
	                console.error("Ignoring attempt to redefine field " +
	                    JSON.stringify(name) + " of finalized type " +
	                    JSON.stringify(this.typeName));
	                return this;
	            }
	            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);
	            return this; // For chaining.
	        };
	        DefImpl.prototype.finalize = function () {
	            var _this = this;
	            // It's not an error to finalize a type more than once, but only the
	            // first call to .finalize does anything.
	            if (!this.finalized) {
	                var allFields = this.allFields;
	                var allSupertypes = this.allSupertypes;
	                this.baseNames.forEach(function (name) {
	                    var def = defCache[name];
	                    if (def instanceof Def) {
	                        def.finalize();
	                        extend(allFields, def.allFields);
	                        extend(allSupertypes, def.allSupertypes);
	                    }
	                    else {
	                        var message = "unknown supertype name " +
	                            JSON.stringify(name) +
	                            " for subtype " +
	                            JSON.stringify(_this.typeName);
	                        throw new Error(message);
	                    }
	                });
	                // TODO Warn if fields are overridden with incompatible types.
	                extend(allFields, this.ownFields);
	                allSupertypes[this.typeName] = this;
	                this.fieldNames.length = 0;
	                for (var fieldName in allFields) {
	                    if (hasOwn$9.call(allFields, fieldName) &&
	                        !allFields[fieldName].hidden) {
	                        this.fieldNames.push(fieldName);
	                    }
	                }
	                // Types are exported only once they have been finalized.
	                Object.defineProperty(namedTypes, this.typeName, {
	                    enumerable: true,
	                    value: this.type
	                });
	                this.finalized = true;
	                // A linearization of the inheritance hierarchy.
	                populateSupertypeList(this.typeName, this.supertypeList);
	                if (this.buildable &&
	                    this.supertypeList.lastIndexOf("Expression") >= 0) {
	                    wrapExpressionBuilderWithStatement(this.typeName);
	                }
	            }
	        };
	        return DefImpl;
	    }(Def));
	    // Note that the list returned by this function is a copy of the internal
	    // supertypeList, *without* the typeName itself as the first element.
	    function getSupertypeNames(typeName) {
	        if (!hasOwn$9.call(defCache, typeName)) {
	            throw new Error("");
	        }
	        var d = defCache[typeName];
	        if (d.finalized !== true) {
	            throw new Error("");
	        }
	        return d.supertypeList.slice(1);
	    }
	    // Returns an object mapping from every known type in the defCache to the
	    // most specific supertype whose name is an own property of the candidates
	    // object.
	    function computeSupertypeLookupTable(candidates) {
	        var table = {};
	        var typeNames = Object.keys(defCache);
	        var typeNameCount = typeNames.length;
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNames[i];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("" + typeName);
	            }
	            for (var j = 0; j < d.supertypeList.length; ++j) {
	                var superTypeName = d.supertypeList[j];
	                if (hasOwn$9.call(candidates, superTypeName)) {
	                    table[typeName] = superTypeName;
	                    break;
	                }
	            }
	        }
	        return table;
	    }
	    var builders = Object.create(null);
	    // This object is used as prototype for any node created by a builder.
	    var nodePrototype = {};
	    // Call this function to define a new method to be shared by all AST
	    // nodes. The replaced method (if any) is returned for easy wrapping.
	    function defineMethod(name, func) {
	        var old = nodePrototype[name];
	        // Pass undefined as func to delete nodePrototype[name].
	        if (isUndefined.check(func)) {
	            delete nodePrototype[name];
	        }
	        else {
	            isFunction.assert(func);
	            Object.defineProperty(nodePrototype, name, {
	                enumerable: true,
	                configurable: true,
	                value: func
	            });
	        }
	        return old;
	    }
	    function getBuilderName(typeName) {
	        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
	            var len = upperCasePrefix.length;
	            switch (len) {
	                case 0: return "";
	                // If there's only one initial capital letter, just lower-case it.
	                case 1: return upperCasePrefix.toLowerCase();
	                default:
	                    // If there's more than one initial capital letter, lower-case
	                    // all but the last one, so that XMLDefaultDeclaration (for
	                    // example) becomes xmlDefaultDeclaration.
	                    return upperCasePrefix.slice(0, len - 1).toLowerCase() +
	                        upperCasePrefix.charAt(len - 1);
	            }
	        });
	    }
	    function getStatementBuilderName(typeName) {
	        typeName = getBuilderName(typeName);
	        return typeName.replace(/(Expression)?$/, "Statement");
	    }
	    var namedTypes = {};
	    // Like Object.keys, but aware of what fields each AST type should have.
	    function getFieldNames(object) {
	        var d = defFromValue(object);
	        if (d) {
	            return d.fieldNames.slice(0);
	        }
	        if ("type" in object) {
	            throw new Error("did not recognize object of type " +
	                JSON.stringify(object.type));
	        }
	        return Object.keys(object);
	    }
	    // Get the value of an object property, taking object.type and default
	    // functions into account.
	    function getFieldValue(object, fieldName) {
	        var d = defFromValue(object);
	        if (d) {
	            var field = d.allFields[fieldName];
	            if (field) {
	                return field.getValue(object);
	            }
	        }
	        return object && object[fieldName];
	    }
	    // Iterate over all defined fields of an object, including those missing
	    // or undefined, passing each field name and effective value (as returned
	    // by getFieldValue) to the callback. If the object has no corresponding
	    // Def, the callback will never be called.
	    function eachField(object, callback, context) {
	        getFieldNames(object).forEach(function (name) {
	            callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    }
	    // Similar to eachField, except that iteration stops as soon as the
	    // callback returns a truthy value. Like Array.prototype.some, the final
	    // result is either true or false to indicates whether the callback
	    // returned true for any element or not.
	    function someField(object, callback, context) {
	        return getFieldNames(object).some(function (name) {
	            return callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    }
	    // Adds an additional builder for Expression subtypes
	    // that wraps the built Expression in an ExpressionStatements.
	    function wrapExpressionBuilderWithStatement(typeName) {
	        var wrapperName = getStatementBuilderName(typeName);
	        // skip if the builder already exists
	        if (builders[wrapperName])
	            return;
	        // the builder function to wrap with builders.ExpressionStatement
	        var wrapped = builders[getBuilderName(typeName)];
	        // skip if there is nothing to wrap
	        if (!wrapped)
	            return;
	        var builder = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return builders.expressionStatement(wrapped.apply(builders, args));
	        };
	        builder.from = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return builders.expressionStatement(wrapped.from.apply(builders, args));
	        };
	        builders[wrapperName] = builder;
	    }
	    function populateSupertypeList(typeName, list) {
	        list.length = 0;
	        list.push(typeName);
	        var lastSeen = Object.create(null);
	        for (var pos = 0; pos < list.length; ++pos) {
	            typeName = list[pos];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("");
	            }
	            // If we saw typeName earlier in the breadth-first traversal,
	            // delete the last-seen occurrence.
	            if (hasOwn$9.call(lastSeen, typeName)) {
	                delete list[lastSeen[typeName]];
	            }
	            // Record the new index of the last-seen occurrence of typeName.
	            lastSeen[typeName] = pos;
	            // Enqueue the base names of this type.
	            list.push.apply(list, d.baseNames);
	        }
	        // Compaction loop to remove array holes.
	        for (var to = 0, from = to, len = list.length; from < len; ++from) {
	            if (hasOwn$9.call(list, from)) {
	                list[to++] = list[from];
	            }
	        }
	        list.length = to;
	    }
	    function extend(into, from) {
	        Object.keys(from).forEach(function (name) {
	            into[name] = from[name];
	        });
	        return into;
	    }
	    function finalize() {
	        Object.keys(defCache).forEach(function (name) {
	            defCache[name].finalize();
	        });
	    }
	    return {
	        Type: Type,
	        builtInTypes: builtInTypes,
	        getSupertypeNames: getSupertypeNames,
	        computeSupertypeLookupTable: computeSupertypeLookupTable,
	        builders: builders,
	        defineMethod: defineMethod,
	        getBuilderName: getBuilderName,
	        getStatementBuilderName: getStatementBuilderName,
	        namedTypes: namedTypes,
	        getFieldNames: getFieldNames,
	        getFieldValue: getFieldValue,
	        eachField: eachField,
	        someField: someField,
	        finalize: finalize,
	    };
	}
	types$a.default = typesPlugin;

	var pathVisitor = {exports: {}};

	var nodePath = {exports: {}};

	var path$7 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var Op = Object.prototype;
	var hasOwn = Op.hasOwnProperty;
	function pathPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var isArray = types.builtInTypes.array;
	    var isNumber = types.builtInTypes.number;
	    var Path = function Path(value, parentPath, name) {
	        if (!(this instanceof Path)) {
	            throw new Error("Path constructor cannot be invoked without 'new'");
	        }
	        if (parentPath) {
	            if (!(parentPath instanceof Path)) {
	                throw new Error("");
	            }
	        }
	        else {
	            parentPath = null;
	            name = null;
	        }
	        // The value encapsulated by this Path, generally equal to
	        // parentPath.value[name] if we have a parentPath.
	        this.value = value;
	        // The immediate parent Path of this Path.
	        this.parentPath = parentPath;
	        // The name of the property of parentPath.value through which this
	        // Path's value was reached.
	        this.name = name;
	        // Calling path.get("child") multiple times always returns the same
	        // child Path object, for both performance and consistency reasons.
	        this.__childCache = null;
	    };
	    var Pp = Path.prototype;
	    function getChildCache(path) {
	        // Lazily create the child cache. This also cheapens cache
	        // invalidation, since you can just reset path.__childCache to null.
	        return path.__childCache || (path.__childCache = Object.create(null));
	    }
	    function getChildPath(path, name) {
	        var cache = getChildCache(path);
	        var actualChildValue = path.getValueProperty(name);
	        var childPath = cache[name];
	        if (!hasOwn.call(cache, name) ||
	            // Ensure consistency between cache and reality.
	            childPath.value !== actualChildValue) {
	            childPath = cache[name] = new path.constructor(actualChildValue, path, name);
	        }
	        return childPath;
	    }
	    // This method is designed to be overridden by subclasses that need to
	    // handle missing properties, etc.
	    Pp.getValueProperty = function getValueProperty(name) {
	        return this.value[name];
	    };
	    Pp.get = function get() {
	        var names = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            names[_i] = arguments[_i];
	        }
	        var path = this;
	        var count = names.length;
	        for (var i = 0; i < count; ++i) {
	            path = getChildPath(path, names[i]);
	        }
	        return path;
	    };
	    Pp.each = function each(callback, context) {
	        var childPaths = [];
	        var len = this.value.length;
	        var i = 0;
	        // Collect all the original child paths before invoking the callback.
	        for (var i = 0; i < len; ++i) {
	            if (hasOwn.call(this.value, i)) {
	                childPaths[i] = this.get(i);
	            }
	        }
	        // Invoke the callback on just the original child paths, regardless of
	        // any modifications made to the array by the callback. I chose these
	        // semantics over cleverly invoking the callback on new elements because
	        // this way is much easier to reason about.
	        context = context || this;
	        for (i = 0; i < len; ++i) {
	            if (hasOwn.call(childPaths, i)) {
	                callback.call(context, childPaths[i]);
	            }
	        }
	    };
	    Pp.map = function map(callback, context) {
	        var result = [];
	        this.each(function (childPath) {
	            result.push(callback.call(this, childPath));
	        }, context);
	        return result;
	    };
	    Pp.filter = function filter(callback, context) {
	        var result = [];
	        this.each(function (childPath) {
	            if (callback.call(this, childPath)) {
	                result.push(childPath);
	            }
	        }, context);
	        return result;
	    };
	    function emptyMoves() { }
	    function getMoves(path, offset, start, end) {
	        isArray.assert(path.value);
	        if (offset === 0) {
	            return emptyMoves;
	        }
	        var length = path.value.length;
	        if (length < 1) {
	            return emptyMoves;
	        }
	        var argc = arguments.length;
	        if (argc === 2) {
	            start = 0;
	            end = length;
	        }
	        else if (argc === 3) {
	            start = Math.max(start, 0);
	            end = length;
	        }
	        else {
	            start = Math.max(start, 0);
	            end = Math.min(end, length);
	        }
	        isNumber.assert(start);
	        isNumber.assert(end);
	        var moves = Object.create(null);
	        var cache = getChildCache(path);
	        for (var i = start; i < end; ++i) {
	            if (hasOwn.call(path.value, i)) {
	                var childPath = path.get(i);
	                if (childPath.name !== i) {
	                    throw new Error("");
	                }
	                var newIndex = i + offset;
	                childPath.name = newIndex;
	                moves[newIndex] = childPath;
	                delete cache[i];
	            }
	        }
	        delete cache.length;
	        return function () {
	            for (var newIndex in moves) {
	                var childPath = moves[newIndex];
	                if (childPath.name !== +newIndex) {
	                    throw new Error("");
	                }
	                cache[newIndex] = childPath;
	                path.value[newIndex] = childPath.value;
	            }
	        };
	    }
	    Pp.shift = function shift() {
	        var move = getMoves(this, -1);
	        var result = this.value.shift();
	        move();
	        return result;
	    };
	    Pp.unshift = function unshift() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var move = getMoves(this, args.length);
	        var result = this.value.unshift.apply(this.value, args);
	        move();
	        return result;
	    };
	    Pp.push = function push() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        isArray.assert(this.value);
	        delete getChildCache(this).length;
	        return this.value.push.apply(this.value, args);
	    };
	    Pp.pop = function pop() {
	        isArray.assert(this.value);
	        var cache = getChildCache(this);
	        delete cache[this.value.length - 1];
	        delete cache.length;
	        return this.value.pop();
	    };
	    Pp.insertAt = function insertAt(index) {
	        var argc = arguments.length;
	        var move = getMoves(this, argc - 1, index);
	        if (move === emptyMoves && argc <= 1) {
	            return this;
	        }
	        index = Math.max(index, 0);
	        for (var i = 1; i < argc; ++i) {
	            this.value[index + i - 1] = arguments[i];
	        }
	        move();
	        return this;
	    };
	    Pp.insertBefore = function insertBefore() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var pp = this.parentPath;
	        var argc = args.length;
	        var insertAtArgs = [this.name];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(args[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	    Pp.insertAfter = function insertAfter() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var pp = this.parentPath;
	        var argc = args.length;
	        var insertAtArgs = [this.name + 1];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(args[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	    function repairRelationshipWithParent(path) {
	        if (!(path instanceof Path)) {
	            throw new Error("");
	        }
	        var pp = path.parentPath;
	        if (!pp) {
	            // Orphan paths have no relationship to repair.
	            return path;
	        }
	        var parentValue = pp.value;
	        var parentCache = getChildCache(pp);
	        // Make sure parentCache[path.name] is populated.
	        if (parentValue[path.name] === path.value) {
	            parentCache[path.name] = path;
	        }
	        else if (isArray.check(parentValue)) {
	            // Something caused path.name to become out of date, so attempt to
	            // recover by searching for path.value in parentValue.
	            var i = parentValue.indexOf(path.value);
	            if (i >= 0) {
	                parentCache[path.name = i] = path;
	            }
	        }
	        else {
	            // If path.value disagrees with parentValue[path.name], and
	            // path.name is not an array index, let path.value become the new
	            // parentValue[path.name] and update parentCache accordingly.
	            parentValue[path.name] = path.value;
	            parentCache[path.name] = path;
	        }
	        if (parentValue[path.name] !== path.value) {
	            throw new Error("");
	        }
	        if (path.parentPath.get(path.name) !== path) {
	            throw new Error("");
	        }
	        return path;
	    }
	    Pp.replace = function replace(replacement) {
	        var results = [];
	        var parentValue = this.parentPath.value;
	        var parentCache = getChildCache(this.parentPath);
	        var count = arguments.length;
	        repairRelationshipWithParent(this);
	        if (isArray.check(parentValue)) {
	            var originalLength = parentValue.length;
	            var move = getMoves(this.parentPath, count - 1, this.name + 1);
	            var spliceArgs = [this.name, 1];
	            for (var i = 0; i < count; ++i) {
	                spliceArgs.push(arguments[i]);
	            }
	            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
	            if (splicedOut[0] !== this.value) {
	                throw new Error("");
	            }
	            if (parentValue.length !== (originalLength - 1 + count)) {
	                throw new Error("");
	            }
	            move();
	            if (count === 0) {
	                delete this.value;
	                delete parentCache[this.name];
	                this.__childCache = null;
	            }
	            else {
	                if (parentValue[this.name] !== replacement) {
	                    throw new Error("");
	                }
	                if (this.value !== replacement) {
	                    this.value = replacement;
	                    this.__childCache = null;
	                }
	                for (i = 0; i < count; ++i) {
	                    results.push(this.parentPath.get(this.name + i));
	                }
	                if (results[0] !== this) {
	                    throw new Error("");
	                }
	            }
	        }
	        else if (count === 1) {
	            if (this.value !== replacement) {
	                this.__childCache = null;
	            }
	            this.value = parentValue[this.name] = replacement;
	            results.push(this);
	        }
	        else if (count === 0) {
	            delete parentValue[this.name];
	            delete this.value;
	            this.__childCache = null;
	            // Leave this path cached as parentCache[this.name], even though
	            // it no longer has a value defined.
	        }
	        else {
	            throw new Error("Could not replace path");
	        }
	        return results;
	    };
	    return Path;
	}
	exports.default = pathPlugin;
	module.exports = exports["default"];
	}(path$7, path$7.exports));

	var scope = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var hasOwn = Object.prototype.hasOwnProperty;
	function scopePlugin(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var namedTypes = types.namedTypes;
	    var Node = namedTypes.Node;
	    var Expression = namedTypes.Expression;
	    var isArray = types.builtInTypes.array;
	    var b = types.builders;
	    var Scope = function Scope(path, parentScope) {
	        if (!(this instanceof Scope)) {
	            throw new Error("Scope constructor cannot be invoked without 'new'");
	        }
	        ScopeType.assert(path.value);
	        var depth;
	        if (parentScope) {
	            if (!(parentScope instanceof Scope)) {
	                throw new Error("");
	            }
	            depth = parentScope.depth + 1;
	        }
	        else {
	            parentScope = null;
	            depth = 0;
	        }
	        Object.defineProperties(this, {
	            path: { value: path },
	            node: { value: path.value },
	            isGlobal: { value: !parentScope, enumerable: true },
	            depth: { value: depth },
	            parent: { value: parentScope },
	            bindings: { value: {} },
	            types: { value: {} },
	        });
	    };
	    var scopeTypes = [
	        // Program nodes introduce global scopes.
	        namedTypes.Program,
	        // Function is the supertype of FunctionExpression,
	        // FunctionDeclaration, ArrowExpression, etc.
	        namedTypes.Function,
	        // In case you didn't know, the caught parameter shadows any variable
	        // of the same name in an outer scope.
	        namedTypes.CatchClause
	    ];
	    var ScopeType = Type.or.apply(Type, scopeTypes);
	    Scope.isEstablishedBy = function (node) {
	        return ScopeType.check(node);
	    };
	    var Sp = Scope.prototype;
	    // Will be overridden after an instance lazily calls scanScope.
	    Sp.didScan = false;
	    Sp.declares = function (name) {
	        this.scan();
	        return hasOwn.call(this.bindings, name);
	    };
	    Sp.declaresType = function (name) {
	        this.scan();
	        return hasOwn.call(this.types, name);
	    };
	    Sp.declareTemporary = function (prefix) {
	        if (prefix) {
	            if (!/^[a-z$_]/i.test(prefix)) {
	                throw new Error("");
	            }
	        }
	        else {
	            prefix = "t$";
	        }
	        // Include this.depth in the name to make sure the name does not
	        // collide with any variables in nested/enclosing scopes.
	        prefix += this.depth.toString(36) + "$";
	        this.scan();
	        var index = 0;
	        while (this.declares(prefix + index)) {
	            ++index;
	        }
	        var name = prefix + index;
	        return this.bindings[name] = types.builders.identifier(name);
	    };
	    Sp.injectTemporary = function (identifier, init) {
	        identifier || (identifier = this.declareTemporary());
	        var bodyPath = this.path.get("body");
	        if (namedTypes.BlockStatement.check(bodyPath.value)) {
	            bodyPath = bodyPath.get("body");
	        }
	        bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
	        return identifier;
	    };
	    Sp.scan = function (force) {
	        if (force || !this.didScan) {
	            for (var name in this.bindings) {
	                // Empty out this.bindings, just in cases.
	                delete this.bindings[name];
	            }
	            scanScope(this.path, this.bindings, this.types);
	            this.didScan = true;
	        }
	    };
	    Sp.getBindings = function () {
	        this.scan();
	        return this.bindings;
	    };
	    Sp.getTypes = function () {
	        this.scan();
	        return this.types;
	    };
	    function scanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	        ScopeType.assert(node);
	        if (namedTypes.CatchClause.check(node)) {
	            // A catch clause establishes a new scope but the only variable
	            // bound in that scope is the catch parameter. Any other
	            // declarations create bindings in the outer scope.
	            addPattern(path.get("param"), bindings);
	        }
	        else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	    function recursiveScanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	        if (path.parent &&
	            namedTypes.FunctionExpression.check(path.parent.node) &&
	            path.parent.node.id) {
	            addPattern(path.parent.get("id"), bindings);
	        }
	        if (!node) ;
	        else if (isArray.check(node)) {
	            path.each(function (childPath) {
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	        }
	        else if (namedTypes.Function.check(node)) {
	            path.get("params").each(function (paramPath) {
	                addPattern(paramPath, bindings);
	            });
	            recursiveScanChild(path.get("body"), bindings, scopeTypes);
	        }
	        else if ((namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) ||
	            (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node)) ||
	            (namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node)) ||
	            (namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node))) {
	            addTypePattern(path.get("id"), scopeTypes);
	        }
	        else if (namedTypes.VariableDeclarator.check(node)) {
	            addPattern(path.get("id"), bindings);
	            recursiveScanChild(path.get("init"), bindings, scopeTypes);
	        }
	        else if (node.type === "ImportSpecifier" ||
	            node.type === "ImportNamespaceSpecifier" ||
	            node.type === "ImportDefaultSpecifier") {
	            addPattern(
	            // Esprima used to use the .name field to refer to the local
	            // binding identifier for ImportSpecifier nodes, but .id for
	            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
	            // ESTree/Acorn/ESpree use .local for all three node types.
	            path.get(node.local ? "local" :
	                node.name ? "name" : "id"), bindings);
	        }
	        else if (Node.check(node) && !Expression.check(node)) {
	            types.eachField(node, function (name, child) {
	                var childPath = path.get(name);
	                if (!pathHasValue(childPath, child)) {
	                    throw new Error("");
	                }
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	        }
	    }
	    function pathHasValue(path, value) {
	        if (path.value === value) {
	            return true;
	        }
	        // Empty arrays are probably produced by defaults.emptyArray, in which
	        // case is makes sense to regard them as equivalent, if not ===.
	        if (Array.isArray(path.value) &&
	            path.value.length === 0 &&
	            Array.isArray(value) &&
	            value.length === 0) {
	            return true;
	        }
	        return false;
	    }
	    function recursiveScanChild(path, bindings, scopeTypes) {
	        var node = path.value;
	        if (!node || Expression.check(node)) ;
	        else if (namedTypes.FunctionDeclaration.check(node) &&
	            node.id !== null) {
	            addPattern(path.get("id"), bindings);
	        }
	        else if (namedTypes.ClassDeclaration &&
	            namedTypes.ClassDeclaration.check(node)) {
	            addPattern(path.get("id"), bindings);
	        }
	        else if (ScopeType.check(node)) {
	            if (namedTypes.CatchClause.check(node) &&
	                // TODO Broaden this to accept any pattern.
	                namedTypes.Identifier.check(node.param)) {
	                var catchParamName = node.param.name;
	                var hadBinding = hasOwn.call(bindings, catchParamName);
	                // Any declarations that occur inside the catch body that do
	                // not have the same name as the catch parameter should count
	                // as bindings in the outer scope.
	                recursiveScanScope(path.get("body"), bindings, scopeTypes);
	                // If a new binding matching the catch parameter name was
	                // created while scanning the catch body, ignore it because it
	                // actually refers to the catch parameter and not the outer
	                // scope that we're currently scanning.
	                if (!hadBinding) {
	                    delete bindings[catchParamName];
	                }
	            }
	        }
	        else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	    function addPattern(patternPath, bindings) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(bindings, pattern.name)) {
	                bindings[pattern.name].push(patternPath);
	            }
	            else {
	                bindings[pattern.name] = [patternPath];
	            }
	        }
	        else if (namedTypes.AssignmentPattern &&
	            namedTypes.AssignmentPattern.check(pattern)) {
	            addPattern(patternPath.get('left'), bindings);
	        }
	        else if (namedTypes.ObjectPattern &&
	            namedTypes.ObjectPattern.check(pattern)) {
	            patternPath.get('properties').each(function (propertyPath) {
	                var property = propertyPath.value;
	                if (namedTypes.Pattern.check(property)) {
	                    addPattern(propertyPath, bindings);
	                }
	                else if (namedTypes.Property.check(property)) {
	                    addPattern(propertyPath.get('value'), bindings);
	                }
	                else if (namedTypes.SpreadProperty &&
	                    namedTypes.SpreadProperty.check(property)) {
	                    addPattern(propertyPath.get('argument'), bindings);
	                }
	            });
	        }
	        else if (namedTypes.ArrayPattern &&
	            namedTypes.ArrayPattern.check(pattern)) {
	            patternPath.get('elements').each(function (elementPath) {
	                var element = elementPath.value;
	                if (namedTypes.Pattern.check(element)) {
	                    addPattern(elementPath, bindings);
	                }
	                else if (namedTypes.SpreadElement &&
	                    namedTypes.SpreadElement.check(element)) {
	                    addPattern(elementPath.get("argument"), bindings);
	                }
	            });
	        }
	        else if (namedTypes.PropertyPattern &&
	            namedTypes.PropertyPattern.check(pattern)) {
	            addPattern(patternPath.get('pattern'), bindings);
	        }
	        else if ((namedTypes.SpreadElementPattern &&
	            namedTypes.SpreadElementPattern.check(pattern)) ||
	            (namedTypes.SpreadPropertyPattern &&
	                namedTypes.SpreadPropertyPattern.check(pattern))) {
	            addPattern(patternPath.get('argument'), bindings);
	        }
	    }
	    function addTypePattern(patternPath, types) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(types, pattern.name)) {
	                types[pattern.name].push(patternPath);
	            }
	            else {
	                types[pattern.name] = [patternPath];
	            }
	        }
	    }
	    Sp.lookup = function (name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declares(name))
	                break;
	        return scope;
	    };
	    Sp.lookupType = function (name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declaresType(name))
	                break;
	        return scope;
	    };
	    Sp.getGlobalScope = function () {
	        var scope = this;
	        while (!scope.isGlobal)
	            scope = scope.parent;
	        return scope;
	    };
	    return Scope;
	}
	exports.default = scopePlugin;
	module.exports = exports["default"];
	}(scope, scope.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var path_1 = __importDefault(path$7.exports);
	var scope_1 = __importDefault(scope.exports);
	function nodePathPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var n = types.namedTypes;
	    var b = types.builders;
	    var isNumber = types.builtInTypes.number;
	    var isArray = types.builtInTypes.array;
	    var Path = fork.use(path_1.default);
	    var Scope = fork.use(scope_1.default);
	    var NodePath = function NodePath(value, parentPath, name) {
	        if (!(this instanceof NodePath)) {
	            throw new Error("NodePath constructor cannot be invoked without 'new'");
	        }
	        Path.call(this, value, parentPath, name);
	    };
	    var NPp = NodePath.prototype = Object.create(Path.prototype, {
	        constructor: {
	            value: NodePath,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	    Object.defineProperties(NPp, {
	        node: {
	            get: function () {
	                Object.defineProperty(this, "node", {
	                    configurable: true,
	                    value: this._computeNode()
	                });
	                return this.node;
	            }
	        },
	        parent: {
	            get: function () {
	                Object.defineProperty(this, "parent", {
	                    configurable: true,
	                    value: this._computeParent()
	                });
	                return this.parent;
	            }
	        },
	        scope: {
	            get: function () {
	                Object.defineProperty(this, "scope", {
	                    configurable: true,
	                    value: this._computeScope()
	                });
	                return this.scope;
	            }
	        }
	    });
	    NPp.replace = function () {
	        delete this.node;
	        delete this.parent;
	        delete this.scope;
	        return Path.prototype.replace.apply(this, arguments);
	    };
	    NPp.prune = function () {
	        var remainingNodePath = this.parent;
	        this.replace();
	        return cleanUpNodesAfterPrune(remainingNodePath);
	    };
	    // The value of the first ancestor Path whose value is a Node.
	    NPp._computeNode = function () {
	        var value = this.value;
	        if (n.Node.check(value)) {
	            return value;
	        }
	        var pp = this.parentPath;
	        return pp && pp.node || null;
	    };
	    // The first ancestor Path whose value is a Node distinct from this.node.
	    NPp._computeParent = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	        if (!n.Node.check(value)) {
	            while (pp && !n.Node.check(pp.value)) {
	                pp = pp.parentPath;
	            }
	            if (pp) {
	                pp = pp.parentPath;
	            }
	        }
	        while (pp && !n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	        }
	        return pp || null;
	    };
	    // The closest enclosing scope that governs this node.
	    NPp._computeScope = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	        var scope = pp && pp.scope;
	        if (n.Node.check(value) &&
	            Scope.isEstablishedBy(value)) {
	            scope = new Scope(this, scope);
	        }
	        return scope || null;
	    };
	    NPp.getValueProperty = function (name) {
	        return types.getFieldValue(this.value, name);
	    };
	    /**
	     * Determine whether this.node needs to be wrapped in parentheses in order
	     * for a parser to reproduce the same local AST structure.
	     *
	     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
	     * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
	     * parse differently.
	     *
	     * If assumeExpressionContext === true, we don't worry about edge cases
	     * like an anonymous FunctionExpression appearing lexically first in its
	     * enclosing statement and thus needing parentheses to avoid being parsed
	     * as a FunctionDeclaration with a missing name.
	     */
	    NPp.needsParens = function (assumeExpressionContext) {
	        var pp = this.parentPath;
	        if (!pp) {
	            return false;
	        }
	        var node = this.value;
	        // Only expressions need parentheses.
	        if (!n.Expression.check(node)) {
	            return false;
	        }
	        // Identifiers never need parentheses.
	        if (node.type === "Identifier") {
	            return false;
	        }
	        while (!n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	            if (!pp) {
	                return false;
	            }
	        }
	        var parent = pp.value;
	        switch (node.type) {
	            case "UnaryExpression":
	            case "SpreadElement":
	            case "SpreadProperty":
	                return parent.type === "MemberExpression"
	                    && this.name === "object"
	                    && parent.object === node;
	            case "BinaryExpression":
	            case "LogicalExpression":
	                switch (parent.type) {
	                    case "CallExpression":
	                        return this.name === "callee"
	                            && parent.callee === node;
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                        return true;
	                    case "MemberExpression":
	                        return this.name === "object"
	                            && parent.object === node;
	                    case "BinaryExpression":
	                    case "LogicalExpression": {
	                        var n_1 = node;
	                        var po = parent.operator;
	                        var pp_1 = PRECEDENCE[po];
	                        var no = n_1.operator;
	                        var np = PRECEDENCE[no];
	                        if (pp_1 > np) {
	                            return true;
	                        }
	                        if (pp_1 === np && this.name === "right") {
	                            if (parent.right !== n_1) {
	                                throw new Error("Nodes must be equal");
	                            }
	                            return true;
	                        }
	                    }
	                    default:
	                        return false;
	                }
	            case "SequenceExpression":
	                switch (parent.type) {
	                    case "ForStatement":
	                        // Although parentheses wouldn't hurt around sequence
	                        // expressions in the head of for loops, traditional style
	                        // dictates that e.g. i++, j++ should not be wrapped with
	                        // parentheses.
	                        return false;
	                    case "ExpressionStatement":
	                        return this.name !== "expression";
	                    default:
	                        // Otherwise err on the side of overparenthesization, adding
	                        // explicit exceptions above if this proves overzealous.
	                        return true;
	                }
	            case "YieldExpression":
	                switch (parent.type) {
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "CallExpression":
	                    case "MemberExpression":
	                    case "NewExpression":
	                    case "ConditionalExpression":
	                    case "YieldExpression":
	                        return true;
	                    default:
	                        return false;
	                }
	            case "Literal":
	                return parent.type === "MemberExpression"
	                    && isNumber.check(node.value)
	                    && this.name === "object"
	                    && parent.object === node;
	            case "AssignmentExpression":
	            case "ConditionalExpression":
	                switch (parent.type) {
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                        return true;
	                    case "CallExpression":
	                        return this.name === "callee"
	                            && parent.callee === node;
	                    case "ConditionalExpression":
	                        return this.name === "test"
	                            && parent.test === node;
	                    case "MemberExpression":
	                        return this.name === "object"
	                            && parent.object === node;
	                    default:
	                        return false;
	                }
	            default:
	                if (parent.type === "NewExpression" &&
	                    this.name === "callee" &&
	                    parent.callee === node) {
	                    return containsCallExpression(node);
	                }
	        }
	        if (assumeExpressionContext !== true &&
	            !this.canBeFirstInStatement() &&
	            this.firstInStatement())
	            return true;
	        return false;
	    };
	    function isBinary(node) {
	        return n.BinaryExpression.check(node)
	            || n.LogicalExpression.check(node);
	    }
	    var PRECEDENCE = {};
	    [["||"],
	        ["&&"],
	        ["|"],
	        ["^"],
	        ["&"],
	        ["==", "===", "!=", "!=="],
	        ["<", ">", "<=", ">=", "in", "instanceof"],
	        [">>", "<<", ">>>"],
	        ["+", "-"],
	        ["*", "/", "%"]
	    ].forEach(function (tier, i) {
	        tier.forEach(function (op) {
	            PRECEDENCE[op] = i;
	        });
	    });
	    function containsCallExpression(node) {
	        if (n.CallExpression.check(node)) {
	            return true;
	        }
	        if (isArray.check(node)) {
	            return node.some(containsCallExpression);
	        }
	        if (n.Node.check(node)) {
	            return types.someField(node, function (_name, child) {
	                return containsCallExpression(child);
	            });
	        }
	        return false;
	    }
	    NPp.canBeFirstInStatement = function () {
	        var node = this.node;
	        return !n.FunctionExpression.check(node)
	            && !n.ObjectExpression.check(node);
	    };
	    NPp.firstInStatement = function () {
	        return firstInStatement(this);
	    };
	    function firstInStatement(path) {
	        for (var node, parent; path.parent; path = path.parent) {
	            node = path.node;
	            parent = path.parent.node;
	            if (n.BlockStatement.check(parent) &&
	                path.parent.name === "body" &&
	                path.name === 0) {
	                if (parent.body[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	            if (n.ExpressionStatement.check(parent) &&
	                path.name === "expression") {
	                if (parent.expression !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	            if (n.SequenceExpression.check(parent) &&
	                path.parent.name === "expressions" &&
	                path.name === 0) {
	                if (parent.expressions[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.CallExpression.check(parent) &&
	                path.name === "callee") {
	                if (parent.callee !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.MemberExpression.check(parent) &&
	                path.name === "object") {
	                if (parent.object !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.ConditionalExpression.check(parent) &&
	                path.name === "test") {
	                if (parent.test !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (isBinary(parent) &&
	                path.name === "left") {
	                if (parent.left !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            if (n.UnaryExpression.check(parent) &&
	                !parent.prefix &&
	                path.name === "argument") {
	                if (parent.argument !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	            return false;
	        }
	        return true;
	    }
	    /**
	     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
	     */
	    function cleanUpNodesAfterPrune(remainingNodePath) {
	        if (n.VariableDeclaration.check(remainingNodePath.node)) {
	            var declarations = remainingNodePath.get('declarations').value;
	            if (!declarations || declarations.length === 0) {
	                return remainingNodePath.prune();
	            }
	        }
	        else if (n.ExpressionStatement.check(remainingNodePath.node)) {
	            if (!remainingNodePath.get('expression').value) {
	                return remainingNodePath.prune();
	            }
	        }
	        else if (n.IfStatement.check(remainingNodePath.node)) {
	            cleanUpIfStatementAfterPrune(remainingNodePath);
	        }
	        return remainingNodePath;
	    }
	    function cleanUpIfStatementAfterPrune(ifStatement) {
	        var testExpression = ifStatement.get('test').value;
	        var alternate = ifStatement.get('alternate').value;
	        var consequent = ifStatement.get('consequent').value;
	        if (!consequent && !alternate) {
	            var testExpressionStatement = b.expressionStatement(testExpression);
	            ifStatement.replace(testExpressionStatement);
	        }
	        else if (!consequent && alternate) {
	            var negatedTestExpression = b.unaryExpression('!', testExpression, true);
	            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
	                negatedTestExpression = testExpression.argument;
	            }
	            ifStatement.get("test").replace(negatedTestExpression);
	            ifStatement.get("consequent").replace(alternate);
	            ifStatement.get("alternate").replace();
	        }
	    }
	    return NodePath;
	}
	exports.default = nodePathPlugin;
	module.exports = exports["default"];
	}(nodePath, nodePath.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var node_path_1 = __importDefault(nodePath.exports);
	var hasOwn = Object.prototype.hasOwnProperty;
	function pathVisitorPlugin(fork) {
	    var types = fork.use(types_1.default);
	    var NodePath = fork.use(node_path_1.default);
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isFunction = types.builtInTypes.function;
	    var undefined$1;
	    var PathVisitor = function PathVisitor() {
	        if (!(this instanceof PathVisitor)) {
	            throw new Error("PathVisitor constructor cannot be invoked without 'new'");
	        }
	        // Permanent state.
	        this._reusableContextStack = [];
	        this._methodNameTable = computeMethodNameTable(this);
	        this._shouldVisitComments =
	            hasOwn.call(this._methodNameTable, "Block") ||
	                hasOwn.call(this._methodNameTable, "Line");
	        this.Context = makeContextConstructor(this);
	        // State reset every time PathVisitor.prototype.visit is called.
	        this._visiting = false;
	        this._changeReported = false;
	    };
	    function computeMethodNameTable(visitor) {
	        var typeNames = Object.create(null);
	        for (var methodName in visitor) {
	            if (/^visit[A-Z]/.test(methodName)) {
	                typeNames[methodName.slice("visit".length)] = true;
	            }
	        }
	        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
	        var methodNameTable = Object.create(null);
	        var typeNameKeys = Object.keys(supertypeTable);
	        var typeNameCount = typeNameKeys.length;
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNameKeys[i];
	            methodName = "visit" + supertypeTable[typeName];
	            if (isFunction.check(visitor[methodName])) {
	                methodNameTable[typeName] = methodName;
	            }
	        }
	        return methodNameTable;
	    }
	    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
	        if (methods instanceof PathVisitor) {
	            return methods;
	        }
	        if (!isObject.check(methods)) {
	            // An empty visitor?
	            return new PathVisitor;
	        }
	        var Visitor = function Visitor() {
	            if (!(this instanceof Visitor)) {
	                throw new Error("Visitor constructor cannot be invoked without 'new'");
	            }
	            PathVisitor.call(this);
	        };
	        var Vp = Visitor.prototype = Object.create(PVp);
	        Vp.constructor = Visitor;
	        extend(Vp, methods);
	        extend(Visitor, PathVisitor);
	        isFunction.assert(Visitor.fromMethodsObject);
	        isFunction.assert(Visitor.visit);
	        return new Visitor;
	    };
	    function extend(target, source) {
	        for (var property in source) {
	            if (hasOwn.call(source, property)) {
	                target[property] = source[property];
	            }
	        }
	        return target;
	    }
	    PathVisitor.visit = function visit(node, methods) {
	        return PathVisitor.fromMethodsObject(methods).visit(node);
	    };
	    var PVp = PathVisitor.prototype;
	    PVp.visit = function () {
	        if (this._visiting) {
	            throw new Error("Recursively calling visitor.visit(path) resets visitor state. " +
	                "Try this.visit(path) or this.traverse(path) instead.");
	        }
	        // Private state that needs to be reset before every traversal.
	        this._visiting = true;
	        this._changeReported = false;
	        this._abortRequested = false;
	        var argc = arguments.length;
	        var args = new Array(argc);
	        for (var i = 0; i < argc; ++i) {
	            args[i] = arguments[i];
	        }
	        if (!(args[0] instanceof NodePath)) {
	            args[0] = new NodePath({ root: args[0] }).get("root");
	        }
	        // Called with the same arguments as .visit.
	        this.reset.apply(this, args);
	        var didNotThrow;
	        try {
	            var root = this.visitWithoutReset(args[0]);
	            didNotThrow = true;
	        }
	        finally {
	            this._visiting = false;
	            if (!didNotThrow && this._abortRequested) {
	                // If this.visitWithoutReset threw an exception and
	                // this._abortRequested was set to true, return the root of
	                // the AST instead of letting the exception propagate, so that
	                // client code does not have to provide a try-catch block to
	                // intercept the AbortRequest exception.  Other kinds of
	                // exceptions will propagate without being intercepted and
	                // rethrown by a catch block, so their stacks will accurately
	                // reflect the original throwing context.
	                return args[0].value;
	            }
	        }
	        return root;
	    };
	    PVp.AbortRequest = function AbortRequest() { };
	    PVp.abort = function () {
	        var visitor = this;
	        visitor._abortRequested = true;
	        var request = new visitor.AbortRequest();
	        // If you decide to catch this exception and stop it from propagating,
	        // make sure to call its cancel method to avoid silencing other
	        // exceptions that might be thrown later in the traversal.
	        request.cancel = function () {
	            visitor._abortRequested = false;
	        };
	        throw request;
	    };
	    PVp.reset = function (_path /*, additional arguments */) {
	        // Empty stub; may be reassigned or overridden by subclasses.
	    };
	    PVp.visitWithoutReset = function (path) {
	        if (this instanceof this.Context) {
	            // Since this.Context.prototype === this, there's a chance we
	            // might accidentally call context.visitWithoutReset. If that
	            // happens, re-invoke the method against context.visitor.
	            return this.visitor.visitWithoutReset(path);
	        }
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	        var value = path.value;
	        var methodName = value &&
	            typeof value === "object" &&
	            typeof value.type === "string" &&
	            this._methodNameTable[value.type];
	        if (methodName) {
	            var context = this.acquireContext(path);
	            try {
	                return context.invokeVisitorMethod(methodName);
	            }
	            finally {
	                this.releaseContext(context);
	            }
	        }
	        else {
	            // If there was no visitor method to call, visit the children of
	            // this node generically.
	            return visitChildren(path, this);
	        }
	    };
	    function visitChildren(path, visitor) {
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	        var value = path.value;
	        if (isArray.check(value)) {
	            path.each(visitor.visitWithoutReset, visitor);
	        }
	        else if (!isObject.check(value)) ;
	        else {
	            var childNames = types.getFieldNames(value);
	            // The .comments field of the Node type is hidden, so we only
	            // visit it if the visitor defines visitBlock or visitLine, and
	            // value.comments is defined.
	            if (visitor._shouldVisitComments &&
	                value.comments &&
	                childNames.indexOf("comments") < 0) {
	                childNames.push("comments");
	            }
	            var childCount = childNames.length;
	            var childPaths = [];
	            for (var i = 0; i < childCount; ++i) {
	                var childName = childNames[i];
	                if (!hasOwn.call(value, childName)) {
	                    value[childName] = types.getFieldValue(value, childName);
	                }
	                childPaths.push(path.get(childName));
	            }
	            for (var i = 0; i < childCount; ++i) {
	                visitor.visitWithoutReset(childPaths[i]);
	            }
	        }
	        return path.value;
	    }
	    PVp.acquireContext = function (path) {
	        if (this._reusableContextStack.length === 0) {
	            return new this.Context(path);
	        }
	        return this._reusableContextStack.pop().reset(path);
	    };
	    PVp.releaseContext = function (context) {
	        if (!(context instanceof this.Context)) {
	            throw new Error("");
	        }
	        this._reusableContextStack.push(context);
	        context.currentPath = null;
	    };
	    PVp.reportChanged = function () {
	        this._changeReported = true;
	    };
	    PVp.wasChangeReported = function () {
	        return this._changeReported;
	    };
	    function makeContextConstructor(visitor) {
	        function Context(path) {
	            if (!(this instanceof Context)) {
	                throw new Error("");
	            }
	            if (!(this instanceof PathVisitor)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            Object.defineProperty(this, "visitor", {
	                value: visitor,
	                writable: false,
	                enumerable: true,
	                configurable: false
	            });
	            this.currentPath = path;
	            this.needToCallTraverse = true;
	            Object.seal(this);
	        }
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	        // Note that the visitor object is the prototype of Context.prototype,
	        // so all visitor methods are inherited by context objects.
	        var Cp = Context.prototype = Object.create(visitor);
	        Cp.constructor = Context;
	        extend(Cp, sharedContextProtoMethods);
	        return Context;
	    }
	    // Every PathVisitor has a different this.Context constructor and
	    // this.Context.prototype object, but those prototypes can all use the
	    // same reset, invokeVisitorMethod, and traverse function objects.
	    var sharedContextProtoMethods = Object.create(null);
	    sharedContextProtoMethods.reset =
	        function reset(path) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.currentPath = path;
	            this.needToCallTraverse = true;
	            return this;
	        };
	    sharedContextProtoMethods.invokeVisitorMethod =
	        function invokeVisitorMethod(methodName) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            var result = this.visitor[methodName].call(this, this.currentPath);
	            if (result === false) {
	                // Visitor methods return false to indicate that they have handled
	                // their own traversal needs, and we should not complain if
	                // this.needToCallTraverse is still true.
	                this.needToCallTraverse = false;
	            }
	            else if (result !== undefined$1) {
	                // Any other non-undefined value returned from the visitor method
	                // is interpreted as a replacement value.
	                this.currentPath = this.currentPath.replace(result)[0];
	                if (this.needToCallTraverse) {
	                    // If this.traverse still hasn't been called, visit the
	                    // children of the replacement node.
	                    this.traverse(this.currentPath);
	                }
	            }
	            if (this.needToCallTraverse !== false) {
	                throw new Error("Must either call this.traverse or return false in " + methodName);
	            }
	            var path = this.currentPath;
	            return path && path.value;
	        };
	    sharedContextProtoMethods.traverse =
	        function traverse(path, newVisitor) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.needToCallTraverse = false;
	            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
	        };
	    sharedContextProtoMethods.visit =
	        function visit(path, newVisitor) {
	            if (!(this instanceof this.Context)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	            if (!(this.currentPath instanceof NodePath)) {
	                throw new Error("");
	            }
	            this.needToCallTraverse = false;
	            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
	        };
	    sharedContextProtoMethods.reportChanged = function reportChanged() {
	        this.visitor.reportChanged();
	    };
	    sharedContextProtoMethods.abort = function abort() {
	        this.needToCallTraverse = false;
	        this.visitor.abort();
	    };
	    return PathVisitor;
	}
	exports.default = pathVisitorPlugin;
	module.exports = exports["default"];
	}(pathVisitor, pathVisitor.exports));

	var equiv = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var getFieldNames = types.getFieldNames;
	    var getFieldValue = types.getFieldValue;
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isDate = types.builtInTypes.Date;
	    var isRegExp = types.builtInTypes.RegExp;
	    var hasOwn = Object.prototype.hasOwnProperty;
	    function astNodesAreEquivalent(a, b, problemPath) {
	        if (isArray.check(problemPath)) {
	            problemPath.length = 0;
	        }
	        else {
	            problemPath = null;
	        }
	        return areEquivalent(a, b, problemPath);
	    }
	    astNodesAreEquivalent.assert = function (a, b) {
	        var problemPath = [];
	        if (!astNodesAreEquivalent(a, b, problemPath)) {
	            if (problemPath.length === 0) {
	                if (a !== b) {
	                    throw new Error("Nodes must be equal");
	                }
	            }
	            else {
	                throw new Error("Nodes differ in the following path: " +
	                    problemPath.map(subscriptForProperty).join(""));
	            }
	        }
	    };
	    function subscriptForProperty(property) {
	        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
	            return "." + property;
	        }
	        return "[" + JSON.stringify(property) + "]";
	    }
	    function areEquivalent(a, b, problemPath) {
	        if (a === b) {
	            return true;
	        }
	        if (isArray.check(a)) {
	            return arraysAreEquivalent(a, b, problemPath);
	        }
	        if (isObject.check(a)) {
	            return objectsAreEquivalent(a, b, problemPath);
	        }
	        if (isDate.check(a)) {
	            return isDate.check(b) && (+a === +b);
	        }
	        if (isRegExp.check(a)) {
	            return isRegExp.check(b) && (a.source === b.source &&
	                a.global === b.global &&
	                a.multiline === b.multiline &&
	                a.ignoreCase === b.ignoreCase);
	        }
	        return a == b;
	    }
	    function arraysAreEquivalent(a, b, problemPath) {
	        isArray.assert(a);
	        var aLength = a.length;
	        if (!isArray.check(b) || b.length !== aLength) {
	            if (problemPath) {
	                problemPath.push("length");
	            }
	            return false;
	        }
	        for (var i = 0; i < aLength; ++i) {
	            if (problemPath) {
	                problemPath.push(i);
	            }
	            if (i in a !== i in b) {
	                return false;
	            }
	            if (!areEquivalent(a[i], b[i], problemPath)) {
	                return false;
	            }
	            if (problemPath) {
	                var problemPathTail = problemPath.pop();
	                if (problemPathTail !== i) {
	                    throw new Error("" + problemPathTail);
	                }
	            }
	        }
	        return true;
	    }
	    function objectsAreEquivalent(a, b, problemPath) {
	        isObject.assert(a);
	        if (!isObject.check(b)) {
	            return false;
	        }
	        // Fast path for a common property of AST nodes.
	        if (a.type !== b.type) {
	            if (problemPath) {
	                problemPath.push("type");
	            }
	            return false;
	        }
	        var aNames = getFieldNames(a);
	        var aNameCount = aNames.length;
	        var bNames = getFieldNames(b);
	        var bNameCount = bNames.length;
	        if (aNameCount === bNameCount) {
	            for (var i = 0; i < aNameCount; ++i) {
	                var name = aNames[i];
	                var aChild = getFieldValue(a, name);
	                var bChild = getFieldValue(b, name);
	                if (problemPath) {
	                    problemPath.push(name);
	                }
	                if (!areEquivalent(aChild, bChild, problemPath)) {
	                    return false;
	                }
	                if (problemPath) {
	                    var problemPathTail = problemPath.pop();
	                    if (problemPathTail !== name) {
	                        throw new Error("" + problemPathTail);
	                    }
	                }
	            }
	            return true;
	        }
	        if (!problemPath) {
	            return false;
	        }
	        // Since aNameCount !== bNameCount, we need to find some name that's
	        // missing in aNames but present in bNames, or vice-versa.
	        var seenNames = Object.create(null);
	        for (i = 0; i < aNameCount; ++i) {
	            seenNames[aNames[i]] = true;
	        }
	        for (i = 0; i < bNameCount; ++i) {
	            name = bNames[i];
	            if (!hasOwn.call(seenNames, name)) {
	                problemPath.push(name);
	                return false;
	            }
	            delete seenNames[name];
	        }
	        for (name in seenNames) {
	            problemPath.push(name);
	            break;
	        }
	        return false;
	    }
	    return astNodesAreEquivalent;
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(equiv, equiv.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var path_visitor_1 = __importDefault(pathVisitor.exports);
	var equiv_1 = __importDefault(equiv.exports);
	var path_1 = __importDefault(path$7.exports);
	var node_path_1 = __importDefault(nodePath.exports);
	function default_1(defs) {
	    var fork = createFork();
	    var types = fork.use(types_1.default);
	    defs.forEach(fork.use);
	    types.finalize();
	    var PathVisitor = fork.use(path_visitor_1.default);
	    return {
	        Type: types.Type,
	        builtInTypes: types.builtInTypes,
	        namedTypes: types.namedTypes,
	        builders: types.builders,
	        defineMethod: types.defineMethod,
	        getFieldNames: types.getFieldNames,
	        getFieldValue: types.getFieldValue,
	        eachField: types.eachField,
	        someField: types.someField,
	        getSupertypeNames: types.getSupertypeNames,
	        getBuilderName: types.getBuilderName,
	        astNodesAreEquivalent: fork.use(equiv_1.default),
	        finalize: types.finalize,
	        Path: fork.use(path_1.default),
	        NodePath: fork.use(node_path_1.default),
	        PathVisitor: PathVisitor,
	        use: fork.use,
	        visit: PathVisitor.visit,
	    };
	}
	exports.default = default_1;
	function createFork() {
	    var used = [];
	    var usedResult = [];
	    function use(plugin) {
	        var idx = used.indexOf(plugin);
	        if (idx === -1) {
	            idx = used.length;
	            used.push(plugin);
	            usedResult[idx] = plugin(fork);
	        }
	        return usedResult[idx];
	    }
	    var fork = { use: use };
	    return fork;
	}
	module.exports = exports["default"];
	}(fork, fork.exports));

	var core$4 = {exports: {}};

	var shared$2 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var builtin = types.builtInTypes;
	    var isNumber = builtin.number;
	    // An example of constructing a new type with arbitrary constraints from
	    // an existing type.
	    function geq(than) {
	        return Type.from(function (value) { return isNumber.check(value) && value >= than; }, isNumber + " >= " + than);
	    }
	    // Default value-returning functions that may optionally be passed as a
	    // third argument to Def.prototype.field.
	    var defaults = {
	        // Functions were used because (among other reasons) that's the most
	        // elegant way to allow for the emptyArray one always to give a new
	        // array instance.
	        "null": function () { return null; },
	        "emptyArray": function () { return []; },
	        "false": function () { return false; },
	        "true": function () { return true; },
	        "undefined": function () { },
	        "use strict": function () { return "use strict"; }
	    };
	    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
	    var isPrimitive = Type.from(function (value) {
	        if (value === null)
	            return true;
	        var type = typeof value;
	        if (type === "object" ||
	            type === "function") {
	            return false;
	        }
	        return true;
	    }, naiveIsPrimitive.toString());
	    return {
	        geq: geq,
	        defaults: defaults,
	        isPrimitive: isPrimitive,
	    };
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(shared$2, shared$2.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var def = Type.def;
	    var or = Type.or;
	    var shared = fork.use(shared_1.default);
	    var defaults = shared.defaults;
	    var geq = shared.geq;
	    // Abstract supertype of all syntactic entities that are allowed to have a
	    // .loc field.
	    def("Printable")
	        .field("loc", or(def("SourceLocation"), null), defaults["null"], true);
	    def("Node")
	        .bases("Printable")
	        .field("type", String)
	        .field("comments", or([def("Comment")], null), defaults["null"], true);
	    def("SourceLocation")
	        .field("start", def("Position"))
	        .field("end", def("Position"))
	        .field("source", or(String, null), defaults["null"]);
	    def("Position")
	        .field("line", geq(1))
	        .field("column", geq(0));
	    def("File")
	        .bases("Node")
	        .build("program", "name")
	        .field("program", def("Program"))
	        .field("name", or(String, null), defaults["null"]);
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("Function")
	        .bases("Node")
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"]);
	    def("Statement").bases("Node");
	    // The empty .build() here means that an EmptyStatement can be constructed
	    // (i.e. it's not abstract) but that it needs no arguments.
	    def("EmptyStatement").bases("Statement").build();
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")]);
	    // TODO Figure out how to silently coerce Expressions to
	    // ExpressionStatements where a Statement was expected.
	    def("ExpressionStatement")
	        .bases("Statement")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("IfStatement")
	        .bases("Statement")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Statement"))
	        .field("alternate", or(def("Statement"), null), defaults["null"]);
	    def("LabeledStatement")
	        .bases("Statement")
	        .build("label", "body")
	        .field("label", def("Identifier"))
	        .field("body", def("Statement"));
	    def("BreakStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	    def("ContinueStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	    def("WithStatement")
	        .bases("Statement")
	        .build("object", "body")
	        .field("object", def("Expression"))
	        .field("body", def("Statement"));
	    def("SwitchStatement")
	        .bases("Statement")
	        .build("discriminant", "cases", "lexical")
	        .field("discriminant", def("Expression"))
	        .field("cases", [def("SwitchCase")])
	        .field("lexical", Boolean, defaults["false"]);
	    def("ReturnStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", or(def("Expression"), null));
	    def("ThrowStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("TryStatement")
	        .bases("Statement")
	        .build("block", "handler", "finalizer")
	        .field("block", def("BlockStatement"))
	        .field("handler", or(def("CatchClause"), null), function () {
	        return this.handlers && this.handlers[0] || null;
	    })
	        .field("handlers", [def("CatchClause")], function () {
	        return this.handler ? [this.handler] : [];
	    }, true) // Indicates this field is hidden from eachField iteration.
	        .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
	        .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
	    def("CatchClause")
	        .bases("Node")
	        .build("param", "guard", "body")
	        // https://github.com/tc39/proposal-optional-catch-binding
	        .field("param", or(def("Pattern"), null), defaults["null"])
	        .field("guard", or(def("Expression"), null), defaults["null"])
	        .field("body", def("BlockStatement"));
	    def("WhileStatement")
	        .bases("Statement")
	        .build("test", "body")
	        .field("test", def("Expression"))
	        .field("body", def("Statement"));
	    def("DoWhileStatement")
	        .bases("Statement")
	        .build("body", "test")
	        .field("body", def("Statement"))
	        .field("test", def("Expression"));
	    def("ForStatement")
	        .bases("Statement")
	        .build("init", "test", "update", "body")
	        .field("init", or(def("VariableDeclaration"), def("Expression"), null))
	        .field("test", or(def("Expression"), null))
	        .field("update", or(def("Expression"), null))
	        .field("body", def("Statement"));
	    def("ForInStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    def("DebuggerStatement").bases("Statement").build();
	    def("Declaration").bases("Statement");
	    def("FunctionDeclaration")
	        .bases("Function", "Declaration")
	        .build("id", "params", "body")
	        .field("id", def("Identifier"));
	    def("FunctionExpression")
	        .bases("Function", "Expression")
	        .build("id", "params", "body");
	    def("VariableDeclaration")
	        .bases("Declaration")
	        .build("kind", "declarations")
	        .field("kind", or("var", "let", "const"))
	        .field("declarations", [def("VariableDeclarator")]);
	    def("VariableDeclarator")
	        .bases("Node")
	        .build("id", "init")
	        .field("id", def("Pattern"))
	        .field("init", or(def("Expression"), null), defaults["null"]);
	    def("Expression").bases("Node");
	    def("ThisExpression").bases("Expression").build();
	    def("ArrayExpression")
	        .bases("Expression")
	        .build("elements")
	        .field("elements", [or(def("Expression"), null)]);
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [def("Property")]);
	    // TODO Not in the Mozilla Parser API, but used by Esprima.
	    def("Property")
	        .bases("Node") // Want to be able to visit Property Nodes.
	        .build("kind", "key", "value")
	        .field("kind", or("init", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier")))
	        .field("value", def("Expression"));
	    def("SequenceExpression")
	        .bases("Expression")
	        .build("expressions")
	        .field("expressions", [def("Expression")]);
	    var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
	    def("UnaryExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UnaryOperator)
	        .field("argument", def("Expression"))
	        // Esprima doesn't bother with this field, presumably because it's
	        // always true for unary operators.
	        .field("prefix", Boolean, defaults["true"]);
	    var BinaryOperator = or("==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "**", "&", // TODO Missing from the Parser API.
	    "|", "^", "in", "instanceof");
	    def("BinaryExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", BinaryOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	    var AssignmentOperator = or("=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&=");
	    def("AssignmentExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", AssignmentOperator)
	        .field("left", or(def("Pattern"), def("MemberExpression")))
	        .field("right", def("Expression"));
	    var UpdateOperator = or("++", "--");
	    def("UpdateExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UpdateOperator)
	        .field("argument", def("Expression"))
	        .field("prefix", Boolean);
	    var LogicalOperator = or("||", "&&");
	    def("LogicalExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", LogicalOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	    def("ConditionalExpression")
	        .bases("Expression")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Expression"))
	        .field("alternate", def("Expression"));
	    def("NewExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // The Mozilla Parser API gives this type as [or(def("Expression"),
	        // null)], but null values don't really make sense at the call site.
	        // TODO Report this nonsense.
	        .field("arguments", [def("Expression")]);
	    def("CallExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // See comment for NewExpression above.
	        .field("arguments", [def("Expression")]);
	    def("MemberExpression")
	        .bases("Expression")
	        .build("object", "property", "computed")
	        .field("object", def("Expression"))
	        .field("property", or(def("Identifier"), def("Expression")))
	        .field("computed", Boolean, function () {
	        var type = this.property.type;
	        if (type === 'Literal' ||
	            type === 'MemberExpression' ||
	            type === 'BinaryExpression') {
	            return true;
	        }
	        return false;
	    });
	    def("Pattern").bases("Node");
	    def("SwitchCase")
	        .bases("Node")
	        .build("test", "consequent")
	        .field("test", or(def("Expression"), null))
	        .field("consequent", [def("Statement")]);
	    def("Identifier")
	        .bases("Expression", "Pattern")
	        .build("name")
	        .field("name", String)
	        .field("optional", Boolean, defaults["false"]);
	    def("Literal")
	        .bases("Expression")
	        .build("value")
	        .field("value", or(String, Boolean, null, Number, RegExp))
	        .field("regex", or({
	        pattern: String,
	        flags: String
	    }, null), function () {
	        if (this.value instanceof RegExp) {
	            var flags = "";
	            if (this.value.ignoreCase)
	                flags += "i";
	            if (this.value.multiline)
	                flags += "m";
	            if (this.value.global)
	                flags += "g";
	            return {
	                pattern: this.value.source,
	                flags: flags
	            };
	        }
	        return null;
	    });
	    // Abstract (non-buildable) comment supertype. Not a Node.
	    def("Comment")
	        .bases("Printable")
	        .field("value", String)
	        // A .leading comment comes before the node, whereas a .trailing
	        // comment comes after it. These two fields should not both be true,
	        // but they might both be false when the comment falls inside a node
	        // and the node has no children for the comment to lead or trail,
	        // e.g. { /*dangling*/ }.
	        .field("leading", Boolean, defaults["true"])
	        .field("trailing", Boolean, defaults["false"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(core$4, core$4.exports));

	var es6 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __importDefault(core$4.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    fork.use(core_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("Function")
	        .field("generator", Boolean, defaults["false"])
	        .field("expression", Boolean, defaults["false"])
	        .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
	        // TODO This could be represented as a RestElement in .params.
	        .field("rest", or(def("Identifier"), null), defaults["null"]);
	    // The ESTree way of representing a ...rest parameter.
	    def("RestElement")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"))
	        .field("typeAnnotation", // for Babylon. Flow parser puts it on the identifier
	    or(def("TypeAnnotation"), def("TSTypeAnnotation"), null), defaults["null"]);
	    def("SpreadElementPattern")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"));
	    def("FunctionDeclaration")
	        .build("id", "params", "body", "generator", "expression");
	    def("FunctionExpression")
	        .build("id", "params", "body", "generator", "expression");
	    // The Parser API calls this ArrowExpression, but Esprima and all other
	    // actual parsers use ArrowFunctionExpression.
	    def("ArrowFunctionExpression")
	        .bases("Function", "Expression")
	        .build("params", "body", "expression")
	        // The forced null value here is compatible with the overridden
	        // definition of the "id" field in the Function interface.
	        .field("id", null, defaults["null"])
	        // Arrow function bodies are allowed to be expressions.
	        .field("body", or(def("BlockStatement"), def("Expression")))
	        // The current spec forbids arrow generators, so I have taken the
	        // liberty of enforcing that. TODO Report this.
	        .field("generator", false, defaults["false"]);
	    def("ForOfStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Pattern")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    def("YieldExpression")
	        .bases("Expression")
	        .build("argument", "delegate")
	        .field("argument", or(def("Expression"), null))
	        .field("delegate", Boolean, defaults["false"]);
	    def("GeneratorExpression")
	        .bases("Expression")
	        .build("body", "blocks", "filter")
	        .field("body", def("Expression"))
	        .field("blocks", [def("ComprehensionBlock")])
	        .field("filter", or(def("Expression"), null));
	    def("ComprehensionExpression")
	        .bases("Expression")
	        .build("body", "blocks", "filter")
	        .field("body", def("Expression"))
	        .field("blocks", [def("ComprehensionBlock")])
	        .field("filter", or(def("Expression"), null));
	    def("ComprehensionBlock")
	        .bases("Node")
	        .build("left", "right", "each")
	        .field("left", def("Pattern"))
	        .field("right", def("Expression"))
	        .field("each", Boolean);
	    def("Property")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("value", or(def("Expression"), def("Pattern")))
	        .field("method", Boolean, defaults["false"])
	        .field("shorthand", Boolean, defaults["false"])
	        .field("computed", Boolean, defaults["false"]);
	    def("ObjectProperty")
	        .field("shorthand", Boolean, defaults["false"]);
	    def("PropertyPattern")
	        .bases("Pattern")
	        .build("key", "pattern")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("pattern", def("Pattern"))
	        .field("computed", Boolean, defaults["false"]);
	    def("ObjectPattern")
	        .bases("Pattern")
	        .build("properties")
	        .field("properties", [or(def("PropertyPattern"), def("Property"))]);
	    def("ArrayPattern")
	        .bases("Pattern")
	        .build("elements")
	        .field("elements", [or(def("Pattern"), null)]);
	    def("MethodDefinition")
	        .bases("Declaration")
	        .build("kind", "key", "value", "static")
	        .field("kind", or("constructor", "method", "get", "set"))
	        .field("key", def("Expression"))
	        .field("value", def("Function"))
	        .field("computed", Boolean, defaults["false"])
	        .field("static", Boolean, defaults["false"]);
	    def("SpreadElement")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ArrayExpression")
	        .field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
	    def("NewExpression")
	        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	    def("CallExpression")
	        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	    // Note: this node type is *not* an AssignmentExpression with a Pattern on
	    // the left-hand side! The existing AssignmentExpression type already
	    // supports destructuring assignments. AssignmentPattern nodes may appear
	    // wherever a Pattern is allowed, and the right-hand side represents a
	    // default value to be destructured against the left-hand side, if no
	    // value is otherwise provided. For example: default parameter values.
	    def("AssignmentPattern")
	        .bases("Pattern")
	        .build("left", "right")
	        .field("left", def("Pattern"))
	        .field("right", def("Expression"));
	    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"));
	    def("ClassProperty")
	        .bases("Declaration")
	        .build("key")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("computed", Boolean, defaults["false"]);
	    def("ClassPropertyDefinition") // static property
	        .bases("Declaration")
	        .build("definition")
	        // Yes, Virginia, circular definitions are permitted.
	        .field("definition", ClassBodyElement);
	    def("ClassBody")
	        .bases("Declaration")
	        .build("body")
	        .field("body", [ClassBodyElement]);
	    def("ClassDeclaration")
	        .bases("Declaration")
	        .build("id", "body", "superClass")
	        .field("id", or(def("Identifier"), null))
	        .field("body", def("ClassBody"))
	        .field("superClass", or(def("Expression"), null), defaults["null"]);
	    def("ClassExpression")
	        .bases("Expression")
	        .build("id", "body", "superClass")
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("body", def("ClassBody"))
	        .field("superClass", or(def("Expression"), null), defaults["null"]);
	    // Specifier and ModuleSpecifier are abstract non-standard types
	    // introduced for definitional convenience.
	    def("Specifier").bases("Node");
	    // This supertype is shared/abused by both def/babel.js and
	    // def/esprima.js. In the future, it will be possible to load only one set
	    // of definitions appropriate for a given parser, but until then we must
	    // rely on default functions to reconcile the conflicting AST formats.
	    def("ModuleSpecifier")
	        .bases("Specifier")
	        // This local field is used by Babel/Acorn. It should not technically
	        // be optional in the Babel/Acorn AST format, but it must be optional
	        // in the Esprima AST format.
	        .field("local", or(def("Identifier"), null), defaults["null"])
	        // The id and name fields are used by Esprima. The id field should not
	        // technically be optional in the Esprima AST format, but it must be
	        // optional in the Babel/Acorn AST format.
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("name", or(def("Identifier"), null), defaults["null"]);
	    // Like ModuleSpecifier, except type:"ImportSpecifier" and buildable.
	    // import {<id [as name]>} from ...;
	    def("ImportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("id", "name");
	    // import <* as id> from ...;
	    def("ImportNamespaceSpecifier")
	        .bases("ModuleSpecifier")
	        .build("id");
	    // import <id> from ...;
	    def("ImportDefaultSpecifier")
	        .bases("ModuleSpecifier")
	        .build("id");
	    def("ImportDeclaration")
	        .bases("Declaration")
	        .build("specifiers", "source", "importKind")
	        .field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray)
	        .field("source", def("Literal"))
	        .field("importKind", or("value", "type"), function () {
	        return "value";
	    });
	    def("TaggedTemplateExpression")
	        .bases("Expression")
	        .build("tag", "quasi")
	        .field("tag", def("Expression"))
	        .field("quasi", def("TemplateLiteral"));
	    def("TemplateLiteral")
	        .bases("Expression")
	        .build("quasis", "expressions")
	        .field("quasis", [def("TemplateElement")])
	        .field("expressions", [def("Expression")]);
	    def("TemplateElement")
	        .bases("Node")
	        .build("value", "tail")
	        .field("value", { "cooked": String, "raw": String })
	        .field("tail", Boolean);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es6, es6.exports));

	var es7 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var es6_1 = __importDefault(es6.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    fork.use(es6_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("Function")
	        .field("async", Boolean, defaults["false"]);
	    def("SpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ObjectExpression")
	        .field("properties", [or(def("Property"), def("SpreadProperty"), def("SpreadElement"))]);
	    def("SpreadPropertyPattern")
	        .bases("Pattern")
	        .build("argument")
	        .field("argument", def("Pattern"));
	    def("ObjectPattern")
	        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"))]);
	    def("AwaitExpression")
	        .bases("Expression")
	        .build("argument", "all")
	        .field("argument", or(def("Expression"), null))
	        .field("all", Boolean, defaults["false"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es7, es7.exports));

	var es2020 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var es7_1 = __importDefault(es7.exports);
	var types_1 = __importDefault(types$a);
	function default_1(fork) {
	    fork.use(es7_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    def("ImportExpression")
	        .bases("Expression")
	        .build("source")
	        .field("source", def("Expression"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(es2020, es2020.exports));

	var jsx$1 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var es7_1 = __importDefault(es7.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    fork.use(es7_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    def("JSXAttribute")
	        .bases("Node")
	        .build("name", "value")
	        .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
	        .field("value", or(def("Literal"), // attr="value"
	    def("JSXExpressionContainer"), // attr={value}
	    null // attr= or just attr
	    ), defaults["null"]);
	    def("JSXIdentifier")
	        .bases("Identifier")
	        .build("name")
	        .field("name", String);
	    def("JSXNamespacedName")
	        .bases("Node")
	        .build("namespace", "name")
	        .field("namespace", def("JSXIdentifier"))
	        .field("name", def("JSXIdentifier"));
	    def("JSXMemberExpression")
	        .bases("MemberExpression")
	        .build("object", "property")
	        .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
	        .field("property", def("JSXIdentifier"))
	        .field("computed", Boolean, defaults.false);
	    var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
	    def("JSXSpreadAttribute")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
	    def("JSXExpressionContainer")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("JSXElement")
	        .bases("Expression")
	        .build("openingElement", "closingElement", "children")
	        .field("openingElement", def("JSXOpeningElement"))
	        .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
	        .field("children", [or(def("JSXElement"), def("JSXExpressionContainer"), def("JSXFragment"), def("JSXText"), def("Literal") // TODO Esprima should return JSXText instead.
	        )], defaults.emptyArray)
	        .field("name", JSXElementName, function () {
	        // Little-known fact: the `this` object inside a default function
	        // is none other than the partially-built object itself, and any
	        // fields initialized directly from builder function arguments
	        // (like openingElement, closingElement, and children) are
	        // guaranteed to be available.
	        return this.openingElement.name;
	    }, true) // hidden from traversal
	        .field("selfClosing", Boolean, function () {
	        return this.openingElement.selfClosing;
	    }, true) // hidden from traversal
	        .field("attributes", JSXAttributes, function () {
	        return this.openingElement.attributes;
	    }, true); // hidden from traversal
	    def("JSXOpeningElement")
	        .bases("Node") // TODO Does this make sense? Can't really be an JSXElement.
	        .build("name", "attributes", "selfClosing")
	        .field("name", JSXElementName)
	        .field("attributes", JSXAttributes, defaults.emptyArray)
	        .field("selfClosing", Boolean, defaults["false"]);
	    def("JSXClosingElement")
	        .bases("Node") // TODO Same concern.
	        .build("name")
	        .field("name", JSXElementName);
	    def("JSXFragment")
	        .bases("Expression")
	        .build("openingElement", "closingElement", "children")
	        .field("openingElement", def("JSXOpeningFragment"))
	        .field("closingElement", def("JSXClosingFragment"))
	        .field("children", [or(def("JSXElement"), def("JSXExpressionContainer"), def("JSXFragment"), def("JSXText"), def("Literal") // TODO Esprima should return JSXText instead.
	        )], defaults.emptyArray);
	    def("JSXOpeningFragment")
	        .bases("Node") // TODO Same concern.
	        .build();
	    def("JSXClosingFragment")
	        .bases("Node") // TODO Same concern.
	        .build();
	    def("JSXText")
	        .bases("Literal")
	        .build("value")
	        .field("value", String);
	    def("JSXEmptyExpression").bases("Expression").build();
	    // This PR has caused many people issues, but supporting it seems like a
	    // good idea anyway: https://github.com/babel/babel/pull/4988
	    def("JSXSpreadChild")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("Expression"));
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(jsx$1, jsx$1.exports));

	var flow$2 = {exports: {}};

	var typeAnnotations = {exports: {}};

	(function (module, exports) {
	/**
	 * Type annotation defs shared between Flow and TypeScript.
	 * These defs could not be defined in ./flow.ts or ./typescript.ts directly
	 * because they use the same name.
	 */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    var TypeAnnotation = or(def("TypeAnnotation"), def("TSTypeAnnotation"), null);
	    var TypeParamDecl = or(def("TypeParameterDeclaration"), def("TSTypeParameterDeclaration"), null);
	    def("Identifier")
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    def("ObjectPattern")
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    def("Function")
	        .field("returnType", TypeAnnotation, defaults["null"])
	        .field("typeParameters", TypeParamDecl, defaults["null"]);
	    def("ClassProperty")
	        .build("key", "value", "typeAnnotation", "static")
	        .field("value", or(def("Expression"), null))
	        .field("static", Boolean, defaults["false"])
	        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
	    ["ClassDeclaration",
	        "ClassExpression",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .field("typeParameters", TypeParamDecl, defaults["null"])
	            .field("superTypeParameters", or(def("TypeParameterInstantiation"), def("TSTypeParameterInstantiation"), null), defaults["null"])
	            .field("implements", or([def("ClassImplements")], [def("TSExpressionWithTypeArguments")]), defaults.emptyArray);
	    });
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(typeAnnotations, typeAnnotations.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var es7_1 = __importDefault(es7.exports);
	var type_annotations_1 = __importDefault(typeAnnotations.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    fork.use(es7_1.default);
	    fork.use(type_annotations_1.default);
	    var types = fork.use(types_1.default);
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    // Base types
	    def("Flow").bases("Node");
	    def("FlowType").bases("Flow");
	    // Type annotations
	    def("AnyTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("EmptyTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("MixedTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("VoidTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NumberTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NumberLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Number)
	        .field("raw", String);
	    // Babylon 6 differs in AST from Flow
	    // same as NumberLiteralTypeAnnotation
	    def("NumericLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Number)
	        .field("raw", String);
	    def("StringTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("StringLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", String)
	        .field("raw", String);
	    def("BooleanTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("BooleanLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build("value", "raw")
	        .field("value", Boolean)
	        .field("raw", String);
	    def("TypeAnnotation")
	        .bases("Node")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("FlowType"));
	    def("NullableTypeAnnotation")
	        .bases("FlowType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("FlowType"));
	    def("NullLiteralTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("NullTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ThisTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ExistsTypeAnnotation")
	        .bases("FlowType")
	        .build();
	    def("ExistentialTypeParam")
	        .bases("FlowType")
	        .build();
	    def("FunctionTypeAnnotation")
	        .bases("FlowType")
	        .build("params", "returnType", "rest", "typeParameters")
	        .field("params", [def("FunctionTypeParam")])
	        .field("returnType", def("FlowType"))
	        .field("rest", or(def("FunctionTypeParam"), null))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null));
	    def("FunctionTypeParam")
	        .bases("Node")
	        .build("name", "typeAnnotation", "optional")
	        .field("name", def("Identifier"))
	        .field("typeAnnotation", def("FlowType"))
	        .field("optional", Boolean);
	    def("ArrayTypeAnnotation")
	        .bases("FlowType")
	        .build("elementType")
	        .field("elementType", def("FlowType"));
	    def("ObjectTypeAnnotation")
	        .bases("FlowType")
	        .build("properties", "indexers", "callProperties")
	        .field("properties", [
	        or(def("ObjectTypeProperty"), def("ObjectTypeSpreadProperty"))
	    ])
	        .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
	        .field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray)
	        .field("inexact", or(Boolean, void 0), defaults["undefined"])
	        .field("exact", Boolean, defaults["false"])
	        .field("internalSlots", [def("ObjectTypeInternalSlot")], defaults.emptyArray);
	    def("Variance")
	        .bases("Node")
	        .build("kind")
	        .field("kind", or("plus", "minus"));
	    var LegacyVariance = or(def("Variance"), "plus", "minus", null);
	    def("ObjectTypeProperty")
	        .bases("Node")
	        .build("key", "value", "optional")
	        .field("key", or(def("Literal"), def("Identifier")))
	        .field("value", def("FlowType"))
	        .field("optional", Boolean)
	        .field("variance", LegacyVariance, defaults["null"]);
	    def("ObjectTypeIndexer")
	        .bases("Node")
	        .build("id", "key", "value")
	        .field("id", def("Identifier"))
	        .field("key", def("FlowType"))
	        .field("value", def("FlowType"))
	        .field("variance", LegacyVariance, defaults["null"]);
	    def("ObjectTypeCallProperty")
	        .bases("Node")
	        .build("value")
	        .field("value", def("FunctionTypeAnnotation"))
	        .field("static", Boolean, defaults["false"]);
	    def("QualifiedTypeIdentifier")
	        .bases("Node")
	        .build("qualification", "id")
	        .field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	        .field("id", def("Identifier"));
	    def("GenericTypeAnnotation")
	        .bases("FlowType")
	        .build("id", "typeParameters")
	        .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null));
	    def("MemberTypeAnnotation")
	        .bases("FlowType")
	        .build("object", "property")
	        .field("object", def("Identifier"))
	        .field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
	    def("UnionTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("IntersectionTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("TypeofTypeAnnotation")
	        .bases("FlowType")
	        .build("argument")
	        .field("argument", def("FlowType"));
	    def("ObjectTypeSpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("FlowType"));
	    def("ObjectTypeInternalSlot")
	        .bases("Node")
	        .build("id", "value", "optional", "static", "method")
	        .field("id", def("Identifier"))
	        .field("value", def("FlowType"))
	        .field("optional", Boolean)
	        .field("static", Boolean)
	        .field("method", Boolean);
	    def("TypeParameterDeclaration")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("TypeParameter")]);
	    def("TypeParameterInstantiation")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("FlowType")]);
	    def("TypeParameter")
	        .bases("FlowType")
	        .build("name", "variance", "bound")
	        .field("name", String)
	        .field("variance", LegacyVariance, defaults["null"])
	        .field("bound", or(def("TypeAnnotation"), null), defaults["null"]);
	    def("ClassProperty")
	        .field("variance", LegacyVariance, defaults["null"]);
	    def("ClassImplements")
	        .bases("Node")
	        .build("id")
	        .field("id", def("Identifier"))
	        .field("superClass", or(def("Expression"), null), defaults["null"])
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
	    def("InterfaceTypeAnnotation")
	        .bases("FlowType")
	        .build("body", "extends")
	        .field("body", def("ObjectTypeAnnotation"))
	        .field("extends", or([def("InterfaceExtends")], null), defaults["null"]);
	    def("InterfaceDeclaration")
	        .bases("Declaration")
	        .build("id", "body", "extends")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"])
	        .field("body", def("ObjectTypeAnnotation"))
	        .field("extends", [def("InterfaceExtends")]);
	    def("DeclareInterface")
	        .bases("InterfaceDeclaration")
	        .build("id", "body", "extends");
	    def("InterfaceExtends")
	        .bases("Node")
	        .build("id")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
	    def("TypeAlias")
	        .bases("Declaration")
	        .build("id", "typeParameters", "right")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	        .field("right", def("FlowType"));
	    def("OpaqueType")
	        .bases("Declaration")
	        .build("id", "typeParameters", "impltype", "supertype")
	        .field("id", def("Identifier"))
	        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	        .field("impltype", def("FlowType"))
	        .field("supertype", def("FlowType"));
	    def("DeclareTypeAlias")
	        .bases("TypeAlias")
	        .build("id", "typeParameters", "right");
	    def("DeclareOpaqueType")
	        .bases("TypeAlias")
	        .build("id", "typeParameters", "supertype");
	    def("TypeCastExpression")
	        .bases("Expression")
	        .build("expression", "typeAnnotation")
	        .field("expression", def("Expression"))
	        .field("typeAnnotation", def("TypeAnnotation"));
	    def("TupleTypeAnnotation")
	        .bases("FlowType")
	        .build("types")
	        .field("types", [def("FlowType")]);
	    def("DeclareVariable")
	        .bases("Statement")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("DeclareFunction")
	        .bases("Statement")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("DeclareClass")
	        .bases("InterfaceDeclaration")
	        .build("id");
	    def("DeclareModule")
	        .bases("Statement")
	        .build("id", "body")
	        .field("id", or(def("Identifier"), def("Literal")))
	        .field("body", def("BlockStatement"));
	    def("DeclareModuleExports")
	        .bases("Statement")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TypeAnnotation"));
	    def("DeclareExportDeclaration")
	        .bases("Declaration")
	        .build("default", "declaration", "specifiers", "source")
	        .field("default", Boolean)
	        .field("declaration", or(def("DeclareVariable"), def("DeclareFunction"), def("DeclareClass"), def("FlowType"), // Implies default.
	    null))
	        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("DeclareExportAllDeclaration")
	        .bases("Declaration")
	        .build("source")
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("FlowPredicate").bases("Flow");
	    def("InferredPredicate")
	        .bases("FlowPredicate")
	        .build();
	    def("DeclaredPredicate")
	        .bases("FlowPredicate")
	        .build("value")
	        .field("value", def("Expression"));
	    def("CallExpression")
	        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
	    def("NewExpression")
	        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(flow$2, flow$2.exports));

	var esprima$2 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var es7_1 = __importDefault(es7.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    fork.use(es7_1.default);
	    var types = fork.use(types_1.default);
	    var defaults = fork.use(shared_1.default).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    def("VariableDeclaration")
	        .field("declarations", [or(def("VariableDeclarator"), def("Identifier") // Esprima deviation.
	        )]);
	    def("Property")
	        .field("value", or(def("Expression"), def("Pattern") // Esprima deviation.
	    ));
	    def("ArrayPattern")
	        .field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
	    def("ObjectPattern")
	        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty") // Used by Esprima.
	        )]);
	    // Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
	    // export {<id [as name]>} [from ...];
	    def("ExportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("id", "name");
	    // export <*> from ...;
	    def("ExportBatchSpecifier")
	        .bases("Specifier")
	        .build();
	    def("ExportDeclaration")
	        .bases("Declaration")
	        .build("default", "declaration", "specifiers", "source")
	        .field("default", Boolean)
	        .field("declaration", or(def("Declaration"), def("Expression"), // Implies default.
	    null))
	        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("Block")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("Line")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(esprima$2, esprima$2.exports));

	var babel = {exports: {}};

	var babelCore = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	var es7_1 = __importDefault(es7.exports);
	function default_1(fork) {
	    fork.use(es7_1.default);
	    var types = fork.use(types_1.default);
	    var defaults = fork.use(shared_1.default).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    def("Noop")
	        .bases("Statement")
	        .build();
	    def("DoExpression")
	        .bases("Expression")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("Super")
	        .bases("Expression")
	        .build();
	    def("BindExpression")
	        .bases("Expression")
	        .build("object", "callee")
	        .field("object", or(def("Expression"), null))
	        .field("callee", def("Expression"));
	    def("Decorator")
	        .bases("Node")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("Property")
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("MethodDefinition")
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("MetaProperty")
	        .bases("Expression")
	        .build("meta", "property")
	        .field("meta", def("Identifier"))
	        .field("property", def("Identifier"));
	    def("ParenthesizedExpression")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("ImportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("imported", "local")
	        .field("imported", def("Identifier"));
	    def("ImportDefaultSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	    def("ImportNamespaceSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	    def("ExportDefaultDeclaration")
	        .bases("Declaration")
	        .build("declaration")
	        .field("declaration", or(def("Declaration"), def("Expression")));
	    def("ExportNamedDeclaration")
	        .bases("Declaration")
	        .build("declaration", "specifiers", "source")
	        .field("declaration", or(def("Declaration"), null))
	        .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	    def("ExportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local", "exported")
	        .field("exported", def("Identifier"));
	    def("ExportNamespaceSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	    def("ExportDefaultSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	    def("ExportAllDeclaration")
	        .bases("Declaration")
	        .build("exported", "source")
	        .field("exported", or(def("Identifier"), null))
	        .field("source", def("Literal"));
	    def("CommentBlock")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("CommentLine")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	    def("Directive")
	        .bases("Node")
	        .build("value")
	        .field("value", def("DirectiveLiteral"));
	    def("DirectiveLiteral")
	        .bases("Node", "Expression")
	        .build("value")
	        .field("value", String, defaults["use strict"]);
	    def("InterpreterDirective")
	        .bases("Node")
	        .build("value")
	        .field("value", String);
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray);
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray)
	        .field("interpreter", or(def("InterpreterDirective"), null), defaults["null"]);
	    // Split Literal
	    def("StringLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", String);
	    def("NumericLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Number)
	        .field("raw", or(String, null), defaults["null"])
	        .field("extra", {
	        rawValue: Number,
	        raw: String
	    }, function getDefault() {
	        return {
	            rawValue: this.value,
	            raw: this.value + ""
	        };
	    });
	    def("BigIntLiteral")
	        .bases("Literal")
	        .build("value")
	        // Only String really seems appropriate here, since BigInt values
	        // often exceed the limits of JS numbers.
	        .field("value", or(String, Number))
	        .field("extra", {
	        rawValue: String,
	        raw: String
	    }, function getDefault() {
	        return {
	            rawValue: String(this.value),
	            raw: this.value + "n"
	        };
	    });
	    def("NullLiteral")
	        .bases("Literal")
	        .build()
	        .field("value", null, defaults["null"]);
	    def("BooleanLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Boolean);
	    def("RegExpLiteral")
	        .bases("Literal")
	        .build("pattern", "flags")
	        .field("pattern", String)
	        .field("flags", String)
	        .field("value", RegExp, function () {
	        return new RegExp(this.pattern, this.flags);
	    });
	    var ObjectExpressionProperty = or(def("Property"), def("ObjectMethod"), def("ObjectProperty"), def("SpreadProperty"), def("SpreadElement"));
	    // Split Property -> ObjectProperty and ObjectMethod
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [ObjectExpressionProperty]);
	    // ObjectMethod hoist .value properties to own properties
	    def("ObjectMethod")
	        .bases("Node", "Function")
	        .build("kind", "key", "params", "body", "computed")
	        .field("kind", or("method", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("computed", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("accessibility", // TypeScript
	    or(def("Literal"), null), defaults["null"])
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("ObjectProperty")
	        .bases("Node")
	        .build("key", "value")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("value", or(def("Expression"), def("Pattern")))
	        .field("accessibility", // TypeScript
	    or(def("Literal"), null), defaults["null"])
	        .field("computed", Boolean, defaults["false"]);
	    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"));
	    // MethodDefinition -> ClassMethod
	    def("ClassBody")
	        .bases("Declaration")
	        .build("body")
	        .field("body", [ClassBodyElement]);
	    def("ClassMethod")
	        .bases("Declaration", "Function")
	        .build("kind", "key", "params", "body", "computed", "static")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")));
	    def("ClassPrivateMethod")
	        .bases("Declaration", "Function")
	        .build("key", "params", "body", "kind", "computed", "static")
	        .field("key", def("PrivateName"));
	    ["ClassMethod",
	        "ClassPrivateMethod",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .field("kind", or("get", "set", "method", "constructor"), function () { return "method"; })
	            .field("body", def("BlockStatement"))
	            .field("computed", Boolean, defaults["false"])
	            .field("static", or(Boolean, null), defaults["null"])
	            .field("abstract", or(Boolean, null), defaults["null"])
	            .field("access", or("public", "private", "protected", null), defaults["null"])
	            .field("accessibility", or("public", "private", "protected", null), defaults["null"])
	            .field("decorators", or([def("Decorator")], null), defaults["null"])
	            .field("optional", or(Boolean, null), defaults["null"]);
	    });
	    def("ClassPrivateProperty")
	        .bases("ClassProperty")
	        .build("key", "value")
	        .field("key", def("PrivateName"))
	        .field("value", or(def("Expression"), null), defaults["null"]);
	    def("PrivateName")
	        .bases("Expression", "Pattern")
	        .build("id")
	        .field("id", def("Identifier"));
	    var ObjectPatternProperty = or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"), // Used by Esprima
	    def("ObjectProperty"), // Babel 6
	    def("RestProperty") // Babel 6
	    );
	    // Split into RestProperty and SpreadProperty
	    def("ObjectPattern")
	        .bases("Pattern")
	        .build("properties")
	        .field("properties", [ObjectPatternProperty])
	        .field("decorators", or([def("Decorator")], null), defaults["null"]);
	    def("SpreadProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("RestProperty")
	        .bases("Node")
	        .build("argument")
	        .field("argument", def("Expression"));
	    def("ForAwaitStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(def("VariableDeclaration"), def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	    // The callee node of a dynamic import(...) expression.
	    def("Import")
	        .bases("Expression")
	        .build();
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(babelCore, babelCore.exports));

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var babel_core_1 = __importDefault(babelCore.exports);
	var flow_1 = __importDefault(flow$2.exports);
	function default_1(fork) {
	    fork.use(babel_core_1.default);
	    fork.use(flow_1.default);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(babel, babel.exports));

	var typescript$1 = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var babel_core_1 = __importDefault(babelCore.exports);
	var type_annotations_1 = __importDefault(typeAnnotations.exports);
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	function default_1(fork) {
	    // Since TypeScript is parsed by Babylon, include the core Babylon types
	    // but omit the Flow-related types.
	    fork.use(babel_core_1.default);
	    fork.use(type_annotations_1.default);
	    var types = fork.use(types_1.default);
	    var n = types.namedTypes;
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(shared_1.default).defaults;
	    var StringLiteral = types.Type.from(function (value, deep) {
	        if (n.StringLiteral &&
	            n.StringLiteral.check(value, deep)) {
	            return true;
	        }
	        if (n.Literal &&
	            n.Literal.check(value, deep) &&
	            typeof value.value === "string") {
	            return true;
	        }
	        return false;
	    }, "StringLiteral");
	    def("TSType")
	        .bases("Node");
	    var TSEntityName = or(def("Identifier"), def("TSQualifiedName"));
	    def("TSTypeReference")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("typeName", "typeParameters")
	        .field("typeName", TSEntityName);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeParameters field.
	    def("TSHasOptionalTypeParameterInstantiation")
	        .field("typeParameters", or(def("TSTypeParameterInstantiation"), null), defaults["null"]);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeParameters field.
	    def("TSHasOptionalTypeParameters")
	        .field("typeParameters", or(def("TSTypeParameterDeclaration"), null, void 0), defaults["null"]);
	    // An abstract (non-buildable) base type that provide a commonly-needed
	    // optional .typeAnnotation field.
	    def("TSHasOptionalTypeAnnotation")
	        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]);
	    def("TSQualifiedName")
	        .bases("Node")
	        .build("left", "right")
	        .field("left", TSEntityName)
	        .field("right", TSEntityName);
	    def("TSAsExpression")
	        .bases("Expression", "Pattern")
	        .build("expression", "typeAnnotation")
	        .field("expression", def("Expression"))
	        .field("typeAnnotation", def("TSType"))
	        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
	    def("TSNonNullExpression")
	        .bases("Expression", "Pattern")
	        .build("expression")
	        .field("expression", def("Expression"));
	    [
	        "TSAnyKeyword",
	        "TSBigIntKeyword",
	        "TSBooleanKeyword",
	        "TSNeverKeyword",
	        "TSNullKeyword",
	        "TSNumberKeyword",
	        "TSObjectKeyword",
	        "TSStringKeyword",
	        "TSSymbolKeyword",
	        "TSUndefinedKeyword",
	        "TSUnknownKeyword",
	        "TSVoidKeyword",
	        "TSThisType",
	    ].forEach(function (keywordType) {
	        def(keywordType)
	            .bases("TSType")
	            .build();
	    });
	    def("TSArrayType")
	        .bases("TSType")
	        .build("elementType")
	        .field("elementType", def("TSType"));
	    def("TSLiteralType")
	        .bases("TSType")
	        .build("literal")
	        .field("literal", or(def("NumericLiteral"), def("StringLiteral"), def("BooleanLiteral"), def("TemplateLiteral"), def("UnaryExpression")));
	    ["TSUnionType",
	        "TSIntersectionType",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("TSType")
	            .build("types")
	            .field("types", [def("TSType")]);
	    });
	    def("TSConditionalType")
	        .bases("TSType")
	        .build("checkType", "extendsType", "trueType", "falseType")
	        .field("checkType", def("TSType"))
	        .field("extendsType", def("TSType"))
	        .field("trueType", def("TSType"))
	        .field("falseType", def("TSType"));
	    def("TSInferType")
	        .bases("TSType")
	        .build("typeParameter")
	        .field("typeParameter", def("TSTypeParameter"));
	    def("TSParenthesizedType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    var ParametersType = [or(def("Identifier"), def("RestElement"), def("ArrayPattern"), def("ObjectPattern"))];
	    ["TSFunctionType",
	        "TSConstructorType",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	            .build("parameters")
	            .field("parameters", ParametersType);
	    });
	    def("TSDeclareFunction")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "params", "returnType")
	        .field("declare", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("params", [def("Pattern")])
	        // tSFunctionTypeAnnotationCommon
	        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
	    null), defaults["null"]);
	    def("TSDeclareMethod")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("key", "params", "returnType")
	        .field("async", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("params", [def("Pattern")])
	        // classMethodOrPropertyCommon
	        .field("abstract", Boolean, defaults["false"])
	        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("static", Boolean, defaults["false"])
	        .field("computed", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("key", or(def("Identifier"), def("StringLiteral"), def("NumericLiteral"), 
	    // Only allowed if .computed is true.
	    def("Expression")))
	        // classMethodOrDeclareMethodCommon
	        .field("kind", or("get", "set", "method", "constructor"), function getDefault() { return "method"; })
	        .field("access", // Not "accessibility"?
	    or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("decorators", or([def("Decorator")], null), defaults["null"])
	        // tSFunctionTypeAnnotationCommon
	        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
	    null), defaults["null"]);
	    def("TSMappedType")
	        .bases("TSType")
	        .build("typeParameter", "typeAnnotation")
	        .field("readonly", or(Boolean, "+", "-"), defaults["false"])
	        .field("typeParameter", def("TSTypeParameter"))
	        .field("optional", or(Boolean, "+", "-"), defaults["false"])
	        .field("typeAnnotation", or(def("TSType"), null), defaults["null"]);
	    def("TSTupleType")
	        .bases("TSType")
	        .build("elementTypes")
	        .field("elementTypes", [def("TSType")]);
	    def("TSRestType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    def("TSOptionalType")
	        .bases("TSType")
	        .build("typeAnnotation")
	        .field("typeAnnotation", def("TSType"));
	    def("TSIndexedAccessType")
	        .bases("TSType")
	        .build("objectType", "indexType")
	        .field("objectType", def("TSType"))
	        .field("indexType", def("TSType"));
	    def("TSTypeOperator")
	        .bases("TSType")
	        .build("operator")
	        .field("operator", String)
	        .field("typeAnnotation", def("TSType"));
	    def("TSTypeAnnotation")
	        .bases("Node")
	        .build("typeAnnotation")
	        .field("typeAnnotation", or(def("TSType"), def("TSTypeAnnotation")));
	    def("TSIndexSignature")
	        .bases("Declaration", "TSHasOptionalTypeAnnotation")
	        .build("parameters", "typeAnnotation")
	        .field("parameters", [def("Identifier")]) // Length === 1
	        .field("readonly", Boolean, defaults["false"]);
	    def("TSPropertySignature")
	        .bases("Declaration", "TSHasOptionalTypeAnnotation")
	        .build("key", "typeAnnotation", "optional")
	        .field("key", def("Expression"))
	        .field("computed", Boolean, defaults["false"])
	        .field("readonly", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSMethodSignature")
	        .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	        .build("key", "parameters", "typeAnnotation")
	        .field("key", def("Expression"))
	        .field("computed", Boolean, defaults["false"])
	        .field("optional", Boolean, defaults["false"])
	        .field("parameters", ParametersType);
	    def("TSTypePredicate")
	        .bases("TSTypeAnnotation")
	        .build("parameterName", "typeAnnotation")
	        .field("parameterName", or(def("Identifier"), def("TSThisType")))
	        .field("typeAnnotation", def("TSTypeAnnotation"));
	    ["TSCallSignatureDeclaration",
	        "TSConstructSignatureDeclaration",
	    ].forEach(function (typeName) {
	        def(typeName)
	            .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
	            .build("parameters", "typeAnnotation")
	            .field("parameters", ParametersType);
	    });
	    def("TSEnumMember")
	        .bases("Node")
	        .build("id", "initializer")
	        .field("id", or(def("Identifier"), StringLiteral))
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSTypeQuery")
	        .bases("TSType")
	        .build("exprName")
	        .field("exprName", or(TSEntityName, def("TSImportType")));
	    // Inferred from Babylon's tsParseTypeMember method.
	    var TSTypeMember = or(def("TSCallSignatureDeclaration"), def("TSConstructSignatureDeclaration"), def("TSIndexSignature"), def("TSMethodSignature"), def("TSPropertySignature"));
	    def("TSTypeLiteral")
	        .bases("TSType")
	        .build("members")
	        .field("members", [TSTypeMember]);
	    def("TSTypeParameter")
	        .bases("Identifier")
	        .build("name", "constraint", "default")
	        .field("name", String)
	        .field("constraint", or(def("TSType"), void 0), defaults["undefined"])
	        .field("default", or(def("TSType"), void 0), defaults["undefined"]);
	    def("TSTypeAssertion")
	        .bases("Expression", "Pattern")
	        .build("typeAnnotation", "expression")
	        .field("typeAnnotation", def("TSType"))
	        .field("expression", def("Expression"))
	        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
	    def("TSTypeParameterDeclaration")
	        .bases("Declaration")
	        .build("params")
	        .field("params", [def("TSTypeParameter")]);
	    def("TSTypeParameterInstantiation")
	        .bases("Node")
	        .build("params")
	        .field("params", [def("TSType")]);
	    def("TSEnumDeclaration")
	        .bases("Declaration")
	        .build("id", "members")
	        .field("id", def("Identifier"))
	        .field("const", Boolean, defaults["false"])
	        .field("declare", Boolean, defaults["false"])
	        .field("members", [def("TSEnumMember")])
	        .field("initializer", or(def("Expression"), null), defaults["null"]);
	    def("TSTypeAliasDeclaration")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "typeAnnotation")
	        .field("id", def("Identifier"))
	        .field("declare", Boolean, defaults["false"])
	        .field("typeAnnotation", def("TSType"));
	    def("TSModuleBlock")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")]);
	    def("TSModuleDeclaration")
	        .bases("Declaration")
	        .build("id", "body")
	        .field("id", or(StringLiteral, TSEntityName))
	        .field("declare", Boolean, defaults["false"])
	        .field("global", Boolean, defaults["false"])
	        .field("body", or(def("TSModuleBlock"), def("TSModuleDeclaration"), null), defaults["null"]);
	    def("TSImportType")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("argument", "qualifier", "typeParameters")
	        .field("argument", StringLiteral)
	        .field("qualifier", or(TSEntityName, void 0), defaults["undefined"]);
	    def("TSImportEqualsDeclaration")
	        .bases("Declaration")
	        .build("id", "moduleReference")
	        .field("id", def("Identifier"))
	        .field("isExport", Boolean, defaults["false"])
	        .field("moduleReference", or(TSEntityName, def("TSExternalModuleReference")));
	    def("TSExternalModuleReference")
	        .bases("Declaration")
	        .build("expression")
	        .field("expression", StringLiteral);
	    def("TSExportAssignment")
	        .bases("Statement")
	        .build("expression")
	        .field("expression", def("Expression"));
	    def("TSNamespaceExportDeclaration")
	        .bases("Declaration")
	        .build("id")
	        .field("id", def("Identifier"));
	    def("TSInterfaceBody")
	        .bases("Node")
	        .build("body")
	        .field("body", [TSTypeMember]);
	    def("TSExpressionWithTypeArguments")
	        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
	        .build("expression", "typeParameters")
	        .field("expression", TSEntityName);
	    def("TSInterfaceDeclaration")
	        .bases("Declaration", "TSHasOptionalTypeParameters")
	        .build("id", "body")
	        .field("id", TSEntityName)
	        .field("declare", Boolean, defaults["false"])
	        .field("extends", or([def("TSExpressionWithTypeArguments")], null), defaults["null"])
	        .field("body", def("TSInterfaceBody"));
	    def("TSParameterProperty")
	        .bases("Pattern")
	        .build("parameter")
	        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
	        .field("readonly", Boolean, defaults["false"])
	        .field("parameter", or(def("Identifier"), def("AssignmentPattern")));
	    def("ClassProperty")
	        .field("access", // Not "accessibility"?
	    or("public", "private", "protected", void 0), defaults["undefined"]);
	    // Defined already in es6 and babel-core.
	    def("ClassBody")
	        .field("body", [or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"), 
	        // Just need to add these types:
	        def("TSDeclareMethod"), TSTypeMember)]);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(typescript$1, typescript$1.exports));

	var esProposals = {exports: {}};

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var types_1 = __importDefault(types$a);
	var shared_1 = __importDefault(shared$2.exports);
	var core_1 = __importDefault(core$4.exports);
	function default_1(fork) {
	    fork.use(core_1.default);
	    var types = fork.use(types_1.default);
	    var Type = types.Type;
	    var def = types.Type.def;
	    var or = Type.or;
	    var shared = fork.use(shared_1.default);
	    var defaults = shared.defaults;
	    // https://github.com/tc39/proposal-optional-chaining
	    // `a?.b` as per https://github.com/estree/estree/issues/146
	    def("OptionalMemberExpression")
	        .bases("MemberExpression")
	        .build("object", "property", "computed", "optional")
	        .field("optional", Boolean, defaults["true"]);
	    // a?.b()
	    def("OptionalCallExpression")
	        .bases("CallExpression")
	        .build("callee", "arguments", "optional")
	        .field("optional", Boolean, defaults["true"]);
	    // https://github.com/tc39/proposal-nullish-coalescing
	    // `a ?? b` as per https://github.com/babel/babylon/pull/761/files
	    var LogicalOperator = or("||", "&&", "??");
	    def("LogicalExpression")
	        .field("operator", LogicalOperator);
	}
	exports.default = default_1;
	module.exports = exports["default"];
	}(esProposals, esProposals.exports));

	var namedTypes$1 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	(function (namedTypes) {
	})(exports.namedTypes || (exports.namedTypes = {}));
	}(namedTypes$1));

	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(main$2, "__esModule", { value: true });
	var fork_1 = __importDefault$9(fork.exports);
	var core_1$3 = __importDefault$9(core$4.exports);
	var es6_1 = __importDefault$9(es6.exports);
	var es7_1 = __importDefault$9(es7.exports);
	var es2020_1 = __importDefault$9(es2020.exports);
	var jsx_1 = __importDefault$9(jsx$1.exports);
	var flow_1 = __importDefault$9(flow$2.exports);
	var esprima_1 = __importDefault$9(esprima$2.exports);
	var babel_1 = __importDefault$9(babel.exports);
	var typescript_1 = __importDefault$9(typescript$1.exports);
	var es_proposals_1 = __importDefault$9(esProposals.exports);
	var namedTypes_1 = namedTypes$1;
	main$2.namedTypes = namedTypes_1.namedTypes;
	var _a = fork_1.default([
	    // This core module of AST types captures ES5 as it is parsed today by
	    // git://github.com/ariya/esprima.git#master.
	    core_1$3.default,
	    // Feel free to add to or remove from this list of extension modules to
	    // configure the precise type hierarchy that you need.
	    es6_1.default,
	    es7_1.default,
	    es2020_1.default,
	    jsx_1.default,
	    flow_1.default,
	    esprima_1.default,
	    babel_1.default,
	    typescript_1.default,
	    es_proposals_1.default,
	]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n$4 = _a.namedTypes, NodePath$4 = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit$3 = _a.visit;
	main$2.astNodesAreEquivalent = astNodesAreEquivalent;
	main$2.builders = builders;
	main$2.builtInTypes = builtInTypes;
	main$2.defineMethod = defineMethod;
	main$2.eachField = eachField;
	main$2.finalize = finalize;
	main$2.getBuilderName = getBuilderName;
	main$2.getFieldNames = getFieldNames;
	main$2.getFieldValue = getFieldValue;
	main$2.getSupertypeNames = getSupertypeNames;
	main$2.NodePath = NodePath$4;
	main$2.Path = Path;
	main$2.PathVisitor = PathVisitor;
	main$2.someField = someField;
	main$2.Type = Type;
	main$2.use = use;
	main$2.visit = visit$3;
	// Populate the exported fields of the namedTypes namespace, while still
	// retaining its member types.
	Object.assign(namedTypes_1.namedTypes, n$4);

	var parser$4 = {};

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init$1 () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init$1();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init$1();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$3 = {}.toString;

	var isArray$7 = Array.isArray || function (arr) {
	  return toString$3.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$1.TYPED_ARRAY_SUPPORT = window.TYPED_ARRAY_SUPPORT !== undefined
	  ? window.TYPED_ARRAY_SUPPORT
	  : true;

	function kMaxLength () {
	  return Buffer$1.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$1(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$1 (arg, encodingOrOffset, length) {
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
	    return new Buffer$1(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer$1.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$1._augment = function (arr) {
	  arr.__proto__ = Buffer$1.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString$1(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$1.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	  Buffer$1.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$1.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$1.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$1.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$1.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString$1 (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$1.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$1.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$7(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer$1.isBuffer = isBuffer$1;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$1.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$1.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$1.concat = function concat (list, length) {
	  if (!isArray$7(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$1.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$1.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$1.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$1.prototype._isBuffer = true;

	function swap$1 (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$1.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap$1(this, i, i + 1);
	  }
	  return this
	};

	Buffer$1.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap$1(this, i, i + 3);
	    swap$1(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$1.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap$1(this, i, i + 7);
	    swap$1(this, i + 1, i + 6);
	    swap$1(this, i + 2, i + 5);
	    swap$1(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$1.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$1.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$1.compare(this, b) === 0
	};

	Buffer$1.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$1.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$1.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$1.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$1.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$1.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$1.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$1(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$1(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$1(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof window.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof window.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = window.performance || {};
	performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	// Copyright Joyent, Inc. and other Node contributors.
	var formatRegExp = /%[sdj%]/g;
	function format$1(f) {
	  if (!isString$4(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect$1(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject$c(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect$1(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(window.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format$1.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect$1(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect$1.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect$1.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect$1.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect$1.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction$2(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect$1 &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString$4(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction$2(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate$1(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$6(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction$2(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate$1(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString$4(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber$1(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$4(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty$4(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$6(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber$1(arg) {
	  return typeof arg === 'number';
	}

	function isString$4(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol$2(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject$c(re) && objectToString$2(re) === '[object RegExp]';
	}

	function isObject$c(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate$1(d) {
	  return isObject$c(d) && objectToString$2(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject$c(e) &&
	      (objectToString$2(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction$2(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer(maybeBuf) {
	  return Buffer.isBuffer(maybeBuf);
	}

	function objectToString$2(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad$1(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad$1(d.getHours()),
	              pad$1(d.getMinutes()),
	              pad$1(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format$1.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject$c(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty$4(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util$j = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction$2,
	  isError: isError,
	  isDate: isDate$1,
	  isObject: isObject$c,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol$2,
	  isString: isString$4,
	  isNumber: isNumber$1,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray$6,
	  inspect: inspect$1,
	  deprecate: deprecate,
	  format: format$1,
	  debuglog: debuglog
	};

	var util$k = /*#__PURE__*/Object.freeze({
		__proto__: null,
		format: format$1,
		deprecate: deprecate,
		debuglog: debuglog,
		inspect: inspect$1,
		isArray: isArray$6,
		isBoolean: isBoolean,
		isNull: isNull,
		isNullOrUndefined: isNullOrUndefined,
		isNumber: isNumber$1,
		isString: isString$4,
		isSymbol: isSymbol$2,
		isUndefined: isUndefined,
		isRegExp: isRegExp,
		isObject: isObject$c,
		isDate: isDate$1,
		isError: isError,
		isFunction: isFunction$2,
		isPrimitive: isPrimitive,
		isBuffer: isBuffer,
		log: log,
		inherits: inherits$1,
		_extend: _extend,
		'default': util$j
	});

	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	var hasOwn$8 = Object.prototype.hasOwnProperty;

	var objectKeys$1 = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn$8.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	var pSlice = Array.prototype.slice;
	var _functionsHaveNames;
	function functionsHaveNames() {
	  if (typeof _functionsHaveNames !== 'undefined') {
	    return _functionsHaveNames;
	  }
	  return _functionsHaveNames = (function () {
	    return function foo() {}.name === 'foo';
	  }());
	}
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer$1(arrbuf)) {
	    return false;
	  }
	  if (typeof window.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	function assert$2(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!isFunction$2(func)) {
	    return;
	  }
	  if (functionsHaveNames()) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert$2.AssertionError = AssertionError;
	function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	}

	// assert.AssertionError instanceof Error
	inherits$1(AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames() || !isFunction$2(something)) {
	    return inspect$1(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert$2.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', ok);
	}
	assert$2.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	assert$2.equal = equal$1;
	function equal$1(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', equal$1);
	}

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	assert$2.notEqual = notEqual;
	function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', notEqual);
	  }
	}

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	assert$2.deepEqual = deepEqual;
	function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', deepEqual);
	  }
	}
	assert$2.deepStrictEqual = deepStrictEqual;
	function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
	  }
	}

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer$1(actual) && isBuffer$1(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (isDate$1(actual) && isDate$1(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (isRegExp(actual) && isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer$1(actual) !== isBuffer$1(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (isPrimitive(a) || isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys$1(a);
	  var kb = objectKeys$1(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	assert$2.notDeepEqual = notDeepEqual;
	function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
	  }
	}

	assert$2.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	assert$2.strictEqual = strictEqual;
	function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', strictEqual);
	  }
	}

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	assert$2.notStrictEqual = notStrictEqual;
	function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', notStrictEqual);
	  }
	}

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	assert$2.throws = throws;
	function throws(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	}

	// EXTENSION! This is annoying to write outside this module.
	assert$2.doesNotThrow = doesNotThrow;
	function doesNotThrow(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	}

	assert$2.ifError = ifError;
	function ifError(err) {
	  if (err) throw err;
	}

	var assert$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': assert$2,
		AssertionError: AssertionError,
		fail: fail,
		ok: ok,
		assert: ok,
		equal: equal$1,
		notEqual: notEqual,
		deepEqual: deepEqual,
		deepStrictEqual: deepStrictEqual,
		notDeepEqual: notDeepEqual,
		notDeepStrictEqual: notDeepStrictEqual,
		strictEqual: strictEqual,
		notStrictEqual: notStrictEqual,
		throws: throws,
		doesNotThrow: doesNotThrow,
		ifError: ifError
	});

	var require$$0$4 = /*@__PURE__*/getAugmentedNamespace(assert$3);

	var options = {};

	var esprima$1 = {};

	var util$i = {};

	var sourceMap$3 = {};

	var sourceMapGenerator$1 = {};

	var base64Vlq$1 = {};

	var base64$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$3.encode = function (number) {
	  if (0 <= number && number < intToCharMap$1.length) {
	    return intToCharMap$1[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	base64$3.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64$2 = base64$3;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT$1 = 5;

	// binary: 100000
	var VLQ_BASE$1 = 1 << VLQ_BASE_SHIFT$1;

	// binary: 011111
	var VLQ_BASE_MASK$1 = VLQ_BASE$1 - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT$1 = VLQ_BASE$1;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned$1(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned$1(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq$1.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned$1(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK$1;
	    vlq >>>= VLQ_BASE_SHIFT$1;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT$1;
	    }
	    encoded += base64$2.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	base64Vlq$1.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64$2.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT$1);
	    digit &= VLQ_BASE_MASK$1;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT$1;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned$1(result);
	  aOutParam.rest = aIndex;
	};

	var util$h = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 === null) {
	    return 1; // aStr2 !== null
	  }

	  if (aStr2 === null) {
	    return -1; // aStr1 !== null
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	/**
	 * Strip any JSON XSSI avoidance prefix from the string (as documented
	 * in the source maps specification), and then parse the string as
	 * JSON.
	 */
	function parseSourceMapInput(str) {
	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
	}
	exports.parseSourceMapInput = parseSourceMapInput;

	/**
	 * Compute the URL of a source given the the source root, the source's
	 * URL, and the source map's URL.
	 */
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
	  sourceURL = sourceURL || '';

	  if (sourceRoot) {
	    // This follows what Chrome does.
	    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
	      sourceRoot += '/';
	    }
	    // The spec says:
	    //   Line 4: An optional source root, useful for relocating source
	    //   files on a server or removing repeated values in the
	    //   “sources” entry.  This value is prepended to the individual
	    //   entries in the “source” field.
	    sourceURL = sourceRoot + sourceURL;
	  }

	  // Historically, SourceMapConsumer did not take the sourceMapURL as
	  // a parameter.  This mode is still somewhat supported, which is why
	  // this code block is conditional.  However, it's preferable to pass
	  // the source map URL to SourceMapConsumer, so that this function
	  // can implement the source URL resolution algorithm as outlined in
	  // the spec.  This block is basically the equivalent of:
	  //    new URL(sourceURL, sourceMapURL).toString()
	  // ... except it avoids using URL, which wasn't available in the
	  // older releases of node still supported by this library.
	  //
	  // The spec says:
	  //   If the sources are not absolute URLs after prepending of the
	  //   “sourceRoot”, the sources are resolved relative to the
	  //   SourceMap (like resolving script src in a html document).
	  if (sourceMapURL) {
	    var parsed = urlParse(sourceMapURL);
	    if (!parsed) {
	      throw new Error("sourceMapURL could not be parsed");
	    }
	    if (parsed.path) {
	      // Strip the last path component, but keep the "/".
	      var index = parsed.path.lastIndexOf('/');
	      if (index >= 0) {
	        parsed.path = parsed.path.substring(0, index + 1);
	      }
	    }
	    sourceURL = join(urlGenerate(parsed), sourceURL);
	  }

	  return normalize(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL;
	}(util$h));

	var arraySet$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$g = util$h;
	var has$1 = Object.prototype.hasOwnProperty;
	var hasNativeMap$1 = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet$5() {
	  this._array = [];
	  this._set = hasNativeMap$1 ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet$5.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet$5();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet$5.prototype.size = function ArraySet_size() {
	  return hasNativeMap$1 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap$1 ? aStr : util$g.toSetString(aStr);
	  var isDuplicate = hasNativeMap$1 ? this.has(aStr) : has$1.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap$1) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap$1) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util$g.toSetString(aStr);
	    return has$1.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet$5.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap$1) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util$g.toSetString(aStr);
	    if (has$1.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet$5.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet$5.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	arraySet$1.ArraySet = ArraySet$5;

	var mappingList$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$f = util$h;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter$1(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$f.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList$3() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList$3.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList$3.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter$1(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList$3.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util$f.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	mappingList$1.MappingList = MappingList$3;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ$3 = base64Vlq$1;
	var util$e = util$h;
	var ArraySet$4 = arraySet$1.ArraySet;
	var MappingList$2 = mappingList$1.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator$8(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util$e.getArg(aArgs, 'file', null);
	  this._sourceRoot = util$e.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util$e.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet$4();
	  this._names = new ArraySet$4();
	  this._mappings = new MappingList$2();
	  this._sourcesContents = null;
	}

	SourceMapGenerator$8.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator$8.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator$8({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$e.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var sourceRelative = sourceFile;
	      if (sourceRoot !== null) {
	        sourceRelative = util$e.relative(sourceRoot, sourceFile);
	      }

	      if (!generator._sources.has(sourceRelative)) {
	        generator._sources.add(sourceRelative);
	      }

	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator$8.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util$e.getArg(aArgs, 'generated');
	    var original = util$e.getArg(aArgs, 'original', null);
	    var source = util$e.getArg(aArgs, 'source', null);
	    var name = util$e.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator$8.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$e.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$e.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$e.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator$8.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$e.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet$4();
	    var newNames = new ArraySet$4();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$e.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$e.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util$e.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util$e.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator$8.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator$8.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util$e.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ$3.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$3.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$3.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$3.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$3.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator$8.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$e.relative(aSourceRoot, source);
	      }
	      var key = util$e.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator$8.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator$8.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	sourceMapGenerator$1.SourceMapGenerator = SourceMapGenerator$8;

	var sourceMapConsumer$1 = {};

	var binarySearch$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$3));

	var quickSort$3 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;

	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }

	    swap(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	quickSort$3.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$d = util$h;
	var binarySearch$2 = binarySearch$3;
	var ArraySet$3 = arraySet$1.ArraySet;
	var base64VLQ$2 = base64Vlq$1;
	var quickSort$2 = quickSort$3.quickSort;

	function SourceMapConsumer$6(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$d.parseSourceMapInput(aSourceMap);
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer$1(sourceMap, aSourceMapURL)
	    : new BasicSourceMapConsumer$1(sourceMap, aSourceMapURL);
	}

	SourceMapConsumer$6.fromSourceMap = function(aSourceMap, aSourceMapURL) {
	  return BasicSourceMapConsumer$1.fromSourceMap(aSourceMap, aSourceMapURL);
	};

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer$6.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer$6.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$6.prototype, '_generatedMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer$6.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$6.prototype, '_originalMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer$6.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer$6.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer$6.GENERATED_ORDER = 1;
	SourceMapConsumer$6.ORIGINAL_ORDER = 2;

	SourceMapConsumer$6.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$6.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer$6.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer$6.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer$6.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer$6.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      source = util$d.computeSourceURL(sourceRoot, source, this._sourceMapURL);
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number is 1-based.
	 *   - column: Optional. the column number in the original source.
	 *    The column number is 0-based.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *    line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *    The column number is 0-based.
	 */
	SourceMapConsumer$6.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util$d.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util$d.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util$d.getArg(aArgs, 'column', 0)
	    };

	    needle.source = this._findSourceIndex(needle.source);
	    if (needle.source < 0) {
	      return [];
	    }

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$d.compareByOriginalPositions,
	                                  binarySearch$2.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util$d.getArg(mapping, 'generatedLine', null),
	            column: util$d.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$d.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util$d.getArg(mapping, 'generatedLine', null),
	            column: util$d.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$d.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	sourceMapConsumer$1.SourceMapConsumer = SourceMapConsumer$6;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The first parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$d.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$d.getArg(sourceMap, 'version');
	  var sources = util$d.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util$d.getArg(sourceMap, 'names', []);
	  var sourceRoot = util$d.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util$d.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util$d.getArg(sourceMap, 'mappings');
	  var file = util$d.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  if (sourceRoot) {
	    sourceRoot = util$d.normalize(sourceRoot);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util$d.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util$d.isAbsolute(sourceRoot) && util$d.isAbsolute(source)
	        ? util$d.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet$3.fromArray(names.map(String), true);
	  this._sources = ArraySet$3.fromArray(sources, true);

	  this._absoluteSources = this._sources.toArray().map(function (s) {
	    return util$d.computeSourceURL(sourceRoot, s, aSourceMapURL);
	  });

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this._sourceMapURL = aSourceMapURL;
	  this.file = file;
	}

	BasicSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$6.prototype);
	BasicSourceMapConsumer$1.prototype.consumer = SourceMapConsumer$6;

	/**
	 * Utility function to find the index of a source.  Returns -1 if not
	 * found.
	 */
	BasicSourceMapConsumer$1.prototype._findSourceIndex = function(aSource) {
	  var relativeSource = aSource;
	  if (this.sourceRoot != null) {
	    relativeSource = util$d.relative(this.sourceRoot, relativeSource);
	  }

	  if (this._sources.has(relativeSource)) {
	    return this._sources.indexOf(relativeSource);
	  }

	  // Maybe aSource is an absolute URL as returned by |sources|.  In
	  // this case we can't simply undo the transform.
	  var i;
	  for (i = 0; i < this._absoluteSources.length; ++i) {
	    if (this._absoluteSources[i] == aSource) {
	      return i;
	    }
	  }

	  return -1;
	};

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @param String aSourceMapURL
	 *        The URL at which the source map can be found (optional)
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer$1.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
	    var smc = Object.create(BasicSourceMapConsumer$1.prototype);

	    var names = smc._names = ArraySet$3.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet$3.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	    smc._sourceMapURL = aSourceMapURL;
	    smc._absoluteSources = smc._sources.toArray().map(function (s) {
	      return util$d.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
	    });

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping$2;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort$2(smc.__originalMappings, util$d.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer$1.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer$1.prototype, 'sources', {
	  get: function () {
	    return this._absoluteSources.slice();
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping$2() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer$1.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;

	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping$2();
	        mapping.generatedLine = generatedLine;

	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);

	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ$2.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }

	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }

	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }

	          cachedSegments[str] = segment;
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }

	    quickSort$2(generatedMappings, util$d.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;

	    quickSort$2(originalMappings, util$d.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer$1.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch$2.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer$1.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer$1.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$d.getArg(aArgs, 'line'),
	      generatedColumn: util$d.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util$d.compareByGeneratedPositionsDeflated,
	      util$d.getArg(aArgs, 'bias', SourceMapConsumer$6.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util$d.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          source = util$d.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
	        }
	        var name = util$d.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util$d.getArg(mapping, 'originalLine', null),
	          column: util$d.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer$1.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer$1.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    var index = this._findSourceIndex(aSource);
	    if (index >= 0) {
	      return this.sourcesContent[index];
	    }

	    var relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util$d.relative(this.sourceRoot, relativeSource);
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util$d.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + relativeSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	BasicSourceMapConsumer$1.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util$d.getArg(aArgs, 'source');
	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }

	    var needle = {
	      source: source,
	      originalLine: util$d.getArg(aArgs, 'line'),
	      originalColumn: util$d.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util$d.compareByOriginalPositions,
	      util$d.getArg(aArgs, 'bias', SourceMapConsumer$6.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util$d.getArg(mapping, 'generatedLine', null),
	          column: util$d.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util$d.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	sourceMapConsumer$1.BasicSourceMapConsumer = BasicSourceMapConsumer$1;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The first parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$d.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$d.getArg(sourceMap, 'version');
	  var sections = util$d.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet$3();
	  this._names = new ArraySet$3();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util$d.getArg(s, 'offset');
	    var offsetLine = util$d.getArg(offset, 'line');
	    var offsetColumn = util$d.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer$6(util$d.getArg(s, 'map'), aSourceMapURL)
	    }
	  });
	}

	IndexedSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$6.prototype);
	IndexedSourceMapConsumer$1.prototype.constructor = SourceMapConsumer$6;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer$1.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer$1.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer$1.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$d.getArg(aArgs, 'line'),
	      generatedColumn: util$d.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch$2.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer$1.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer$1.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based. 
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	IndexedSourceMapConsumer$1.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer._findSourceIndex(util$d.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer$1.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        source = util$d.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = null;
	        if (mapping.name) {
	          name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	        }

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort$2(this.__generatedMappings, util$d.compareByGeneratedPositionsDeflated);
	    quickSort$2(this.__originalMappings, util$d.compareByOriginalPositions);
	  };

	sourceMapConsumer$1.IndexedSourceMapConsumer = IndexedSourceMapConsumer$1;

	var sourceNode$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator$7 = sourceMapGenerator$1.SourceMapGenerator;
	var util$c = util$h;

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE$1 = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE$1 = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode$1 = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode$1(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode$1] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode$1.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode$1();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE$1);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex] || '';
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex] || '';
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util$c.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util$c.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode$1(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$1.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode$1.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$1.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode$1]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode$1.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode$1.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode$1]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode$1.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util$c.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode$1.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode$1]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util$c.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode$1.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode$1.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator$7(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE$1) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	sourceNode$1.SourceNode = SourceNode$1;

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	sourceMap$3.SourceMapGenerator = sourceMapGenerator$1.SourceMapGenerator;
	sourceMap$3.SourceMapConsumer = sourceMapConsumer$1.SourceMapConsumer;
	sourceMap$3.SourceNode = sourceNode$1.SourceNode;

	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(util$i, "__esModule", { value: true });
	var assert_1$7 = __importDefault$8(require$$0$4);
	var types$9 = __importStar$6(main$2);
	var n$3 = types$9.namedTypes;
	var source_map_1$1 = __importDefault$8(sourceMap$3);
	var SourceMapConsumer$5 = source_map_1$1.default.SourceMapConsumer;
	var SourceMapGenerator$6 = source_map_1$1.default.SourceMapGenerator;
	var hasOwn$7 = Object.prototype.hasOwnProperty;
	function getOption(options, key, defaultValue) {
	    if (options && hasOwn$7.call(options, key)) {
	        return options[key];
	    }
	    return defaultValue;
	}
	util$i.getOption = getOption;
	function getUnionOfKeys() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var result = {};
	    var argc = args.length;
	    for (var i = 0; i < argc; ++i) {
	        var keys = Object.keys(args[i]);
	        var keyCount = keys.length;
	        for (var j = 0; j < keyCount; ++j) {
	            result[keys[j]] = true;
	        }
	    }
	    return result;
	}
	util$i.getUnionOfKeys = getUnionOfKeys;
	function comparePos(pos1, pos2) {
	    return (pos1.line - pos2.line) || (pos1.column - pos2.column);
	}
	util$i.comparePos = comparePos;
	function copyPos(pos) {
	    return {
	        line: pos.line,
	        column: pos.column
	    };
	}
	util$i.copyPos = copyPos;
	function composeSourceMaps(formerMap, latterMap) {
	    if (formerMap) {
	        if (!latterMap) {
	            return formerMap;
	        }
	    }
	    else {
	        return latterMap || null;
	    }
	    var smcFormer = new SourceMapConsumer$5(formerMap);
	    var smcLatter = new SourceMapConsumer$5(latterMap);
	    var smg = new SourceMapGenerator$6({
	        file: latterMap.file,
	        sourceRoot: latterMap.sourceRoot
	    });
	    var sourcesToContents = {};
	    smcLatter.eachMapping(function (mapping) {
	        var origPos = smcFormer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	        });
	        var sourceName = origPos.source;
	        if (sourceName === null) {
	            return;
	        }
	        smg.addMapping({
	            source: sourceName,
	            original: copyPos(origPos),
	            generated: {
	                line: mapping.generatedLine,
	                column: mapping.generatedColumn
	            },
	            name: mapping.name
	        });
	        var sourceContent = smcFormer.sourceContentFor(sourceName);
	        if (sourceContent && !hasOwn$7.call(sourcesToContents, sourceName)) {
	            sourcesToContents[sourceName] = sourceContent;
	            smg.setSourceContent(sourceName, sourceContent);
	        }
	    });
	    return smg.toJSON();
	}
	util$i.composeSourceMaps = composeSourceMaps;
	function getTrueLoc(node, lines) {
	    // It's possible that node is newly-created (not parsed by Esprima),
	    // in which case it probably won't have a .loc property (or an
	    // .original property for that matter). That's fine; we'll just
	    // pretty-print it as usual.
	    if (!node.loc) {
	        return null;
	    }
	    var result = {
	        start: node.loc.start,
	        end: node.loc.end
	    };
	    function include(node) {
	        expandLoc(result, node.loc);
	    }
	    // If the node is an export declaration and its .declaration has any
	    // decorators, their locations might contribute to the true start/end
	    // positions of the export declaration node.
	    if (node.declaration &&
	        node.declaration.decorators &&
	        isExportDeclaration(node)) {
	        node.declaration.decorators.forEach(include);
	    }
	    if (comparePos(result.start, result.end) < 0) {
	        // Trim leading whitespace.
	        result.start = copyPos(result.start);
	        lines.skipSpaces(result.start, false, true);
	        if (comparePos(result.start, result.end) < 0) {
	            // Trim trailing whitespace, if the end location is not already the
	            // same as the start location.
	            result.end = copyPos(result.end);
	            lines.skipSpaces(result.end, true, true);
	        }
	    }
	    // If the node has any comments, their locations might contribute to
	    // the true start/end positions of the node.
	    if (node.comments) {
	        node.comments.forEach(include);
	    }
	    return result;
	}
	util$i.getTrueLoc = getTrueLoc;
	function expandLoc(parentLoc, childLoc) {
	    if (parentLoc && childLoc) {
	        if (comparePos(childLoc.start, parentLoc.start) < 0) {
	            parentLoc.start = childLoc.start;
	        }
	        if (comparePos(parentLoc.end, childLoc.end) < 0) {
	            parentLoc.end = childLoc.end;
	        }
	    }
	}
	function fixFaultyLocations(node, lines) {
	    var loc = node.loc;
	    if (loc) {
	        if (loc.start.line < 1) {
	            loc.start.line = 1;
	        }
	        if (loc.end.line < 1) {
	            loc.end.line = 1;
	        }
	    }
	    if (node.type === "File") {
	        // Babylon returns File nodes whose .loc.{start,end} do not include
	        // leading or trailing whitespace.
	        loc.start = lines.firstPos();
	        loc.end = lines.lastPos();
	    }
	    fixForLoopHead(node, lines);
	    fixTemplateLiteral(node, lines);
	    if (loc && node.decorators) {
	        // Expand the .loc of the node responsible for printing the decorators
	        // (here, the decorated node) so that it includes node.decorators.
	        node.decorators.forEach(function (decorator) {
	            expandLoc(loc, decorator.loc);
	        });
	    }
	    else if (node.declaration && isExportDeclaration(node)) {
	        // Nullify .loc information for the child declaration so that we never
	        // try to reprint it without also reprinting the export declaration.
	        node.declaration.loc = null;
	        // Expand the .loc of the node responsible for printing the decorators
	        // (here, the export declaration) so that it includes node.decorators.
	        var decorators = node.declaration.decorators;
	        if (decorators) {
	            decorators.forEach(function (decorator) {
	                expandLoc(loc, decorator.loc);
	            });
	        }
	    }
	    else if ((n$3.MethodDefinition && n$3.MethodDefinition.check(node)) ||
	        (n$3.Property.check(node) && (node.method || node.shorthand))) {
	        // If the node is a MethodDefinition or a .method or .shorthand
	        // Property, then the location information stored in
	        // node.value.loc is very likely untrustworthy (just the {body}
	        // part of a method, or nothing in the case of shorthand
	        // properties), so we null out that information to prevent
	        // accidental reuse of bogus source code during reprinting.
	        node.value.loc = null;
	        if (n$3.FunctionExpression.check(node.value)) {
	            // FunctionExpression method values should be anonymous,
	            // because their .id fields are ignored anyway.
	            node.value.id = null;
	        }
	    }
	    else if (node.type === "ObjectTypeProperty") {
	        var loc = node.loc;
	        var end = loc && loc.end;
	        if (end) {
	            end = copyPos(end);
	            if (lines.prevPos(end) &&
	                lines.charAt(end) === ",") {
	                // Some parsers accidentally include trailing commas in the
	                // .loc.end information for ObjectTypeProperty nodes.
	                if ((end = lines.skipSpaces(end, true, true))) {
	                    loc.end = end;
	                }
	            }
	        }
	    }
	}
	util$i.fixFaultyLocations = fixFaultyLocations;
	function fixForLoopHead(node, lines) {
	    if (node.type !== "ForStatement") {
	        return;
	    }
	    function fix(child) {
	        var loc = child && child.loc;
	        var start = loc && loc.start;
	        var end = loc && copyPos(loc.end);
	        while (start && end && comparePos(start, end) < 0) {
	            lines.prevPos(end);
	            if (lines.charAt(end) === ";") {
	                // Update child.loc.end to *exclude* the ';' character.
	                loc.end.line = end.line;
	                loc.end.column = end.column;
	            }
	            else {
	                break;
	            }
	        }
	    }
	    fix(node.init);
	    fix(node.test);
	    fix(node.update);
	}
	function fixTemplateLiteral(node, lines) {
	    if (node.type !== "TemplateLiteral") {
	        return;
	    }
	    if (node.quasis.length === 0) {
	        // If there are no quasi elements, then there is nothing to fix.
	        return;
	    }
	    // node.loc is not present when using export default with a template literal
	    if (node.loc) {
	        // First we need to exclude the opening ` from the .loc of the first
	        // quasi element, in case the parser accidentally decided to include it.
	        var afterLeftBackTickPos = copyPos(node.loc.start);
	        assert_1$7.default.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
	        assert_1$7.default.ok(lines.nextPos(afterLeftBackTickPos));
	        var firstQuasi = node.quasis[0];
	        if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
	            firstQuasi.loc.start = afterLeftBackTickPos;
	        }
	        // Next we need to exclude the closing ` from the .loc of the last quasi
	        // element, in case the parser accidentally decided to include it.
	        var rightBackTickPos = copyPos(node.loc.end);
	        assert_1$7.default.ok(lines.prevPos(rightBackTickPos));
	        assert_1$7.default.strictEqual(lines.charAt(rightBackTickPos), "`");
	        var lastQuasi = node.quasis[node.quasis.length - 1];
	        if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
	            lastQuasi.loc.end = rightBackTickPos;
	        }
	    }
	    // Now we need to exclude ${ and } characters from the .loc's of all
	    // quasi elements, since some parsers accidentally include them.
	    node.expressions.forEach(function (expr, i) {
	        // Rewind from expr.loc.start over any whitespace and the ${ that
	        // precedes the expression. The position of the $ should be the same
	        // as the .loc.end of the preceding quasi element, but some parsers
	        // accidentally include the ${ in the .loc of the quasi element.
	        var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
	        if (lines.prevPos(dollarCurlyPos) &&
	            lines.charAt(dollarCurlyPos) === "{" &&
	            lines.prevPos(dollarCurlyPos) &&
	            lines.charAt(dollarCurlyPos) === "$") {
	            var quasiBefore = node.quasis[i];
	            if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
	                quasiBefore.loc.end = dollarCurlyPos;
	            }
	        }
	        // Likewise, some parsers accidentally include the } that follows
	        // the expression in the .loc of the following quasi element.
	        var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
	        if (lines.charAt(rightCurlyPos) === "}") {
	            assert_1$7.default.ok(lines.nextPos(rightCurlyPos));
	            // Now rightCurlyPos is technically the position just after the }.
	            var quasiAfter = node.quasis[i + 1];
	            if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
	                quasiAfter.loc.start = rightCurlyPos;
	            }
	        }
	    });
	}
	function isExportDeclaration(node) {
	    if (node)
	        switch (node.type) {
	            case "ExportDeclaration":
	            case "ExportDefaultDeclaration":
	            case "ExportDefaultSpecifier":
	            case "DeclareExportDeclaration":
	            case "ExportNamedDeclaration":
	            case "ExportAllDeclaration":
	                return true;
	        }
	    return false;
	}
	util$i.isExportDeclaration = isExportDeclaration;
	function getParentExportDeclaration(path) {
	    var parentNode = path.getParentNode();
	    if (path.getName() === "declaration" &&
	        isExportDeclaration(parentNode)) {
	        return parentNode;
	    }
	    return null;
	}
	util$i.getParentExportDeclaration = getParentExportDeclaration;
	function isTrailingCommaEnabled(options, context) {
	    var trailingComma = options.trailingComma;
	    if (typeof trailingComma === "object") {
	        return !!trailingComma[context];
	    }
	    return !!trailingComma;
	}
	util$i.isTrailingCommaEnabled = isTrailingCommaEnabled;

	var esprima = {exports: {}};

	(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
	/* istanbul ignore next */
		module.exports = factory();
	})(commonjsGlobal, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/* istanbul ignore if */
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
		/*
		  Copyright JS Foundation and other contributors, https://js.foundation/

		  Redistribution and use in source and binary forms, with or without
		  modification, are permitted provided that the following conditions are met:

		    * Redistributions of source code must retain the above copyright
		      notice, this list of conditions and the following disclaimer.
		    * Redistributions in binary form must reproduce the above copyright
		      notice, this list of conditions and the following disclaimer in the
		      documentation and/or other materials provided with the distribution.

		  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
		  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
		  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
		  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
		  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
		  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
		  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
		  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/
		Object.defineProperty(exports, "__esModule", { value: true });
		var comment_handler_1 = __webpack_require__(1);
		var jsx_parser_1 = __webpack_require__(3);
		var parser_1 = __webpack_require__(8);
		var tokenizer_1 = __webpack_require__(15);
		function parse(code, options, delegate) {
		    var commentHandler = null;
		    var proxyDelegate = function (node, metadata) {
		        if (delegate) {
		            delegate(node, metadata);
		        }
		        if (commentHandler) {
		            commentHandler.visit(node, metadata);
		        }
		    };
		    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
		    var collectComment = false;
		    if (options) {
		        collectComment = (typeof options.comment === 'boolean' && options.comment);
		        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
		        if (collectComment || attachComment) {
		            commentHandler = new comment_handler_1.CommentHandler();
		            commentHandler.attach = attachComment;
		            options.comment = true;
		            parserDelegate = proxyDelegate;
		        }
		    }
		    var isModule = false;
		    if (options && typeof options.sourceType === 'string') {
		        isModule = (options.sourceType === 'module');
		    }
		    var parser;
		    if (options && typeof options.jsx === 'boolean' && options.jsx) {
		        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
		    }
		    else {
		        parser = new parser_1.Parser(code, options, parserDelegate);
		    }
		    var program = isModule ? parser.parseModule() : parser.parseScript();
		    var ast = program;
		    if (collectComment && commentHandler) {
		        ast.comments = commentHandler.comments;
		    }
		    if (parser.config.tokens) {
		        ast.tokens = parser.tokens;
		    }
		    if (parser.config.tolerant) {
		        ast.errors = parser.errorHandler.errors;
		    }
		    return ast;
		}
		exports.parse = parse;
		function parseModule(code, options, delegate) {
		    var parsingOptions = options || {};
		    parsingOptions.sourceType = 'module';
		    return parse(code, parsingOptions, delegate);
		}
		exports.parseModule = parseModule;
		function parseScript(code, options, delegate) {
		    var parsingOptions = options || {};
		    parsingOptions.sourceType = 'script';
		    return parse(code, parsingOptions, delegate);
		}
		exports.parseScript = parseScript;
		function tokenize(code, options, delegate) {
		    var tokenizer = new tokenizer_1.Tokenizer(code, options);
		    var tokens;
		    tokens = [];
		    try {
		        while (true) {
		            var token = tokenizer.getNextToken();
		            if (!token) {
		                break;
		            }
		            if (delegate) {
		                token = delegate(token);
		            }
		            tokens.push(token);
		        }
		    }
		    catch (e) {
		        tokenizer.errorHandler.tolerate(e);
		    }
		    if (tokenizer.errorHandler.tolerant) {
		        tokens.errors = tokenizer.errors();
		    }
		    return tokens;
		}
		exports.tokenize = tokenize;
		var syntax_1 = __webpack_require__(2);
		exports.Syntax = syntax_1.Syntax;
		// Sync with *.json manifests.
		exports.version = '4.0.1';


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var syntax_1 = __webpack_require__(2);
		var CommentHandler = (function () {
		    function CommentHandler() {
		        this.attach = false;
		        this.comments = [];
		        this.stack = [];
		        this.leading = [];
		        this.trailing = [];
		    }
		    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
		        //  innnerComments for properties empty block
		        //  `function a() {/** comments **\/}`
		        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
		            var innerComments = [];
		            for (var i = this.leading.length - 1; i >= 0; --i) {
		                var entry = this.leading[i];
		                if (metadata.end.offset >= entry.start) {
		                    innerComments.unshift(entry.comment);
		                    this.leading.splice(i, 1);
		                    this.trailing.splice(i, 1);
		                }
		            }
		            if (innerComments.length) {
		                node.innerComments = innerComments;
		            }
		        }
		    };
		    CommentHandler.prototype.findTrailingComments = function (metadata) {
		        var trailingComments = [];
		        if (this.trailing.length > 0) {
		            for (var i = this.trailing.length - 1; i >= 0; --i) {
		                var entry_1 = this.trailing[i];
		                if (entry_1.start >= metadata.end.offset) {
		                    trailingComments.unshift(entry_1.comment);
		                }
		            }
		            this.trailing.length = 0;
		            return trailingComments;
		        }
		        var entry = this.stack[this.stack.length - 1];
		        if (entry && entry.node.trailingComments) {
		            var firstComment = entry.node.trailingComments[0];
		            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
		                trailingComments = entry.node.trailingComments;
		                delete entry.node.trailingComments;
		            }
		        }
		        return trailingComments;
		    };
		    CommentHandler.prototype.findLeadingComments = function (metadata) {
		        var leadingComments = [];
		        var target;
		        while (this.stack.length > 0) {
		            var entry = this.stack[this.stack.length - 1];
		            if (entry && entry.start >= metadata.start.offset) {
		                target = entry.node;
		                this.stack.pop();
		            }
		            else {
		                break;
		            }
		        }
		        if (target) {
		            var count = target.leadingComments ? target.leadingComments.length : 0;
		            for (var i = count - 1; i >= 0; --i) {
		                var comment = target.leadingComments[i];
		                if (comment.range[1] <= metadata.start.offset) {
		                    leadingComments.unshift(comment);
		                    target.leadingComments.splice(i, 1);
		                }
		            }
		            if (target.leadingComments && target.leadingComments.length === 0) {
		                delete target.leadingComments;
		            }
		            return leadingComments;
		        }
		        for (var i = this.leading.length - 1; i >= 0; --i) {
		            var entry = this.leading[i];
		            if (entry.start <= metadata.start.offset) {
		                leadingComments.unshift(entry.comment);
		                this.leading.splice(i, 1);
		            }
		        }
		        return leadingComments;
		    };
		    CommentHandler.prototype.visitNode = function (node, metadata) {
		        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
		            return;
		        }
		        this.insertInnerComments(node, metadata);
		        var trailingComments = this.findTrailingComments(metadata);
		        var leadingComments = this.findLeadingComments(metadata);
		        if (leadingComments.length > 0) {
		            node.leadingComments = leadingComments;
		        }
		        if (trailingComments.length > 0) {
		            node.trailingComments = trailingComments;
		        }
		        this.stack.push({
		            node: node,
		            start: metadata.start.offset
		        });
		    };
		    CommentHandler.prototype.visitComment = function (node, metadata) {
		        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
		        var comment = {
		            type: type,
		            value: node.value
		        };
		        if (node.range) {
		            comment.range = node.range;
		        }
		        if (node.loc) {
		            comment.loc = node.loc;
		        }
		        this.comments.push(comment);
		        if (this.attach) {
		            var entry = {
		                comment: {
		                    type: type,
		                    value: node.value,
		                    range: [metadata.start.offset, metadata.end.offset]
		                },
		                start: metadata.start.offset
		            };
		            if (node.loc) {
		                entry.comment.loc = node.loc;
		            }
		            node.type = type;
		            this.leading.push(entry);
		            this.trailing.push(entry);
		        }
		    };
		    CommentHandler.prototype.visit = function (node, metadata) {
		        if (node.type === 'LineComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (node.type === 'BlockComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (this.attach) {
		            this.visitNode(node, metadata);
		        }
		    };
		    return CommentHandler;
		}());
		exports.CommentHandler = CommentHandler;


	/***/ },
	/* 2 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Syntax = {
		    AssignmentExpression: 'AssignmentExpression',
		    AssignmentPattern: 'AssignmentPattern',
		    ArrayExpression: 'ArrayExpression',
		    ArrayPattern: 'ArrayPattern',
		    ArrowFunctionExpression: 'ArrowFunctionExpression',
		    AwaitExpression: 'AwaitExpression',
		    BlockStatement: 'BlockStatement',
		    BinaryExpression: 'BinaryExpression',
		    BreakStatement: 'BreakStatement',
		    CallExpression: 'CallExpression',
		    CatchClause: 'CatchClause',
		    ClassBody: 'ClassBody',
		    ClassDeclaration: 'ClassDeclaration',
		    ClassExpression: 'ClassExpression',
		    ConditionalExpression: 'ConditionalExpression',
		    ContinueStatement: 'ContinueStatement',
		    DoWhileStatement: 'DoWhileStatement',
		    DebuggerStatement: 'DebuggerStatement',
		    EmptyStatement: 'EmptyStatement',
		    ExportAllDeclaration: 'ExportAllDeclaration',
		    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
		    ExportNamedDeclaration: 'ExportNamedDeclaration',
		    ExportSpecifier: 'ExportSpecifier',
		    ExpressionStatement: 'ExpressionStatement',
		    ForStatement: 'ForStatement',
		    ForOfStatement: 'ForOfStatement',
		    ForInStatement: 'ForInStatement',
		    FunctionDeclaration: 'FunctionDeclaration',
		    FunctionExpression: 'FunctionExpression',
		    Identifier: 'Identifier',
		    IfStatement: 'IfStatement',
		    ImportDeclaration: 'ImportDeclaration',
		    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
		    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
		    ImportSpecifier: 'ImportSpecifier',
		    Literal: 'Literal',
		    LabeledStatement: 'LabeledStatement',
		    LogicalExpression: 'LogicalExpression',
		    MemberExpression: 'MemberExpression',
		    MetaProperty: 'MetaProperty',
		    MethodDefinition: 'MethodDefinition',
		    NewExpression: 'NewExpression',
		    ObjectExpression: 'ObjectExpression',
		    ObjectPattern: 'ObjectPattern',
		    Program: 'Program',
		    Property: 'Property',
		    RestElement: 'RestElement',
		    ReturnStatement: 'ReturnStatement',
		    SequenceExpression: 'SequenceExpression',
		    SpreadElement: 'SpreadElement',
		    Super: 'Super',
		    SwitchCase: 'SwitchCase',
		    SwitchStatement: 'SwitchStatement',
		    TaggedTemplateExpression: 'TaggedTemplateExpression',
		    TemplateElement: 'TemplateElement',
		    TemplateLiteral: 'TemplateLiteral',
		    ThisExpression: 'ThisExpression',
		    ThrowStatement: 'ThrowStatement',
		    TryStatement: 'TryStatement',
		    UnaryExpression: 'UnaryExpression',
		    UpdateExpression: 'UpdateExpression',
		    VariableDeclaration: 'VariableDeclaration',
		    VariableDeclarator: 'VariableDeclarator',
		    WhileStatement: 'WhileStatement',
		    WithStatement: 'WithStatement',
		    YieldExpression: 'YieldExpression'
		};


	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	/* istanbul ignore next */
		var __extends = (this && this.__extends) || (function () {
		    var extendStatics = Object.setPrototypeOf ||
		        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
		        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
		    return function (d, b) {
		        extendStatics(d, b);
		        function __() { this.constructor = d; }
		        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		    };
		})();
		Object.defineProperty(exports, "__esModule", { value: true });
		var character_1 = __webpack_require__(4);
		var JSXNode = __webpack_require__(5);
		var jsx_syntax_1 = __webpack_require__(6);
		var Node = __webpack_require__(7);
		var parser_1 = __webpack_require__(8);
		var token_1 = __webpack_require__(13);
		var xhtml_entities_1 = __webpack_require__(14);
		token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
		token_1.TokenName[101 /* Text */] = 'JSXText';
		// Fully qualified element name, e.g. <svg:path> returns "svg:path"
		function getQualifiedElementName(elementName) {
		    var qualifiedName;
		    switch (elementName.type) {
		        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
		            var id = elementName;
		            qualifiedName = id.name;
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
		            var ns = elementName;
		            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
		                getQualifiedElementName(ns.name);
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
		            var expr = elementName;
		            qualifiedName = getQualifiedElementName(expr.object) + '.' +
		                getQualifiedElementName(expr.property);
		            break;
		    }
		    return qualifiedName;
		}
		var JSXParser = (function (_super) {
		    __extends(JSXParser, _super);
		    function JSXParser(code, options, delegate) {
		        return _super.call(this, code, options, delegate) || this;
		    }
		    JSXParser.prototype.parsePrimaryExpression = function () {
		        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
		    };
		    JSXParser.prototype.startJSX = function () {
		        // Unwind the scanner before the lookahead token.
		        this.scanner.index = this.startMarker.index;
		        this.scanner.lineNumber = this.startMarker.line;
		        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
		    };
		    JSXParser.prototype.finishJSX = function () {
		        // Prime the next lookahead.
		        this.nextToken();
		    };
		    JSXParser.prototype.reenterJSX = function () {
		        this.startJSX();
		        this.expectJSX('}');
		        // Pop the closing '}' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		    };
		    JSXParser.prototype.createJSXNode = function () {
		        this.collectComments();
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.createJSXChildNode = function () {
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.scanXHTMLEntity = function (quote) {
		        var result = '&';
		        var valid = true;
		        var terminated = false;
		        var numeric = false;
		        var hex = false;
		        while (!this.scanner.eof() && valid && !terminated) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === quote) {
		                break;
		            }
		            terminated = (ch === ';');
		            result += ch;
		            ++this.scanner.index;
		            if (!terminated) {
		                switch (result.length) {
		                    case 2:
		                        // e.g. '&#123;'
		                        numeric = (ch === '#');
		                        break;
		                    case 3:
		                        if (numeric) {
		                            // e.g. '&#x41;'
		                            hex = (ch === 'x');
		                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
		                            numeric = numeric && !hex;
		                        }
		                        break;
		                    default:
		                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
		                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
		                        break;
		                }
		            }
		        }
		        if (valid && terminated && result.length > 2) {
		            // e.g. '&#x41;' becomes just '#x41'
		            var str = result.substr(1, result.length - 2);
		            if (numeric && str.length > 1) {
		                result = String.fromCharCode(parseInt(str.substr(1), 10));
		            }
		            else if (hex && str.length > 2) {
		                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
		            }
		            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
		                result = xhtml_entities_1.XHTMLEntities[str];
		            }
		        }
		        return result;
		    };
		    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
		    JSXParser.prototype.lexJSX = function () {
		        var cp = this.scanner.source.charCodeAt(this.scanner.index);
		        // < > / : = { }
		        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
		            var value = this.scanner.source[this.scanner.index++];
		            return {
		                type: 7 /* Punctuator */,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index - 1,
		                end: this.scanner.index
		            };
		        }
		        // " '
		        if (cp === 34 || cp === 39) {
		            var start = this.scanner.index;
		            var quote = this.scanner.source[this.scanner.index++];
		            var str = '';
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source[this.scanner.index++];
		                if (ch === quote) {
		                    break;
		                }
		                else if (ch === '&') {
		                    str += this.scanXHTMLEntity(quote);
		                }
		                else {
		                    str += ch;
		                }
		            }
		            return {
		                type: 8 /* StringLiteral */,
		                value: str,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // ... or .
		        if (cp === 46) {
		            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
		            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
		            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
		            var start = this.scanner.index;
		            this.scanner.index += value.length;
		            return {
		                type: 7 /* Punctuator */,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // `
		        if (cp === 96) {
		            // Only placeholder, since it will be rescanned as a real assignment expression.
		            return {
		                type: 10 /* Template */,
		                value: '',
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index,
		                end: this.scanner.index
		            };
		        }
		        // Identifer can not contain backslash (char code 92).
		        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
		            var start = this.scanner.index;
		            ++this.scanner.index;
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source.charCodeAt(this.scanner.index);
		                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
		                    ++this.scanner.index;
		                }
		                else if (ch === 45) {
		                    // Hyphen (char code 45) can be part of an identifier.
		                    ++this.scanner.index;
		                }
		                else {
		                    break;
		                }
		            }
		            var id = this.scanner.source.slice(start, this.scanner.index);
		            return {
		                type: 100 /* Identifier */,
		                value: id,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        return this.scanner.lex();
		    };
		    JSXParser.prototype.nextJSXToken = function () {
		        this.collectComments();
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.line = this.scanner.lineNumber;
		        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        var token = this.lexJSX();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        if (this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.nextJSXText = function () {
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.line = this.scanner.lineNumber;
		        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        var start = this.scanner.index;
		        var text = '';
		        while (!this.scanner.eof()) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === '{' || ch === '<') {
		                break;
		            }
		            ++this.scanner.index;
		            text += ch;
		            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.scanner.lineNumber;
		                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
		                    ++this.scanner.index;
		                }
		                this.scanner.lineStart = this.scanner.index;
		            }
		        }
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        var token = {
		            type: 101 /* Text */,
		            value: text,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: this.scanner.lineStart,
		            start: start,
		            end: this.scanner.index
		        };
		        if ((text.length > 0) && this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.peekJSXToken = function () {
		        var state = this.scanner.saveState();
		        this.scanner.scanComments();
		        var next = this.lexJSX();
		        this.scanner.restoreState(state);
		        return next;
		    };
		    // Expect the next JSX token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    JSXParser.prototype.expectJSX = function (value) {
		        var token = this.nextJSXToken();
		        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next JSX token matches the specified punctuator.
		    JSXParser.prototype.matchJSX = function (value) {
		        var next = this.peekJSXToken();
		        return next.type === 7 /* Punctuator */ && next.value === value;
		    };
		    JSXParser.prototype.parseJSXIdentifier = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== 100 /* Identifier */) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
		    };
		    JSXParser.prototype.parseJSXElementName = function () {
		        var node = this.createJSXNode();
		        var elementName = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = elementName;
		            this.expectJSX(':');
		            var name_1 = this.parseJSXIdentifier();
		            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
		        }
		        else if (this.matchJSX('.')) {
		            while (this.matchJSX('.')) {
		                var object = elementName;
		                this.expectJSX('.');
		                var property = this.parseJSXIdentifier();
		                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
		            }
		        }
		        return elementName;
		    };
		    JSXParser.prototype.parseJSXAttributeName = function () {
		        var node = this.createJSXNode();
		        var attributeName;
		        var identifier = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = identifier;
		            this.expectJSX(':');
		            var name_2 = this.parseJSXIdentifier();
		            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
		        }
		        else {
		            attributeName = identifier;
		        }
		        return attributeName;
		    };
		    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== 8 /* StringLiteral */) {
		            this.throwUnexpectedToken(token);
		        }
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    JSXParser.prototype.parseJSXExpressionAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.finishJSX();
		        if (this.match('}')) {
		            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
		        }
		        var expression = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXAttributeValue = function () {
		        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
		            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
		    };
		    JSXParser.prototype.parseJSXNameValueAttribute = function () {
		        var node = this.createJSXNode();
		        var name = this.parseJSXAttributeName();
		        var value = null;
		        if (this.matchJSX('=')) {
		            this.expectJSX('=');
		            value = this.parseJSXAttributeValue();
		        }
		        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
		    };
		    JSXParser.prototype.parseJSXSpreadAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.expectJSX('...');
		        this.finishJSX();
		        var argument = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
		    };
		    JSXParser.prototype.parseJSXAttributes = function () {
		        var attributes = [];
		        while (!this.matchJSX('/') && !this.matchJSX('>')) {
		            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
		                this.parseJSXNameValueAttribute();
		            attributes.push(attribute);
		        }
		        return attributes;
		    };
		    JSXParser.prototype.parseJSXOpeningElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXBoundaryElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        if (this.matchJSX('/')) {
		            this.expectJSX('/');
		            var name_3 = this.parseJSXElementName();
		            this.expectJSX('>');
		            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
		        }
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXEmptyExpression = function () {
		        var node = this.createJSXChildNode();
		        this.collectComments();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        return this.finalize(node, new JSXNode.JSXEmptyExpression());
		    };
		    JSXParser.prototype.parseJSXExpressionContainer = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        var expression;
		        if (this.matchJSX('}')) {
		            expression = this.parseJSXEmptyExpression();
		            this.expectJSX('}');
		        }
		        else {
		            this.finishJSX();
		            expression = this.parseAssignmentExpression();
		            this.reenterJSX();
		        }
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXChildren = function () {
		        var children = [];
		        while (!this.scanner.eof()) {
		            var node = this.createJSXChildNode();
		            var token = this.nextJSXText();
		            if (token.start < token.end) {
		                var raw = this.getTokenRaw(token);
		                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
		                children.push(child);
		            }
		            if (this.scanner.source[this.scanner.index] === '{') {
		                var container = this.parseJSXExpressionContainer();
		                children.push(container);
		            }
		            else {
		                break;
		            }
		        }
		        return children;
		    };
		    JSXParser.prototype.parseComplexJSXElement = function (el) {
		        var stack = [];
		        while (!this.scanner.eof()) {
		            el.children = el.children.concat(this.parseJSXChildren());
		            var node = this.createJSXChildNode();
		            var element = this.parseJSXBoundaryElement();
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
		                var opening = element;
		                if (opening.selfClosing) {
		                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
		                    el.children.push(child);
		                }
		                else {
		                    stack.push(el);
		                    el = { node: node, opening: opening, closing: null, children: [] };
		                }
		            }
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
		                el.closing = element;
		                var open_1 = getQualifiedElementName(el.opening.name);
		                var close_1 = getQualifiedElementName(el.closing.name);
		                if (open_1 !== close_1) {
		                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
		                }
		                if (stack.length > 0) {
		                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
		                    el = stack[stack.length - 1];
		                    el.children.push(child);
		                    stack.pop();
		                }
		                else {
		                    break;
		                }
		            }
		        }
		        return el;
		    };
		    JSXParser.prototype.parseJSXElement = function () {
		        var node = this.createJSXNode();
		        var opening = this.parseJSXOpeningElement();
		        var children = [];
		        var closing = null;
		        if (!opening.selfClosing) {
		            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
		            children = el.children;
		            closing = el.closing;
		        }
		        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
		    };
		    JSXParser.prototype.parseJSXRoot = function () {
		        // Pop the opening '<' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		        this.startJSX();
		        var element = this.parseJSXElement();
		        this.finishJSX();
		        return element;
		    };
		    JSXParser.prototype.isStartOfExpression = function () {
		        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
		    };
		    return JSXParser;
		}(parser_1.Parser));
		exports.JSXParser = JSXParser;


	/***/ },
	/* 4 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		// See also tools/generate-unicode-regex.js.
		var Regex = {
		    // Unicode v8.0.0 NonAsciiIdentifierStart:
		    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
		    // Unicode v8.0.0 NonAsciiIdentifierPart:
		    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
		};
		exports.Character = {
		    /* tslint:disable:no-bitwise */
		    fromCodePoint: function (cp) {
		        return (cp < 0x10000) ? String.fromCharCode(cp) :
		            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
		                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
		    },
		    // https://tc39.github.io/ecma262/#sec-white-space
		    isWhiteSpace: function (cp) {
		        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
		            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
		    },
		    // https://tc39.github.io/ecma262/#sec-line-terminators
		    isLineTerminator: function (cp) {
		        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
		    },
		    // https://tc39.github.io/ecma262/#sec-names-and-keywords
		    isIdentifierStart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
		    },
		    isIdentifierPart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp >= 0x30 && cp <= 0x39) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
		    },
		    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
		    isDecimalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39); // 0..9
		    },
		    isHexDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39) ||
		            (cp >= 0x41 && cp <= 0x46) ||
		            (cp >= 0x61 && cp <= 0x66); // a..f
		    },
		    isOctalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x37); // 0..7
		    }
		};


	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var jsx_syntax_1 = __webpack_require__(6);
		/* tslint:disable:max-classes-per-file */
		var JSXClosingElement = (function () {
		    function JSXClosingElement(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
		        this.name = name;
		    }
		    return JSXClosingElement;
		}());
		exports.JSXClosingElement = JSXClosingElement;
		var JSXElement = (function () {
		    function JSXElement(openingElement, children, closingElement) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
		        this.openingElement = openingElement;
		        this.children = children;
		        this.closingElement = closingElement;
		    }
		    return JSXElement;
		}());
		exports.JSXElement = JSXElement;
		var JSXEmptyExpression = (function () {
		    function JSXEmptyExpression() {
		        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
		    }
		    return JSXEmptyExpression;
		}());
		exports.JSXEmptyExpression = JSXEmptyExpression;
		var JSXExpressionContainer = (function () {
		    function JSXExpressionContainer(expression) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
		        this.expression = expression;
		    }
		    return JSXExpressionContainer;
		}());
		exports.JSXExpressionContainer = JSXExpressionContainer;
		var JSXIdentifier = (function () {
		    function JSXIdentifier(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
		        this.name = name;
		    }
		    return JSXIdentifier;
		}());
		exports.JSXIdentifier = JSXIdentifier;
		var JSXMemberExpression = (function () {
		    function JSXMemberExpression(object, property) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
		        this.object = object;
		        this.property = property;
		    }
		    return JSXMemberExpression;
		}());
		exports.JSXMemberExpression = JSXMemberExpression;
		var JSXAttribute = (function () {
		    function JSXAttribute(name, value) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
		        this.name = name;
		        this.value = value;
		    }
		    return JSXAttribute;
		}());
		exports.JSXAttribute = JSXAttribute;
		var JSXNamespacedName = (function () {
		    function JSXNamespacedName(namespace, name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
		        this.namespace = namespace;
		        this.name = name;
		    }
		    return JSXNamespacedName;
		}());
		exports.JSXNamespacedName = JSXNamespacedName;
		var JSXOpeningElement = (function () {
		    function JSXOpeningElement(name, selfClosing, attributes) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
		        this.name = name;
		        this.selfClosing = selfClosing;
		        this.attributes = attributes;
		    }
		    return JSXOpeningElement;
		}());
		exports.JSXOpeningElement = JSXOpeningElement;
		var JSXSpreadAttribute = (function () {
		    function JSXSpreadAttribute(argument) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
		        this.argument = argument;
		    }
		    return JSXSpreadAttribute;
		}());
		exports.JSXSpreadAttribute = JSXSpreadAttribute;
		var JSXText = (function () {
		    function JSXText(value, raw) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXText;
		        this.value = value;
		        this.raw = raw;
		    }
		    return JSXText;
		}());
		exports.JSXText = JSXText;


	/***/ },
	/* 6 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.JSXSyntax = {
		    JSXAttribute: 'JSXAttribute',
		    JSXClosingElement: 'JSXClosingElement',
		    JSXElement: 'JSXElement',
		    JSXEmptyExpression: 'JSXEmptyExpression',
		    JSXExpressionContainer: 'JSXExpressionContainer',
		    JSXIdentifier: 'JSXIdentifier',
		    JSXMemberExpression: 'JSXMemberExpression',
		    JSXNamespacedName: 'JSXNamespacedName',
		    JSXOpeningElement: 'JSXOpeningElement',
		    JSXSpreadAttribute: 'JSXSpreadAttribute',
		    JSXText: 'JSXText'
		};


	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var syntax_1 = __webpack_require__(2);
		/* tslint:disable:max-classes-per-file */
		var ArrayExpression = (function () {
		    function ArrayExpression(elements) {
		        this.type = syntax_1.Syntax.ArrayExpression;
		        this.elements = elements;
		    }
		    return ArrayExpression;
		}());
		exports.ArrayExpression = ArrayExpression;
		var ArrayPattern = (function () {
		    function ArrayPattern(elements) {
		        this.type = syntax_1.Syntax.ArrayPattern;
		        this.elements = elements;
		    }
		    return ArrayPattern;
		}());
		exports.ArrayPattern = ArrayPattern;
		var ArrowFunctionExpression = (function () {
		    function ArrowFunctionExpression(params, body, expression) {
		        this.type = syntax_1.Syntax.ArrowFunctionExpression;
		        this.id = null;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = expression;
		        this.async = false;
		    }
		    return ArrowFunctionExpression;
		}());
		exports.ArrowFunctionExpression = ArrowFunctionExpression;
		var AssignmentExpression = (function () {
		    function AssignmentExpression(operator, left, right) {
		        this.type = syntax_1.Syntax.AssignmentExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentExpression;
		}());
		exports.AssignmentExpression = AssignmentExpression;
		var AssignmentPattern = (function () {
		    function AssignmentPattern(left, right) {
		        this.type = syntax_1.Syntax.AssignmentPattern;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentPattern;
		}());
		exports.AssignmentPattern = AssignmentPattern;
		var AsyncArrowFunctionExpression = (function () {
		    function AsyncArrowFunctionExpression(params, body, expression) {
		        this.type = syntax_1.Syntax.ArrowFunctionExpression;
		        this.id = null;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = expression;
		        this.async = true;
		    }
		    return AsyncArrowFunctionExpression;
		}());
		exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
		var AsyncFunctionDeclaration = (function () {
		    function AsyncFunctionDeclaration(id, params, body) {
		        this.type = syntax_1.Syntax.FunctionDeclaration;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = false;
		        this.async = true;
		    }
		    return AsyncFunctionDeclaration;
		}());
		exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
		var AsyncFunctionExpression = (function () {
		    function AsyncFunctionExpression(id, params, body) {
		        this.type = syntax_1.Syntax.FunctionExpression;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = false;
		        this.async = true;
		    }
		    return AsyncFunctionExpression;
		}());
		exports.AsyncFunctionExpression = AsyncFunctionExpression;
		var AwaitExpression = (function () {
		    function AwaitExpression(argument) {
		        this.type = syntax_1.Syntax.AwaitExpression;
		        this.argument = argument;
		    }
		    return AwaitExpression;
		}());
		exports.AwaitExpression = AwaitExpression;
		var BinaryExpression = (function () {
		    function BinaryExpression(operator, left, right) {
		        var logical = (operator === '||' || operator === '&&');
		        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return BinaryExpression;
		}());
		exports.BinaryExpression = BinaryExpression;
		var BlockStatement = (function () {
		    function BlockStatement(body) {
		        this.type = syntax_1.Syntax.BlockStatement;
		        this.body = body;
		    }
		    return BlockStatement;
		}());
		exports.BlockStatement = BlockStatement;
		var BreakStatement = (function () {
		    function BreakStatement(label) {
		        this.type = syntax_1.Syntax.BreakStatement;
		        this.label = label;
		    }
		    return BreakStatement;
		}());
		exports.BreakStatement = BreakStatement;
		var CallExpression = (function () {
		    function CallExpression(callee, args) {
		        this.type = syntax_1.Syntax.CallExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return CallExpression;
		}());
		exports.CallExpression = CallExpression;
		var CatchClause = (function () {
		    function CatchClause(param, body) {
		        this.type = syntax_1.Syntax.CatchClause;
		        this.param = param;
		        this.body = body;
		    }
		    return CatchClause;
		}());
		exports.CatchClause = CatchClause;
		var ClassBody = (function () {
		    function ClassBody(body) {
		        this.type = syntax_1.Syntax.ClassBody;
		        this.body = body;
		    }
		    return ClassBody;
		}());
		exports.ClassBody = ClassBody;
		var ClassDeclaration = (function () {
		    function ClassDeclaration(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassDeclaration;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassDeclaration;
		}());
		exports.ClassDeclaration = ClassDeclaration;
		var ClassExpression = (function () {
		    function ClassExpression(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassExpression;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassExpression;
		}());
		exports.ClassExpression = ClassExpression;
		var ComputedMemberExpression = (function () {
		    function ComputedMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = true;
		        this.object = object;
		        this.property = property;
		    }
		    return ComputedMemberExpression;
		}());
		exports.ComputedMemberExpression = ComputedMemberExpression;
		var ConditionalExpression = (function () {
		    function ConditionalExpression(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.ConditionalExpression;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return ConditionalExpression;
		}());
		exports.ConditionalExpression = ConditionalExpression;
		var ContinueStatement = (function () {
		    function ContinueStatement(label) {
		        this.type = syntax_1.Syntax.ContinueStatement;
		        this.label = label;
		    }
		    return ContinueStatement;
		}());
		exports.ContinueStatement = ContinueStatement;
		var DebuggerStatement = (function () {
		    function DebuggerStatement() {
		        this.type = syntax_1.Syntax.DebuggerStatement;
		    }
		    return DebuggerStatement;
		}());
		exports.DebuggerStatement = DebuggerStatement;
		var Directive = (function () {
		    function Directive(expression, directive) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		        this.directive = directive;
		    }
		    return Directive;
		}());
		exports.Directive = Directive;
		var DoWhileStatement = (function () {
		    function DoWhileStatement(body, test) {
		        this.type = syntax_1.Syntax.DoWhileStatement;
		        this.body = body;
		        this.test = test;
		    }
		    return DoWhileStatement;
		}());
		exports.DoWhileStatement = DoWhileStatement;
		var EmptyStatement = (function () {
		    function EmptyStatement() {
		        this.type = syntax_1.Syntax.EmptyStatement;
		    }
		    return EmptyStatement;
		}());
		exports.EmptyStatement = EmptyStatement;
		var ExportAllDeclaration = (function () {
		    function ExportAllDeclaration(source) {
		        this.type = syntax_1.Syntax.ExportAllDeclaration;
		        this.source = source;
		    }
		    return ExportAllDeclaration;
		}());
		exports.ExportAllDeclaration = ExportAllDeclaration;
		var ExportDefaultDeclaration = (function () {
		    function ExportDefaultDeclaration(declaration) {
		        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
		        this.declaration = declaration;
		    }
		    return ExportDefaultDeclaration;
		}());
		exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
		var ExportNamedDeclaration = (function () {
		    function ExportNamedDeclaration(declaration, specifiers, source) {
		        this.type = syntax_1.Syntax.ExportNamedDeclaration;
		        this.declaration = declaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ExportNamedDeclaration;
		}());
		exports.ExportNamedDeclaration = ExportNamedDeclaration;
		var ExportSpecifier = (function () {
		    function ExportSpecifier(local, exported) {
		        this.type = syntax_1.Syntax.ExportSpecifier;
		        this.exported = exported;
		        this.local = local;
		    }
		    return ExportSpecifier;
		}());
		exports.ExportSpecifier = ExportSpecifier;
		var ExpressionStatement = (function () {
		    function ExpressionStatement(expression) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		    }
		    return ExpressionStatement;
		}());
		exports.ExpressionStatement = ExpressionStatement;
		var ForInStatement = (function () {
		    function ForInStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForInStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		        this.each = false;
		    }
		    return ForInStatement;
		}());
		exports.ForInStatement = ForInStatement;
		var ForOfStatement = (function () {
		    function ForOfStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForOfStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		    }
		    return ForOfStatement;
		}());
		exports.ForOfStatement = ForOfStatement;
		var ForStatement = (function () {
		    function ForStatement(init, test, update, body) {
		        this.type = syntax_1.Syntax.ForStatement;
		        this.init = init;
		        this.test = test;
		        this.update = update;
		        this.body = body;
		    }
		    return ForStatement;
		}());
		exports.ForStatement = ForStatement;
		var FunctionDeclaration = (function () {
		    function FunctionDeclaration(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionDeclaration;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		        this.async = false;
		    }
		    return FunctionDeclaration;
		}());
		exports.FunctionDeclaration = FunctionDeclaration;
		var FunctionExpression = (function () {
		    function FunctionExpression(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionExpression;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		        this.async = false;
		    }
		    return FunctionExpression;
		}());
		exports.FunctionExpression = FunctionExpression;
		var Identifier = (function () {
		    function Identifier(name) {
		        this.type = syntax_1.Syntax.Identifier;
		        this.name = name;
		    }
		    return Identifier;
		}());
		exports.Identifier = Identifier;
		var IfStatement = (function () {
		    function IfStatement(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.IfStatement;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return IfStatement;
		}());
		exports.IfStatement = IfStatement;
		var ImportDeclaration = (function () {
		    function ImportDeclaration(specifiers, source) {
		        this.type = syntax_1.Syntax.ImportDeclaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ImportDeclaration;
		}());
		exports.ImportDeclaration = ImportDeclaration;
		var ImportDefaultSpecifier = (function () {
		    function ImportDefaultSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
		        this.local = local;
		    }
		    return ImportDefaultSpecifier;
		}());
		exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
		var ImportNamespaceSpecifier = (function () {
		    function ImportNamespaceSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
		        this.local = local;
		    }
		    return ImportNamespaceSpecifier;
		}());
		exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
		var ImportSpecifier = (function () {
		    function ImportSpecifier(local, imported) {
		        this.type = syntax_1.Syntax.ImportSpecifier;
		        this.local = local;
		        this.imported = imported;
		    }
		    return ImportSpecifier;
		}());
		exports.ImportSpecifier = ImportSpecifier;
		var LabeledStatement = (function () {
		    function LabeledStatement(label, body) {
		        this.type = syntax_1.Syntax.LabeledStatement;
		        this.label = label;
		        this.body = body;
		    }
		    return LabeledStatement;
		}());
		exports.LabeledStatement = LabeledStatement;
		var Literal = (function () {
		    function Literal(value, raw) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		    }
		    return Literal;
		}());
		exports.Literal = Literal;
		var MetaProperty = (function () {
		    function MetaProperty(meta, property) {
		        this.type = syntax_1.Syntax.MetaProperty;
		        this.meta = meta;
		        this.property = property;
		    }
		    return MetaProperty;
		}());
		exports.MetaProperty = MetaProperty;
		var MethodDefinition = (function () {
		    function MethodDefinition(key, computed, value, kind, isStatic) {
		        this.type = syntax_1.Syntax.MethodDefinition;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.static = isStatic;
		    }
		    return MethodDefinition;
		}());
		exports.MethodDefinition = MethodDefinition;
		var Module = (function () {
		    function Module(body) {
		        this.type = syntax_1.Syntax.Program;
		        this.body = body;
		        this.sourceType = 'module';
		    }
		    return Module;
		}());
		exports.Module = Module;
		var NewExpression = (function () {
		    function NewExpression(callee, args) {
		        this.type = syntax_1.Syntax.NewExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return NewExpression;
		}());
		exports.NewExpression = NewExpression;
		var ObjectExpression = (function () {
		    function ObjectExpression(properties) {
		        this.type = syntax_1.Syntax.ObjectExpression;
		        this.properties = properties;
		    }
		    return ObjectExpression;
		}());
		exports.ObjectExpression = ObjectExpression;
		var ObjectPattern = (function () {
		    function ObjectPattern(properties) {
		        this.type = syntax_1.Syntax.ObjectPattern;
		        this.properties = properties;
		    }
		    return ObjectPattern;
		}());
		exports.ObjectPattern = ObjectPattern;
		var Property = (function () {
		    function Property(kind, key, computed, value, method, shorthand) {
		        this.type = syntax_1.Syntax.Property;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.method = method;
		        this.shorthand = shorthand;
		    }
		    return Property;
		}());
		exports.Property = Property;
		var RegexLiteral = (function () {
		    function RegexLiteral(value, raw, pattern, flags) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		        this.regex = { pattern: pattern, flags: flags };
		    }
		    return RegexLiteral;
		}());
		exports.RegexLiteral = RegexLiteral;
		var RestElement = (function () {
		    function RestElement(argument) {
		        this.type = syntax_1.Syntax.RestElement;
		        this.argument = argument;
		    }
		    return RestElement;
		}());
		exports.RestElement = RestElement;
		var ReturnStatement = (function () {
		    function ReturnStatement(argument) {
		        this.type = syntax_1.Syntax.ReturnStatement;
		        this.argument = argument;
		    }
		    return ReturnStatement;
		}());
		exports.ReturnStatement = ReturnStatement;
		var Script = (function () {
		    function Script(body) {
		        this.type = syntax_1.Syntax.Program;
		        this.body = body;
		        this.sourceType = 'script';
		    }
		    return Script;
		}());
		exports.Script = Script;
		var SequenceExpression = (function () {
		    function SequenceExpression(expressions) {
		        this.type = syntax_1.Syntax.SequenceExpression;
		        this.expressions = expressions;
		    }
		    return SequenceExpression;
		}());
		exports.SequenceExpression = SequenceExpression;
		var SpreadElement = (function () {
		    function SpreadElement(argument) {
		        this.type = syntax_1.Syntax.SpreadElement;
		        this.argument = argument;
		    }
		    return SpreadElement;
		}());
		exports.SpreadElement = SpreadElement;
		var StaticMemberExpression = (function () {
		    function StaticMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = false;
		        this.object = object;
		        this.property = property;
		    }
		    return StaticMemberExpression;
		}());
		exports.StaticMemberExpression = StaticMemberExpression;
		var Super = (function () {
		    function Super() {
		        this.type = syntax_1.Syntax.Super;
		    }
		    return Super;
		}());
		exports.Super = Super;
		var SwitchCase = (function () {
		    function SwitchCase(test, consequent) {
		        this.type = syntax_1.Syntax.SwitchCase;
		        this.test = test;
		        this.consequent = consequent;
		    }
		    return SwitchCase;
		}());
		exports.SwitchCase = SwitchCase;
		var SwitchStatement = (function () {
		    function SwitchStatement(discriminant, cases) {
		        this.type = syntax_1.Syntax.SwitchStatement;
		        this.discriminant = discriminant;
		        this.cases = cases;
		    }
		    return SwitchStatement;
		}());
		exports.SwitchStatement = SwitchStatement;
		var TaggedTemplateExpression = (function () {
		    function TaggedTemplateExpression(tag, quasi) {
		        this.type = syntax_1.Syntax.TaggedTemplateExpression;
		        this.tag = tag;
		        this.quasi = quasi;
		    }
		    return TaggedTemplateExpression;
		}());
		exports.TaggedTemplateExpression = TaggedTemplateExpression;
		var TemplateElement = (function () {
		    function TemplateElement(value, tail) {
		        this.type = syntax_1.Syntax.TemplateElement;
		        this.value = value;
		        this.tail = tail;
		    }
		    return TemplateElement;
		}());
		exports.TemplateElement = TemplateElement;
		var TemplateLiteral = (function () {
		    function TemplateLiteral(quasis, expressions) {
		        this.type = syntax_1.Syntax.TemplateLiteral;
		        this.quasis = quasis;
		        this.expressions = expressions;
		    }
		    return TemplateLiteral;
		}());
		exports.TemplateLiteral = TemplateLiteral;
		var ThisExpression = (function () {
		    function ThisExpression() {
		        this.type = syntax_1.Syntax.ThisExpression;
		    }
		    return ThisExpression;
		}());
		exports.ThisExpression = ThisExpression;
		var ThrowStatement = (function () {
		    function ThrowStatement(argument) {
		        this.type = syntax_1.Syntax.ThrowStatement;
		        this.argument = argument;
		    }
		    return ThrowStatement;
		}());
		exports.ThrowStatement = ThrowStatement;
		var TryStatement = (function () {
		    function TryStatement(block, handler, finalizer) {
		        this.type = syntax_1.Syntax.TryStatement;
		        this.block = block;
		        this.handler = handler;
		        this.finalizer = finalizer;
		    }
		    return TryStatement;
		}());
		exports.TryStatement = TryStatement;
		var UnaryExpression = (function () {
		    function UnaryExpression(operator, argument) {
		        this.type = syntax_1.Syntax.UnaryExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = true;
		    }
		    return UnaryExpression;
		}());
		exports.UnaryExpression = UnaryExpression;
		var UpdateExpression = (function () {
		    function UpdateExpression(operator, argument, prefix) {
		        this.type = syntax_1.Syntax.UpdateExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = prefix;
		    }
		    return UpdateExpression;
		}());
		exports.UpdateExpression = UpdateExpression;
		var VariableDeclaration = (function () {
		    function VariableDeclaration(declarations, kind) {
		        this.type = syntax_1.Syntax.VariableDeclaration;
		        this.declarations = declarations;
		        this.kind = kind;
		    }
		    return VariableDeclaration;
		}());
		exports.VariableDeclaration = VariableDeclaration;
		var VariableDeclarator = (function () {
		    function VariableDeclarator(id, init) {
		        this.type = syntax_1.Syntax.VariableDeclarator;
		        this.id = id;
		        this.init = init;
		    }
		    return VariableDeclarator;
		}());
		exports.VariableDeclarator = VariableDeclarator;
		var WhileStatement = (function () {
		    function WhileStatement(test, body) {
		        this.type = syntax_1.Syntax.WhileStatement;
		        this.test = test;
		        this.body = body;
		    }
		    return WhileStatement;
		}());
		exports.WhileStatement = WhileStatement;
		var WithStatement = (function () {
		    function WithStatement(object, body) {
		        this.type = syntax_1.Syntax.WithStatement;
		        this.object = object;
		        this.body = body;
		    }
		    return WithStatement;
		}());
		exports.WithStatement = WithStatement;
		var YieldExpression = (function () {
		    function YieldExpression(argument, delegate) {
		        this.type = syntax_1.Syntax.YieldExpression;
		        this.argument = argument;
		        this.delegate = delegate;
		    }
		    return YieldExpression;
		}());
		exports.YieldExpression = YieldExpression;


	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var assert_1 = __webpack_require__(9);
		var error_handler_1 = __webpack_require__(10);
		var messages_1 = __webpack_require__(11);
		var Node = __webpack_require__(7);
		var scanner_1 = __webpack_require__(12);
		var syntax_1 = __webpack_require__(2);
		var token_1 = __webpack_require__(13);
		var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
		var Parser = (function () {
		    function Parser(code, options, delegate) {
		        if (options === void 0) { options = {}; }
		        this.config = {
		            range: (typeof options.range === 'boolean') && options.range,
		            loc: (typeof options.loc === 'boolean') && options.loc,
		            source: null,
		            tokens: (typeof options.tokens === 'boolean') && options.tokens,
		            comment: (typeof options.comment === 'boolean') && options.comment,
		            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
		        };
		        if (this.config.loc && options.source && options.source !== null) {
		            this.config.source = String(options.source);
		        }
		        this.delegate = delegate;
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = this.config.tolerant;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = this.config.comment;
		        this.operatorPrecedence = {
		            ')': 0,
		            ';': 0,
		            ',': 0,
		            '=': 0,
		            ']': 0,
		            '||': 1,
		            '&&': 2,
		            '|': 3,
		            '^': 4,
		            '&': 5,
		            '==': 6,
		            '!=': 6,
		            '===': 6,
		            '!==': 6,
		            '<': 7,
		            '>': 7,
		            '<=': 7,
		            '>=': 7,
		            '<<': 8,
		            '>>': 8,
		            '>>>': 8,
		            '+': 9,
		            '-': 9,
		            '*': 11,
		            '/': 11,
		            '%': 11
		        };
		        this.lookahead = {
		            type: 2 /* EOF */,
		            value: '',
		            lineNumber: this.scanner.lineNumber,
		            lineStart: 0,
		            start: 0,
		            end: 0
		        };
		        this.hasLineTerminator = false;
		        this.context = {
		            isModule: false,
		            await: false,
		            allowIn: true,
		            allowStrictDirective: true,
		            allowYield: true,
		            firstCoverInitializedNameError: null,
		            isAssignmentTarget: false,
		            isBindingElement: false,
		            inFunctionBody: false,
		            inIteration: false,
		            inSwitch: false,
		            labelSet: {},
		            strict: false
		        };
		        this.tokens = [];
		        this.startMarker = {
		            index: 0,
		            line: this.scanner.lineNumber,
		            column: 0
		        };
		        this.lastMarker = {
		            index: 0,
		            line: this.scanner.lineNumber,
		            column: 0
		        };
		        this.nextToken();
		        this.lastMarker = {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    }
		    Parser.prototype.throwError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.lastMarker.line;
		        var column = this.lastMarker.column + 1;
		        throw this.errorHandler.createError(index, line, column, msg);
		    };
		    Parser.prototype.tolerateError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.scanner.lineNumber;
		        var column = this.lastMarker.column + 1;
		        this.errorHandler.tolerateError(index, line, column, msg);
		    };
		    // Throw an exception because of the token.
		    Parser.prototype.unexpectedTokenError = function (token, message) {
		        var msg = message || messages_1.Messages.UnexpectedToken;
		        var value;
		        if (token) {
		            if (!message) {
		                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
		                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
		                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
		                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
		                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
		                                    messages_1.Messages.UnexpectedToken;
		                if (token.type === 4 /* Keyword */) {
		                    if (this.scanner.isFutureReservedWord(token.value)) {
		                        msg = messages_1.Messages.UnexpectedReserved;
		                    }
		                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
		                        msg = messages_1.Messages.StrictReservedWord;
		                    }
		                }
		            }
		            value = token.value;
		        }
		        else {
		            value = 'ILLEGAL';
		        }
		        msg = msg.replace('%0', value);
		        if (token && typeof token.lineNumber === 'number') {
		            var index = token.start;
		            var line = token.lineNumber;
		            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
		            var column = token.start - lastMarkerLineStart + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		        else {
		            var index = this.lastMarker.index;
		            var line = this.lastMarker.line;
		            var column = this.lastMarker.column + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		    };
		    Parser.prototype.throwUnexpectedToken = function (token, message) {
		        throw this.unexpectedTokenError(token, message);
		    };
		    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
		        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
		    };
		    Parser.prototype.collectComments = function () {
		        if (!this.config.comment) {
		            this.scanner.scanComments();
		        }
		        else {
		            var comments = this.scanner.scanComments();
		            if (comments.length > 0 && this.delegate) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var node = void 0;
		                    node = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
		                    };
		                    if (this.config.range) {
		                        node.range = e.range;
		                    }
		                    if (this.config.loc) {
		                        node.loc = e.loc;
		                    }
		                    var metadata = {
		                        start: {
		                            line: e.loc.start.line,
		                            column: e.loc.start.column,
		                            offset: e.range[0]
		                        },
		                        end: {
		                            line: e.loc.end.line,
		                            column: e.loc.end.column,
		                            offset: e.range[1]
		                        }
		                    };
		                    this.delegate(node, metadata);
		                }
		            }
		        }
		    };
		    // From internal representation to an external structure
		    Parser.prototype.getTokenRaw = function (token) {
		        return this.scanner.source.slice(token.start, token.end);
		    };
		    Parser.prototype.convertToken = function (token) {
		        var t = {
		            type: token_1.TokenName[token.type],
		            value: this.getTokenRaw(token)
		        };
		        if (this.config.range) {
		            t.range = [token.start, token.end];
		        }
		        if (this.config.loc) {
		            t.loc = {
		                start: {
		                    line: this.startMarker.line,
		                    column: this.startMarker.column
		                },
		                end: {
		                    line: this.scanner.lineNumber,
		                    column: this.scanner.index - this.scanner.lineStart
		                }
		            };
		        }
		        if (token.type === 9 /* RegularExpression */) {
		            var pattern = token.pattern;
		            var flags = token.flags;
		            t.regex = { pattern: pattern, flags: flags };
		        }
		        return t;
		    };
		    Parser.prototype.nextToken = function () {
		        var token = this.lookahead;
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.line = this.scanner.lineNumber;
		        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
		        this.collectComments();
		        if (this.scanner.index !== this.startMarker.index) {
		            this.startMarker.index = this.scanner.index;
		            this.startMarker.line = this.scanner.lineNumber;
		            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
		        }
		        var next = this.scanner.lex();
		        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
		        if (next && this.context.strict && next.type === 3 /* Identifier */) {
		            if (this.scanner.isStrictModeReservedWord(next.value)) {
		                next.type = 4 /* Keyword */;
		            }
		        }
		        this.lookahead = next;
		        if (this.config.tokens && next.type !== 2 /* EOF */) {
		            this.tokens.push(this.convertToken(next));
		        }
		        return token;
		    };
		    Parser.prototype.nextRegexToken = function () {
		        this.collectComments();
		        var token = this.scanner.scanRegExp();
		        if (this.config.tokens) {
		            // Pop the previous token, '/' or '/='
		            // This is added from the lookahead token.
		            this.tokens.pop();
		            this.tokens.push(this.convertToken(token));
		        }
		        // Prime the next lookahead.
		        this.lookahead = token;
		        this.nextToken();
		        return token;
		    };
		    Parser.prototype.createNode = function () {
		        return {
		            index: this.startMarker.index,
		            line: this.startMarker.line,
		            column: this.startMarker.column
		        };
		    };
		    Parser.prototype.startNode = function (token, lastLineStart) {
		        if (lastLineStart === void 0) { lastLineStart = 0; }
		        var column = token.start - token.lineStart;
		        var line = token.lineNumber;
		        if (column < 0) {
		            column += lastLineStart;
		            line--;
		        }
		        return {
		            index: token.start,
		            line: line,
		            column: column
		        };
		    };
		    Parser.prototype.finalize = function (marker, node) {
		        if (this.config.range) {
		            node.range = [marker.index, this.lastMarker.index];
		        }
		        if (this.config.loc) {
		            node.loc = {
		                start: {
		                    line: marker.line,
		                    column: marker.column,
		                },
		                end: {
		                    line: this.lastMarker.line,
		                    column: this.lastMarker.column
		                }
		            };
		            if (this.config.source) {
		                node.loc.source = this.config.source;
		            }
		        }
		        if (this.delegate) {
		            var metadata = {
		                start: {
		                    line: marker.line,
		                    column: marker.column,
		                    offset: marker.index
		                },
		                end: {
		                    line: this.lastMarker.line,
		                    column: this.lastMarker.column,
		                    offset: this.lastMarker.index
		                }
		            };
		            this.delegate(node, metadata);
		        }
		        return node;
		    };
		    // Expect the next token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    Parser.prototype.expect = function (value) {
		        var token = this.nextToken();
		        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
		    Parser.prototype.expectCommaSeparator = function () {
		        if (this.config.tolerant) {
		            var token = this.lookahead;
		            if (token.type === 7 /* Punctuator */ && token.value === ',') {
		                this.nextToken();
		            }
		            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
		                this.nextToken();
		                this.tolerateUnexpectedToken(token);
		            }
		            else {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
		            }
		        }
		        else {
		            this.expect(',');
		        }
		    };
		    // Expect the next token to match the specified keyword.
		    // If not, an exception will be thrown.
		    Parser.prototype.expectKeyword = function (keyword) {
		        var token = this.nextToken();
		        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next token matches the specified punctuator.
		    Parser.prototype.match = function (value) {
		        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
		    };
		    // Return true if the next token matches the specified keyword
		    Parser.prototype.matchKeyword = function (keyword) {
		        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
		    };
		    // Return true if the next token matches the specified contextual keyword
		    // (where an identifier is sometimes a keyword depending on the context)
		    Parser.prototype.matchContextualKeyword = function (keyword) {
		        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
		    };
		    // Return true if the next token is an assignment operator
		    Parser.prototype.matchAssign = function () {
		        if (this.lookahead.type !== 7 /* Punctuator */) {
		            return false;
		        }
		        var op = this.lookahead.value;
		        return op === '=' ||
		            op === '*=' ||
		            op === '**=' ||
		            op === '/=' ||
		            op === '%=' ||
		            op === '+=' ||
		            op === '-=' ||
		            op === '<<=' ||
		            op === '>>=' ||
		            op === '>>>=' ||
		            op === '&=' ||
		            op === '^=' ||
		            op === '|=';
		    };
		    // Cover grammar support.
		    //
		    // When an assignment expression position starts with an left parenthesis, the determination of the type
		    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
		    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
		    //
		    // There are three productions that can be parsed in a parentheses pair that needs to be determined
		    // after the outermost pair is closed. They are:
		    //
		    //   1. AssignmentExpression
		    //   2. BindingElements
		    //   3. AssignmentTargets
		    //
		    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
		    // binding element or assignment target.
		    //
		    // The three productions have the relationship:
		    //
		    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
		    //
		    // with a single exception that CoverInitializedName when used directly in an Expression, generates
		    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
		    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
		    //
		    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
		    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
		    // the CoverInitializedName check is conducted.
		    //
		    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
		    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
		    // pattern. The CoverInitializedName check is deferred.
		    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        if (this.context.firstCoverInitializedNameError !== null) {
		            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
		        }
		        this.context.isBindingElement = previousIsBindingElement;
		        this.context.isAssignmentTarget = previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
		        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.consumeSemicolon = function () {
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else if (!this.hasLineTerminator) {
		            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            this.lastMarker.index = this.startMarker.index;
		            this.lastMarker.line = this.startMarker.line;
		            this.lastMarker.column = this.startMarker.column;
		        }
		    };
		    // https://tc39.github.io/ecma262/#sec-primary-expression
		    Parser.prototype.parsePrimaryExpression = function () {
		        var node = this.createNode();
		        var expr;
		        var token, raw;
		        switch (this.lookahead.type) {
		            case 3 /* Identifier */:
		                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
		                    this.tolerateUnexpectedToken(this.lookahead);
		                }
		                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
		                break;
		            case 6 /* NumericLiteral */:
		            case 8 /* StringLiteral */:
		                if (this.context.strict && this.lookahead.octal) {
		                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
		                }
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case 1 /* BooleanLiteral */:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
		                break;
		            case 5 /* NullLiteral */:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(null, raw));
		                break;
		            case 10 /* Template */:
		                expr = this.parseTemplateLiteral();
		                break;
		            case 7 /* Punctuator */:
		                switch (this.lookahead.value) {
		                    case '(':
		                        this.context.isBindingElement = false;
		                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
		                        break;
		                    case '[':
		                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
		                        break;
		                    case '{':
		                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
		                        break;
		                    case '/':
		                    case '/=':
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                        this.scanner.index = this.startMarker.index;
		                        token = this.nextRegexToken();
		                        raw = this.getTokenRaw(token);
		                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
		                        break;
		                    default:
		                        expr = this.throwUnexpectedToken(this.nextToken());
		                }
		                break;
		            case 4 /* Keyword */:
		                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
		                    expr = this.parseIdentifierName();
		                }
		                else if (!this.context.strict && this.matchKeyword('let')) {
		                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
		                }
		                else {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    if (this.matchKeyword('function')) {
		                        expr = this.parseFunctionExpression();
		                    }
		                    else if (this.matchKeyword('this')) {
		                        this.nextToken();
		                        expr = this.finalize(node, new Node.ThisExpression());
		                    }
		                    else if (this.matchKeyword('class')) {
		                        expr = this.parseClassExpression();
		                    }
		                    else {
		                        expr = this.throwUnexpectedToken(this.nextToken());
		                    }
		                }
		                break;
		            default:
		                expr = this.throwUnexpectedToken(this.nextToken());
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-array-initializer
		    Parser.prototype.parseSpreadElement = function () {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
		        return this.finalize(node, new Node.SpreadElement(arg));
		    };
		    Parser.prototype.parseArrayInitializer = function () {
		        var node = this.createNode();
		        var elements = [];
		        this.expect('[');
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else if (this.match('...')) {
		                var element = this.parseSpreadElement();
		                if (!this.match(']')) {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    this.expect(',');
		                }
		                elements.push(element);
		            }
		            else {
		                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayExpression(elements));
		    };
		    // https://tc39.github.io/ecma262/#sec-object-initializer
		    Parser.prototype.parsePropertyMethod = function (params) {
		        this.context.isAssignmentTarget = false;
		        this.context.isBindingElement = false;
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = params.simple;
		        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
		        if (this.context.strict && params.firstRestricted) {
		            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
		        }
		        if (this.context.strict && params.stricted) {
		            this.tolerateUnexpectedToken(params.stricted, params.message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        return body;
		    };
		    Parser.prototype.parsePropertyMethodFunction = function () {
		        var isGenerator = false;
		        var node = this.createNode();
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = true;
		        var params = this.parseFormalParameters();
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
		        var node = this.createNode();
		        var previousAllowYield = this.context.allowYield;
		        var previousAwait = this.context.await;
		        this.context.allowYield = false;
		        this.context.await = true;
		        var params = this.parseFormalParameters();
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        this.context.await = previousAwait;
		        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
		    };
		    Parser.prototype.parseObjectPropertyKey = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        var key;
		        switch (token.type) {
		            case 8 /* StringLiteral */:
		            case 6 /* NumericLiteral */:
		                if (this.context.strict && token.octal) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
		                }
		                var raw = this.getTokenRaw(token);
		                key = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case 3 /* Identifier */:
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 4 /* Keyword */:
		                key = this.finalize(node, new Node.Identifier(token.value));
		                break;
		            case 7 /* Punctuator */:
		                if (token.value === '[') {
		                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    this.expect(']');
		                }
		                else {
		                    key = this.throwUnexpectedToken(token);
		                }
		                break;
		            default:
		                key = this.throwUnexpectedToken(token);
		        }
		        return key;
		    };
		    Parser.prototype.isPropertyKey = function (key, value) {
		        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
		            (key.type === syntax_1.Syntax.Literal && key.value === value);
		    };
		    Parser.prototype.parseObjectProperty = function (hasProto) {
		        var node = this.createNode();
		        var token = this.lookahead;
		        var kind;
		        var key = null;
		        var value = null;
		        var computed = false;
		        var method = false;
		        var shorthand = false;
		        var isAsync = false;
		        if (token.type === 3 /* Identifier */) {
		            var id = token.value;
		            this.nextToken();
		            computed = this.match('[');
		            isAsync = !this.hasLineTerminator && (id === 'async') &&
		                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
		            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
		        }
		        else if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
		            kind = 'get';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.context.allowYield = false;
		            value = this.parseGetterMethod();
		        }
		        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
		            kind = 'set';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseSetterMethod();
		        }
		        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        else {
		            if (!key) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            kind = 'init';
		            if (this.match(':') && !isAsync) {
		                if (!computed && this.isPropertyKey(key, '__proto__')) {
		                    if (hasProto.value) {
		                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
		                    }
		                    hasProto.value = true;
		                }
		                this.nextToken();
		                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
		            }
		            else if (this.match('(')) {
		                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
		                method = true;
		            }
		            else if (token.type === 3 /* Identifier */) {
		                var id = this.finalize(node, new Node.Identifier(token.value));
		                if (this.match('=')) {
		                    this.context.firstCoverInitializedNameError = this.lookahead;
		                    this.nextToken();
		                    shorthand = true;
		                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
		                }
		                else {
		                    shorthand = true;
		                    value = id;
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectInitializer = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var properties = [];
		        var hasProto = { value: false };
		        while (!this.match('}')) {
		            properties.push(this.parseObjectProperty(hasProto));
		            if (!this.match('}')) {
		                this.expectCommaSeparator();
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectExpression(properties));
		    };
		    // https://tc39.github.io/ecma262/#sec-template-literals
		    Parser.prototype.parseTemplateHead = function () {
		        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
		        var node = this.createNode();
		        var token = this.nextToken();
		        var raw = token.value;
		        var cooked = token.cooked;
		        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
		    };
		    Parser.prototype.parseTemplateElement = function () {
		        if (this.lookahead.type !== 10 /* Template */) {
		            this.throwUnexpectedToken();
		        }
		        var node = this.createNode();
		        var token = this.nextToken();
		        var raw = token.value;
		        var cooked = token.cooked;
		        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
		    };
		    Parser.prototype.parseTemplateLiteral = function () {
		        var node = this.createNode();
		        var expressions = [];
		        var quasis = [];
		        var quasi = this.parseTemplateHead();
		        quasis.push(quasi);
		        while (!quasi.tail) {
		            expressions.push(this.parseExpression());
		            quasi = this.parseTemplateElement();
		            quasis.push(quasi);
		        }
		        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
		    };
		    // https://tc39.github.io/ecma262/#sec-grouping-operator
		    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		            case syntax_1.Syntax.MemberExpression:
		            case syntax_1.Syntax.RestElement:
		            case syntax_1.Syntax.AssignmentPattern:
		                break;
		            case syntax_1.Syntax.SpreadElement:
		                expr.type = syntax_1.Syntax.RestElement;
		                this.reinterpretExpressionAsPattern(expr.argument);
		                break;
		            case syntax_1.Syntax.ArrayExpression:
		                expr.type = syntax_1.Syntax.ArrayPattern;
		                for (var i = 0; i < expr.elements.length; i++) {
		                    if (expr.elements[i] !== null) {
		                        this.reinterpretExpressionAsPattern(expr.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.ObjectExpression:
		                expr.type = syntax_1.Syntax.ObjectPattern;
		                for (var i = 0; i < expr.properties.length; i++) {
		                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
		                }
		                break;
		            case syntax_1.Syntax.AssignmentExpression:
		                expr.type = syntax_1.Syntax.AssignmentPattern;
		                delete expr.operator;
		                this.reinterpretExpressionAsPattern(expr.left);
		                break;
		        }
		    };
		    Parser.prototype.parseGroupExpression = function () {
		        var expr;
		        this.expect('(');
		        if (this.match(')')) {
		            this.nextToken();
		            if (!this.match('=>')) {
		                this.expect('=>');
		            }
		            expr = {
		                type: ArrowParameterPlaceHolder,
		                params: [],
		                async: false
		            };
		        }
		        else {
		            var startToken = this.lookahead;
		            var params = [];
		            if (this.match('...')) {
		                expr = this.parseRestElement(params);
		                this.expect(')');
		                if (!this.match('=>')) {
		                    this.expect('=>');
		                }
		                expr = {
		                    type: ArrowParameterPlaceHolder,
		                    params: [expr],
		                    async: false
		                };
		            }
		            else {
		                var arrow = false;
		                this.context.isBindingElement = true;
		                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                if (this.match(',')) {
		                    var expressions = [];
		                    this.context.isAssignmentTarget = false;
		                    expressions.push(expr);
		                    while (this.lookahead.type !== 2 /* EOF */) {
		                        if (!this.match(',')) {
		                            break;
		                        }
		                        this.nextToken();
		                        if (this.match(')')) {
		                            this.nextToken();
		                            for (var i = 0; i < expressions.length; i++) {
		                                this.reinterpretExpressionAsPattern(expressions[i]);
		                            }
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: expressions,
		                                async: false
		                            };
		                        }
		                        else if (this.match('...')) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            expressions.push(this.parseRestElement(params));
		                            this.expect(')');
		                            if (!this.match('=>')) {
		                                this.expect('=>');
		                            }
		                            this.context.isBindingElement = false;
		                            for (var i = 0; i < expressions.length; i++) {
		                                this.reinterpretExpressionAsPattern(expressions[i]);
		                            }
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: expressions,
		                                async: false
		                            };
		                        }
		                        else {
		                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        if (arrow) {
		                            break;
		                        }
		                    }
		                    if (!arrow) {
		                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		                    }
		                }
		                if (!arrow) {
		                    this.expect(')');
		                    if (this.match('=>')) {
		                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: [expr],
		                                async: false
		                            };
		                        }
		                        if (!arrow) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
		                                for (var i = 0; i < expr.expressions.length; i++) {
		                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
		                                }
		                            }
		                            else {
		                                this.reinterpretExpressionAsPattern(expr);
		                            }
		                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: parameters,
		                                async: false
		                            };
		                        }
		                    }
		                    this.context.isBindingElement = false;
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
		    Parser.prototype.parseArguments = function () {
		        this.expect('(');
		        var args = [];
		        if (!this.match(')')) {
		            while (true) {
		                var expr = this.match('...') ? this.parseSpreadElement() :
		                    this.isolateCoverGrammar(this.parseAssignmentExpression);
		                args.push(expr);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expectCommaSeparator();
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return args;
		    };
		    Parser.prototype.isIdentifierName = function (token) {
		        return token.type === 3 /* Identifier */ ||
		            token.type === 4 /* Keyword */ ||
		            token.type === 1 /* BooleanLiteral */ ||
		            token.type === 5 /* NullLiteral */;
		    };
		    Parser.prototype.parseIdentifierName = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (!this.isIdentifierName(token)) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseNewExpression = function () {
		        var node = this.createNode();
		        var id = this.parseIdentifierName();
		        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
		        var expr;
		        if (this.match('.')) {
		            this.nextToken();
		            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
		                var property = this.parseIdentifierName();
		                expr = new Node.MetaProperty(id, property);
		            }
		            else {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
		            var args = this.match('(') ? this.parseArguments() : [];
		            expr = new Node.NewExpression(callee, args);
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return this.finalize(node, expr);
		    };
		    Parser.prototype.parseAsyncArgument = function () {
		        var arg = this.parseAssignmentExpression();
		        this.context.firstCoverInitializedNameError = null;
		        return arg;
		    };
		    Parser.prototype.parseAsyncArguments = function () {
		        this.expect('(');
		        var args = [];
		        if (!this.match(')')) {
		            while (true) {
		                var expr = this.match('...') ? this.parseSpreadElement() :
		                    this.isolateCoverGrammar(this.parseAsyncArgument);
		                args.push(expr);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expectCommaSeparator();
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return args;
		    };
		    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
		        var startToken = this.lookahead;
		        var maybeAsync = this.matchContextualKeyword('async');
		        var previousAllowIn = this.context.allowIn;
		        this.context.allowIn = true;
		        var expr;
		        if (this.matchKeyword('super') && this.context.inFunctionBody) {
		            expr = this.createNode();
		            this.nextToken();
		            expr = this.finalize(expr, new Node.Super());
		            if (!this.match('(') && !this.match('.') && !this.match('[')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        }
		        while (true) {
		            if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.match('(')) {
		                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = false;
		                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
		                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
		                if (asyncArrow && this.match('=>')) {
		                    for (var i = 0; i < args.length; ++i) {
		                        this.reinterpretExpressionAsPattern(args[i]);
		                    }
		                    expr = {
		                        type: ArrowParameterPlaceHolder,
		                        params: args,
		                        async: true
		                    };
		                }
		            }
		            else if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        this.context.allowIn = previousAllowIn;
		        return expr;
		    };
		    Parser.prototype.parseSuper = function () {
		        var node = this.createNode();
		        this.expectKeyword('super');
		        if (!this.match('[') && !this.match('.')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        return this.finalize(node, new Node.Super());
		    };
		    Parser.prototype.parseLeftHandSideExpression = function () {
		        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
		        var node = this.startNode(this.lookahead);
		        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
		            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        while (true) {
		            if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-update-expressions
		    Parser.prototype.parseUpdateExpression = function () {
		        var expr;
		        var startToken = this.lookahead;
		        if (this.match('++') || this.match('--')) {
		            var node = this.startNode(startToken);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
		            }
		            if (!this.context.isAssignmentTarget) {
		                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		            }
		            var prefix = true;
		            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
		                if (this.match('++') || this.match('--')) {
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
		                    }
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    var operator = this.nextToken().value;
		                    var prefix = false;
		                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-unary-operators
		    Parser.prototype.parseAwaitExpression = function () {
		        var node = this.createNode();
		        this.nextToken();
		        var argument = this.parseUnaryExpression();
		        return this.finalize(node, new Node.AwaitExpression(argument));
		    };
		    Parser.prototype.parseUnaryExpression = function () {
		        var expr;
		        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
		            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
		            var node = this.startNode(this.lookahead);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
		            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
		                this.tolerateError(messages_1.Messages.StrictDelete);
		            }
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else if (this.context.await && this.matchContextualKeyword('await')) {
		            expr = this.parseAwaitExpression();
		        }
		        else {
		            expr = this.parseUpdateExpression();
		        }
		        return expr;
		    };
		    Parser.prototype.parseExponentiationExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
		            this.nextToken();
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-exp-operator
		    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
		    // https://tc39.github.io/ecma262/#sec-additive-operators
		    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
		    // https://tc39.github.io/ecma262/#sec-relational-operators
		    // https://tc39.github.io/ecma262/#sec-equality-operators
		    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
		    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
		    Parser.prototype.binaryPrecedence = function (token) {
		        var op = token.value;
		        var precedence;
		        if (token.type === 7 /* Punctuator */) {
		            precedence = this.operatorPrecedence[op] || 0;
		        }
		        else if (token.type === 4 /* Keyword */) {
		            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
		        }
		        else {
		            precedence = 0;
		        }
		        return precedence;
		    };
		    Parser.prototype.parseBinaryExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
		        var token = this.lookahead;
		        var prec = this.binaryPrecedence(token);
		        if (prec > 0) {
		            this.nextToken();
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var markers = [startToken, this.lookahead];
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            var stack = [left, token.value, right];
		            var precedences = [prec];
		            while (true) {
		                prec = this.binaryPrecedence(this.lookahead);
		                if (prec <= 0) {
		                    break;
		                }
		                // Reduce: make a binary expression from the three topmost entries.
		                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
		                    right = stack.pop();
		                    var operator = stack.pop();
		                    precedences.pop();
		                    left = stack.pop();
		                    markers.pop();
		                    var node = this.startNode(markers[markers.length - 1]);
		                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
		                }
		                // Shift.
		                stack.push(this.nextToken().value);
		                precedences.push(prec);
		                markers.push(this.lookahead);
		                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
		            }
		            // Final reduce to clean-up the stack.
		            var i = stack.length - 1;
		            expr = stack[i];
		            var lastMarker = markers.pop();
		            while (i > 1) {
		                var marker = markers.pop();
		                var lastLineStart = lastMarker && lastMarker.lineStart;
		                var node = this.startNode(marker, lastLineStart);
		                var operator = stack[i - 1];
		                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
		                i -= 2;
		                lastMarker = marker;
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-conditional-operator
		    Parser.prototype.parseConditionalExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
		        if (this.match('?')) {
		            this.nextToken();
		            var previousAllowIn = this.context.allowIn;
		            this.context.allowIn = true;
		            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowIn = previousAllowIn;
		            this.expect(':');
		            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-assignment-operators
		    Parser.prototype.checkPatternParam = function (options, param) {
		        switch (param.type) {
		            case syntax_1.Syntax.Identifier:
		                this.validateParam(options, param, param.name);
		                break;
		            case syntax_1.Syntax.RestElement:
		                this.checkPatternParam(options, param.argument);
		                break;
		            case syntax_1.Syntax.AssignmentPattern:
		                this.checkPatternParam(options, param.left);
		                break;
		            case syntax_1.Syntax.ArrayPattern:
		                for (var i = 0; i < param.elements.length; i++) {
		                    if (param.elements[i] !== null) {
		                        this.checkPatternParam(options, param.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.ObjectPattern:
		                for (var i = 0; i < param.properties.length; i++) {
		                    this.checkPatternParam(options, param.properties[i].value);
		                }
		                break;
		        }
		        options.simple = options.simple && (param instanceof Node.Identifier);
		    };
		    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
		        var params = [expr];
		        var options;
		        var asyncArrow = false;
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		                break;
		            case ArrowParameterPlaceHolder:
		                params = expr.params;
		                asyncArrow = expr.async;
		                break;
		            default:
		                return null;
		        }
		        options = {
		            simple: true,
		            paramSet: {}
		        };
		        for (var i = 0; i < params.length; ++i) {
		            var param = params[i];
		            if (param.type === syntax_1.Syntax.AssignmentPattern) {
		                if (param.right.type === syntax_1.Syntax.YieldExpression) {
		                    if (param.right.argument) {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                    param.right.type = syntax_1.Syntax.Identifier;
		                    param.right.name = 'yield';
		                    delete param.right.argument;
		                    delete param.right.delegate;
		                }
		            }
		            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            this.checkPatternParam(options, param);
		            params[i] = param;
		        }
		        if (this.context.strict || !this.context.allowYield) {
		            for (var i = 0; i < params.length; ++i) {
		                var param = params[i];
		                if (param.type === syntax_1.Syntax.YieldExpression) {
		                    this.throwUnexpectedToken(this.lookahead);
		                }
		            }
		        }
		        if (options.message === messages_1.Messages.StrictParamDupe) {
		            var token = this.context.strict ? options.stricted : options.firstRestricted;
		            this.throwUnexpectedToken(token, options.message);
		        }
		        return {
		            simple: options.simple,
		            params: params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.parseAssignmentExpression = function () {
		        var expr;
		        if (!this.context.allowYield && this.matchKeyword('yield')) {
		            expr = this.parseYieldExpression();
		        }
		        else {
		            var startToken = this.lookahead;
		            var token = startToken;
		            expr = this.parseConditionalExpression();
		            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
		                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
		                    var arg = this.parsePrimaryExpression();
		                    this.reinterpretExpressionAsPattern(arg);
		                    expr = {
		                        type: ArrowParameterPlaceHolder,
		                        params: [arg],
		                        async: true
		                    };
		                }
		            }
		            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
		                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                var isAsync = expr.async;
		                var list = this.reinterpretAsCoverFormalsList(expr);
		                if (list) {
		                    if (this.hasLineTerminator) {
		                        this.tolerateUnexpectedToken(this.lookahead);
		                    }
		                    this.context.firstCoverInitializedNameError = null;
		                    var previousStrict = this.context.strict;
		                    var previousAllowStrictDirective = this.context.allowStrictDirective;
		                    this.context.allowStrictDirective = list.simple;
		                    var previousAllowYield = this.context.allowYield;
		                    var previousAwait = this.context.await;
		                    this.context.allowYield = true;
		                    this.context.await = isAsync;
		                    var node = this.startNode(startToken);
		                    this.expect('=>');
		                    var body = void 0;
		                    if (this.match('{')) {
		                        var previousAllowIn = this.context.allowIn;
		                        this.context.allowIn = true;
		                        body = this.parseFunctionSourceElements();
		                        this.context.allowIn = previousAllowIn;
		                    }
		                    else {
		                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    }
		                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
		                    if (this.context.strict && list.firstRestricted) {
		                        this.throwUnexpectedToken(list.firstRestricted, list.message);
		                    }
		                    if (this.context.strict && list.stricted) {
		                        this.tolerateUnexpectedToken(list.stricted, list.message);
		                    }
		                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
		                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
		                    this.context.strict = previousStrict;
		                    this.context.allowStrictDirective = previousAllowStrictDirective;
		                    this.context.allowYield = previousAllowYield;
		                    this.context.await = previousAwait;
		                }
		            }
		            else {
		                if (this.matchAssign()) {
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
		                        var id = expr;
		                        if (this.scanner.isRestrictedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
		                        }
		                        if (this.scanner.isStrictModeReservedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		                        }
		                    }
		                    if (!this.match('=')) {
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                    }
		                    else {
		                        this.reinterpretExpressionAsPattern(expr);
		                    }
		                    token = this.nextToken();
		                    var operator = token.value;
		                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
		                    this.context.firstCoverInitializedNameError = null;
		                }
		            }
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-comma-operator
		    Parser.prototype.parseExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        if (this.match(',')) {
		            var expressions = [];
		            expressions.push(expr);
		            while (this.lookahead.type !== 2 /* EOF */) {
		                if (!this.match(',')) {
		                    break;
		                }
		                this.nextToken();
		                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		            }
		            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		        }
		        return expr;
		    };
		    // https://tc39.github.io/ecma262/#sec-block
		    Parser.prototype.parseStatementListItem = function () {
		        var statement;
		        this.context.isAssignmentTarget = true;
		        this.context.isBindingElement = true;
		        if (this.lookahead.type === 4 /* Keyword */) {
		            switch (this.lookahead.value) {
		                case 'export':
		                    if (!this.context.isModule) {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
		                    }
		                    statement = this.parseExportDeclaration();
		                    break;
		                case 'import':
		                    if (!this.context.isModule) {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
		                    }
		                    statement = this.parseImportDeclaration();
		                    break;
		                case 'const':
		                    statement = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'function':
		                    statement = this.parseFunctionDeclaration();
		                    break;
		                case 'class':
		                    statement = this.parseClassDeclaration();
		                    break;
		                case 'let':
		                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
		                    break;
		                default:
		                    statement = this.parseStatement();
		                    break;
		            }
		        }
		        else {
		            statement = this.parseStatement();
		        }
		        return statement;
		    };
		    Parser.prototype.parseBlock = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var block = [];
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            block.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.BlockStatement(block));
		    };
		    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
		    Parser.prototype.parseLexicalBinding = function (kind, options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, kind);
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(id.name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (kind === 'const') {
		            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
		                if (this.match('=')) {
		                    this.nextToken();
		                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                }
		                else {
		                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
		                }
		            }
		        }
		        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
		            this.expect('=');
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseBindingList = function (kind, options) {
		        var list = [this.parseLexicalBinding(kind, options)];
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseLexicalBinding(kind, options));
		        }
		        return list;
		    };
		    Parser.prototype.isLexicalDeclaration = function () {
		        var state = this.scanner.saveState();
		        this.scanner.scanComments();
		        var next = this.scanner.lex();
		        this.scanner.restoreState(state);
		        return (next.type === 3 /* Identifier */) ||
		            (next.type === 7 /* Punctuator */ && next.value === '[') ||
		            (next.type === 7 /* Punctuator */ && next.value === '{') ||
		            (next.type === 4 /* Keyword */ && next.value === 'let') ||
		            (next.type === 4 /* Keyword */ && next.value === 'yield');
		    };
		    Parser.prototype.parseLexicalDeclaration = function (options) {
		        var node = this.createNode();
		        var kind = this.nextToken().value;
		        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
		        var declarations = this.parseBindingList(kind, options);
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
		    };
		    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
		    Parser.prototype.parseBindingRestElement = function (params, kind) {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.parsePattern(params, kind);
		        return this.finalize(node, new Node.RestElement(arg));
		    };
		    Parser.prototype.parseArrayPattern = function (params, kind) {
		        var node = this.createNode();
		        this.expect('[');
		        var elements = [];
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else {
		                if (this.match('...')) {
		                    elements.push(this.parseBindingRestElement(params, kind));
		                    break;
		                }
		                else {
		                    elements.push(this.parsePatternWithDefault(params, kind));
		                }
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayPattern(elements));
		    };
		    Parser.prototype.parsePropertyPattern = function (params, kind) {
		        var node = this.createNode();
		        var computed = false;
		        var shorthand = false;
		        var method = false;
		        var key;
		        var value;
		        if (this.lookahead.type === 3 /* Identifier */) {
		            var keyToken = this.lookahead;
		            key = this.parseVariableIdentifier();
		            var init = this.finalize(node, new Node.Identifier(keyToken.value));
		            if (this.match('=')) {
		                params.push(keyToken);
		                shorthand = true;
		                this.nextToken();
		                var expr = this.parseAssignmentExpression();
		                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
		            }
		            else if (!this.match(':')) {
		                params.push(keyToken);
		                shorthand = true;
		                value = init;
		            }
		            else {
		                this.expect(':');
		                value = this.parsePatternWithDefault(params, kind);
		            }
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.expect(':');
		            value = this.parsePatternWithDefault(params, kind);
		        }
		        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectPattern = function (params, kind) {
		        var node = this.createNode();
		        var properties = [];
		        this.expect('{');
		        while (!this.match('}')) {
		            properties.push(this.parsePropertyPattern(params, kind));
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectPattern(properties));
		    };
		    Parser.prototype.parsePattern = function (params, kind) {
		        var pattern;
		        if (this.match('[')) {
		            pattern = this.parseArrayPattern(params, kind);
		        }
		        else if (this.match('{')) {
		            pattern = this.parseObjectPattern(params, kind);
		        }
		        else {
		            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
		                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
		            }
		            params.push(this.lookahead);
		            pattern = this.parseVariableIdentifier(kind);
		        }
		        return pattern;
		    };
		    Parser.prototype.parsePatternWithDefault = function (params, kind) {
		        var startToken = this.lookahead;
		        var pattern = this.parsePattern(params, kind);
		        if (this.match('=')) {
		            this.nextToken();
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = true;
		            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowYield = previousAllowYield;
		            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
		        }
		        return pattern;
		    };
		    // https://tc39.github.io/ecma262/#sec-variable-statement
		    Parser.prototype.parseVariableIdentifier = function (kind) {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
		            if (this.context.strict) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            else if (!this.context.allowYield) {
		                this.throwUnexpectedToken(token);
		            }
		        }
		        else if (token.type !== 3 /* Identifier */) {
		            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            else {
		                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
		                    this.throwUnexpectedToken(token);
		                }
		            }
		        }
		        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
		            this.tolerateUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseVariableDeclaration = function (options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, 'var');
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(id.name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (this.match('=')) {
		            this.nextToken();
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
		            this.expect('=');
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseVariableDeclarationList = function (options) {
		        var opt = { inFor: options.inFor };
		        var list = [];
		        list.push(this.parseVariableDeclaration(opt));
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseVariableDeclaration(opt));
		        }
		        return list;
		    };
		    Parser.prototype.parseVariableStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('var');
		        var declarations = this.parseVariableDeclarationList({ inFor: false });
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
		    };
		    // https://tc39.github.io/ecma262/#sec-empty-statement
		    Parser.prototype.parseEmptyStatement = function () {
		        var node = this.createNode();
		        this.expect(';');
		        return this.finalize(node, new Node.EmptyStatement());
		    };
		    // https://tc39.github.io/ecma262/#sec-expression-statement
		    Parser.prototype.parseExpressionStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ExpressionStatement(expr));
		    };
		    // https://tc39.github.io/ecma262/#sec-if-statement
		    Parser.prototype.parseIfClause = function () {
		        if (this.context.strict && this.matchKeyword('function')) {
		            this.tolerateError(messages_1.Messages.StrictFunction);
		        }
		        return this.parseStatement();
		    };
		    Parser.prototype.parseIfStatement = function () {
		        var node = this.createNode();
		        var consequent;
		        var alternate = null;
		        this.expectKeyword('if');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            consequent = this.parseIfClause();
		            if (this.matchKeyword('else')) {
		                this.nextToken();
		                alternate = this.parseIfClause();
		            }
		        }
		        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
		    };
		    // https://tc39.github.io/ecma262/#sec-do-while-statement
		    Parser.prototype.parseDoWhileStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('do');
		        var previousInIteration = this.context.inIteration;
		        this.context.inIteration = true;
		        var body = this.parseStatement();
		        this.context.inIteration = previousInIteration;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		        }
		        else {
		            this.expect(')');
		            if (this.match(';')) {
		                this.nextToken();
		            }
		        }
		        return this.finalize(node, new Node.DoWhileStatement(body, test));
		    };
		    // https://tc39.github.io/ecma262/#sec-while-statement
		    Parser.prototype.parseWhileStatement = function () {
		        var node = this.createNode();
		        var body;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.parseStatement();
		            this.context.inIteration = previousInIteration;
		        }
		        return this.finalize(node, new Node.WhileStatement(test, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-for-statement
		    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
		    Parser.prototype.parseForStatement = function () {
		        var init = null;
		        var test = null;
		        var update = null;
		        var forIn = true;
		        var left, right;
		        var node = this.createNode();
		        this.expectKeyword('for');
		        this.expect('(');
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else {
		            if (this.matchKeyword('var')) {
		                init = this.createNode();
		                this.nextToken();
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                var declarations = this.parseVariableDeclarationList({ inFor: true });
		                this.context.allowIn = previousAllowIn;
		                if (declarations.length === 1 && this.matchKeyword('in')) {
		                    var decl = declarations[0];
		                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
		                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
		                    }
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.expect(';');
		                }
		            }
		            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
		                init = this.createNode();
		                var kind = this.nextToken().value;
		                if (!this.context.strict && this.lookahead.value === 'in') {
		                    init = this.finalize(init, new Node.Identifier(kind));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else {
		                    var previousAllowIn = this.context.allowIn;
		                    this.context.allowIn = false;
		                    var declarations = this.parseBindingList(kind, { inFor: true });
		                    this.context.allowIn = previousAllowIn;
		                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseExpression();
		                        init = null;
		                    }
		                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseAssignmentExpression();
		                        init = null;
		                        forIn = false;
		                    }
		                    else {
		                        this.consumeSemicolon();
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                    }
		                }
		            }
		            else {
		                var initStartToken = this.lookahead;
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                this.context.allowIn = previousAllowIn;
		                if (this.matchKeyword('in')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (this.matchContextualKeyword('of')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    if (this.match(',')) {
		                        var initSeq = [init];
		                        while (this.match(',')) {
		                            this.nextToken();
		                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
		                    }
		                    this.expect(';');
		                }
		            }
		        }
		        if (typeof left === 'undefined') {
		            if (!this.match(';')) {
		                test = this.parseExpression();
		            }
		            this.expect(';');
		            if (!this.match(')')) {
		                update = this.parseExpression();
		            }
		        }
		        var body;
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.isolateCoverGrammar(this.parseStatement);
		            this.context.inIteration = previousInIteration;
		        }
		        return (typeof left === 'undefined') ?
		            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
		            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
		                this.finalize(node, new Node.ForOfStatement(left, right, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-continue-statement
		    Parser.prototype.parseContinueStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('continue');
		        var label = null;
		        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
		            var id = this.parseVariableIdentifier();
		            label = id;
		            var key = '$' + id.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, id.name);
		            }
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration) {
		            this.throwError(messages_1.Messages.IllegalContinue);
		        }
		        return this.finalize(node, new Node.ContinueStatement(label));
		    };
		    // https://tc39.github.io/ecma262/#sec-break-statement
		    Parser.prototype.parseBreakStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('break');
		        var label = null;
		        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
		            var id = this.parseVariableIdentifier();
		            var key = '$' + id.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, id.name);
		            }
		            label = id;
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
		            this.throwError(messages_1.Messages.IllegalBreak);
		        }
		        return this.finalize(node, new Node.BreakStatement(label));
		    };
		    // https://tc39.github.io/ecma262/#sec-return-statement
		    Parser.prototype.parseReturnStatement = function () {
		        if (!this.context.inFunctionBody) {
		            this.tolerateError(messages_1.Messages.IllegalReturn);
		        }
		        var node = this.createNode();
		        this.expectKeyword('return');
		        var hasArgument = (!this.match(';') && !this.match('}') &&
		            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
		            this.lookahead.type === 8 /* StringLiteral */ ||
		            this.lookahead.type === 10 /* Template */;
		        var argument = hasArgument ? this.parseExpression() : null;
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ReturnStatement(argument));
		    };
		    // https://tc39.github.io/ecma262/#sec-with-statement
		    Parser.prototype.parseWithStatement = function () {
		        if (this.context.strict) {
		            this.tolerateError(messages_1.Messages.StrictModeWith);
		        }
		        var node = this.createNode();
		        var body;
		        this.expectKeyword('with');
		        this.expect('(');
		        var object = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            body = this.parseStatement();
		        }
		        return this.finalize(node, new Node.WithStatement(object, body));
		    };
		    // https://tc39.github.io/ecma262/#sec-switch-statement
		    Parser.prototype.parseSwitchCase = function () {
		        var node = this.createNode();
		        var test;
		        if (this.matchKeyword('default')) {
		            this.nextToken();
		            test = null;
		        }
		        else {
		            this.expectKeyword('case');
		            test = this.parseExpression();
		        }
		        this.expect(':');
		        var consequent = [];
		        while (true) {
		            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
		                break;
		            }
		            consequent.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.SwitchCase(test, consequent));
		    };
		    Parser.prototype.parseSwitchStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('switch');
		        this.expect('(');
		        var discriminant = this.parseExpression();
		        this.expect(')');
		        var previousInSwitch = this.context.inSwitch;
		        this.context.inSwitch = true;
		        var cases = [];
		        var defaultFound = false;
		        this.expect('{');
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            var clause = this.parseSwitchCase();
		            if (clause.test === null) {
		                if (defaultFound) {
		                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
		                }
		                defaultFound = true;
		            }
		            cases.push(clause);
		        }
		        this.expect('}');
		        this.context.inSwitch = previousInSwitch;
		        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
		    };
		    // https://tc39.github.io/ecma262/#sec-labelled-statements
		    Parser.prototype.parseLabelledStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        var statement;
		        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
		            this.nextToken();
		            var id = expr;
		            var key = '$' + id.name;
		            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
		            }
		            this.context.labelSet[key] = true;
		            var body = void 0;
		            if (this.matchKeyword('class')) {
		                this.tolerateUnexpectedToken(this.lookahead);
		                body = this.parseClassDeclaration();
		            }
		            else if (this.matchKeyword('function')) {
		                var token = this.lookahead;
		                var declaration = this.parseFunctionDeclaration();
		                if (this.context.strict) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
		                }
		                else if (declaration.generator) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
		                }
		                body = declaration;
		            }
		            else {
		                body = this.parseStatement();
		            }
		            delete this.context.labelSet[key];
		            statement = new Node.LabeledStatement(id, body);
		        }
		        else {
		            this.consumeSemicolon();
		            statement = new Node.ExpressionStatement(expr);
		        }
		        return this.finalize(node, statement);
		    };
		    // https://tc39.github.io/ecma262/#sec-throw-statement
		    Parser.prototype.parseThrowStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('throw');
		        if (this.hasLineTerminator) {
		            this.throwError(messages_1.Messages.NewlineAfterThrow);
		        }
		        var argument = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ThrowStatement(argument));
		    };
		    // https://tc39.github.io/ecma262/#sec-try-statement
		    Parser.prototype.parseCatchClause = function () {
		        var node = this.createNode();
		        this.expectKeyword('catch');
		        this.expect('(');
		        if (this.match(')')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        var params = [];
		        var param = this.parsePattern(params);
		        var paramMap = {};
		        for (var i = 0; i < params.length; i++) {
		            var key = '$' + params[i].value;
		            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
		                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
		            }
		            paramMap[key] = true;
		        }
		        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord(param.name)) {
		                this.tolerateError(messages_1.Messages.StrictCatchVariable);
		            }
		        }
		        this.expect(')');
		        var body = this.parseBlock();
		        return this.finalize(node, new Node.CatchClause(param, body));
		    };
		    Parser.prototype.parseFinallyClause = function () {
		        this.expectKeyword('finally');
		        return this.parseBlock();
		    };
		    Parser.prototype.parseTryStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('try');
		        var block = this.parseBlock();
		        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
		        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
		        if (!handler && !finalizer) {
		            this.throwError(messages_1.Messages.NoCatchOrFinally);
		        }
		        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
		    };
		    // https://tc39.github.io/ecma262/#sec-debugger-statement
		    Parser.prototype.parseDebuggerStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('debugger');
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.DebuggerStatement());
		    };
		    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
		    Parser.prototype.parseStatement = function () {
		        var statement;
		        switch (this.lookahead.type) {
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 6 /* NumericLiteral */:
		            case 8 /* StringLiteral */:
		            case 10 /* Template */:
		            case 9 /* RegularExpression */:
		                statement = this.parseExpressionStatement();
		                break;
		            case 7 /* Punctuator */:
		                var value = this.lookahead.value;
		                if (value === '{') {
		                    statement = this.parseBlock();
		                }
		                else if (value === '(') {
		                    statement = this.parseExpressionStatement();
		                }
		                else if (value === ';') {
		                    statement = this.parseEmptyStatement();
		                }
		                else {
		                    statement = this.parseExpressionStatement();
		                }
		                break;
		            case 3 /* Identifier */:
		                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
		                break;
		            case 4 /* Keyword */:
		                switch (this.lookahead.value) {
		                    case 'break':
		                        statement = this.parseBreakStatement();
		                        break;
		                    case 'continue':
		                        statement = this.parseContinueStatement();
		                        break;
		                    case 'debugger':
		                        statement = this.parseDebuggerStatement();
		                        break;
		                    case 'do':
		                        statement = this.parseDoWhileStatement();
		                        break;
		                    case 'for':
		                        statement = this.parseForStatement();
		                        break;
		                    case 'function':
		                        statement = this.parseFunctionDeclaration();
		                        break;
		                    case 'if':
		                        statement = this.parseIfStatement();
		                        break;
		                    case 'return':
		                        statement = this.parseReturnStatement();
		                        break;
		                    case 'switch':
		                        statement = this.parseSwitchStatement();
		                        break;
		                    case 'throw':
		                        statement = this.parseThrowStatement();
		                        break;
		                    case 'try':
		                        statement = this.parseTryStatement();
		                        break;
		                    case 'var':
		                        statement = this.parseVariableStatement();
		                        break;
		                    case 'while':
		                        statement = this.parseWhileStatement();
		                        break;
		                    case 'with':
		                        statement = this.parseWithStatement();
		                        break;
		                    default:
		                        statement = this.parseExpressionStatement();
		                        break;
		                }
		                break;
		            default:
		                statement = this.throwUnexpectedToken(this.lookahead);
		        }
		        return statement;
		    };
		    // https://tc39.github.io/ecma262/#sec-function-definitions
		    Parser.prototype.parseFunctionSourceElements = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var body = this.parseDirectivePrologues();
		        var previousLabelSet = this.context.labelSet;
		        var previousInIteration = this.context.inIteration;
		        var previousInSwitch = this.context.inSwitch;
		        var previousInFunctionBody = this.context.inFunctionBody;
		        this.context.labelSet = {};
		        this.context.inIteration = false;
		        this.context.inSwitch = false;
		        this.context.inFunctionBody = true;
		        while (this.lookahead.type !== 2 /* EOF */) {
		            if (this.match('}')) {
		                break;
		            }
		            body.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        this.context.labelSet = previousLabelSet;
		        this.context.inIteration = previousInIteration;
		        this.context.inSwitch = previousInSwitch;
		        this.context.inFunctionBody = previousInFunctionBody;
		        return this.finalize(node, new Node.BlockStatement(body));
		    };
		    Parser.prototype.validateParam = function (options, param, name) {
		        var key = '$' + name;
		        if (this.context.strict) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        else if (!options.firstRestricted) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            else if (this.scanner.isStrictModeReservedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictReservedWord;
		            }
		            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        /* istanbul ignore next */
		        if (typeof Object.defineProperty === 'function') {
		            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
		        }
		        else {
		            options.paramSet[key] = true;
		        }
		    };
		    Parser.prototype.parseRestElement = function (params) {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.parsePattern(params);
		        if (this.match('=')) {
		            this.throwError(messages_1.Messages.DefaultRestParameter);
		        }
		        if (!this.match(')')) {
		            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
		        }
		        return this.finalize(node, new Node.RestElement(arg));
		    };
		    Parser.prototype.parseFormalParameter = function (options) {
		        var params = [];
		        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
		        for (var i = 0; i < params.length; i++) {
		            this.validateParam(options, params[i], params[i].value);
		        }
		        options.simple = options.simple && (param instanceof Node.Identifier);
		        options.params.push(param);
		    };
		    Parser.prototype.parseFormalParameters = function (firstRestricted) {
		        var options;
		        options = {
		            simple: true,
		            params: [],
		            firstRestricted: firstRestricted
		        };
		        this.expect('(');
		        if (!this.match(')')) {
		            options.paramSet = {};
		            while (this.lookahead.type !== 2 /* EOF */) {
		                this.parseFormalParameter(options);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expect(',');
		                if (this.match(')')) {
		                    break;
		                }
		            }
		        }
		        this.expect(')');
		        return {
		            simple: options.simple,
		            params: options.params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.matchAsyncFunction = function () {
		        var match = this.matchContextualKeyword('async');
		        if (match) {
		            var state = this.scanner.saveState();
		            this.scanner.scanComments();
		            var next = this.scanner.lex();
		            this.scanner.restoreState(state);
		            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
		        }
		        return match;
		    };
		    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        var isAsync = this.matchContextualKeyword('async');
		        if (isAsync) {
		            this.nextToken();
		        }
		        this.expectKeyword('function');
		        var isGenerator = isAsync ? false : this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted = null;
		        if (!identifierIsOptional || !this.match('(')) {
		            var token = this.lookahead;
		            id = this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var previousAllowAwait = this.context.await;
		        var previousAllowYield = this.context.allowYield;
		        this.context.await = isAsync;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = formalParameters.simple;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        this.context.await = previousAllowAwait;
		        this.context.allowYield = previousAllowYield;
		        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
		            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
		    };
		    Parser.prototype.parseFunctionExpression = function () {
		        var node = this.createNode();
		        var isAsync = this.matchContextualKeyword('async');
		        if (isAsync) {
		            this.nextToken();
		        }
		        this.expectKeyword('function');
		        var isGenerator = isAsync ? false : this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted;
		        var previousAllowAwait = this.context.await;
		        var previousAllowYield = this.context.allowYield;
		        this.context.await = isAsync;
		        this.context.allowYield = !isGenerator;
		        if (!this.match('(')) {
		            var token = this.lookahead;
		            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var previousAllowStrictDirective = this.context.allowStrictDirective;
		        this.context.allowStrictDirective = formalParameters.simple;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowStrictDirective = previousAllowStrictDirective;
		        this.context.await = previousAllowAwait;
		        this.context.allowYield = previousAllowYield;
		        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
		            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
		    };
		    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
		    Parser.prototype.parseDirective = function () {
		        var token = this.lookahead;
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
		        this.consumeSemicolon();
		        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
		    };
		    Parser.prototype.parseDirectivePrologues = function () {
		        var firstRestricted = null;
		        var body = [];
		        while (true) {
		            var token = this.lookahead;
		            if (token.type !== 8 /* StringLiteral */) {
		                break;
		            }
		            var statement = this.parseDirective();
		            body.push(statement);
		            var directive = statement.directive;
		            if (typeof directive !== 'string') {
		                break;
		            }
		            if (directive === 'use strict') {
		                this.context.strict = true;
		                if (firstRestricted) {
		                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
		                }
		                if (!this.context.allowStrictDirective) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
		                }
		            }
		            else {
		                if (!firstRestricted && token.octal) {
		                    firstRestricted = token;
		                }
		            }
		        }
		        return body;
		    };
		    // https://tc39.github.io/ecma262/#sec-method-definitions
		    Parser.prototype.qualifiedPropertyName = function (token) {
		        switch (token.type) {
		            case 3 /* Identifier */:
		            case 8 /* StringLiteral */:
		            case 1 /* BooleanLiteral */:
		            case 5 /* NullLiteral */:
		            case 6 /* NumericLiteral */:
		            case 4 /* Keyword */:
		                return true;
		            case 7 /* Punctuator */:
		                return token.value === '[';
		        }
		        return false;
		    };
		    Parser.prototype.parseGetterMethod = function () {
		        var node = this.createNode();
		        var isGenerator = false;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters();
		        if (formalParameters.params.length > 0) {
		            this.tolerateError(messages_1.Messages.BadGetterArity);
		        }
		        var method = this.parsePropertyMethod(formalParameters);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
		    };
		    Parser.prototype.parseSetterMethod = function () {
		        var node = this.createNode();
		        var isGenerator = false;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters();
		        if (formalParameters.params.length !== 1) {
		            this.tolerateError(messages_1.Messages.BadSetterArity);
		        }
		        else if (formalParameters.params[0] instanceof Node.RestElement) {
		            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
		        }
		        var method = this.parsePropertyMethod(formalParameters);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
		    };
		    Parser.prototype.parseGeneratorMethod = function () {
		        var node = this.createNode();
		        var isGenerator = true;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = true;
		        var params = this.parseFormalParameters();
		        this.context.allowYield = false;
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
		    Parser.prototype.isStartOfExpression = function () {
		        var start = true;
		        var value = this.lookahead.value;
		        switch (this.lookahead.type) {
		            case 7 /* Punctuator */:
		                start = (value === '[') || (value === '(') || (value === '{') ||
		                    (value === '+') || (value === '-') ||
		                    (value === '!') || (value === '~') ||
		                    (value === '++') || (value === '--') ||
		                    (value === '/') || (value === '/='); // regular expression literal
		                break;
		            case 4 /* Keyword */:
		                start = (value === 'class') || (value === 'delete') ||
		                    (value === 'function') || (value === 'let') || (value === 'new') ||
		                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
		                    (value === 'void') || (value === 'yield');
		                break;
		        }
		        return start;
		    };
		    Parser.prototype.parseYieldExpression = function () {
		        var node = this.createNode();
		        this.expectKeyword('yield');
		        var argument = null;
		        var delegate = false;
		        if (!this.hasLineTerminator) {
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = false;
		            delegate = this.match('*');
		            if (delegate) {
		                this.nextToken();
		                argument = this.parseAssignmentExpression();
		            }
		            else if (this.isStartOfExpression()) {
		                argument = this.parseAssignmentExpression();
		            }
		            this.context.allowYield = previousAllowYield;
		        }
		        return this.finalize(node, new Node.YieldExpression(argument, delegate));
		    };
		    // https://tc39.github.io/ecma262/#sec-class-definitions
		    Parser.prototype.parseClassElement = function (hasConstructor) {
		        var token = this.lookahead;
		        var node = this.createNode();
		        var kind = '';
		        var key = null;
		        var value = null;
		        var computed = false;
		        var method = false;
		        var isStatic = false;
		        var isAsync = false;
		        if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            var id = key;
		            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
		                token = this.lookahead;
		                isStatic = true;
		                computed = this.match('[');
		                if (this.match('*')) {
		                    this.nextToken();
		                }
		                else {
		                    key = this.parseObjectPropertyKey();
		                }
		            }
		            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
		                var punctuator = this.lookahead.value;
		                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
		                    isAsync = true;
		                    token = this.lookahead;
		                    key = this.parseObjectPropertyKey();
		                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
		                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
		                    }
		                }
		            }
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === 3 /* Identifier */) {
		            if (token.value === 'get' && lookaheadPropertyKey) {
		                kind = 'get';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                this.context.allowYield = false;
		                value = this.parseGetterMethod();
		            }
		            else if (token.value === 'set' && lookaheadPropertyKey) {
		                kind = 'set';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                value = this.parseSetterMethod();
		            }
		        }
		        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        if (!kind && key && this.match('(')) {
		            kind = 'init';
		            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
		            method = true;
		        }
		        if (!kind) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        if (kind === 'init') {
		            kind = 'method';
		        }
		        if (!computed) {
		            if (isStatic && this.isPropertyKey(key, 'prototype')) {
		                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
		            }
		            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
		                if (kind !== 'method' || !method || (value && value.generator)) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
		                }
		                if (hasConstructor.value) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
		                }
		                else {
		                    hasConstructor.value = true;
		                }
		                kind = 'constructor';
		            }
		        }
		        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
		    };
		    Parser.prototype.parseClassElementList = function () {
		        var body = [];
		        var hasConstructor = { value: false };
		        this.expect('{');
		        while (!this.match('}')) {
		            if (this.match(';')) {
		                this.nextToken();
		            }
		            else {
		                body.push(this.parseClassElement(hasConstructor));
		            }
		        }
		        this.expect('}');
		        return body;
		    };
		    Parser.prototype.parseClassBody = function () {
		        var node = this.createNode();
		        var elementList = this.parseClassElementList();
		        return this.finalize(node, new Node.ClassBody(elementList));
		    };
		    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
		    };
		    Parser.prototype.parseClassExpression = function () {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
		    };
		    // https://tc39.github.io/ecma262/#sec-scripts
		    // https://tc39.github.io/ecma262/#sec-modules
		    Parser.prototype.parseModule = function () {
		        this.context.strict = true;
		        this.context.isModule = true;
		        this.scanner.isModule = true;
		        var node = this.createNode();
		        var body = this.parseDirectivePrologues();
		        while (this.lookahead.type !== 2 /* EOF */) {
		            body.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.Module(body));
		    };
		    Parser.prototype.parseScript = function () {
		        var node = this.createNode();
		        var body = this.parseDirectivePrologues();
		        while (this.lookahead.type !== 2 /* EOF */) {
		            body.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.Script(body));
		    };
		    // https://tc39.github.io/ecma262/#sec-imports
		    Parser.prototype.parseModuleSpecifier = function () {
		        var node = this.createNode();
		        if (this.lookahead.type !== 8 /* StringLiteral */) {
		            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
		        }
		        var token = this.nextToken();
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    // import {<foo as bar>} ...;
		    Parser.prototype.parseImportSpecifier = function () {
		        var node = this.createNode();
		        var imported;
		        var local;
		        if (this.lookahead.type === 3 /* Identifier */) {
		            imported = this.parseVariableIdentifier();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		        }
		        else {
		            imported = this.parseIdentifierName();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.ImportSpecifier(local, imported));
		    };
		    // {foo, bar as bas}
		    Parser.prototype.parseNamedImports = function () {
		        this.expect('{');
		        var specifiers = [];
		        while (!this.match('}')) {
		            specifiers.push(this.parseImportSpecifier());
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return specifiers;
		    };
		    // import <foo> ...;
		    Parser.prototype.parseImportDefaultSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
		    };
		    // import <* as foo> ...;
		    Parser.prototype.parseImportNamespaceSpecifier = function () {
		        var node = this.createNode();
		        this.expect('*');
		        if (!this.matchContextualKeyword('as')) {
		            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
		        }
		        this.nextToken();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
		    };
		    Parser.prototype.parseImportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalImportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('import');
		        var src;
		        var specifiers = [];
		        if (this.lookahead.type === 8 /* StringLiteral */) {
		            // import 'foo';
		            src = this.parseModuleSpecifier();
		        }
		        else {
		            if (this.match('{')) {
		                // import {bar}
		                specifiers = specifiers.concat(this.parseNamedImports());
		            }
		            else if (this.match('*')) {
		                // import * as foo
		                specifiers.push(this.parseImportNamespaceSpecifier());
		            }
		            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
		                // import foo
		                specifiers.push(this.parseImportDefaultSpecifier());
		                if (this.match(',')) {
		                    this.nextToken();
		                    if (this.match('*')) {
		                        // import foo, * as foo
		                        specifiers.push(this.parseImportNamespaceSpecifier());
		                    }
		                    else if (this.match('{')) {
		                        // import foo, {bar}
		                        specifiers = specifiers.concat(this.parseNamedImports());
		                    }
		                    else {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            src = this.parseModuleSpecifier();
		        }
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
		    };
		    // https://tc39.github.io/ecma262/#sec-exports
		    Parser.prototype.parseExportSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        var exported = local;
		        if (this.matchContextualKeyword('as')) {
		            this.nextToken();
		            exported = this.parseIdentifierName();
		        }
		        return this.finalize(node, new Node.ExportSpecifier(local, exported));
		    };
		    Parser.prototype.parseExportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalExportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('export');
		        var exportDeclaration;
		        if (this.matchKeyword('default')) {
		            // export default ...
		            this.nextToken();
		            if (this.matchKeyword('function')) {
		                // export default function foo () {}
		                // export default function () {}
		                var declaration = this.parseFunctionDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else if (this.matchKeyword('class')) {
		                // export default class foo {}
		                var declaration = this.parseClassDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else if (this.matchContextualKeyword('async')) {
		                // export default async function f () {}
		                // export default async function () {}
		                // export default async x => x
		                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else {
		                if (this.matchContextualKeyword('from')) {
		                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
		                }
		                // export default {};
		                // export default [];
		                // export default (1 + 2);
		                var declaration = this.match('{') ? this.parseObjectInitializer() :
		                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
		                this.consumeSemicolon();
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		        }
		        else if (this.match('*')) {
		            // export * from 'foo';
		            this.nextToken();
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            var src = this.parseModuleSpecifier();
		            this.consumeSemicolon();
		            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
		        }
		        else if (this.lookahead.type === 4 /* Keyword */) {
		            // export var f = 1;
		            var declaration = void 0;
		            switch (this.lookahead.value) {
		                case 'let':
		                case 'const':
		                    declaration = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'var':
		                case 'class':
		                case 'function':
		                    declaration = this.parseStatementListItem();
		                    break;
		                default:
		                    this.throwUnexpectedToken(this.lookahead);
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
		        }
		        else if (this.matchAsyncFunction()) {
		            var declaration = this.parseFunctionDeclaration();
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
		        }
		        else {
		            var specifiers = [];
		            var source = null;
		            var isExportFromIdentifier = false;
		            this.expect('{');
		            while (!this.match('}')) {
		                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
		                specifiers.push(this.parseExportSpecifier());
		                if (!this.match('}')) {
		                    this.expect(',');
		                }
		            }
		            this.expect('}');
		            if (this.matchContextualKeyword('from')) {
		                // export {default} from 'foo';
		                // export {foo} from 'foo';
		                this.nextToken();
		                source = this.parseModuleSpecifier();
		                this.consumeSemicolon();
		            }
		            else if (isExportFromIdentifier) {
		                // export {default}; // missing fromClause
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            else {
		                // export {foo};
		                this.consumeSemicolon();
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
		        }
		        return exportDeclaration;
		    };
		    return Parser;
		}());
		exports.Parser = Parser;


	/***/ },
	/* 9 */
	/***/ function(module, exports) {
		// Ensure the condition is true, otherwise throw an error.
		// This is only to have a better contract semantic, i.e. another safety net
		// to catch a logic error. The condition shall be fulfilled in normal case.
		// Do NOT use this to enforce a certain condition on any user input.
		Object.defineProperty(exports, "__esModule", { value: true });
		function assert(condition, message) {
		    /* istanbul ignore if */
		    if (!condition) {
		        throw new Error('ASSERT: ' + message);
		    }
		}
		exports.assert = assert;


	/***/ },
	/* 10 */
	/***/ function(module, exports) {
		/* tslint:disable:max-classes-per-file */
		Object.defineProperty(exports, "__esModule", { value: true });
		var ErrorHandler = (function () {
		    function ErrorHandler() {
		        this.errors = [];
		        this.tolerant = false;
		    }
		    ErrorHandler.prototype.recordError = function (error) {
		        this.errors.push(error);
		    };
		    ErrorHandler.prototype.tolerate = function (error) {
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    ErrorHandler.prototype.constructError = function (msg, column) {
		        var error = new Error(msg);
		        try {
		            throw error;
		        }
		        catch (base) {
		            /* istanbul ignore else */
		            if (Object.create && Object.defineProperty) {
		                error = Object.create(base);
		                Object.defineProperty(error, 'column', { value: column });
		            }
		        }
		        /* istanbul ignore next */
		        return error;
		    };
		    ErrorHandler.prototype.createError = function (index, line, col, description) {
		        var msg = 'Line ' + line + ': ' + description;
		        var error = this.constructError(msg, col);
		        error.index = index;
		        error.lineNumber = line;
		        error.description = description;
		        return error;
		    };
		    ErrorHandler.prototype.throwError = function (index, line, col, description) {
		        throw this.createError(index, line, col, description);
		    };
		    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
		        var error = this.createError(index, line, col, description);
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    return ErrorHandler;
		}());
		exports.ErrorHandler = ErrorHandler;


	/***/ },
	/* 11 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		// Error messages should be identical to V8.
		exports.Messages = {
		    BadGetterArity: 'Getter must not have any formal parameters',
		    BadSetterArity: 'Setter must have exactly one formal parameter',
		    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
		    ConstructorIsAsync: 'Class constructor may not be an async method',
		    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
		    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
		    DefaultRestParameter: 'Unexpected token =',
		    DuplicateBinding: 'Duplicate binding %0',
		    DuplicateConstructor: 'A class may only have one constructor',
		    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
		    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
		    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
		    IllegalBreak: 'Illegal break statement',
		    IllegalContinue: 'Illegal continue statement',
		    IllegalExportDeclaration: 'Unexpected token',
		    IllegalImportDeclaration: 'Unexpected token',
		    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
		    IllegalReturn: 'Illegal return statement',
		    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
		    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
		    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
		    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
		    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
		    InvalidModuleSpecifier: 'Unexpected token',
		    InvalidRegExp: 'Invalid regular expression',
		    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
		    MissingFromClause: 'Unexpected token',
		    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
		    NewlineAfterThrow: 'Illegal newline after throw',
		    NoAsAfterImportNamespace: 'Unexpected token',
		    NoCatchOrFinally: 'Missing catch or finally after try',
		    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
		    Redeclaration: '%0 \'%1\' has already been declared',
		    StaticPrototype: 'Classes may not have static property named prototype',
		    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
		    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
		    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
		    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
		    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
		    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictModeWith: 'Strict mode code may not include a with statement',
		    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
		    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
		    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
		    StrictReservedWord: 'Use of future reserved word in strict mode',
		    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
		    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
		    UnexpectedEOS: 'Unexpected end of input',
		    UnexpectedIdentifier: 'Unexpected identifier',
		    UnexpectedNumber: 'Unexpected number',
		    UnexpectedReserved: 'Unexpected reserved word',
		    UnexpectedString: 'Unexpected string',
		    UnexpectedTemplate: 'Unexpected quasi %0',
		    UnexpectedToken: 'Unexpected token %0',
		    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
		    UnknownLabel: 'Undefined label \'%0\'',
		    UnterminatedRegExp: 'Invalid regular expression: missing /'
		};


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var assert_1 = __webpack_require__(9);
		var character_1 = __webpack_require__(4);
		var messages_1 = __webpack_require__(11);
		function hexValue(ch) {
		    return '0123456789abcdef'.indexOf(ch.toLowerCase());
		}
		function octalValue(ch) {
		    return '01234567'.indexOf(ch);
		}
		var Scanner = (function () {
		    function Scanner(code, handler) {
		        this.source = code;
		        this.errorHandler = handler;
		        this.trackComment = false;
		        this.isModule = false;
		        this.length = code.length;
		        this.index = 0;
		        this.lineNumber = (code.length > 0) ? 1 : 0;
		        this.lineStart = 0;
		        this.curlyStack = [];
		    }
		    Scanner.prototype.saveState = function () {
		        return {
		            index: this.index,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart
		        };
		    };
		    Scanner.prototype.restoreState = function (state) {
		        this.index = state.index;
		        this.lineNumber = state.lineNumber;
		        this.lineStart = state.lineStart;
		    };
		    Scanner.prototype.eof = function () {
		        return this.index >= this.length;
		    };
		    Scanner.prototype.throwUnexpectedToken = function (message) {
		        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
		        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
		    };
		    Scanner.prototype.tolerateUnexpectedToken = function (message) {
		        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
		        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
		    };
		    // https://tc39.github.io/ecma262/#sec-comments
		    Scanner.prototype.skipSingleLineComment = function (offset) {
		        var comments = [];
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - offset;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - offset
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            ++this.index;
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (this.trackComment) {
		                    loc.end = {
		                        line: this.lineNumber,
		                        column: this.index - this.lineStart - 1
		                    };
		                    var entry = {
		                        multiLine: false,
		                        slice: [start + offset, this.index - 1],
		                        range: [start, this.index - 1],
		                        loc: loc
		                    };
		                    comments.push(entry);
		                }
		                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                return comments;
		            }
		        }
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: false,
		                slice: [start + offset, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        return comments;
		    };
		    Scanner.prototype.skipMultiLineComment = function () {
		        var comments = [];
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - 2;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - 2
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                ++this.index;
		                this.lineStart = this.index;
		            }
		            else if (ch === 0x2A) {
		                // Block comment ends with '*/'.
		                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
		                    this.index += 2;
		                    if (this.trackComment) {
		                        loc.end = {
		                            line: this.lineNumber,
		                            column: this.index - this.lineStart
		                        };
		                        var entry = {
		                            multiLine: true,
		                            slice: [start + 2, this.index - 2],
		                            range: [start, this.index],
		                            loc: loc
		                        };
		                        comments.push(entry);
		                    }
		                    return comments;
		                }
		                ++this.index;
		            }
		            else {
		                ++this.index;
		            }
		        }
		        // Ran off the end of the file - the whole thing is a comment
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: true,
		                slice: [start + 2, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        this.tolerateUnexpectedToken();
		        return comments;
		    };
		    Scanner.prototype.scanComments = function () {
		        var comments;
		        if (this.trackComment) {
		            comments = [];
		        }
		        var start = (this.index === 0);
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isWhiteSpace(ch)) {
		                ++this.index;
		            }
		            else if (character_1.Character.isLineTerminator(ch)) {
		                ++this.index;
		                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                start = true;
		            }
		            else if (ch === 0x2F) {
		                ch = this.source.charCodeAt(this.index + 1);
		                if (ch === 0x2F) {
		                    this.index += 2;
		                    var comment = this.skipSingleLineComment(2);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                    start = true;
		                }
		                else if (ch === 0x2A) {
		                    this.index += 2;
		                    var comment = this.skipMultiLineComment();
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (start && ch === 0x2D) {
		                // U+003E is '>'
		                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
		                    // '-->' is a single-line comment
		                    this.index += 3;
		                    var comment = this.skipSingleLineComment(3);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (ch === 0x3C && !this.isModule) {
		                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
		                    this.index += 4; // `<!--`
		                    var comment = this.skipSingleLineComment(4);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else {
		                break;
		            }
		        }
		        return comments;
		    };
		    // https://tc39.github.io/ecma262/#sec-future-reserved-words
		    Scanner.prototype.isFutureReservedWord = function (id) {
		        switch (id) {
		            case 'enum':
		            case 'export':
		            case 'import':
		            case 'super':
		                return true;
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.isStrictModeReservedWord = function (id) {
		        switch (id) {
		            case 'implements':
		            case 'interface':
		            case 'package':
		            case 'private':
		            case 'protected':
		            case 'public':
		            case 'static':
		            case 'yield':
		            case 'let':
		                return true;
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.isRestrictedWord = function (id) {
		        return id === 'eval' || id === 'arguments';
		    };
		    // https://tc39.github.io/ecma262/#sec-keywords
		    Scanner.prototype.isKeyword = function (id) {
		        switch (id.length) {
		            case 2:
		                return (id === 'if') || (id === 'in') || (id === 'do');
		            case 3:
		                return (id === 'var') || (id === 'for') || (id === 'new') ||
		                    (id === 'try') || (id === 'let');
		            case 4:
		                return (id === 'this') || (id === 'else') || (id === 'case') ||
		                    (id === 'void') || (id === 'with') || (id === 'enum');
		            case 5:
		                return (id === 'while') || (id === 'break') || (id === 'catch') ||
		                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
		                    (id === 'class') || (id === 'super');
		            case 6:
		                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
		                    (id === 'switch') || (id === 'export') || (id === 'import');
		            case 7:
		                return (id === 'default') || (id === 'finally') || (id === 'extends');
		            case 8:
		                return (id === 'function') || (id === 'continue') || (id === 'debugger');
		            case 10:
		                return (id === 'instanceof');
		            default:
		                return false;
		        }
		    };
		    Scanner.prototype.codePointAt = function (i) {
		        var cp = this.source.charCodeAt(i);
		        if (cp >= 0xD800 && cp <= 0xDBFF) {
		            var second = this.source.charCodeAt(i + 1);
		            if (second >= 0xDC00 && second <= 0xDFFF) {
		                var first = cp;
		                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
		            }
		        }
		        return cp;
		    };
		    Scanner.prototype.scanHexEscape = function (prefix) {
		        var len = (prefix === 'u') ? 4 : 2;
		        var code = 0;
		        for (var i = 0; i < len; ++i) {
		            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                code = code * 16 + hexValue(this.source[this.index++]);
		            }
		            else {
		                return null;
		            }
		        }
		        return String.fromCharCode(code);
		    };
		    Scanner.prototype.scanUnicodeCodePointEscape = function () {
		        var ch = this.source[this.index];
		        var code = 0;
		        // At least, one hex digit is required.
		        if (ch === '}') {
		            this.throwUnexpectedToken();
		        }
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
		                break;
		            }
		            code = code * 16 + hexValue(ch);
		        }
		        if (code > 0x10FFFF || ch !== '}') {
		            this.throwUnexpectedToken();
		        }
		        return character_1.Character.fromCodePoint(code);
		    };
		    Scanner.prototype.getIdentifier = function () {
		        var start = this.index++;
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (ch === 0x5C) {
		                // Blackslash (U+005C) marks Unicode escape sequence.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            else if (ch >= 0xD800 && ch < 0xDFFF) {
		                // Need to handle surrogate pairs.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            if (character_1.Character.isIdentifierPart(ch)) {
		                ++this.index;
		            }
		            else {
		                break;
		            }
		        }
		        return this.source.slice(start, this.index);
		    };
		    Scanner.prototype.getComplexIdentifier = function () {
		        var cp = this.codePointAt(this.index);
		        var id = character_1.Character.fromCodePoint(cp);
		        this.index += id.length;
		        // '\u' (U+005C, U+0075) denotes an escaped character.
		        var ch;
		        if (cp === 0x5C) {
		            if (this.source.charCodeAt(this.index) !== 0x75) {
		                this.throwUnexpectedToken();
		            }
		            ++this.index;
		            if (this.source[this.index] === '{') {
		                ++this.index;
		                ch = this.scanUnicodeCodePointEscape();
		            }
		            else {
		                ch = this.scanHexEscape('u');
		                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
		                    this.throwUnexpectedToken();
		                }
		            }
		            id = ch;
		        }
		        while (!this.eof()) {
		            cp = this.codePointAt(this.index);
		            if (!character_1.Character.isIdentifierPart(cp)) {
		                break;
		            }
		            ch = character_1.Character.fromCodePoint(cp);
		            id += ch;
		            this.index += ch.length;
		            // '\u' (U+005C, U+0075) denotes an escaped character.
		            if (cp === 0x5C) {
		                id = id.substr(0, id.length - 1);
		                if (this.source.charCodeAt(this.index) !== 0x75) {
		                    this.throwUnexpectedToken();
		                }
		                ++this.index;
		                if (this.source[this.index] === '{') {
		                    ++this.index;
		                    ch = this.scanUnicodeCodePointEscape();
		                }
		                else {
		                    ch = this.scanHexEscape('u');
		                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
		                        this.throwUnexpectedToken();
		                    }
		                }
		                id += ch;
		            }
		        }
		        return id;
		    };
		    Scanner.prototype.octalToDecimal = function (ch) {
		        // \0 is not octal escape sequence
		        var octal = (ch !== '0');
		        var code = octalValue(ch);
		        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		            octal = true;
		            code = code * 8 + octalValue(this.source[this.index++]);
		            // 3 digits are only allowed when string starts
		            // with 0, 1, 2, 3
		            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                code = code * 8 + octalValue(this.source[this.index++]);
		            }
		        }
		        return {
		            code: code,
		            octal: octal
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-names-and-keywords
		    Scanner.prototype.scanIdentifier = function () {
		        var type;
		        var start = this.index;
		        // Backslash (U+005C) starts an escaped character.
		        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
		        // There is no keyword or literal with only one character.
		        // Thus, it must be an identifier.
		        if (id.length === 1) {
		            type = 3 /* Identifier */;
		        }
		        else if (this.isKeyword(id)) {
		            type = 4 /* Keyword */;
		        }
		        else if (id === 'null') {
		            type = 5 /* NullLiteral */;
		        }
		        else if (id === 'true' || id === 'false') {
		            type = 1 /* BooleanLiteral */;
		        }
		        else {
		            type = 3 /* Identifier */;
		        }
		        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
		            var restore = this.index;
		            this.index = start;
		            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
		            this.index = restore;
		        }
		        return {
		            type: type,
		            value: id,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-punctuators
		    Scanner.prototype.scanPunctuator = function () {
		        var start = this.index;
		        // Check for most common single-character punctuators.
		        var str = this.source[this.index];
		        switch (str) {
		            case '(':
		            case '{':
		                if (str === '{') {
		                    this.curlyStack.push('{');
		                }
		                ++this.index;
		                break;
		            case '.':
		                ++this.index;
		                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
		                    // Spread operator: ...
		                    this.index += 2;
		                    str = '...';
		                }
		                break;
		            case '}':
		                ++this.index;
		                this.curlyStack.pop();
		                break;
		            case ')':
		            case ';':
		            case ',':
		            case '[':
		            case ']':
		            case ':':
		            case '?':
		            case '~':
		                ++this.index;
		                break;
		            default:
		                // 4-character punctuator.
		                str = this.source.substr(this.index, 4);
		                if (str === '>>>=') {
		                    this.index += 4;
		                }
		                else {
		                    // 3-character punctuators.
		                    str = str.substr(0, 3);
		                    if (str === '===' || str === '!==' || str === '>>>' ||
		                        str === '<<=' || str === '>>=' || str === '**=') {
		                        this.index += 3;
		                    }
		                    else {
		                        // 2-character punctuators.
		                        str = str.substr(0, 2);
		                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
		                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
		                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
		                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
		                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
		                            this.index += 2;
		                        }
		                        else {
		                            // 1-character punctuators.
		                            str = this.source[this.index];
		                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
		                                ++this.index;
		                            }
		                        }
		                    }
		                }
		        }
		        if (this.index === start) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 7 /* Punctuator */,
		            value: str,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
		    Scanner.prototype.scanHexLiteral = function (start) {
		        var num = '';
		        while (!this.eof()) {
		            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (num.length === 0) {
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt('0x' + num, 16),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.scanBinaryLiteral = function (start) {
		        var num = '';
		        var ch;
		        while (!this.eof()) {
		            ch = this.source[this.index];
		            if (ch !== '0' && ch !== '1') {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (num.length === 0) {
		            // only 0b or 0B
		            this.throwUnexpectedToken();
		        }
		        if (!this.eof()) {
		            ch = this.source.charCodeAt(this.index);
		            /* istanbul ignore else */
		            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
		                this.throwUnexpectedToken();
		            }
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt(num, 2),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
		        var num = '';
		        var octal = false;
		        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
		            octal = true;
		            num = '0' + this.source[this.index++];
		        }
		        else {
		            ++this.index;
		        }
		        while (!this.eof()) {
		            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            num += this.source[this.index++];
		        }
		        if (!octal && num.length === 0) {
		            // only 0o or 0O
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseInt(num, 8),
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.isImplicitOctalLiteral = function () {
		        // Implicit octal, unless there is a non-octal digit.
		        // (Annex B.1.1 on Numeric Literals)
		        for (var i = this.index + 1; i < this.length; ++i) {
		            var ch = this.source[i];
		            if (ch === '8' || ch === '9') {
		                return false;
		            }
		            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                return true;
		            }
		        }
		        return true;
		    };
		    Scanner.prototype.scanNumericLiteral = function () {
		        var start = this.index;
		        var ch = this.source[start];
		        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
		        var num = '';
		        if (ch !== '.') {
		            num = this.source[this.index++];
		            ch = this.source[this.index];
		            // Hex number starts with '0x'.
		            // Octal number starts with '0'.
		            // Octal number in ES6 starts with '0o'.
		            // Binary number in ES6 starts with '0b'.
		            if (num === '0') {
		                if (ch === 'x' || ch === 'X') {
		                    ++this.index;
		                    return this.scanHexLiteral(start);
		                }
		                if (ch === 'b' || ch === 'B') {
		                    ++this.index;
		                    return this.scanBinaryLiteral(start);
		                }
		                if (ch === 'o' || ch === 'O') {
		                    return this.scanOctalLiteral(ch, start);
		                }
		                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                    if (this.isImplicitOctalLiteral()) {
		                        return this.scanOctalLiteral(ch, start);
		                    }
		                }
		            }
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                num += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === '.') {
		            num += this.source[this.index++];
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                num += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === 'e' || ch === 'E') {
		            num += this.source[this.index++];
		            ch = this.source[this.index];
		            if (ch === '+' || ch === '-') {
		                num += this.source[this.index++];
		            }
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                    num += this.source[this.index++];
		                }
		            }
		            else {
		                this.throwUnexpectedToken();
		            }
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 6 /* NumericLiteral */,
		            value: parseFloat(num),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-string-literals
		    Scanner.prototype.scanStringLiteral = function () {
		        var start = this.index;
		        var quote = this.source[start];
		        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
		        ++this.index;
		        var octal = false;
		        var str = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === quote) {
		                quote = '';
		                break;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'u':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                str += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var unescaped_1 = this.scanHexEscape(ch);
		                                if (unescaped_1 === null) {
		                                    this.throwUnexpectedToken();
		                                }
		                                str += unescaped_1;
		                            }
		                            break;
		                        case 'x':
		                            var unescaped = this.scanHexEscape(ch);
		                            if (unescaped === null) {
		                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
		                            }
		                            str += unescaped;
		                            break;
		                        case 'n':
		                            str += '\n';
		                            break;
		                        case 'r':
		                            str += '\r';
		                            break;
		                        case 't':
		                            str += '\t';
		                            break;
		                        case 'b':
		                            str += '\b';
		                            break;
		                        case 'f':
		                            str += '\f';
		                            break;
		                        case 'v':
		                            str += '\x0B';
		                            break;
		                        case '8':
		                        case '9':
		                            str += ch;
		                            this.tolerateUnexpectedToken();
		                            break;
		                        default:
		                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                var octToDec = this.octalToDecimal(ch);
		                                octal = octToDec.octal || octal;
		                                str += String.fromCharCode(octToDec.code);
		                            }
		                            else {
		                                str += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                break;
		            }
		            else {
		                str += ch;
		            }
		        }
		        if (quote !== '') {
		            this.index = start;
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: 8 /* StringLiteral */,
		            value: str,
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
		    Scanner.prototype.scanTemplate = function () {
		        var cooked = '';
		        var terminated = false;
		        var start = this.index;
		        var head = (this.source[start] === '`');
		        var tail = false;
		        var rawOffset = 2;
		        ++this.index;
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === '`') {
		                rawOffset = 1;
		                tail = true;
		                terminated = true;
		                break;
		            }
		            else if (ch === '$') {
		                if (this.source[this.index] === '{') {
		                    this.curlyStack.push('${');
		                    ++this.index;
		                    terminated = true;
		                    break;
		                }
		                cooked += ch;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'n':
		                            cooked += '\n';
		                            break;
		                        case 'r':
		                            cooked += '\r';
		                            break;
		                        case 't':
		                            cooked += '\t';
		                            break;
		                        case 'u':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                cooked += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var restore = this.index;
		                                var unescaped_2 = this.scanHexEscape(ch);
		                                if (unescaped_2 !== null) {
		                                    cooked += unescaped_2;
		                                }
		                                else {
		                                    this.index = restore;
		                                    cooked += ch;
		                                }
		                            }
		                            break;
		                        case 'x':
		                            var unescaped = this.scanHexEscape(ch);
		                            if (unescaped === null) {
		                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
		                            }
		                            cooked += unescaped;
		                            break;
		                        case 'b':
		                            cooked += '\b';
		                            break;
		                        case 'f':
		                            cooked += '\f';
		                            break;
		                        case 'v':
		                            cooked += '\v';
		                            break;
		                        default:
		                            if (ch === '0') {
		                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                                    // Illegal: \01 \02 and so on
		                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                                }
		                                cooked += '\0';
		                            }
		                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                // Illegal: \1 \2
		                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                            }
		                            else {
		                                cooked += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.lineNumber;
		                if (ch === '\r' && this.source[this.index] === '\n') {
		                    ++this.index;
		                }
		                this.lineStart = this.index;
		                cooked += '\n';
		            }
		            else {
		                cooked += ch;
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken();
		        }
		        if (!head) {
		            this.curlyStack.pop();
		        }
		        return {
		            type: 10 /* Template */,
		            value: this.source.slice(start + 1, this.index - rawOffset),
		            cooked: cooked,
		            head: head,
		            tail: tail,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
		    Scanner.prototype.testRegExp = function (pattern, flags) {
		        // The BMP character to use as a replacement for astral symbols when
		        // translating an ES6 "u"-flagged pattern to an ES5-compatible
		        // approximation.
		        // Note: replacing with '\uFFFF' enables false positives in unlikely
		        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
		        // pattern that would not be detected by this substitution.
		        var astralSubstitute = '\uFFFF';
		        var tmp = pattern;
		        var self = this;
		        if (flags.indexOf('u') >= 0) {
		            tmp = tmp
		                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
		                var codePoint = parseInt($1 || $2, 16);
		                if (codePoint > 0x10FFFF) {
		                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		                }
		                if (codePoint <= 0xFFFF) {
		                    return String.fromCharCode(codePoint);
		                }
		                return astralSubstitute;
		            })
		                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
		        }
		        // First, detect invalid regular expressions.
		        try {
		            RegExp(tmp);
		        }
		        catch (e) {
		            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		        }
		        // Return a regular expression object for this pattern-flag pair, or
		        // `null` in case the current environment doesn't support the flags it
		        // uses.
		        try {
		            return new RegExp(pattern, flags);
		        }
		        catch (exception) {
		            /* istanbul ignore next */
		            return null;
		        }
		    };
		    Scanner.prototype.scanRegExpBody = function () {
		        var ch = this.source[this.index];
		        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
		        var str = this.source[this.index++];
		        var classMarker = false;
		        var terminated = false;
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            str += ch;
		            if (ch === '\\') {
		                ch = this.source[this.index++];
		                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
		                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		                }
		                str += ch;
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		            }
		            else if (classMarker) {
		                if (ch === ']') {
		                    classMarker = false;
		                }
		            }
		            else {
		                if (ch === '/') {
		                    terminated = true;
		                    break;
		                }
		                else if (ch === '[') {
		                    classMarker = true;
		                }
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		        }
		        // Exclude leading and trailing slash.
		        return str.substr(1, str.length - 2);
		    };
		    Scanner.prototype.scanRegExpFlags = function () {
		        var str = '';
		        var flags = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index];
		            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
		                break;
		            }
		            ++this.index;
		            if (ch === '\\' && !this.eof()) {
		                ch = this.source[this.index];
		                if (ch === 'u') {
		                    ++this.index;
		                    var restore = this.index;
		                    var char = this.scanHexEscape('u');
		                    if (char !== null) {
		                        flags += char;
		                        for (str += '\\u'; restore < this.index; ++restore) {
		                            str += this.source[restore];
		                        }
		                    }
		                    else {
		                        this.index = restore;
		                        flags += 'u';
		                        str += '\\u';
		                    }
		                    this.tolerateUnexpectedToken();
		                }
		                else {
		                    str += '\\';
		                    this.tolerateUnexpectedToken();
		                }
		            }
		            else {
		                flags += ch;
		                str += ch;
		            }
		        }
		        return flags;
		    };
		    Scanner.prototype.scanRegExp = function () {
		        var start = this.index;
		        var pattern = this.scanRegExpBody();
		        var flags = this.scanRegExpFlags();
		        var value = this.testRegExp(pattern, flags);
		        return {
		            type: 9 /* RegularExpression */,
		            value: '',
		            pattern: pattern,
		            flags: flags,
		            regex: value,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    Scanner.prototype.lex = function () {
		        if (this.eof()) {
		            return {
		                type: 2 /* EOF */,
		                value: '',
		                lineNumber: this.lineNumber,
		                lineStart: this.lineStart,
		                start: this.index,
		                end: this.index
		            };
		        }
		        var cp = this.source.charCodeAt(this.index);
		        if (character_1.Character.isIdentifierStart(cp)) {
		            return this.scanIdentifier();
		        }
		        // Very common: ( and ) and ;
		        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
		            return this.scanPunctuator();
		        }
		        // String literal starts with single quote (U+0027) or double quote (U+0022).
		        if (cp === 0x27 || cp === 0x22) {
		            return this.scanStringLiteral();
		        }
		        // Dot (.) U+002E can also start a floating-point number, hence the need
		        // to check the next character.
		        if (cp === 0x2E) {
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
		                return this.scanNumericLiteral();
		            }
		            return this.scanPunctuator();
		        }
		        if (character_1.Character.isDecimalDigit(cp)) {
		            return this.scanNumericLiteral();
		        }
		        // Template literals start with ` (U+0060) for template head
		        // or } (U+007D) for template middle or template tail.
		        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
		            return this.scanTemplate();
		        }
		        // Possible identifier start in a surrogate pair.
		        if (cp >= 0xD800 && cp < 0xDFFF) {
		            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
		                return this.scanIdentifier();
		            }
		        }
		        return this.scanPunctuator();
		    };
		    return Scanner;
		}());
		exports.Scanner = Scanner;


	/***/ },
	/* 13 */
	/***/ function(module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.TokenName = {};
		exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
		exports.TokenName[2 /* EOF */] = '<end>';
		exports.TokenName[3 /* Identifier */] = 'Identifier';
		exports.TokenName[4 /* Keyword */] = 'Keyword';
		exports.TokenName[5 /* NullLiteral */] = 'Null';
		exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
		exports.TokenName[7 /* Punctuator */] = 'Punctuator';
		exports.TokenName[8 /* StringLiteral */] = 'String';
		exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
		exports.TokenName[10 /* Template */] = 'Template';


	/***/ },
	/* 14 */
	/***/ function(module, exports) {
		// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.XHTMLEntities = {
		    quot: '\u0022',
		    amp: '\u0026',
		    apos: '\u0027',
		    gt: '\u003E',
		    nbsp: '\u00A0',
		    iexcl: '\u00A1',
		    cent: '\u00A2',
		    pound: '\u00A3',
		    curren: '\u00A4',
		    yen: '\u00A5',
		    brvbar: '\u00A6',
		    sect: '\u00A7',
		    uml: '\u00A8',
		    copy: '\u00A9',
		    ordf: '\u00AA',
		    laquo: '\u00AB',
		    not: '\u00AC',
		    shy: '\u00AD',
		    reg: '\u00AE',
		    macr: '\u00AF',
		    deg: '\u00B0',
		    plusmn: '\u00B1',
		    sup2: '\u00B2',
		    sup3: '\u00B3',
		    acute: '\u00B4',
		    micro: '\u00B5',
		    para: '\u00B6',
		    middot: '\u00B7',
		    cedil: '\u00B8',
		    sup1: '\u00B9',
		    ordm: '\u00BA',
		    raquo: '\u00BB',
		    frac14: '\u00BC',
		    frac12: '\u00BD',
		    frac34: '\u00BE',
		    iquest: '\u00BF',
		    Agrave: '\u00C0',
		    Aacute: '\u00C1',
		    Acirc: '\u00C2',
		    Atilde: '\u00C3',
		    Auml: '\u00C4',
		    Aring: '\u00C5',
		    AElig: '\u00C6',
		    Ccedil: '\u00C7',
		    Egrave: '\u00C8',
		    Eacute: '\u00C9',
		    Ecirc: '\u00CA',
		    Euml: '\u00CB',
		    Igrave: '\u00CC',
		    Iacute: '\u00CD',
		    Icirc: '\u00CE',
		    Iuml: '\u00CF',
		    ETH: '\u00D0',
		    Ntilde: '\u00D1',
		    Ograve: '\u00D2',
		    Oacute: '\u00D3',
		    Ocirc: '\u00D4',
		    Otilde: '\u00D5',
		    Ouml: '\u00D6',
		    times: '\u00D7',
		    Oslash: '\u00D8',
		    Ugrave: '\u00D9',
		    Uacute: '\u00DA',
		    Ucirc: '\u00DB',
		    Uuml: '\u00DC',
		    Yacute: '\u00DD',
		    THORN: '\u00DE',
		    szlig: '\u00DF',
		    agrave: '\u00E0',
		    aacute: '\u00E1',
		    acirc: '\u00E2',
		    atilde: '\u00E3',
		    auml: '\u00E4',
		    aring: '\u00E5',
		    aelig: '\u00E6',
		    ccedil: '\u00E7',
		    egrave: '\u00E8',
		    eacute: '\u00E9',
		    ecirc: '\u00EA',
		    euml: '\u00EB',
		    igrave: '\u00EC',
		    iacute: '\u00ED',
		    icirc: '\u00EE',
		    iuml: '\u00EF',
		    eth: '\u00F0',
		    ntilde: '\u00F1',
		    ograve: '\u00F2',
		    oacute: '\u00F3',
		    ocirc: '\u00F4',
		    otilde: '\u00F5',
		    ouml: '\u00F6',
		    divide: '\u00F7',
		    oslash: '\u00F8',
		    ugrave: '\u00F9',
		    uacute: '\u00FA',
		    ucirc: '\u00FB',
		    uuml: '\u00FC',
		    yacute: '\u00FD',
		    thorn: '\u00FE',
		    yuml: '\u00FF',
		    OElig: '\u0152',
		    oelig: '\u0153',
		    Scaron: '\u0160',
		    scaron: '\u0161',
		    Yuml: '\u0178',
		    fnof: '\u0192',
		    circ: '\u02C6',
		    tilde: '\u02DC',
		    Alpha: '\u0391',
		    Beta: '\u0392',
		    Gamma: '\u0393',
		    Delta: '\u0394',
		    Epsilon: '\u0395',
		    Zeta: '\u0396',
		    Eta: '\u0397',
		    Theta: '\u0398',
		    Iota: '\u0399',
		    Kappa: '\u039A',
		    Lambda: '\u039B',
		    Mu: '\u039C',
		    Nu: '\u039D',
		    Xi: '\u039E',
		    Omicron: '\u039F',
		    Pi: '\u03A0',
		    Rho: '\u03A1',
		    Sigma: '\u03A3',
		    Tau: '\u03A4',
		    Upsilon: '\u03A5',
		    Phi: '\u03A6',
		    Chi: '\u03A7',
		    Psi: '\u03A8',
		    Omega: '\u03A9',
		    alpha: '\u03B1',
		    beta: '\u03B2',
		    gamma: '\u03B3',
		    delta: '\u03B4',
		    epsilon: '\u03B5',
		    zeta: '\u03B6',
		    eta: '\u03B7',
		    theta: '\u03B8',
		    iota: '\u03B9',
		    kappa: '\u03BA',
		    lambda: '\u03BB',
		    mu: '\u03BC',
		    nu: '\u03BD',
		    xi: '\u03BE',
		    omicron: '\u03BF',
		    pi: '\u03C0',
		    rho: '\u03C1',
		    sigmaf: '\u03C2',
		    sigma: '\u03C3',
		    tau: '\u03C4',
		    upsilon: '\u03C5',
		    phi: '\u03C6',
		    chi: '\u03C7',
		    psi: '\u03C8',
		    omega: '\u03C9',
		    thetasym: '\u03D1',
		    upsih: '\u03D2',
		    piv: '\u03D6',
		    ensp: '\u2002',
		    emsp: '\u2003',
		    thinsp: '\u2009',
		    zwnj: '\u200C',
		    zwj: '\u200D',
		    lrm: '\u200E',
		    rlm: '\u200F',
		    ndash: '\u2013',
		    mdash: '\u2014',
		    lsquo: '\u2018',
		    rsquo: '\u2019',
		    sbquo: '\u201A',
		    ldquo: '\u201C',
		    rdquo: '\u201D',
		    bdquo: '\u201E',
		    dagger: '\u2020',
		    Dagger: '\u2021',
		    bull: '\u2022',
		    hellip: '\u2026',
		    permil: '\u2030',
		    prime: '\u2032',
		    Prime: '\u2033',
		    lsaquo: '\u2039',
		    rsaquo: '\u203A',
		    oline: '\u203E',
		    frasl: '\u2044',
		    euro: '\u20AC',
		    image: '\u2111',
		    weierp: '\u2118',
		    real: '\u211C',
		    trade: '\u2122',
		    alefsym: '\u2135',
		    larr: '\u2190',
		    uarr: '\u2191',
		    rarr: '\u2192',
		    darr: '\u2193',
		    harr: '\u2194',
		    crarr: '\u21B5',
		    lArr: '\u21D0',
		    uArr: '\u21D1',
		    rArr: '\u21D2',
		    dArr: '\u21D3',
		    hArr: '\u21D4',
		    forall: '\u2200',
		    part: '\u2202',
		    exist: '\u2203',
		    empty: '\u2205',
		    nabla: '\u2207',
		    isin: '\u2208',
		    notin: '\u2209',
		    ni: '\u220B',
		    prod: '\u220F',
		    sum: '\u2211',
		    minus: '\u2212',
		    lowast: '\u2217',
		    radic: '\u221A',
		    prop: '\u221D',
		    infin: '\u221E',
		    ang: '\u2220',
		    and: '\u2227',
		    or: '\u2228',
		    cap: '\u2229',
		    cup: '\u222A',
		    int: '\u222B',
		    there4: '\u2234',
		    sim: '\u223C',
		    cong: '\u2245',
		    asymp: '\u2248',
		    ne: '\u2260',
		    equiv: '\u2261',
		    le: '\u2264',
		    ge: '\u2265',
		    sub: '\u2282',
		    sup: '\u2283',
		    nsub: '\u2284',
		    sube: '\u2286',
		    supe: '\u2287',
		    oplus: '\u2295',
		    otimes: '\u2297',
		    perp: '\u22A5',
		    sdot: '\u22C5',
		    lceil: '\u2308',
		    rceil: '\u2309',
		    lfloor: '\u230A',
		    rfloor: '\u230B',
		    loz: '\u25CA',
		    spades: '\u2660',
		    clubs: '\u2663',
		    hearts: '\u2665',
		    diams: '\u2666',
		    lang: '\u27E8',
		    rang: '\u27E9'
		};


	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
		Object.defineProperty(exports, "__esModule", { value: true });
		var error_handler_1 = __webpack_require__(10);
		var scanner_1 = __webpack_require__(12);
		var token_1 = __webpack_require__(13);
		var Reader = (function () {
		    function Reader() {
		        this.values = [];
		        this.curly = this.paren = -1;
		    }
		    // A function following one of those tokens is an expression.
		    Reader.prototype.beforeFunctionExpression = function (t) {
		        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
		            'return', 'case', 'delete', 'throw', 'void',
		            // assignment operators
		            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
		            '&=', '|=', '^=', ',',
		            // binary/unary operators
		            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
		            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
		            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
		    };
		    // Determine if forward slash (/) is an operator or part of a regular expression
		    // https://github.com/mozilla/sweet.js/wiki/design
		    Reader.prototype.isRegexStart = function () {
		        var previous = this.values[this.values.length - 1];
		        var regex = (previous !== null);
		        switch (previous) {
		            case 'this':
		            case ']':
		                regex = false;
		                break;
		            case ')':
		                var keyword = this.values[this.paren - 1];
		                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
		                break;
		            case '}':
		                // Dividing a function by anything makes little sense,
		                // but we have to check for that.
		                regex = false;
		                if (this.values[this.curly - 3] === 'function') {
		                    // Anonymous function, e.g. function(){} /42
		                    var check = this.values[this.curly - 4];
		                    regex = check ? !this.beforeFunctionExpression(check) : false;
		                }
		                else if (this.values[this.curly - 4] === 'function') {
		                    // Named function, e.g. function f(){} /42/
		                    var check = this.values[this.curly - 5];
		                    regex = check ? !this.beforeFunctionExpression(check) : true;
		                }
		                break;
		        }
		        return regex;
		    };
		    Reader.prototype.push = function (token) {
		        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
		            if (token.value === '{') {
		                this.curly = this.values.length;
		            }
		            else if (token.value === '(') {
		                this.paren = this.values.length;
		            }
		            this.values.push(token.value);
		        }
		        else {
		            this.values.push(null);
		        }
		    };
		    return Reader;
		}());
		var Tokenizer = (function () {
		    function Tokenizer(code, config) {
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
		        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
		        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
		        this.buffer = [];
		        this.reader = new Reader();
		    }
		    Tokenizer.prototype.errors = function () {
		        return this.errorHandler.errors;
		    };
		    Tokenizer.prototype.getNextToken = function () {
		        if (this.buffer.length === 0) {
		            var comments = this.scanner.scanComments();
		            if (this.scanner.trackComment) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
		                    var comment = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: value
		                    };
		                    if (this.trackRange) {
		                        comment.range = e.range;
		                    }
		                    if (this.trackLoc) {
		                        comment.loc = e.loc;
		                    }
		                    this.buffer.push(comment);
		                }
		            }
		            if (!this.scanner.eof()) {
		                var loc = void 0;
		                if (this.trackLoc) {
		                    loc = {
		                        start: {
		                            line: this.scanner.lineNumber,
		                            column: this.scanner.index - this.scanner.lineStart
		                        },
		                        end: {}
		                    };
		                }
		                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
		                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
		                this.reader.push(token);
		                var entry = {
		                    type: token_1.TokenName[token.type],
		                    value: this.scanner.source.slice(token.start, token.end)
		                };
		                if (this.trackRange) {
		                    entry.range = [token.start, token.end];
		                }
		                if (this.trackLoc) {
		                    loc.end = {
		                        line: this.scanner.lineNumber,
		                        column: this.scanner.index - this.scanner.lineStart
		                    };
		                    entry.loc = loc;
		                }
		                if (token.type === 9 /* RegularExpression */) {
		                    var pattern = token.pattern;
		                    var flags = token.flags;
		                    entry.regex = { pattern: pattern, flags: flags };
		                }
		                this.buffer.push(entry);
		            }
		        }
		        return this.buffer.shift();
		    };
		    return Tokenizer;
		}());
		exports.Tokenizer = Tokenizer;


	/***/ }
	/******/ ])
	});
	}(esprima));

	Object.defineProperty(esprima$1, "__esModule", { value: true });
	// This module is suitable for passing as options.parser when calling
	// recast.parse to process ECMAScript code with Esprima:
	//
	//   const ast = recast.parse(source, {
	//     parser: require("recast/parsers/esprima")
	//   });
	//
	var util_1$4 = util$i;
	function parse$m(source, options) {
	    var comments = [];
	    var ast = esprima.exports.parse(source, {
	        loc: true,
	        locations: true,
	        comment: true,
	        onComment: comments,
	        range: util_1$4.getOption(options, "range", false),
	        tolerant: util_1$4.getOption(options, "tolerant", true),
	        tokens: true
	    });
	    if (!Array.isArray(ast.comments)) {
	        ast.comments = comments;
	    }
	    return ast;
	}
	esprima$1.parse = parse$m;

	/*
	The MIT License (MIT)

	Copyright (c) 2016 CoderPuppy

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	*/
	var _endianness;
	function endianness() {
	  if (typeof _endianness === 'undefined') {
	    var a = new ArrayBuffer(2);
	    var b = new Uint8Array(a);
	    var c = new Uint16Array(a);
	    b[0] = 1;
	    b[1] = 2;
	    if (c[0] === 258) {
	      _endianness = 'BE';
	    } else if (c[0] === 513){
	      _endianness = 'LE';
	    } else {
	      throw new Error('unable to figure out endianess');
	    }
	  }
	  return _endianness;
	}

	function hostname() {
	  if (typeof window.location !== 'undefined') {
	    return window.location.hostname
	  } else return '';
	}

	function loadavg() {
	  return [];
	}

	function uptime() {
	  return 0;
	}

	function freemem() {
	  return Number.MAX_VALUE;
	}

	function totalmem() {
	  return Number.MAX_VALUE;
	}

	function cpus() {
	  return [];
	}

	function type() {
	  return 'Browser';
	}

	function release () {
	  if (typeof window.navigator !== 'undefined') {
	    return window.navigator.appVersion;
	  }
	  return '';
	}

	function networkInterfaces(){}
	function getNetworkInterfaces(){}

	function arch() {
	  return 'javascript';
	}

	function platform() {
	  return 'browser';
	}

	function tmpDir() {
	  return '/tmp';
	}
	var tmpdir = tmpDir;

	var EOL = '\n';
	var os = {
	  EOL: EOL,
	  tmpdir: tmpdir,
	  tmpDir: tmpDir,
	  networkInterfaces:networkInterfaces,
	  getNetworkInterfaces: getNetworkInterfaces,
	  release: release,
	  type: type,
	  cpus: cpus,
	  totalmem: totalmem,
	  freemem: freemem,
	  uptime: uptime,
	  loadavg: loadavg,
	  hostname: hostname,
	  endianness: endianness,
	};

	var os$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		endianness: endianness,
		hostname: hostname,
		loadavg: loadavg,
		uptime: uptime,
		freemem: freemem,
		totalmem: totalmem,
		cpus: cpus,
		type: type,
		release: release,
		networkInterfaces: networkInterfaces,
		getNetworkInterfaces: getNetworkInterfaces,
		arch: arch,
		platform: platform,
		tmpDir: tmpDir,
		tmpdir: tmpdir,
		EOL: EOL,
		'default': os
	});

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(os$1);

	Object.defineProperty(options, "__esModule", { value: true });
	var defaults = {
	    parser: esprima$1,
	    tabWidth: 4,
	    useTabs: false,
	    reuseWhitespace: true,
	    lineTerminator: require$$1.EOL || "\n",
	    wrapColumn: 74,
	    sourceFileName: null,
	    sourceMapName: null,
	    sourceRoot: null,
	    inputSourceMap: null,
	    range: false,
	    tolerant: true,
	    quote: null,
	    trailingComma: false,
	    arrayBracketSpacing: false,
	    objectCurlySpacing: true,
	    arrowParensAlways: false,
	    flowObjectCommas: true,
	    tokens: true
	};
	var hasOwn$6 = defaults.hasOwnProperty;
	// Copy options and fill in default values.
	function normalize$1(opts) {
	    var options = opts || defaults;
	    function get(key) {
	        return hasOwn$6.call(options, key)
	            ? options[key]
	            : defaults[key];
	    }
	    return {
	        tabWidth: +get("tabWidth"),
	        useTabs: !!get("useTabs"),
	        reuseWhitespace: !!get("reuseWhitespace"),
	        lineTerminator: get("lineTerminator"),
	        wrapColumn: Math.max(get("wrapColumn"), 0),
	        sourceFileName: get("sourceFileName"),
	        sourceMapName: get("sourceMapName"),
	        sourceRoot: get("sourceRoot"),
	        inputSourceMap: get("inputSourceMap"),
	        parser: get("esprima") || get("parser"),
	        range: get("range"),
	        tolerant: get("tolerant"),
	        quote: get("quote"),
	        trailingComma: get("trailingComma"),
	        arrayBracketSpacing: get("arrayBracketSpacing"),
	        objectCurlySpacing: get("objectCurlySpacing"),
	        arrowParensAlways: get("arrowParensAlways"),
	        flowObjectCommas: get("flowObjectCommas"),
	        tokens: !!get("tokens")
	    };
	}
	options.normalize = normalize$1;

	var lines = {};

	var mapping = {};

	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(mapping, "__esModule", { value: true });
	var assert_1$6 = __importDefault$7(require$$0$4);
	var util_1$3 = util$i;
	var Mapping$1 = /** @class */ (function () {
	    function Mapping(sourceLines, sourceLoc, targetLoc) {
	        if (targetLoc === void 0) { targetLoc = sourceLoc; }
	        this.sourceLines = sourceLines;
	        this.sourceLoc = sourceLoc;
	        this.targetLoc = targetLoc;
	    }
	    Mapping.prototype.slice = function (lines, start, end) {
	        if (end === void 0) { end = lines.lastPos(); }
	        var sourceLines = this.sourceLines;
	        var sourceLoc = this.sourceLoc;
	        var targetLoc = this.targetLoc;
	        function skip(name) {
	            var sourceFromPos = sourceLoc[name];
	            var targetFromPos = targetLoc[name];
	            var targetToPos = start;
	            if (name === "end") {
	                targetToPos = end;
	            }
	            else {
	                assert_1$6.default.strictEqual(name, "start");
	            }
	            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
	        }
	        if (util_1$3.comparePos(start, targetLoc.start) <= 0) {
	            if (util_1$3.comparePos(targetLoc.end, end) <= 0) {
	                targetLoc = {
	                    start: subtractPos(targetLoc.start, start.line, start.column),
	                    end: subtractPos(targetLoc.end, start.line, start.column)
	                };
	                // The sourceLoc can stay the same because the contents of the
	                // targetLoc have not changed.
	            }
	            else if (util_1$3.comparePos(end, targetLoc.start) <= 0) {
	                return null;
	            }
	            else {
	                sourceLoc = {
	                    start: sourceLoc.start,
	                    end: skip("end")
	                };
	                targetLoc = {
	                    start: subtractPos(targetLoc.start, start.line, start.column),
	                    end: subtractPos(end, start.line, start.column)
	                };
	            }
	        }
	        else {
	            if (util_1$3.comparePos(targetLoc.end, start) <= 0) {
	                return null;
	            }
	            if (util_1$3.comparePos(targetLoc.end, end) <= 0) {
	                sourceLoc = {
	                    start: skip("start"),
	                    end: sourceLoc.end
	                };
	                targetLoc = {
	                    // Same as subtractPos(start, start.line, start.column):
	                    start: { line: 1, column: 0 },
	                    end: subtractPos(targetLoc.end, start.line, start.column)
	                };
	            }
	            else {
	                sourceLoc = {
	                    start: skip("start"),
	                    end: skip("end")
	                };
	                targetLoc = {
	                    // Same as subtractPos(start, start.line, start.column):
	                    start: { line: 1, column: 0 },
	                    end: subtractPos(end, start.line, start.column)
	                };
	            }
	        }
	        return new Mapping(this.sourceLines, sourceLoc, targetLoc);
	    };
	    Mapping.prototype.add = function (line, column) {
	        return new Mapping(this.sourceLines, this.sourceLoc, {
	            start: addPos(this.targetLoc.start, line, column),
	            end: addPos(this.targetLoc.end, line, column)
	        });
	    };
	    Mapping.prototype.subtract = function (line, column) {
	        return new Mapping(this.sourceLines, this.sourceLoc, {
	            start: subtractPos(this.targetLoc.start, line, column),
	            end: subtractPos(this.targetLoc.end, line, column)
	        });
	    };
	    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {
	        if (skipFirstLine === void 0) { skipFirstLine = false; }
	        if (noNegativeColumns === void 0) { noNegativeColumns = false; }
	        if (by === 0) {
	            return this;
	        }
	        var targetLoc = this.targetLoc;
	        var startLine = targetLoc.start.line;
	        var endLine = targetLoc.end.line;
	        if (skipFirstLine && startLine === 1 && endLine === 1) {
	            return this;
	        }
	        targetLoc = {
	            start: targetLoc.start,
	            end: targetLoc.end
	        };
	        if (!skipFirstLine || startLine > 1) {
	            var startColumn = targetLoc.start.column + by;
	            targetLoc.start = {
	                line: startLine,
	                column: noNegativeColumns
	                    ? Math.max(0, startColumn)
	                    : startColumn
	            };
	        }
	        if (!skipFirstLine || endLine > 1) {
	            var endColumn = targetLoc.end.column + by;
	            targetLoc.end = {
	                line: endLine,
	                column: noNegativeColumns
	                    ? Math.max(0, endColumn)
	                    : endColumn
	            };
	        }
	        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
	    };
	    return Mapping;
	}());
	mapping.default = Mapping$1;
	function addPos(toPos, line, column) {
	    return {
	        line: toPos.line + line - 1,
	        column: (toPos.line === 1)
	            ? toPos.column + column
	            : toPos.column
	    };
	}
	function subtractPos(fromPos, line, column) {
	    return {
	        line: fromPos.line - line + 1,
	        column: (fromPos.line === line)
	            ? fromPos.column - column
	            : fromPos.column
	    };
	}
	function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
	    var targetComparison = util_1$3.comparePos(targetFromPos, targetToPos);
	    if (targetComparison === 0) {
	        // Trivial case: no characters to skip.
	        return sourceFromPos;
	    }
	    if (targetComparison < 0) {
	        // Skipping forward.
	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();
	        var targetCursor = targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	        if (lineDiff > 0) {
	            // If jumping to later lines, reset columns to the beginnings
	            // of those lines.
	            sourceCursor.column = 0;
	            targetCursor.column = 0;
	        }
	        else {
	            assert_1$6.default.strictEqual(lineDiff, 0);
	        }
	        while (util_1$3.comparePos(targetCursor, targetToPos) < 0 &&
	            targetLines.nextPos(targetCursor, true)) {
	            assert_1$6.default.ok(sourceLines.nextPos(sourceCursor, true));
	            assert_1$6.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
	        }
	    }
	    else {
	        // Skipping backward.
	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();
	        var targetCursor = targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	        if (lineDiff < 0) {
	            // If jumping to earlier lines, reset columns to the ends of
	            // those lines.
	            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
	            targetCursor.column = targetLines.getLineLength(targetCursor.line);
	        }
	        else {
	            assert_1$6.default.strictEqual(lineDiff, 0);
	        }
	        while (util_1$3.comparePos(targetToPos, targetCursor) < 0 &&
	            targetLines.prevPos(targetCursor, true)) {
	            assert_1$6.default.ok(sourceLines.prevPos(sourceCursor, true));
	            assert_1$6.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
	        }
	    }
	    return sourceCursor;
	}

	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lines, "__esModule", { value: true });
	var assert_1$5 = __importDefault$6(require$$0$4);
	var source_map_1 = __importDefault$6(sourceMap$3);
	var options_1$2 = options;
	var util_1$2 = util$i;
	var mapping_1 = __importDefault$6(mapping);
	var Lines = /** @class */ (function () {
	    function Lines(infos, sourceFileName) {
	        if (sourceFileName === void 0) { sourceFileName = null; }
	        this.infos = infos;
	        this.mappings = [];
	        this.cachedSourceMap = null;
	        this.cachedTabWidth = void 0;
	        assert_1$5.default.ok(infos.length > 0);
	        this.length = infos.length;
	        this.name = sourceFileName || null;
	        if (this.name) {
	            this.mappings.push(new mapping_1.default(this, {
	                start: this.firstPos(),
	                end: this.lastPos(),
	            }));
	        }
	    }
	    Lines.prototype.toString = function (options) {
	        return this.sliceString(this.firstPos(), this.lastPos(), options);
	    };
	    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {
	        if (!sourceMapName) {
	            // Although we could make up a name or generate an anonymous
	            // source map, instead we assume that any consumer who does not
	            // provide a name does not actually want a source map.
	            return null;
	        }
	        var targetLines = this;
	        function updateJSON(json) {
	            json = json || {};
	            json.file = sourceMapName;
	            if (sourceRoot) {
	                json.sourceRoot = sourceRoot;
	            }
	            return json;
	        }
	        if (targetLines.cachedSourceMap) {
	            // Since Lines objects are immutable, we can reuse any source map
	            // that was previously generated. Nevertheless, we return a new
	            // JSON object here to protect the cached source map from outside
	            // modification.
	            return updateJSON(targetLines.cachedSourceMap.toJSON());
	        }
	        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());
	        var sourcesToContents = {};
	        targetLines.mappings.forEach(function (mapping) {
	            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) || mapping.sourceLines.lastPos();
	            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) || targetLines.lastPos();
	            while (util_1$2.comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&
	                util_1$2.comparePos(targetCursor, mapping.targetLoc.end) < 0) {
	                var sourceChar = mapping.sourceLines.charAt(sourceCursor);
	                var targetChar = targetLines.charAt(targetCursor);
	                assert_1$5.default.strictEqual(sourceChar, targetChar);
	                var sourceName = mapping.sourceLines.name;
	                // Add mappings one character at a time for maximum resolution.
	                smg.addMapping({
	                    source: sourceName,
	                    original: { line: sourceCursor.line,
	                        column: sourceCursor.column },
	                    generated: { line: targetCursor.line,
	                        column: targetCursor.column }
	                });
	                if (!hasOwn$5.call(sourcesToContents, sourceName)) {
	                    var sourceContent = mapping.sourceLines.toString();
	                    smg.setSourceContent(sourceName, sourceContent);
	                    sourcesToContents[sourceName] = sourceContent;
	                }
	                targetLines.nextPos(targetCursor, true);
	                mapping.sourceLines.nextPos(sourceCursor, true);
	            }
	        });
	        targetLines.cachedSourceMap = smg;
	        return smg.toJSON();
	    };
	    Lines.prototype.bootstrapCharAt = function (pos) {
	        assert_1$5.default.strictEqual(typeof pos, "object");
	        assert_1$5.default.strictEqual(typeof pos.line, "number");
	        assert_1$5.default.strictEqual(typeof pos.column, "number");
	        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];
	        if (typeof string === "undefined")
	            return "";
	        if (column === string.length &&
	            line < strings.length)
	            return "\n";
	        if (column >= string.length)
	            return "";
	        return string.charAt(column);
	    };
	    Lines.prototype.charAt = function (pos) {
	        assert_1$5.default.strictEqual(typeof pos, "object");
	        assert_1$5.default.strictEqual(typeof pos.line, "number");
	        assert_1$5.default.strictEqual(typeof pos.column, "number");
	        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;
	        if (typeof info === "undefined" || c < 0)
	            return "";
	        var indent = this.getIndentAt(line);
	        if (c < indent)
	            return " ";
	        c += info.sliceStart - indent;
	        if (c === info.sliceEnd &&
	            line < this.length)
	            return "\n";
	        if (c >= info.sliceEnd)
	            return "";
	        return info.line.charAt(c);
	    };
	    Lines.prototype.stripMargin = function (width, skipFirstLine) {
	        if (width === 0)
	            return this;
	        assert_1$5.default.ok(width > 0, "negative margin: " + width);
	        if (skipFirstLine && this.length === 1)
	            return this;
	        var lines = new Lines(this.infos.map(function (info, i) {
	            if (info.line && (i > 0 || !skipFirstLine)) {
	                info = __assign(__assign({}, info), { indent: Math.max(0, info.indent - width) });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_1 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_1.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_1.push(mapping.indent(width, skipFirstLine, true));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.indent = function (by) {
	        if (by === 0) {
	            return this;
	        }
	        var lines = new Lines(this.infos.map(function (info) {
	            if (info.line && !info.locked) {
	                info = __assign(__assign({}, info), { indent: info.indent + by });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_2 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_2.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_2.push(mapping.indent(by));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.indentTail = function (by) {
	        if (by === 0) {
	            return this;
	        }
	        if (this.length < 2) {
	            return this;
	        }
	        var lines = new Lines(this.infos.map(function (info, i) {
	            if (i > 0 && info.line && !info.locked) {
	                info = __assign(__assign({}, info), { indent: info.indent + by });
	            }
	            return info;
	        }));
	        if (this.mappings.length > 0) {
	            var newMappings_3 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_3.length, 0);
	            this.mappings.forEach(function (mapping) {
	                newMappings_3.push(mapping.indent(by, true));
	            });
	        }
	        return lines;
	    };
	    Lines.prototype.lockIndentTail = function () {
	        if (this.length < 2) {
	            return this;
	        }
	        return new Lines(this.infos.map(function (info, i) { return (__assign(__assign({}, info), { locked: i > 0 })); }));
	    };
	    Lines.prototype.getIndentAt = function (line) {
	        assert_1$5.default.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
	        return Math.max(this.infos[line - 1].indent, 0);
	    };
	    Lines.prototype.guessTabWidth = function () {
	        if (typeof this.cachedTabWidth === "number") {
	            return this.cachedTabWidth;
	        }
	        var counts = []; // Sparse array.
	        var lastIndent = 0;
	        for (var line = 1, last = this.length; line <= last; ++line) {
	            var info = this.infos[line - 1];
	            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
	            // Whitespace-only lines don't tell us much about the likely tab
	            // width of this code.
	            if (isOnlyWhitespace(sliced)) {
	                continue;
	            }
	            var diff = Math.abs(info.indent - lastIndent);
	            counts[diff] = ~~counts[diff] + 1;
	            lastIndent = info.indent;
	        }
	        var maxCount = -1;
	        var result = 2;
	        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
	            if (hasOwn$5.call(counts, tabWidth) &&
	                counts[tabWidth] > maxCount) {
	                maxCount = counts[tabWidth];
	                result = tabWidth;
	            }
	        }
	        return this.cachedTabWidth = result;
	    };
	    // Determine if the list of lines has a first line that starts with a //
	    // or /* comment. If this is the case, the code may need to be wrapped in
	    // parens to avoid ASI issues.
	    Lines.prototype.startsWithComment = function () {
	        if (this.infos.length === 0) {
	            return false;
	        }
	        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();
	        return firstLine.length === 0 ||
	            firstLine.slice(0, 2) === "//" ||
	            firstLine.slice(0, 2) === "/*";
	    };
	    Lines.prototype.isOnlyWhitespace = function () {
	        return isOnlyWhitespace(this.toString());
	    };
	    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {
	        var info = this.infos[pos.line - 1];
	        var indent = Math.max(info.indent, 0);
	        var diff = pos.column - indent;
	        if (diff <= 0) {
	            // If pos.column does not exceed the indentation amount, then
	            // there must be only whitespace before it.
	            return true;
	        }
	        var start = info.sliceStart;
	        var end = Math.min(start + diff, info.sliceEnd);
	        var prefix = info.line.slice(start, end);
	        return isOnlyWhitespace(prefix);
	    };
	    Lines.prototype.getLineLength = function (line) {
	        var info = this.infos[line - 1];
	        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
	    };
	    Lines.prototype.nextPos = function (pos, skipSpaces) {
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);
	        if (c < this.getLineLength(l)) {
	            pos.column += 1;
	            return skipSpaces
	                ? !!this.skipSpaces(pos, false, true)
	                : true;
	        }
	        if (l < this.length) {
	            pos.line += 1;
	            pos.column = 0;
	            return skipSpaces
	                ? !!this.skipSpaces(pos, false, true)
	                : true;
	        }
	        return false;
	    };
	    Lines.prototype.prevPos = function (pos, skipSpaces) {
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var l = pos.line, c = pos.column;
	        if (c < 1) {
	            l -= 1;
	            if (l < 1)
	                return false;
	            c = this.getLineLength(l);
	        }
	        else {
	            c = Math.min(c - 1, this.getLineLength(l));
	        }
	        pos.line = l;
	        pos.column = c;
	        return skipSpaces
	            ? !!this.skipSpaces(pos, true, true)
	            : true;
	    };
	    Lines.prototype.firstPos = function () {
	        // Trivial, but provided for completeness.
	        return { line: 1, column: 0 };
	    };
	    Lines.prototype.lastPos = function () {
	        return {
	            line: this.length,
	            column: this.getLineLength(this.length)
	        };
	    };
	    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {
	        if (backward === void 0) { backward = false; }
	        if (modifyInPlace === void 0) { modifyInPlace = false; }
	        if (pos) {
	            pos = modifyInPlace ? pos : {
	                line: pos.line,
	                column: pos.column
	            };
	        }
	        else if (backward) {
	            pos = this.lastPos();
	        }
	        else {
	            pos = this.firstPos();
	        }
	        if (backward) {
	            while (this.prevPos(pos)) {
	                if (!isOnlyWhitespace(this.charAt(pos)) &&
	                    this.nextPos(pos)) {
	                    return pos;
	                }
	            }
	            return null;
	        }
	        else {
	            while (isOnlyWhitespace(this.charAt(pos))) {
	                if (!this.nextPos(pos)) {
	                    return null;
	                }
	            }
	            return pos;
	        }
	    };
	    Lines.prototype.trimLeft = function () {
	        var pos = this.skipSpaces(this.firstPos(), false, true);
	        return pos ? this.slice(pos) : emptyLines;
	    };
	    Lines.prototype.trimRight = function () {
	        var pos = this.skipSpaces(this.lastPos(), true, true);
	        return pos ? this.slice(this.firstPos(), pos) : emptyLines;
	    };
	    Lines.prototype.trim = function () {
	        var start = this.skipSpaces(this.firstPos(), false, true);
	        if (start === null) {
	            return emptyLines;
	        }
	        var end = this.skipSpaces(this.lastPos(), true, true);
	        if (end === null) {
	            return emptyLines;
	        }
	        return this.slice(start, end);
	    };
	    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {
	        if (startPos === void 0) { startPos = this.firstPos(); }
	        if (skipSpaces === void 0) { skipSpaces = false; }
	        var pos = this.firstPos();
	        if (startPos) {
	            pos.line = startPos.line,
	                pos.column = startPos.column;
	        }
	        if (skipSpaces && !this.skipSpaces(pos, false, true)) {
	            return; // Encountered nothing but spaces.
	        }
	        do
	            callback.call(this, pos);
	        while (this.nextPos(pos, skipSpaces));
	    };
	    Lines.prototype.bootstrapSlice = function (start, end) {
	        var strings = this.toString().split(lineTerminatorSeqExp).slice(start.line - 1, end.line);
	        if (strings.length > 0) {
	            strings.push(strings.pop().slice(0, end.column));
	            strings[0] = strings[0].slice(start.column);
	        }
	        return fromString(strings.join("\n"));
	    };
	    Lines.prototype.slice = function (start, end) {
	        if (!end) {
	            if (!start) {
	                // The client seems to want a copy of this Lines object, but
	                // Lines objects are immutable, so it's perfectly adequate to
	                // return the same object.
	                return this;
	            }
	            // Slice to the end if no end position was provided.
	            end = this.lastPos();
	        }
	        if (!start) {
	            throw new Error("cannot slice with end but not start");
	        }
	        var sliced = this.infos.slice(start.line - 1, end.line);
	        if (start.line === end.line) {
	            sliced[0] = sliceInfo(sliced[0], start.column, end.column);
	        }
	        else {
	            assert_1$5.default.ok(start.line < end.line);
	            sliced[0] = sliceInfo(sliced[0], start.column);
	            sliced.push(sliceInfo(sliced.pop(), 0, end.column));
	        }
	        var lines = new Lines(sliced);
	        if (this.mappings.length > 0) {
	            var newMappings_4 = lines.mappings;
	            assert_1$5.default.strictEqual(newMappings_4.length, 0);
	            this.mappings.forEach(function (mapping) {
	                var sliced = mapping.slice(this, start, end);
	                if (sliced) {
	                    newMappings_4.push(sliced);
	                }
	            }, this);
	        }
	        return lines;
	    };
	    Lines.prototype.bootstrapSliceString = function (start, end, options) {
	        return this.slice(start, end).toString(options);
	    };
	    Lines.prototype.sliceString = function (start, end, options) {
	        if (start === void 0) { start = this.firstPos(); }
	        if (end === void 0) { end = this.lastPos(); }
	        options = options_1$2.normalize(options);
	        var parts = [];
	        var _a = options.tabWidth, tabWidth = _a === void 0 ? 2 : _a;
	        for (var line = start.line; line <= end.line; ++line) {
	            var info = this.infos[line - 1];
	            if (line === start.line) {
	                if (line === end.line) {
	                    info = sliceInfo(info, start.column, end.column);
	                }
	                else {
	                    info = sliceInfo(info, start.column);
	                }
	            }
	            else if (line === end.line) {
	                info = sliceInfo(info, 0, end.column);
	            }
	            var indent = Math.max(info.indent, 0);
	            var before_1 = info.line.slice(0, info.sliceStart);
	            if (options.reuseWhitespace &&
	                isOnlyWhitespace(before_1) &&
	                countSpaces(before_1, options.tabWidth) === indent) {
	                // Reuse original spaces if the indentation is correct.
	                parts.push(info.line.slice(0, info.sliceEnd));
	                continue;
	            }
	            var tabs = 0;
	            var spaces = indent;
	            if (options.useTabs) {
	                tabs = Math.floor(indent / tabWidth);
	                spaces -= tabs * tabWidth;
	            }
	            var result = "";
	            if (tabs > 0) {
	                result += new Array(tabs + 1).join("\t");
	            }
	            if (spaces > 0) {
	                result += new Array(spaces + 1).join(" ");
	            }
	            result += info.line.slice(info.sliceStart, info.sliceEnd);
	            parts.push(result);
	        }
	        return parts.join(options.lineTerminator);
	    };
	    Lines.prototype.isEmpty = function () {
	        return this.length < 2 && this.getLineLength(1) < 1;
	    };
	    Lines.prototype.join = function (elements) {
	        var separator = this;
	        var infos = [];
	        var mappings = [];
	        var prevInfo;
	        function appendLines(linesOrNull) {
	            if (linesOrNull === null) {
	                return;
	            }
	            if (prevInfo) {
	                var info = linesOrNull.infos[0];
	                var indent = new Array(info.indent + 1).join(" ");
	                var prevLine_1 = infos.length;
	                var prevColumn_1 = Math.max(prevInfo.indent, 0) +
	                    prevInfo.sliceEnd - prevInfo.sliceStart;
	                prevInfo.line = prevInfo.line.slice(0, prevInfo.sliceEnd) + indent + info.line.slice(info.sliceStart, info.sliceEnd);
	                // If any part of a line is indentation-locked, the whole line
	                // will be indentation-locked.
	                prevInfo.locked = prevInfo.locked || info.locked;
	                prevInfo.sliceEnd = prevInfo.line.length;
	                if (linesOrNull.mappings.length > 0) {
	                    linesOrNull.mappings.forEach(function (mapping) {
	                        mappings.push(mapping.add(prevLine_1, prevColumn_1));
	                    });
	                }
	            }
	            else if (linesOrNull.mappings.length > 0) {
	                mappings.push.apply(mappings, linesOrNull.mappings);
	            }
	            linesOrNull.infos.forEach(function (info, i) {
	                if (!prevInfo || i > 0) {
	                    prevInfo = __assign({}, info);
	                    infos.push(prevInfo);
	                }
	            });
	        }
	        function appendWithSeparator(linesOrNull, i) {
	            if (i > 0)
	                appendLines(separator);
	            appendLines(linesOrNull);
	        }
	        elements.map(function (elem) {
	            var lines = fromString(elem);
	            if (lines.isEmpty())
	                return null;
	            return lines;
	        }).forEach(function (linesOrNull, i) {
	            if (separator.isEmpty()) {
	                appendLines(linesOrNull);
	            }
	            else {
	                appendWithSeparator(linesOrNull, i);
	            }
	        });
	        if (infos.length < 1)
	            return emptyLines;
	        var lines = new Lines(infos);
	        lines.mappings = mappings;
	        return lines;
	    };
	    Lines.prototype.concat = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var list = [this];
	        list.push.apply(list, args);
	        assert_1$5.default.strictEqual(list.length, args.length + 1);
	        return emptyLines.join(list);
	    };
	    return Lines;
	}());
	lines.Lines = Lines;
	var fromStringCache = {};
	var hasOwn$5 = fromStringCache.hasOwnProperty;
	var maxCacheKeyLen = 10;
	function countSpaces(spaces, tabWidth) {
	    var count = 0;
	    var len = spaces.length;
	    for (var i = 0; i < len; ++i) {
	        switch (spaces.charCodeAt(i)) {
	            case 9: // '\t'
	                assert_1$5.default.strictEqual(typeof tabWidth, "number");
	                assert_1$5.default.ok(tabWidth > 0);
	                var next = Math.ceil(count / tabWidth) * tabWidth;
	                if (next === count) {
	                    count += tabWidth;
	                }
	                else {
	                    count = next;
	                }
	                break;
	            case 11: // '\v'
	            case 12: // '\f'
	            case 13: // '\r'
	            case 0xfeff: // zero-width non-breaking space
	                // These characters contribute nothing to indentation.
	                break;
	            case 32: // ' '
	            default: // Treat all other whitespace like ' '.
	                count += 1;
	                break;
	        }
	    }
	    return count;
	}
	lines.countSpaces = countSpaces;
	var leadingSpaceExp = /^\s*/;
	// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
	var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
	/**
	 * @param {Object} options - Options object that configures printing.
	 */
	function fromString(string, options) {
	    if (string instanceof Lines)
	        return string;
	    string += "";
	    var tabWidth = options && options.tabWidth;
	    var tabless = string.indexOf("\t") < 0;
	    var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);
	    assert_1$5.default.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
	    if (cacheable && hasOwn$5.call(fromStringCache, string))
	        return fromStringCache[string];
	    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {
	        // TODO: handle null exec result
	        var spaces = leadingSpaceExp.exec(line)[0];
	        return {
	            line: line,
	            indent: countSpaces(spaces, tabWidth),
	            // Boolean indicating whether this line can be reindented.
	            locked: false,
	            sliceStart: spaces.length,
	            sliceEnd: line.length
	        };
	    }), options_1$2.normalize(options).sourceFileName);
	    if (cacheable)
	        fromStringCache[string] = lines;
	    return lines;
	}
	lines.fromString = fromString;
	function isOnlyWhitespace(string) {
	    return !/\S/.test(string);
	}
	function sliceInfo(info, startCol, endCol) {
	    var sliceStart = info.sliceStart;
	    var sliceEnd = info.sliceEnd;
	    var indent = Math.max(info.indent, 0);
	    var lineLength = indent + sliceEnd - sliceStart;
	    if (typeof endCol === "undefined") {
	        endCol = lineLength;
	    }
	    startCol = Math.max(startCol, 0);
	    endCol = Math.min(endCol, lineLength);
	    endCol = Math.max(endCol, startCol);
	    if (endCol < indent) {
	        indent = endCol;
	        sliceEnd = sliceStart;
	    }
	    else {
	        sliceEnd -= lineLength - endCol;
	    }
	    lineLength = endCol;
	    lineLength -= startCol;
	    if (startCol < indent) {
	        indent -= startCol;
	    }
	    else {
	        startCol -= indent;
	        indent = 0;
	        sliceStart += startCol;
	    }
	    assert_1$5.default.ok(indent >= 0);
	    assert_1$5.default.ok(sliceStart <= sliceEnd);
	    assert_1$5.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);
	    if (info.indent === indent &&
	        info.sliceStart === sliceStart &&
	        info.sliceEnd === sliceEnd) {
	        return info;
	    }
	    return {
	        line: info.line,
	        indent: indent,
	        // A destructive slice always unlocks indentation.
	        locked: false,
	        sliceStart: sliceStart,
	        sliceEnd: sliceEnd
	    };
	}
	function concat(elements) {
	    return emptyLines.join(elements);
	}
	lines.concat = concat;
	// The emptyLines object needs to be created all the way down here so that
	// Lines.prototype will be fully populated.
	var emptyLines = fromString("");

	var comments = {};

	var _private = {};

	var originalObject = Object;
	var originalDefProp = Object.defineProperty;
	var originalCreate = Object.create;

	function defProp(obj, name, value) {
	  if (originalDefProp) try {
	    originalDefProp.call(originalObject, obj, name, { value: value });
	  } catch (definePropertyIsBrokenInIE8) {
	    obj[name] = value;
	  } else {
	    obj[name] = value;
	  }
	}

	// For functions that will be invoked using .call or .apply, we need to
	// define those methods on the function objects themselves, rather than
	// inheriting them from Function.prototype, so that a malicious or clumsy
	// third party cannot interfere with the functionality of this module by
	// redefining Function.prototype.call or .apply.
	function makeSafeToCall(fun) {
	  if (fun) {
	    defProp(fun, "call", fun.call);
	    defProp(fun, "apply", fun.apply);
	  }
	  return fun;
	}

	makeSafeToCall(originalDefProp);
	makeSafeToCall(originalCreate);

	var hasOwn$4 = makeSafeToCall(Object.prototype.hasOwnProperty);
	var numToStr = makeSafeToCall(Number.prototype.toString);
	var strSlice = makeSafeToCall(String.prototype.slice);

	var cloner = function(){};
	function create(prototype) {
	  if (originalCreate) {
	    return originalCreate.call(originalObject, prototype);
	  }
	  cloner.prototype = prototype || null;
	  return new cloner;
	}

	var rand = Math.random;
	var uniqueKeys = create(null);

	function makeUniqueKey() {
	  // Collisions are highly unlikely, but this module is in the business of
	  // making guarantees rather than safe bets.
	  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
	  while (hasOwn$4.call(uniqueKeys, uniqueKey));
	  return uniqueKeys[uniqueKey] = uniqueKey;
	}

	function internString(str) {
	  var obj = {};
	  obj[str] = true;
	  return Object.keys(obj)[0];
	}

	// External users might find this function useful, but it is not necessary
	// for the typical use of this module.
	_private.makeUniqueKey = makeUniqueKey;

	// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
	// properties, so if we wrap it to ignore our secret keys, there should be
	// no way (except guessing) to access those properties.
	var originalGetOPNs = Object.getOwnPropertyNames;
	Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	  for (var names = originalGetOPNs(object),
	           src = 0,
	           dst = 0,
	           len = names.length;
	       src < len;
	       ++src) {
	    if (!hasOwn$4.call(uniqueKeys, names[src])) {
	      if (src > dst) {
	        names[dst] = names[src];
	      }
	      ++dst;
	    }
	  }
	  names.length = dst;
	  return names;
	};

	function defaultCreatorFn(object) {
	  return create(null);
	}

	function makeAccessor(secretCreatorFn) {
	  var brand = makeUniqueKey();
	  var passkey = create(null);

	  secretCreatorFn = secretCreatorFn || defaultCreatorFn;

	  function register(object) {
	    var secret; // Created lazily.

	    function vault(key, forget) {
	      // Only code that has access to the passkey can retrieve (or forget)
	      // the secret object.
	      if (key === passkey) {
	        return forget
	          ? secret = null
	          : secret || (secret = secretCreatorFn(object));
	      }
	    }

	    defProp(object, brand, vault);
	  }

	  function accessor(object) {
	    if (!hasOwn$4.call(object, brand))
	      register(object);
	    return object[brand](passkey);
	  }

	  accessor.forget = function(object) {
	    if (hasOwn$4.call(object, brand))
	      object[brand](passkey, true);
	  };

	  return accessor;
	}

	_private.makeAccessor = makeAccessor;

	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(comments, "__esModule", { value: true });
	var assert_1$4 = __importDefault$5(require$$0$4);
	var types$8 = __importStar$5(main$2);
	var n$2 = types$8.namedTypes;
	var isArray$5 = types$8.builtInTypes.array;
	var isObject$b = types$8.builtInTypes.object;
	var lines_1$2 = lines;
	var util_1$1 = util$i;
	var private_1 = _private;
	var childNodesCacheKey = private_1.makeUniqueKey();
	// TODO Move a non-caching implementation of this function into ast-types,
	// and implement a caching wrapper function here.
	function getSortedChildNodes(node, lines, resultArray) {
	    if (!node) {
	        return;
	    }
	    // The .loc checks below are sensitive to some of the problems that
	    // are fixed by this utility function. Specifically, if it decides to
	    // set node.loc to null, indicating that the node's .loc information
	    // is unreliable, then we don't want to add node to the resultArray.
	    util_1$1.fixFaultyLocations(node, lines);
	    if (resultArray) {
	        if (n$2.Node.check(node) &&
	            n$2.SourceLocation.check(node.loc)) {
	            // This reverse insertion sort almost always takes constant
	            // time because we almost always (maybe always?) append the
	            // nodes in order anyway.
	            for (var i = resultArray.length - 1; i >= 0; --i) {
	                if (util_1$1.comparePos(resultArray[i].loc.end, node.loc.start) <= 0) {
	                    break;
	                }
	            }
	            resultArray.splice(i + 1, 0, node);
	            return;
	        }
	    }
	    else if (node[childNodesCacheKey]) {
	        return node[childNodesCacheKey];
	    }
	    var names;
	    if (isArray$5.check(node)) {
	        names = Object.keys(node);
	    }
	    else if (isObject$b.check(node)) {
	        names = types$8.getFieldNames(node);
	    }
	    else {
	        return;
	    }
	    if (!resultArray) {
	        Object.defineProperty(node, childNodesCacheKey, {
	            value: resultArray = [],
	            enumerable: false
	        });
	    }
	    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
	        getSortedChildNodes(node[names[i]], lines, resultArray);
	    }
	    return resultArray;
	}
	// As efficiently as possible, decorate the comment object with
	// .precedingNode, .enclosingNode, and/or .followingNode properties, at
	// least one of which is guaranteed to be defined.
	function decorateComment(node, comment, lines) {
	    var childNodes = getSortedChildNodes(node, lines);
	    // Time to dust off the old binary search robes and wizard hat.
	    var left = 0, right = childNodes.length;
	    while (left < right) {
	        var middle = (left + right) >> 1;
	        var child = childNodes[middle];
	        if (util_1$1.comparePos(child.loc.start, comment.loc.start) <= 0 &&
	            util_1$1.comparePos(comment.loc.end, child.loc.end) <= 0) {
	            // The comment is completely contained by this child node.
	            decorateComment(comment.enclosingNode = child, comment, lines);
	            return; // Abandon the binary search at this level.
	        }
	        if (util_1$1.comparePos(child.loc.end, comment.loc.start) <= 0) {
	            // This child node falls completely before the comment.
	            // Because we will never consider this node or any nodes
	            // before it again, this node must be the closest preceding
	            // node we have encountered so far.
	            var precedingNode = child;
	            left = middle + 1;
	            continue;
	        }
	        if (util_1$1.comparePos(comment.loc.end, child.loc.start) <= 0) {
	            // This child node falls completely after the comment.
	            // Because we will never consider this node or any nodes after
	            // it again, this node must be the closest following node we
	            // have encountered so far.
	            var followingNode = child;
	            right = middle;
	            continue;
	        }
	        throw new Error("Comment location overlaps with node location");
	    }
	    if (precedingNode) {
	        comment.precedingNode = precedingNode;
	    }
	    if (followingNode) {
	        comment.followingNode = followingNode;
	    }
	}
	function attach(comments, ast, lines) {
	    if (!isArray$5.check(comments)) {
	        return;
	    }
	    var tiesToBreak = [];
	    comments.forEach(function (comment) {
	        comment.loc.lines = lines;
	        decorateComment(ast, comment, lines);
	        var pn = comment.precedingNode;
	        var en = comment.enclosingNode;
	        var fn = comment.followingNode;
	        if (pn && fn) {
	            var tieCount = tiesToBreak.length;
	            if (tieCount > 0) {
	                var lastTie = tiesToBreak[tieCount - 1];
	                assert_1$4.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
	                if (lastTie.followingNode !== comment.followingNode) {
	                    breakTies(tiesToBreak, lines);
	                }
	            }
	            tiesToBreak.push(comment);
	        }
	        else if (pn) {
	            // No contest: we have a trailing comment.
	            breakTies(tiesToBreak, lines);
	            addTrailingComment(pn, comment);
	        }
	        else if (fn) {
	            // No contest: we have a leading comment.
	            breakTies(tiesToBreak, lines);
	            addLeadingComment(fn, comment);
	        }
	        else if (en) {
	            // The enclosing node has no child nodes at all, so what we
	            // have here is a dangling comment, e.g. [/* crickets */].
	            breakTies(tiesToBreak, lines);
	            addDanglingComment(en, comment);
	        }
	        else {
	            throw new Error("AST contains no nodes at all?");
	        }
	    });
	    breakTies(tiesToBreak, lines);
	    comments.forEach(function (comment) {
	        // These node references were useful for breaking ties, but we
	        // don't need them anymore, and they create cycles in the AST that
	        // may lead to infinite recursion if we don't delete them here.
	        delete comment.precedingNode;
	        delete comment.enclosingNode;
	        delete comment.followingNode;
	    });
	}
	comments.attach = attach;
	function breakTies(tiesToBreak, lines) {
	    var tieCount = tiesToBreak.length;
	    if (tieCount === 0) {
	        return;
	    }
	    var pn = tiesToBreak[0].precedingNode;
	    var fn = tiesToBreak[0].followingNode;
	    var gapEndPos = fn.loc.start;
	    // Iterate backwards through tiesToBreak, examining the gaps
	    // between the tied comments. In order to qualify as leading, a
	    // comment must be separated from fn by an unbroken series of
	    // whitespace-only gaps (or other comments).
	    for (var indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
	        var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
	        assert_1$4.default.strictEqual(comment.precedingNode, pn);
	        assert_1$4.default.strictEqual(comment.followingNode, fn);
	        var gap = lines.sliceString(comment.loc.end, gapEndPos);
	        if (/\S/.test(gap)) {
	            // The gap string contained something other than whitespace.
	            break;
	        }
	        gapEndPos = comment.loc.start;
	    }
	    while (indexOfFirstLeadingComment <= tieCount &&
	        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
	        // If the comment is a //-style comment and indented more
	        // deeply than the node itself, reconsider it as trailing.
	        (comment.type === "Line" || comment.type === "CommentLine") &&
	        comment.loc.start.column > fn.loc.start.column) {
	        ++indexOfFirstLeadingComment;
	    }
	    tiesToBreak.forEach(function (comment, i) {
	        if (i < indexOfFirstLeadingComment) {
	            addTrailingComment(pn, comment);
	        }
	        else {
	            addLeadingComment(fn, comment);
	        }
	    });
	    tiesToBreak.length = 0;
	}
	function addCommentHelper(node, comment) {
	    var comments = node.comments || (node.comments = []);
	    comments.push(comment);
	}
	function addLeadingComment(node, comment) {
	    comment.leading = true;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	function addDanglingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	function addTrailingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = true;
	    addCommentHelper(node, comment);
	}
	function printLeadingComment(commentPath, print) {
	    var comment = commentPath.getValue();
	    n$2.Comment.assert(comment);
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [print(commentPath)];
	    if (comment.trailing) {
	        // When we print trailing comments as leading comments, we don't
	        // want to bring any trailing spaces along.
	        parts.push("\n");
	    }
	    else if (lines instanceof lines_1$2.Lines) {
	        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());
	        if (trailingSpace.length === 1) {
	            // If the trailing space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(trailingSpace);
	        }
	        else {
	            // If the trailing space contains newlines, then replace it
	            // with just that many newlines, with all other spaces removed.
	            parts.push(new Array(trailingSpace.length).join("\n"));
	        }
	    }
	    else {
	        parts.push("\n");
	    }
	    return lines_1$2.concat(parts);
	}
	function printTrailingComment(commentPath, print) {
	    var comment = commentPath.getValue(commentPath);
	    n$2.Comment.assert(comment);
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [];
	    if (lines instanceof lines_1$2.Lines) {
	        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
	        var leadingSpace = lines.slice(fromPos, loc.start);
	        if (leadingSpace.length === 1) {
	            // If the leading space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(leadingSpace);
	        }
	        else {
	            // If the leading space contains newlines, then replace it
	            // with just that many newlines, sans all other spaces.
	            parts.push(new Array(leadingSpace.length).join("\n"));
	        }
	    }
	    parts.push(print(commentPath));
	    return lines_1$2.concat(parts);
	}
	function printComments(path, print) {
	    var value = path.getValue();
	    var innerLines = print(path);
	    var comments = n$2.Node.check(value) &&
	        types$8.getFieldValue(value, "comments");
	    if (!comments || comments.length === 0) {
	        return innerLines;
	    }
	    var leadingParts = [];
	    var trailingParts = [innerLines];
	    path.each(function (commentPath) {
	        var comment = commentPath.getValue();
	        var leading = types$8.getFieldValue(comment, "leading");
	        var trailing = types$8.getFieldValue(comment, "trailing");
	        if (leading || (trailing && !(n$2.Statement.check(value) ||
	            comment.type === "Block" ||
	            comment.type === "CommentBlock"))) {
	            leadingParts.push(printLeadingComment(commentPath, print));
	        }
	        else if (trailing) {
	            trailingParts.push(printTrailingComment(commentPath, print));
	        }
	    }, "comments");
	    leadingParts.push.apply(leadingParts, trailingParts);
	    return lines_1$2.concat(leadingParts);
	}
	comments.printComments = printComments;

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(parser$4, "__esModule", { value: true });
	var assert_1$3 = __importDefault$4(require$$0$4);
	var types$7 = __importStar$4(main$2);
	var b = types$7.builders;
	var isObject$a = types$7.builtInTypes.object;
	var isArray$4 = types$7.builtInTypes.array;
	var options_1$1 = options;
	var lines_1$1 = lines;
	var comments_1$1 = comments;
	var util$b = __importStar$4(util$i);
	function parse$l(source, options) {
	    options = options_1$1.normalize(options);
	    var lines = lines_1$1.fromString(source, options);
	    var sourceWithoutTabs = lines.toString({
	        tabWidth: options.tabWidth,
	        reuseWhitespace: false,
	        useTabs: false
	    });
	    var comments = [];
	    var ast = options.parser.parse(sourceWithoutTabs, {
	        jsx: true,
	        loc: true,
	        locations: true,
	        range: options.range,
	        comment: true,
	        onComment: comments,
	        tolerant: util$b.getOption(options, "tolerant", true),
	        ecmaVersion: 6,
	        sourceType: util$b.getOption(options, "sourceType", "module")
	    });
	    // Use ast.tokens if possible, and otherwise fall back to the Esprima
	    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens
	    // automatically, but custom parsers might need additional configuration
	    // to avoid this fallback.
	    var tokens = Array.isArray(ast.tokens)
	        ? ast.tokens
	        : esprima.exports.tokenize(sourceWithoutTabs, {
	            loc: true
	        });
	    // We will reattach the tokens array to the file object below.
	    delete ast.tokens;
	    // Make sure every token has a token.value string.
	    tokens.forEach(function (token) {
	        if (typeof token.value !== "string") {
	            token.value = lines.sliceString(token.loc.start, token.loc.end);
	        }
	    });
	    if (Array.isArray(ast.comments)) {
	        comments = ast.comments;
	        delete ast.comments;
	    }
	    if (ast.loc) {
	        // If the source was empty, some parsers give loc.{start,end}.line
	        // values of 0, instead of the minimum of 1.
	        util$b.fixFaultyLocations(ast, lines);
	    }
	    else {
	        ast.loc = {
	            start: lines.firstPos(),
	            end: lines.lastPos()
	        };
	    }
	    ast.loc.lines = lines;
	    ast.loc.indent = 0;
	    var file;
	    var program;
	    if (ast.type === "Program") {
	        program = ast;
	        // In order to ensure we reprint leading and trailing program
	        // comments, wrap the original Program node with a File node. Only
	        // ESTree parsers (Acorn and Esprima) return a Program as the root AST
	        // node. Most other (Babylon-like) parsers return a File.
	        file = b.file(ast, options.sourceFileName || null);
	        file.loc = {
	            start: lines.firstPos(),
	            end: lines.lastPos(),
	            lines: lines,
	            indent: 0
	        };
	    }
	    else if (ast.type === "File") {
	        file = ast;
	        program = file.program;
	    }
	    // Expose file.tokens unless the caller passed false for options.tokens.
	    if (options.tokens) {
	        file.tokens = tokens;
	    }
	    // Expand the Program's .loc to include all comments (not just those
	    // attached to the Program node, as its children may have comments as
	    // well), since sometimes program.loc.{start,end} will coincide with the
	    // .loc.{start,end} of the first and last *statements*, mistakenly
	    // excluding comments that fall outside that region.
	    var trueProgramLoc = util$b.getTrueLoc({
	        type: program.type,
	        loc: program.loc,
	        body: [],
	        comments: comments
	    }, lines);
	    program.loc.start = trueProgramLoc.start;
	    program.loc.end = trueProgramLoc.end;
	    // Passing file.program here instead of just file means that initial
	    // comments will be attached to program.body[0] instead of program.
	    comments_1$1.attach(comments, program.body.length ? file.program : file, lines);
	    // Return a copy of the original AST so that any changes made may be
	    // compared to the original.
	    return new TreeCopier(lines, tokens).copy(file);
	}
	parser$4.parse = parse$l;
	var TreeCopier = function TreeCopier(lines, tokens) {
	    assert_1$3.default.ok(this instanceof TreeCopier);
	    this.lines = lines;
	    this.tokens = tokens;
	    this.startTokenIndex = 0;
	    this.endTokenIndex = tokens.length;
	    this.indent = 0;
	    this.seen = new Map;
	};
	var TCp = TreeCopier.prototype;
	TCp.copy = function (node) {
	    if (this.seen.has(node)) {
	        return this.seen.get(node);
	    }
	    if (isArray$4.check(node)) {
	        var copy = new Array(node.length);
	        this.seen.set(node, copy);
	        node.forEach(function (item, i) {
	            copy[i] = this.copy(item);
	        }, this);
	        return copy;
	    }
	    if (!isObject$a.check(node)) {
	        return node;
	    }
	    util$b.fixFaultyLocations(node, this.lines);
	    var copy = Object.create(Object.getPrototypeOf(node), {
	        original: {
	            value: node,
	            configurable: false,
	            enumerable: false,
	            writable: true
	        }
	    });
	    this.seen.set(node, copy);
	    var loc = node.loc;
	    var oldIndent = this.indent;
	    var newIndent = oldIndent;
	    var oldStartTokenIndex = this.startTokenIndex;
	    var oldEndTokenIndex = this.endTokenIndex;
	    if (loc) {
	        // When node is a comment, we set node.loc.indent to
	        // node.loc.start.column so that, when/if we print the comment by
	        // itself, we can strip that much whitespace from the left margin of
	        // the comment. This only really matters for multiline Block comments,
	        // but it doesn't hurt for Line comments.
	        if (node.type === "Block" || node.type === "Line" ||
	            node.type === "CommentBlock" || node.type === "CommentLine" ||
	            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
	            newIndent = this.indent = loc.start.column;
	        }
	        // Every node.loc has a reference to the original source lines as well
	        // as a complete list of source tokens.
	        loc.lines = this.lines;
	        loc.tokens = this.tokens;
	        loc.indent = newIndent;
	        // Set loc.start.token and loc.end.token such that
	        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of
	        // all the tokens that make up this node.
	        this.findTokenRange(loc);
	    }
	    var keys = Object.keys(node);
	    var keyCount = keys.length;
	    for (var i = 0; i < keyCount; ++i) {
	        var key = keys[i];
	        if (key === "loc") {
	            copy[key] = node[key];
	        }
	        else if (key === "tokens" &&
	            node.type === "File") {
	            // Preserve file.tokens (uncopied) in case client code cares about
	            // it, even though Recast ignores it when reprinting.
	            copy[key] = node[key];
	        }
	        else {
	            copy[key] = this.copy(node[key]);
	        }
	    }
	    this.indent = oldIndent;
	    this.startTokenIndex = oldStartTokenIndex;
	    this.endTokenIndex = oldEndTokenIndex;
	    return copy;
	};
	// If we didn't have any idea where in loc.tokens to look for tokens
	// contained by this loc, a binary search would be appropriate, but
	// because we maintain this.startTokenIndex and this.endTokenIndex as we
	// traverse the AST, we only need to make small (linear) adjustments to
	// those indexes with each recursive iteration.
	TCp.findTokenRange = function (loc) {
	    // In the unlikely event that loc.tokens[this.startTokenIndex] starts
	    // *after* loc.start, we need to rewind this.startTokenIndex first.
	    while (this.startTokenIndex > 0) {
	        var token = loc.tokens[this.startTokenIndex];
	        if (util$b.comparePos(loc.start, token.loc.start) < 0) {
	            --this.startTokenIndex;
	        }
	        else
	            break;
	    }
	    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends
	    // *before* loc.end, we need to fast-forward this.endTokenIndex first.
	    while (this.endTokenIndex < loc.tokens.length) {
	        var token = loc.tokens[this.endTokenIndex];
	        if (util$b.comparePos(token.loc.end, loc.end) < 0) {
	            ++this.endTokenIndex;
	        }
	        else
	            break;
	    }
	    // Increment this.startTokenIndex until we've found the first token
	    // contained by this node.
	    while (this.startTokenIndex < this.endTokenIndex) {
	        var token = loc.tokens[this.startTokenIndex];
	        if (util$b.comparePos(token.loc.start, loc.start) < 0) {
	            ++this.startTokenIndex;
	        }
	        else
	            break;
	    }
	    // Index into loc.tokens of the first token within this node.
	    loc.start.token = this.startTokenIndex;
	    // Decrement this.endTokenIndex until we've found the first token after
	    // this node (not contained by the node).
	    while (this.endTokenIndex > this.startTokenIndex) {
	        var token = loc.tokens[this.endTokenIndex - 1];
	        if (util$b.comparePos(loc.end, token.loc.end) < 0) {
	            --this.endTokenIndex;
	        }
	        else
	            break;
	    }
	    // Index into loc.tokens of the first token *after* this node.
	    // If loc.start.token === loc.end.token, the node contains no tokens,
	    // and the index is that of the next token following this node.
	    loc.end.token = this.endTokenIndex;
	};

	var printer = {};

	var patcher = {};

	var fastPath = {};

	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(fastPath, "__esModule", { value: true });
	var assert_1$2 = __importDefault$3(require$$0$4);
	var types$6 = __importStar$3(main$2);
	var n$1 = types$6.namedTypes;
	var isArray$3 = types$6.builtInTypes.array;
	var isNumber = types$6.builtInTypes.number;
	var util$a = __importStar$3(util$i);
	var FastPath = function FastPath(value) {
	    assert_1$2.default.ok(this instanceof FastPath);
	    this.stack = [value];
	};
	var FPp = FastPath.prototype;
	// Static convenience function for coercing a value to a FastPath.
	FastPath.from = function (obj) {
	    if (obj instanceof FastPath) {
	        // Return a defensive copy of any existing FastPath instances.
	        return obj.copy();
	    }
	    if (obj instanceof types$6.NodePath) {
	        // For backwards compatibility, unroll NodePath instances into
	        // lightweight FastPath [..., name, value] stacks.
	        var copy = Object.create(FastPath.prototype);
	        var stack = [obj.value];
	        for (var pp; (pp = obj.parentPath); obj = pp)
	            stack.push(obj.name, pp.value);
	        copy.stack = stack.reverse();
	        return copy;
	    }
	    // Otherwise use obj as the value of the new FastPath instance.
	    return new FastPath(obj);
	};
	FPp.copy = function copy() {
	    var copy = Object.create(FastPath.prototype);
	    copy.stack = this.stack.slice(0);
	    return copy;
	};
	// The name of the current property is always the penultimate element of
	// this.stack, and always a String.
	FPp.getName = function getName() {
	    var s = this.stack;
	    var len = s.length;
	    if (len > 1) {
	        return s[len - 2];
	    }
	    // Since the name is always a string, null is a safe sentinel value to
	    // return if we do not know the name of the (root) value.
	    return null;
	};
	// The value of the current property is always the final element of
	// this.stack.
	FPp.getValue = function getValue() {
	    var s = this.stack;
	    return s[s.length - 1];
	};
	FPp.valueIsDuplicate = function () {
	    var s = this.stack;
	    var valueIndex = s.length - 1;
	    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;
	};
	function getNodeHelper(path, count) {
	    var s = path.stack;
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        var value = s[i];
	        if (n$1.Node.check(value) && --count < 0) {
	            return value;
	        }
	    }
	    return null;
	}
	FPp.getNode = function getNode(count) {
	    if (count === void 0) { count = 0; }
	    return getNodeHelper(this, ~~count);
	};
	FPp.getParentNode = function getParentNode(count) {
	    if (count === void 0) { count = 0; }
	    return getNodeHelper(this, ~~count + 1);
	};
	// The length of the stack can be either even or odd, depending on whether
	// or not we have a name for the root value. The difference between the
	// index of the root value and the index of the final value is always
	// even, though, which allows us to return the root value in constant time
	// (i.e. without iterating backwards through the stack).
	FPp.getRootValue = function getRootValue() {
	    var s = this.stack;
	    if (s.length % 2 === 0) {
	        return s[1];
	    }
	    return s[0];
	};
	// Temporarily push properties named by string arguments given after the
	// callback function onto this.stack, then call the callback with a
	// reference to this (modified) FastPath object. Note that the stack will
	// be restored to its original state after the callback is finished, so it
	// is probably a mistake to retain a reference to the path.
	FPp.call = function call(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = callback(this);
	    s.length = origLen;
	    return result;
	};
	// Similar to FastPath.prototype.call, except that the value obtained by
	// accessing this.getValue()[name1][name2]... should be array-like. The
	// callback will be called with a reference to this path object for each
	// element of the array.
	FPp.each = function each(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            // If the callback needs to know the value of i, call
	            // path.getName(), assuming path is the parameter name.
	            callback(this);
	            s.length -= 2;
	        }
	    }
	    s.length = origLen;
	};
	// Similar to FastPath.prototype.each, except that the results of the
	// callback function invocations are stored in an array and returned at
	// the end of the iteration.
	FPp.map = function map(callback /*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = new Array(value.length);
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            result[i] = callback(this, i);
	            s.length -= 2;
	        }
	    }
	    s.length = origLen;
	    return result;
	};
	// Returns true if the node at the tip of the path is wrapped with
	// parentheses, OR if the only reason the node needed parentheses was that
	// it couldn't be the first expression in the enclosing statement (see
	// FastPath#canBeFirstInStatement), and it has an opening `(` character.
	// For example, the FunctionExpression in `(function(){}())` appears to
	// need parentheses only because it's the first expression in the AST, but
	// since it happens to be preceded by a `(` (which is not apparent from
	// the AST but can be determined using FastPath#getPrevToken), there is no
	// ambiguity about how to parse it, so it counts as having parentheses,
	// even though it is not immediately followed by a `)`.
	FPp.hasParens = function () {
	    var node = this.getNode();
	    var prevToken = this.getPrevToken(node);
	    if (!prevToken) {
	        return false;
	    }
	    var nextToken = this.getNextToken(node);
	    if (!nextToken) {
	        return false;
	    }
	    if (prevToken.value === "(") {
	        if (nextToken.value === ")") {
	            // If the node preceded by a `(` token and followed by a `)` token,
	            // then of course it has parentheses.
	            return true;
	        }
	        // If this is one of the few Expression types that can't come first in
	        // the enclosing statement because of parsing ambiguities (namely,
	        // FunctionExpression, ObjectExpression, and ClassExpression) and
	        // this.firstInStatement() returns true, and the node would not need
	        // parentheses in an expression context because this.needsParens(true)
	        // returns false, then it just needs an opening parenthesis to resolve
	        // the parsing ambiguity that made it appear to need parentheses.
	        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&
	            this.firstInStatement() &&
	            !this.needsParens(true);
	        if (justNeedsOpeningParen) {
	            return true;
	        }
	    }
	    return false;
	};
	FPp.getPrevToken = function (node) {
	    node = node || this.getNode();
	    var loc = node && node.loc;
	    var tokens = loc && loc.tokens;
	    if (tokens && loc.start.token > 0) {
	        var token = tokens[loc.start.token - 1];
	        if (token) {
	            // Do not return tokens that fall outside the root subtree.
	            var rootLoc = this.getRootValue().loc;
	            if (util$a.comparePos(rootLoc.start, token.loc.start) <= 0) {
	                return token;
	            }
	        }
	    }
	    return null;
	};
	FPp.getNextToken = function (node) {
	    node = node || this.getNode();
	    var loc = node && node.loc;
	    var tokens = loc && loc.tokens;
	    if (tokens && loc.end.token < tokens.length) {
	        var token = tokens[loc.end.token];
	        if (token) {
	            // Do not return tokens that fall outside the root subtree.
	            var rootLoc = this.getRootValue().loc;
	            if (util$a.comparePos(token.loc.end, rootLoc.end) <= 0) {
	                return token;
	            }
	        }
	    }
	    return null;
	};
	// Inspired by require("ast-types").NodePath.prototype.needsParens, but
	// more efficient because we're iterating backwards through a stack.
	FPp.needsParens = function (assumeExpressionContext) {
	    var node = this.getNode();
	    // This needs to come before `if (!parent) { return false }` because
	    // an object destructuring assignment requires parens for
	    // correctness even when it's the topmost expression.
	    if (node.type === "AssignmentExpression" && node.left.type === 'ObjectPattern') {
	        return true;
	    }
	    var parent = this.getParentNode();
	    if (!parent) {
	        return false;
	    }
	    var name = this.getName();
	    // If the value of this path is some child of a Node and not a Node
	    // itself, then it doesn't need parentheses. Only Node objects (in fact,
	    // only Expression nodes) need parentheses.
	    if (this.getValue() !== node) {
	        return false;
	    }
	    // Only statements don't need parentheses.
	    if (n$1.Statement.check(node)) {
	        return false;
	    }
	    // Identifiers never need parentheses.
	    if (node.type === "Identifier") {
	        return false;
	    }
	    if (parent.type === "ParenthesizedExpression") {
	        return false;
	    }
	    switch (node.type) {
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	            return parent.type === "MemberExpression"
	                && name === "object"
	                && parent.object === node;
	        case "BinaryExpression":
	        case "LogicalExpression":
	            switch (parent.type) {
	                case "CallExpression":
	                    return name === "callee"
	                        && parent.callee === node;
	                case "UnaryExpression":
	                case "SpreadElement":
	                case "SpreadProperty":
	                    return true;
	                case "MemberExpression":
	                    return name === "object"
	                        && parent.object === node;
	                case "BinaryExpression":
	                case "LogicalExpression":
	                    var po = parent.operator;
	                    var pp = PRECEDENCE[po];
	                    var no = node.operator;
	                    var np = PRECEDENCE[no];
	                    if (pp > np) {
	                        return true;
	                    }
	                    if (pp === np && name === "right") {
	                        assert_1$2.default.strictEqual(parent.right, node);
	                        return true;
	                    }
	                default:
	                    return false;
	            }
	        case "SequenceExpression":
	            switch (parent.type) {
	                case "ReturnStatement":
	                    return false;
	                case "ForStatement":
	                    // Although parentheses wouldn't hurt around sequence expressions in
	                    // the head of for loops, traditional style dictates that e.g. i++,
	                    // j++ should not be wrapped with parentheses.
	                    return false;
	                case "ExpressionStatement":
	                    return name !== "expression";
	                default:
	                    // Otherwise err on the side of overparenthesization, adding
	                    // explicit exceptions above if this proves overzealous.
	                    return true;
	            }
	        case "YieldExpression":
	            switch (parent.type) {
	                case "BinaryExpression":
	                case "LogicalExpression":
	                case "UnaryExpression":
	                case "SpreadElement":
	                case "SpreadProperty":
	                case "CallExpression":
	                case "MemberExpression":
	                case "NewExpression":
	                case "ConditionalExpression":
	                case "YieldExpression":
	                    return true;
	                default:
	                    return false;
	            }
	        case "IntersectionTypeAnnotation":
	        case "UnionTypeAnnotation":
	            return parent.type === "NullableTypeAnnotation";
	        case "Literal":
	            return parent.type === "MemberExpression"
	                && isNumber.check(node.value)
	                && name === "object"
	                && parent.object === node;
	        // Babel 6 Literal split
	        case "NumericLiteral":
	            return parent.type === "MemberExpression"
	                && name === "object"
	                && parent.object === node;
	        case "AssignmentExpression":
	        case "ConditionalExpression":
	            switch (parent.type) {
	                case "UnaryExpression":
	                case "SpreadElement":
	                case "SpreadProperty":
	                case "BinaryExpression":
	                case "LogicalExpression":
	                    return true;
	                case "CallExpression":
	                case "NewExpression":
	                    return name === "callee"
	                        && parent.callee === node;
	                case "ConditionalExpression":
	                    return name === "test"
	                        && parent.test === node;
	                case "MemberExpression":
	                    return name === "object"
	                        && parent.object === node;
	                default:
	                    return false;
	            }
	        case "ArrowFunctionExpression":
	            if (n$1.CallExpression.check(parent) &&
	                name === 'callee') {
	                return true;
	            }
	            if (n$1.MemberExpression.check(parent) &&
	                name === 'object') {
	                return true;
	            }
	            return isBinary(parent);
	        case "ObjectExpression":
	            if (parent.type === "ArrowFunctionExpression" &&
	                name === "body") {
	                return true;
	            }
	            break;
	        case 'TSAsExpression':
	            if (parent.type === 'ArrowFunctionExpression' &&
	                name === 'body' &&
	                node.expression.type === 'ObjectExpression') {
	                return true;
	            }
	            break;
	        case "CallExpression":
	            if (name === "declaration" &&
	                n$1.ExportDefaultDeclaration.check(parent) &&
	                n$1.FunctionExpression.check(node.callee)) {
	                return true;
	            }
	    }
	    if (parent.type === "NewExpression" &&
	        name === "callee" &&
	        parent.callee === node) {
	        return containsCallExpression(node);
	    }
	    if (assumeExpressionContext !== true &&
	        !this.canBeFirstInStatement() &&
	        this.firstInStatement()) {
	        return true;
	    }
	    return false;
	};
	function isBinary(node) {
	    return n$1.BinaryExpression.check(node)
	        || n$1.LogicalExpression.check(node);
	}
	var PRECEDENCE = {};
	[["||"],
	    ["&&"],
	    ["|"],
	    ["^"],
	    ["&"],
	    ["==", "===", "!=", "!=="],
	    ["<", ">", "<=", ">=", "in", "instanceof"],
	    [">>", "<<", ">>>"],
	    ["+", "-"],
	    ["*", "/", "%"],
	    ["**"]
	].forEach(function (tier, i) {
	    tier.forEach(function (op) {
	        PRECEDENCE[op] = i;
	    });
	});
	function containsCallExpression(node) {
	    if (n$1.CallExpression.check(node)) {
	        return true;
	    }
	    if (isArray$3.check(node)) {
	        return node.some(containsCallExpression);
	    }
	    if (n$1.Node.check(node)) {
	        return types$6.someField(node, function (_name, child) { return containsCallExpression(child); });
	    }
	    return false;
	}
	FPp.canBeFirstInStatement = function () {
	    var node = this.getNode();
	    if (n$1.FunctionExpression.check(node)) {
	        return false;
	    }
	    if (n$1.ObjectExpression.check(node)) {
	        return false;
	    }
	    if (n$1.ClassExpression.check(node)) {
	        return false;
	    }
	    return true;
	};
	FPp.firstInStatement = function () {
	    var s = this.stack;
	    var parentName, parent;
	    var childName, child;
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        if (n$1.Node.check(s[i])) {
	            childName = parentName;
	            child = parent;
	            parentName = s[i - 1];
	            parent = s[i];
	        }
	        if (!parent || !child) {
	            continue;
	        }
	        if (n$1.BlockStatement.check(parent) &&
	            parentName === "body" &&
	            childName === 0) {
	            assert_1$2.default.strictEqual(parent.body[0], child);
	            return true;
	        }
	        if (n$1.ExpressionStatement.check(parent) &&
	            childName === "expression") {
	            assert_1$2.default.strictEqual(parent.expression, child);
	            return true;
	        }
	        if (n$1.AssignmentExpression.check(parent) &&
	            childName === "left") {
	            assert_1$2.default.strictEqual(parent.left, child);
	            return true;
	        }
	        if (n$1.ArrowFunctionExpression.check(parent) &&
	            childName === "body") {
	            assert_1$2.default.strictEqual(parent.body, child);
	            return true;
	        }
	        if (n$1.SequenceExpression.check(parent) &&
	            parentName === "expressions" &&
	            childName === 0) {
	            assert_1$2.default.strictEqual(parent.expressions[0], child);
	            continue;
	        }
	        if (n$1.CallExpression.check(parent) &&
	            childName === "callee") {
	            assert_1$2.default.strictEqual(parent.callee, child);
	            continue;
	        }
	        if (n$1.MemberExpression.check(parent) &&
	            childName === "object") {
	            assert_1$2.default.strictEqual(parent.object, child);
	            continue;
	        }
	        if (n$1.ConditionalExpression.check(parent) &&
	            childName === "test") {
	            assert_1$2.default.strictEqual(parent.test, child);
	            continue;
	        }
	        if (isBinary(parent) &&
	            childName === "left") {
	            assert_1$2.default.strictEqual(parent.left, child);
	            continue;
	        }
	        if (n$1.UnaryExpression.check(parent) &&
	            !parent.prefix &&
	            childName === "argument") {
	            assert_1$2.default.strictEqual(parent.argument, child);
	            continue;
	        }
	        return false;
	    }
	    return true;
	};
	fastPath.default = FastPath;

	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(patcher, "__esModule", { value: true });
	var assert_1$1 = __importDefault$2(require$$0$4);
	var linesModule = __importStar$2(lines);
	var types$5 = __importStar$2(main$2);
	var Printable = types$5.namedTypes.Printable;
	var Expression = types$5.namedTypes.Expression;
	var ReturnStatement = types$5.namedTypes.ReturnStatement;
	var SourceLocation$1 = types$5.namedTypes.SourceLocation;
	var util_1 = util$i;
	var fast_path_1$1 = __importDefault$2(fastPath);
	var isObject$9 = types$5.builtInTypes.object;
	var isArray$2 = types$5.builtInTypes.array;
	var isString$3 = types$5.builtInTypes.string;
	var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
	var Patcher = function Patcher(lines) {
	    assert_1$1.default.ok(this instanceof Patcher);
	    assert_1$1.default.ok(lines instanceof linesModule.Lines);
	    var self = this, replacements = [];
	    self.replace = function (loc, lines) {
	        if (isString$3.check(lines))
	            lines = linesModule.fromString(lines);
	        replacements.push({
	            lines: lines,
	            start: loc.start,
	            end: loc.end
	        });
	    };
	    self.get = function (loc) {
	        // If no location is provided, return the complete Lines object.
	        loc = loc || {
	            start: { line: 1, column: 0 },
	            end: { line: lines.length,
	                column: lines.getLineLength(lines.length) }
	        };
	        var sliceFrom = loc.start, toConcat = [];
	        function pushSlice(from, to) {
	            assert_1$1.default.ok(util_1.comparePos(from, to) <= 0);
	            toConcat.push(lines.slice(from, to));
	        }
	        replacements.sort(function (a, b) { return util_1.comparePos(a.start, b.start); }).forEach(function (rep) {
	            if (util_1.comparePos(sliceFrom, rep.start) > 0) ;
	            else {
	                pushSlice(sliceFrom, rep.start);
	                toConcat.push(rep.lines);
	                sliceFrom = rep.end;
	            }
	        });
	        pushSlice(sliceFrom, loc.end);
	        return linesModule.concat(toConcat);
	    };
	};
	patcher.Patcher = Patcher;
	var Pp = Patcher.prototype;
	Pp.tryToReprintComments = function (newNode, oldNode, print) {
	    var patcher = this;
	    if (!newNode.comments &&
	        !oldNode.comments) {
	        // We were (vacuously) able to reprint all the comments!
	        return true;
	    }
	    var newPath = fast_path_1$1.default.from(newNode);
	    var oldPath = fast_path_1$1.default.from(oldNode);
	    newPath.stack.push("comments", getSurroundingComments(newNode));
	    oldPath.stack.push("comments", getSurroundingComments(oldNode));
	    var reprints = [];
	    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
	    // No need to pop anything from newPath.stack or oldPath.stack, since
	    // newPath and oldPath are fresh local variables.
	    if (ableToReprintComments && reprints.length > 0) {
	        reprints.forEach(function (reprint) {
	            var oldComment = reprint.oldPath.getValue();
	            assert_1$1.default.ok(oldComment.leading || oldComment.trailing);
	            patcher.replace(oldComment.loc, 
	            // Comments can't have .comments, so it doesn't matter whether we
	            // print with comments or without.
	            print(reprint.newPath).indentTail(oldComment.loc.indent));
	        });
	    }
	    return ableToReprintComments;
	};
	// Get all comments that are either leading or trailing, ignoring any
	// comments that occur inside node.loc. Returns an empty array for nodes
	// with no leading or trailing comments.
	function getSurroundingComments(node) {
	    var result = [];
	    if (node.comments &&
	        node.comments.length > 0) {
	        node.comments.forEach(function (comment) {
	            if (comment.leading || comment.trailing) {
	                result.push(comment);
	            }
	        });
	    }
	    return result;
	}
	Pp.deleteComments = function (node) {
	    if (!node.comments) {
	        return;
	    }
	    var patcher = this;
	    node.comments.forEach(function (comment) {
	        if (comment.leading) {
	            // Delete leading comments along with any trailing whitespace they
	            // might have.
	            patcher.replace({
	                start: comment.loc.start,
	                end: node.loc.lines.skipSpaces(comment.loc.end, false, false)
	            }, "");
	        }
	        else if (comment.trailing) {
	            // Delete trailing comments along with any leading whitespace they
	            // might have.
	            patcher.replace({
	                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
	                end: comment.loc.end
	            }, "");
	        }
	    });
	};
	function getReprinter(path) {
	    assert_1$1.default.ok(path instanceof fast_path_1$1.default);
	    // Make sure that this path refers specifically to a Node, rather than
	    // some non-Node subproperty of a Node.
	    var node = path.getValue();
	    if (!Printable.check(node))
	        return;
	    var orig = node.original;
	    var origLoc = orig && orig.loc;
	    var lines = origLoc && origLoc.lines;
	    var reprints = [];
	    if (!lines || !findReprints(path, reprints))
	        return;
	    return function (print) {
	        var patcher = new Patcher(lines);
	        reprints.forEach(function (reprint) {
	            var newNode = reprint.newPath.getValue();
	            var oldNode = reprint.oldPath.getValue();
	            SourceLocation$1.assert(oldNode.loc, true);
	            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
	            if (needToPrintNewPathWithComments) {
	                // Since we were not able to preserve all leading/trailing
	                // comments, we delete oldNode's comments, print newPath with
	                // comments, and then patch the resulting lines where oldNode used
	                // to be.
	                patcher.deleteComments(oldNode);
	            }
	            var newLines = print(reprint.newPath, {
	                includeComments: needToPrintNewPathWithComments,
	                // If the oldNode we're replacing already had parentheses, we may
	                // not need to print the new node with any extra parentheses,
	                // because the existing parentheses will suffice. However, if the
	                // newNode has a different type than the oldNode, let the printer
	                // decide if reprint.newPath needs parentheses, as usual.
	                avoidRootParens: (oldNode.type === newNode.type &&
	                    reprint.oldPath.hasParens())
	            }).indentTail(oldNode.loc.indent);
	            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
	            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
	            // If we try to replace the argument of a ReturnStatement like
	            // return"asdf" with e.g. a literal null expression, we run the risk
	            // of ending up with returnnull, so we need to add an extra leading
	            // space in situations where that might happen. Likewise for
	            // "asdf"in obj. See #170.
	            if (nls || nts) {
	                var newParts = [];
	                nls && newParts.push(" ");
	                newParts.push(newLines);
	                nts && newParts.push(" ");
	                newLines = linesModule.concat(newParts);
	            }
	            patcher.replace(oldNode.loc, newLines);
	        });
	        // Recall that origLoc is the .loc of an ancestor node that is
	        // guaranteed to contain all the reprinted nodes and comments.
	        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);
	        if (path.needsParens()) {
	            return linesModule.concat(["(", patchedLines, ")"]);
	        }
	        return patchedLines;
	    };
	}
	patcher.getReprinter = getReprinter;
	// If the last character before oldLoc and the first character of newLines
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsLeadingSpace(oldLines, oldLoc, newLines) {
	    var posBeforeOldLoc = util_1.copyPos(oldLoc.start);
	    // The character just before the location occupied by oldNode.
	    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) &&
	        oldLines.charAt(posBeforeOldLoc);
	    // First character of the reprinted node.
	    var newFirstChar = newLines.charAt(newLines.firstPos());
	    return charBeforeOldLoc &&
	        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&
	        newFirstChar &&
	        riskyAdjoiningCharExp.test(newFirstChar);
	}
	// If the last character of newLines and the first character after oldLoc
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsTrailingSpace(oldLines, oldLoc, newLines) {
	    // The character just after the location occupied by oldNode.
	    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
	    var newLastPos = newLines.lastPos();
	    // Last character of the reprinted node.
	    var newLastChar = newLines.prevPos(newLastPos) &&
	        newLines.charAt(newLastPos);
	    return newLastChar &&
	        riskyAdjoiningCharExp.test(newLastChar) &&
	        charAfterOldLoc &&
	        riskyAdjoiningCharExp.test(charAfterOldLoc);
	}
	function findReprints(newPath, reprints) {
	    var newNode = newPath.getValue();
	    Printable.assert(newNode);
	    var oldNode = newNode.original;
	    Printable.assert(oldNode);
	    assert_1$1.default.deepEqual(reprints, []);
	    if (newNode.type !== oldNode.type) {
	        return false;
	    }
	    var oldPath = new fast_path_1$1.default(oldNode);
	    var canReprint = findChildReprints(newPath, oldPath, reprints);
	    if (!canReprint) {
	        // Make absolutely sure the calling code does not attempt to reprint
	        // any nodes.
	        reprints.length = 0;
	    }
	    return canReprint;
	}
	function findAnyReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    if (newNode === oldNode)
	        return true;
	    if (isArray$2.check(newNode))
	        return findArrayReprints(newPath, oldPath, reprints);
	    if (isObject$9.check(newNode))
	        return findObjectReprints(newPath, oldPath, reprints);
	    return false;
	}
	function findArrayReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    if (newNode === oldNode ||
	        newPath.valueIsDuplicate() ||
	        oldPath.valueIsDuplicate()) {
	        return true;
	    }
	    isArray$2.assert(newNode);
	    var len = newNode.length;
	    if (!(isArray$2.check(oldNode) &&
	        oldNode.length === len))
	        return false;
	    for (var i = 0; i < len; ++i) {
	        newPath.stack.push(i, newNode[i]);
	        oldPath.stack.push(i, oldNode[i]);
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }
	    return true;
	}
	function findObjectReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    isObject$9.assert(newNode);
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	    var oldNode = oldPath.getValue();
	    if (!isObject$9.check(oldNode))
	        return false;
	    if (newNode === oldNode ||
	        newPath.valueIsDuplicate() ||
	        oldPath.valueIsDuplicate()) {
	        return true;
	    }
	    if (Printable.check(newNode)) {
	        if (!Printable.check(oldNode)) {
	            return false;
	        }
	        var newParentNode = newPath.getParentNode();
	        var oldParentNode = oldPath.getParentNode();
	        if (oldParentNode !== null && oldParentNode.type === 'FunctionTypeAnnotation'
	            && newParentNode !== null && newParentNode.type === 'FunctionTypeAnnotation') {
	            var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;
	            var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;
	            if (!oldNeedsParens && newNeedParens) {
	                return false;
	            }
	        }
	        // Here we need to decide whether the reprinted code for newNode is
	        // appropriate for patching into the location of oldNode.
	        if (newNode.type === oldNode.type) {
	            var childReprints = [];
	            if (findChildReprints(newPath, oldPath, childReprints)) {
	                reprints.push.apply(reprints, childReprints);
	            }
	            else if (oldNode.loc) {
	                // If we have no .loc information for oldNode, then we won't be
	                // able to reprint it.
	                reprints.push({
	                    oldPath: oldPath.copy(),
	                    newPath: newPath.copy()
	                });
	            }
	            else {
	                return false;
	            }
	            return true;
	        }
	        if (Expression.check(newNode) &&
	            Expression.check(oldNode) &&
	            // If we have no .loc information for oldNode, then we won't be
	            // able to reprint it.
	            oldNode.loc) {
	            // If both nodes are subtypes of Expression, then we should be able
	            // to fill the location occupied by the old node with code printed
	            // for the new node with no ill consequences.
	            reprints.push({
	                oldPath: oldPath.copy(),
	                newPath: newPath.copy()
	            });
	            return true;
	        }
	        // The nodes have different types, and at least one of the types is
	        // not a subtype of the Expression type, so we cannot safely assume
	        // the nodes are syntactically interchangeable.
	        return false;
	    }
	    return findChildReprints(newPath, oldPath, reprints);
	}
	function findChildReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    isObject$9.assert(newNode);
	    isObject$9.assert(oldNode);
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	    // If this node needs parentheses and will not be wrapped with
	    // parentheses when reprinted, then return false to skip reprinting and
	    // let it be printed generically.
	    if (newPath.needsParens() &&
	        !oldPath.hasParens()) {
	        return false;
	    }
	    var keys = util_1.getUnionOfKeys(oldNode, newNode);
	    if (oldNode.type === "File" ||
	        newNode.type === "File") {
	        // Don't bother traversing file.tokens, an often very large array
	        // returned by Babylon, and useless for our purposes.
	        delete keys.tokens;
	    }
	    // Don't bother traversing .loc objects looking for reprintable nodes.
	    delete keys.loc;
	    var originalReprintCount = reprints.length;
	    for (var k in keys) {
	        if (k.charAt(0) === "_") {
	            // Ignore "private" AST properties added by e.g. Babel plugins and
	            // parsers like Babylon.
	            continue;
	        }
	        newPath.stack.push(k, types$5.getFieldValue(newNode, k));
	        oldPath.stack.push(k, types$5.getFieldValue(oldNode, k));
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }
	    // Return statements might end up running into ASI issues due to
	    // comments inserted deep within the tree, so reprint them if anything
	    // changed within them.
	    if (ReturnStatement.check(newPath.getNode()) &&
	        reprints.length > originalReprintCount) {
	        return false;
	    }
	    return true;
	}

	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(printer, "__esModule", { value: true });
	var assert_1 = __importDefault$1(require$$0$4);
	var comments_1 = comments;
	var lines_1 = lines;
	var options_1 = options;
	var patcher_1 = patcher;
	var types$4 = __importStar$1(main$2);
	var namedTypes = types$4.namedTypes;
	var isString$2 = types$4.builtInTypes.string;
	var isObject$8 = types$4.builtInTypes.object;
	var fast_path_1 = __importDefault$1(fastPath);
	var util$9 = __importStar$1(util$i);
	var PrintResult = function PrintResult(code, sourceMap) {
	    assert_1.default.ok(this instanceof PrintResult);
	    isString$2.assert(code);
	    this.code = code;
	    if (sourceMap) {
	        isObject$8.assert(sourceMap);
	        this.map = sourceMap;
	    }
	};
	var PRp = PrintResult.prototype;
	var warnedAboutToString = false;
	PRp.toString = function () {
	    if (!warnedAboutToString) {
	        console.warn("Deprecation warning: recast.print now returns an object with " +
	            "a .code property. You appear to be treating the object as a " +
	            "string, which might still work but is strongly discouraged.");
	        warnedAboutToString = true;
	    }
	    return this.code;
	};
	var emptyPrintResult = new PrintResult("");
	var Printer = function Printer(config) {
	    assert_1.default.ok(this instanceof Printer);
	    var explicitTabWidth = config && config.tabWidth;
	    config = options_1.normalize(config);
	    // It's common for client code to pass the same options into both
	    // recast.parse and recast.print, but the Printer doesn't need (and
	    // can be confused by) config.sourceFileName, so we null it out.
	    config.sourceFileName = null;
	    // Non-destructively modifies options with overrides, and returns a
	    // new print function that uses the modified options.
	    function makePrintFunctionWith(options, overrides) {
	        options = Object.assign({}, options, overrides);
	        return function (path) { return print(path, options); };
	    }
	    function print(path, options) {
	        assert_1.default.ok(path instanceof fast_path_1.default);
	        options = options || {};
	        if (options.includeComments) {
	            return comments_1.printComments(path, makePrintFunctionWith(options, {
	                includeComments: false
	            }));
	        }
	        var oldTabWidth = config.tabWidth;
	        if (!explicitTabWidth) {
	            var loc = path.getNode().loc;
	            if (loc && loc.lines && loc.lines.guessTabWidth) {
	                config.tabWidth = loc.lines.guessTabWidth();
	            }
	        }
	        var reprinter = patcher_1.getReprinter(path);
	        var lines = reprinter
	            // Since the print function that we pass to the reprinter will
	            // be used to print "new" nodes, it's tempting to think we
	            // should pass printRootGenerically instead of print, to avoid
	            // calling maybeReprint again, but that would be a mistake
	            // because the new nodes might not be entirely new, but merely
	            // moved from elsewhere in the AST. The print function is the
	            // right choice because it gives us the opportunity to reprint
	            // such nodes using their original source.
	            ? reprinter(print)
	            : genericPrint(path, config, options, makePrintFunctionWith(options, {
	                includeComments: true,
	                avoidRootParens: false
	            }));
	        config.tabWidth = oldTabWidth;
	        return lines;
	    }
	    this.print = function (ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	        var lines = print(fast_path_1.default.from(ast), {
	            includeComments: true,
	            avoidRootParens: false
	        });
	        return new PrintResult(lines.toString(config), util$9.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));
	    };
	    this.printGenerically = function (ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	        // Print the entire AST generically.
	        function printGenerically(path) {
	            return comments_1.printComments(path, function (path) { return genericPrint(path, config, {
	                includeComments: true,
	                avoidRootParens: false
	            }, printGenerically); });
	        }
	        var path = fast_path_1.default.from(ast);
	        var oldReuseWhitespace = config.reuseWhitespace;
	        // Do not reuse whitespace (or anything else, for that matter)
	        // when printing generically.
	        config.reuseWhitespace = false;
	        // TODO Allow printing of comments?
	        var pr = new PrintResult(printGenerically(path).toString(config));
	        config.reuseWhitespace = oldReuseWhitespace;
	        return pr;
	    };
	};
	printer.Printer = Printer;
	function genericPrint(path, config, options, printPath) {
	    assert_1.default.ok(path instanceof fast_path_1.default);
	    var node = path.getValue();
	    var parts = [];
	    var linesWithoutParens = genericPrintNoParens(path, config, printPath);
	    if (!node || linesWithoutParens.isEmpty()) {
	        return linesWithoutParens;
	    }
	    var shouldAddParens = false;
	    var decoratorsLines = printDecorators(path, printPath);
	    if (decoratorsLines.isEmpty()) {
	        // Nodes with decorators can't have parentheses, so we can avoid
	        // computing path.needsParens() except in this case.
	        if (!options.avoidRootParens) {
	            shouldAddParens = path.needsParens();
	        }
	    }
	    else {
	        parts.push(decoratorsLines);
	    }
	    if (shouldAddParens) {
	        parts.unshift("(");
	    }
	    parts.push(linesWithoutParens);
	    if (shouldAddParens) {
	        parts.push(")");
	    }
	    return lines_1.concat(parts);
	}
	// Note that the `options` parameter of this function is what other
	// functions in this file call the `config` object (that is, the
	// configuration object originally passed into the Printer constructor).
	// Its properties are documented in lib/options.js.
	function genericPrintNoParens(path, options, print) {
	    var n = path.getValue();
	    if (!n) {
	        return lines_1.fromString("");
	    }
	    if (typeof n === "string") {
	        return lines_1.fromString(n, options);
	    }
	    namedTypes.Printable.assert(n);
	    var parts = [];
	    switch (n.type) {
	        case "File":
	            return path.call(print, "program");
	        case "Program":
	            // Babel 6
	            if (n.directives) {
	                path.each(function (childPath) {
	                    parts.push(print(childPath), ";\n");
	                }, "directives");
	            }
	            if (n.interpreter) {
	                parts.push(path.call(print, "interpreter"));
	            }
	            parts.push(path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body"));
	            return lines_1.concat(parts);
	        case "Noop": // Babel extension.
	        case "EmptyStatement":
	            return lines_1.fromString("");
	        case "ExpressionStatement":
	            return lines_1.concat([path.call(print, "expression"), ";"]);
	        case "ParenthesizedExpression": // Babel extension.
	            return lines_1.concat(["(", path.call(print, "expression"), ")"]);
	        case "BinaryExpression":
	        case "LogicalExpression":
	        case "AssignmentExpression":
	            return lines_1.fromString(" ").join([
	                path.call(print, "left"),
	                n.operator,
	                path.call(print, "right")
	            ]);
	        case "AssignmentPattern":
	            return lines_1.concat([
	                path.call(print, "left"),
	                " = ",
	                path.call(print, "right")
	            ]);
	        case "MemberExpression":
	        case "OptionalMemberExpression":
	            parts.push(path.call(print, "object"));
	            var property = path.call(print, "property");
	            var optional = n.type === "OptionalMemberExpression" && n.optional;
	            if (n.computed) {
	                parts.push(optional ? "?.[" : "[", property, "]");
	            }
	            else {
	                parts.push(optional ? "?." : ".", property);
	            }
	            return lines_1.concat(parts);
	        case "MetaProperty":
	            return lines_1.concat([
	                path.call(print, "meta"),
	                ".",
	                path.call(print, "property")
	            ]);
	        case "BindExpression":
	            if (n.object) {
	                parts.push(path.call(print, "object"));
	            }
	            parts.push("::", path.call(print, "callee"));
	            return lines_1.concat(parts);
	        case "Path":
	            return lines_1.fromString(".").join(n.body);
	        case "Identifier":
	            return lines_1.concat([
	                lines_1.fromString(n.name, options),
	                n.optional ? "?" : "",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "SpreadElement":
	        case "SpreadElementPattern":
	        case "RestProperty": // Babel 6 for ObjectPattern
	        case "SpreadProperty":
	        case "SpreadPropertyPattern":
	        case "ObjectTypeSpreadProperty":
	        case "RestElement":
	            return lines_1.concat([
	                "...",
	                path.call(print, "argument"),
	                path.call(print, "typeAnnotation")
	            ]);
	        case "FunctionDeclaration":
	        case "FunctionExpression":
	        case "TSDeclareFunction":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            if (n.async) {
	                parts.push("async ");
	            }
	            parts.push("function");
	            if (n.generator)
	                parts.push("*");
	            if (n.id) {
	                parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
	            }
	            else {
	                if (n.typeParameters) {
	                    parts.push(path.call(print, "typeParameters"));
	                }
	            }
	            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	            if (n.body) {
	                parts.push(" ", path.call(print, "body"));
	            }
	            return lines_1.concat(parts);
	        case "ArrowFunctionExpression":
	            if (n.async) {
	                parts.push("async ");
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (!options.arrowParensAlways &&
	                n.params.length === 1 &&
	                !n.rest &&
	                n.params[0].type === 'Identifier' &&
	                !n.params[0].typeAnnotation &&
	                !n.returnType) {
	                parts.push(path.call(print, "params", 0));
	            }
	            else {
	                parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	            }
	            parts.push(" => ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "MethodDefinition":
	            return printMethod(path, options, print);
	        case "YieldExpression":
	            parts.push("yield");
	            if (n.delegate)
	                parts.push("*");
	            if (n.argument)
	                parts.push(" ", path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "AwaitExpression":
	            parts.push("await");
	            if (n.all)
	                parts.push("*");
	            if (n.argument)
	                parts.push(" ", path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "ModuleDeclaration":
	            parts.push("module", path.call(print, "id"));
	            if (n.source) {
	                assert_1.default.ok(!n.body);
	                parts.push("from", path.call(print, "source"));
	            }
	            else {
	                parts.push(path.call(print, "body"));
	            }
	            return lines_1.fromString(" ").join(parts);
	        case "ImportSpecifier":
	            if (n.importKind && n.importKind !== "value") {
	                parts.push(n.importKind + " ");
	            }
	            if (n.imported) {
	                parts.push(path.call(print, "imported"));
	                if (n.local &&
	                    n.local.name !== n.imported.name) {
	                    parts.push(" as ", path.call(print, "local"));
	                }
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	                if (n.name) {
	                    parts.push(" as ", path.call(print, "name"));
	                }
	            }
	            return lines_1.concat(parts);
	        case "ExportSpecifier":
	            if (n.local) {
	                parts.push(path.call(print, "local"));
	                if (n.exported &&
	                    n.exported.name !== n.local.name) {
	                    parts.push(" as ", path.call(print, "exported"));
	                }
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	                if (n.name) {
	                    parts.push(" as ", path.call(print, "name"));
	                }
	            }
	            return lines_1.concat(parts);
	        case "ExportBatchSpecifier":
	            return lines_1.fromString("*");
	        case "ImportNamespaceSpecifier":
	            parts.push("* as ");
	            if (n.local) {
	                parts.push(path.call(print, "local"));
	            }
	            else if (n.id) {
	                parts.push(path.call(print, "id"));
	            }
	            return lines_1.concat(parts);
	        case "ImportDefaultSpecifier":
	            if (n.local) {
	                return path.call(print, "local");
	            }
	            return path.call(print, "id");
	        case "TSExportAssignment":
	            return lines_1.concat(["export = ", path.call(print, "expression")]);
	        case "ExportDeclaration":
	        case "ExportDefaultDeclaration":
	        case "ExportNamedDeclaration":
	            return printExportDeclaration(path, options, print);
	        case "ExportAllDeclaration":
	            parts.push("export *");
	            if (n.exported) {
	                parts.push(" as ", path.call(print, "exported"));
	            }
	            parts.push(" from ", path.call(print, "source"), ";");
	            return lines_1.concat(parts);
	        case "TSNamespaceExportDeclaration":
	            parts.push("export as namespace ", path.call(print, "id"));
	            return maybeAddSemicolon(lines_1.concat(parts));
	        case "ExportNamespaceSpecifier":
	            return lines_1.concat(["* as ", path.call(print, "exported")]);
	        case "ExportDefaultSpecifier":
	            return path.call(print, "exported");
	        case "Import":
	            return lines_1.fromString("import", options);
	        // Recast and ast-types currently support dynamic import(...) using
	        // either this dedicated ImportExpression type or a CallExpression
	        // whose callee has type Import.
	        // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486
	        case "ImportExpression":
	            return lines_1.concat(["import(", path.call(print, "source"), ")"]);
	        case "ImportDeclaration": {
	            parts.push("import ");
	            if (n.importKind && n.importKind !== "value") {
	                parts.push(n.importKind + " ");
	            }
	            if (n.specifiers &&
	                n.specifiers.length > 0) {
	                var unbracedSpecifiers_1 = [];
	                var bracedSpecifiers_1 = [];
	                path.each(function (specifierPath) {
	                    var spec = specifierPath.getValue();
	                    if (spec.type === "ImportSpecifier") {
	                        bracedSpecifiers_1.push(print(specifierPath));
	                    }
	                    else if (spec.type === "ImportDefaultSpecifier" ||
	                        spec.type === "ImportNamespaceSpecifier") {
	                        unbracedSpecifiers_1.push(print(specifierPath));
	                    }
	                }, "specifiers");
	                unbracedSpecifiers_1.forEach(function (lines, i) {
	                    if (i > 0) {
	                        parts.push(", ");
	                    }
	                    parts.push(lines);
	                });
	                if (bracedSpecifiers_1.length > 0) {
	                    var lines_2 = lines_1.fromString(", ").join(bracedSpecifiers_1);
	                    if (lines_2.getLineLength(1) > options.wrapColumn) {
	                        lines_2 = lines_1.concat([
	                            lines_1.fromString(",\n").join(bracedSpecifiers_1).indent(options.tabWidth),
	                            ","
	                        ]);
	                    }
	                    if (unbracedSpecifiers_1.length > 0) {
	                        parts.push(", ");
	                    }
	                    if (lines_2.length > 1) {
	                        parts.push("{\n", lines_2, "\n}");
	                    }
	                    else if (options.objectCurlySpacing) {
	                        parts.push("{ ", lines_2, " }");
	                    }
	                    else {
	                        parts.push("{", lines_2, "}");
	                    }
	                }
	                parts.push(" from ");
	            }
	            parts.push(path.call(print, "source"), ";");
	            return lines_1.concat(parts);
	        }
	        case "BlockStatement":
	            var naked = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	            if (naked.isEmpty()) {
	                if (!n.directives || n.directives.length === 0) {
	                    return lines_1.fromString("{}");
	                }
	            }
	            parts.push("{\n");
	            // Babel 6
	            if (n.directives) {
	                path.each(function (childPath) {
	                    parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked.isEmpty() ? "\n" : "");
	                }, "directives");
	            }
	            parts.push(naked.indent(options.tabWidth));
	            parts.push("\n}");
	            return lines_1.concat(parts);
	        case "ReturnStatement":
	            parts.push("return");
	            if (n.argument) {
	                var argLines = path.call(print, "argument");
	                if (argLines.startsWithComment() ||
	                    (argLines.length > 1 &&
	                        namedTypes.JSXElement &&
	                        namedTypes.JSXElement.check(n.argument))) {
	                    parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
	                }
	                else {
	                    parts.push(" ", argLines);
	                }
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "CallExpression":
	        case "OptionalCallExpression":
	            parts.push(path.call(print, "callee"));
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.typeArguments) {
	                parts.push(path.call(print, "typeArguments"));
	            }
	            if (n.type === "OptionalCallExpression" &&
	                n.callee.type !== "OptionalMemberExpression") {
	                parts.push("?.");
	            }
	            parts.push(printArgumentsList(path, options, print));
	            return lines_1.concat(parts);
	        case "ObjectExpression":
	        case "ObjectPattern":
	        case "ObjectTypeAnnotation":
	            var allowBreak = false;
	            var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
	            var separator = options.flowObjectCommas ? "," : (isTypeAnnotation ? ";" : ",");
	            var fields = [];
	            if (isTypeAnnotation) {
	                fields.push("indexers", "callProperties");
	                if (n.internalSlots != null) {
	                    fields.push("internalSlots");
	                }
	            }
	            fields.push("properties");
	            var len = 0;
	            fields.forEach(function (field) {
	                len += n[field].length;
	            });
	            var oneLine = (isTypeAnnotation && len === 1) || len === 0;
	            var leftBrace = n.exact ? "{|" : "{";
	            var rightBrace = n.exact ? "|}" : "}";
	            parts.push(oneLine ? leftBrace : leftBrace + "\n");
	            var leftBraceIndex = parts.length - 1;
	            var i = 0;
	            fields.forEach(function (field) {
	                path.each(function (childPath) {
	                    var lines = print(childPath);
	                    if (!oneLine) {
	                        lines = lines.indent(options.tabWidth);
	                    }
	                    var multiLine = !isTypeAnnotation && lines.length > 1;
	                    if (multiLine && allowBreak) {
	                        // Similar to the logic for BlockStatement.
	                        parts.push("\n");
	                    }
	                    parts.push(lines);
	                    if (i < len - 1) {
	                        // Add an extra line break if the previous object property
	                        // had a multi-line value.
	                        parts.push(separator + (multiLine ? "\n\n" : "\n"));
	                        allowBreak = !multiLine;
	                    }
	                    else if (len !== 1 && isTypeAnnotation) {
	                        parts.push(separator);
	                    }
	                    else if (!oneLine && util$9.isTrailingCommaEnabled(options, "objects")) {
	                        parts.push(separator);
	                    }
	                    i++;
	                }, field);
	            });
	            if (n.inexact) {
	                var line = lines_1.fromString("...", options);
	                if (oneLine) {
	                    if (len > 0) {
	                        parts.push(separator, " ");
	                    }
	                    parts.push(line);
	                }
	                else {
	                    // No trailing separator after ... to maintain parity with prettier.
	                    parts.push("\n", line.indent(options.tabWidth));
	                }
	            }
	            parts.push(oneLine ? rightBrace : "\n" + rightBrace);
	            if (i !== 0 && oneLine && options.objectCurlySpacing) {
	                parts[leftBraceIndex] = leftBrace + " ";
	                parts[parts.length - 1] = " " + rightBrace;
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            return lines_1.concat(parts);
	        case "PropertyPattern":
	            return lines_1.concat([
	                path.call(print, "key"),
	                ": ",
	                path.call(print, "pattern")
	            ]);
	        case "ObjectProperty": // Babel 6
	        case "Property": // Non-standard AST node type.
	            if (n.method || n.kind === "get" || n.kind === "set") {
	                return printMethod(path, options, print);
	            }
	            if (n.shorthand && n.value.type === "AssignmentPattern") {
	                return path.call(print, "value");
	            }
	            var key = path.call(print, "key");
	            if (n.computed) {
	                parts.push("[", key, "]");
	            }
	            else {
	                parts.push(key);
	            }
	            if (!n.shorthand) {
	                parts.push(": ", path.call(print, "value"));
	            }
	            return lines_1.concat(parts);
	        case "ClassMethod": // Babel 6
	        case "ObjectMethod": // Babel 6
	        case "ClassPrivateMethod":
	        case "TSDeclareMethod":
	            return printMethod(path, options, print);
	        case "PrivateName":
	            return lines_1.concat(["#", path.call(print, "id")]);
	        case "Decorator":
	            return lines_1.concat(["@", path.call(print, "expression")]);
	        case "ArrayExpression":
	        case "ArrayPattern":
	            var elems = n.elements, len = elems.length;
	            var printed = path.map(print, "elements");
	            var joined = lines_1.fromString(", ").join(printed);
	            var oneLine = joined.getLineLength(1) <= options.wrapColumn;
	            if (oneLine) {
	                if (options.arrayBracketSpacing) {
	                    parts.push("[ ");
	                }
	                else {
	                    parts.push("[");
	                }
	            }
	            else {
	                parts.push("[\n");
	            }
	            path.each(function (elemPath) {
	                var i = elemPath.getName();
	                var elem = elemPath.getValue();
	                if (!elem) {
	                    // If the array expression ends with a hole, that hole
	                    // will be ignored by the interpreter, but if it ends with
	                    // two (or more) holes, we need to write out two (or more)
	                    // commas so that the resulting code is interpreted with
	                    // both (all) of the holes.
	                    parts.push(",");
	                }
	                else {
	                    var lines_3 = printed[i];
	                    if (oneLine) {
	                        if (i > 0)
	                            parts.push(" ");
	                    }
	                    else {
	                        lines_3 = lines_3.indent(options.tabWidth);
	                    }
	                    parts.push(lines_3);
	                    if (i < len - 1 || (!oneLine && util$9.isTrailingCommaEnabled(options, "arrays")))
	                        parts.push(",");
	                    if (!oneLine)
	                        parts.push("\n");
	                }
	            }, "elements");
	            if (oneLine && options.arrayBracketSpacing) {
	                parts.push(" ]");
	            }
	            else {
	                parts.push("]");
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            return lines_1.concat(parts);
	        case "SequenceExpression":
	            return lines_1.fromString(", ").join(path.map(print, "expressions"));
	        case "ThisExpression":
	            return lines_1.fromString("this");
	        case "Super":
	            return lines_1.fromString("super");
	        case "NullLiteral": // Babel 6 Literal split
	            return lines_1.fromString("null");
	        case "RegExpLiteral": // Babel 6 Literal split
	            return lines_1.fromString(n.extra.raw);
	        case "BigIntLiteral": // Babel 7 Literal split
	            return lines_1.fromString(n.value + "n");
	        case "NumericLiteral": // Babel 6 Literal Split
	            // Keep original representation for numeric values not in base 10.
	            if (n.extra &&
	                typeof n.extra.raw === "string" &&
	                Number(n.extra.raw) === n.value) {
	                return lines_1.fromString(n.extra.raw, options);
	            }
	            return lines_1.fromString(n.value, options);
	        case "BooleanLiteral": // Babel 6 Literal split
	        case "StringLiteral": // Babel 6 Literal split
	        case "Literal":
	            // Numeric values may be in bases other than 10. Use their raw
	            // representation if equivalent.
	            if (typeof n.value === "number" &&
	                typeof n.raw === "string" &&
	                Number(n.raw) === n.value) {
	                return lines_1.fromString(n.raw, options);
	            }
	            if (typeof n.value !== "string") {
	                return lines_1.fromString(n.value, options);
	            }
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "Directive": // Babel 6
	            return path.call(print, "value");
	        case "DirectiveLiteral": // Babel 6
	            return lines_1.fromString(nodeStr(n.value, options));
	        case "InterpreterDirective":
	            return lines_1.fromString("#!" + n.value + "\n", options);
	        case "ModuleSpecifier":
	            if (n.local) {
	                throw new Error("The ESTree ModuleSpecifier type should be abstract");
	            }
	            // The Esprima ModuleSpecifier type is just a string-valued
	            // Literal identifying the imported-from module.
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "UnaryExpression":
	            parts.push(n.operator);
	            if (/[a-z]$/.test(n.operator))
	                parts.push(" ");
	            parts.push(path.call(print, "argument"));
	            return lines_1.concat(parts);
	        case "UpdateExpression":
	            parts.push(path.call(print, "argument"), n.operator);
	            if (n.prefix)
	                parts.reverse();
	            return lines_1.concat(parts);
	        case "ConditionalExpression":
	            return lines_1.concat([
	                path.call(print, "test"),
	                " ? ", path.call(print, "consequent"),
	                " : ", path.call(print, "alternate")
	            ]);
	        case "NewExpression":
	            parts.push("new ", path.call(print, "callee"));
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.typeArguments) {
	                parts.push(path.call(print, "typeArguments"));
	            }
	            var args = n.arguments;
	            if (args) {
	                parts.push(printArgumentsList(path, options, print));
	            }
	            return lines_1.concat(parts);
	        case "VariableDeclaration":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            parts.push(n.kind, " ");
	            var maxLen = 0;
	            var printed = path.map(function (childPath) {
	                var lines = print(childPath);
	                maxLen = Math.max(lines.length, maxLen);
	                return lines;
	            }, "declarations");
	            if (maxLen === 1) {
	                parts.push(lines_1.fromString(", ").join(printed));
	            }
	            else if (printed.length > 1) {
	                parts.push(lines_1.fromString(",\n").join(printed)
	                    .indentTail(n.kind.length + 1));
	            }
	            else {
	                parts.push(printed[0]);
	            }
	            // We generally want to terminate all variable declarations with a
	            // semicolon, except when they are children of for loops.
	            var parentNode = path.getParentNode();
	            if (!namedTypes.ForStatement.check(parentNode) &&
	                !namedTypes.ForInStatement.check(parentNode) &&
	                !(namedTypes.ForOfStatement &&
	                    namedTypes.ForOfStatement.check(parentNode)) &&
	                !(namedTypes.ForAwaitStatement &&
	                    namedTypes.ForAwaitStatement.check(parentNode))) {
	                parts.push(";");
	            }
	            return lines_1.concat(parts);
	        case "VariableDeclarator":
	            return n.init ? lines_1.fromString(" = ").join([
	                path.call(print, "id"),
	                path.call(print, "init")
	            ]) : path.call(print, "id");
	        case "WithStatement":
	            return lines_1.concat([
	                "with (",
	                path.call(print, "object"),
	                ") ",
	                path.call(print, "body")
	            ]);
	        case "IfStatement":
	            var con = adjustClause(path.call(print, "consequent"), options);
	            parts.push("if (", path.call(print, "test"), ")", con);
	            if (n.alternate)
	                parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
	            return lines_1.concat(parts);
	        case "ForStatement":
	            // TODO Get the for (;;) case right.
	            var init = path.call(print, "init"), sep = init.length > 1 ? ";\n" : "; ", forParen = "for (", indented = lines_1.fromString(sep).join([
	                init,
	                path.call(print, "test"),
	                path.call(print, "update")
	            ]).indentTail(forParen.length), head = lines_1.concat([forParen, indented, ")"]), clause = adjustClause(path.call(print, "body"), options);
	            parts.push(head);
	            if (head.length > 1) {
	                parts.push("\n");
	                clause = clause.trimLeft();
	            }
	            parts.push(clause);
	            return lines_1.concat(parts);
	        case "WhileStatement":
	            return lines_1.concat([
	                "while (",
	                path.call(print, "test"),
	                ")",
	                adjustClause(path.call(print, "body"), options)
	            ]);
	        case "ForInStatement":
	            // Note: esprima can't actually parse "for each (".
	            return lines_1.concat([
	                n.each ? "for each (" : "for (",
	                path.call(print, "left"),
	                " in ",
	                path.call(print, "right"),
	                ")",
	                adjustClause(path.call(print, "body"), options)
	            ]);
	        case "ForOfStatement":
	        case "ForAwaitStatement":
	            parts.push("for ");
	            if (n.await || n.type === "ForAwaitStatement") {
	                parts.push("await ");
	            }
	            parts.push("(", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options));
	            return lines_1.concat(parts);
	        case "DoWhileStatement":
	            var doBody = lines_1.concat([
	                "do",
	                adjustClause(path.call(print, "body"), options)
	            ]);
	            parts.push(doBody);
	            if (endsWithBrace(doBody))
	                parts.push(" while");
	            else
	                parts.push("\nwhile");
	            parts.push(" (", path.call(print, "test"), ");");
	            return lines_1.concat(parts);
	        case "DoExpression":
	            var statements = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	            return lines_1.concat([
	                "do {\n",
	                statements.indent(options.tabWidth),
	                "\n}"
	            ]);
	        case "BreakStatement":
	            parts.push("break");
	            if (n.label)
	                parts.push(" ", path.call(print, "label"));
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "ContinueStatement":
	            parts.push("continue");
	            if (n.label)
	                parts.push(" ", path.call(print, "label"));
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "LabeledStatement":
	            return lines_1.concat([
	                path.call(print, "label"),
	                ":\n",
	                path.call(print, "body")
	            ]);
	        case "TryStatement":
	            parts.push("try ", path.call(print, "block"));
	            if (n.handler) {
	                parts.push(" ", path.call(print, "handler"));
	            }
	            else if (n.handlers) {
	                path.each(function (handlerPath) {
	                    parts.push(" ", print(handlerPath));
	                }, "handlers");
	            }
	            if (n.finalizer) {
	                parts.push(" finally ", path.call(print, "finalizer"));
	            }
	            return lines_1.concat(parts);
	        case "CatchClause":
	            parts.push("catch ");
	            if (n.param) {
	                parts.push("(", path.call(print, "param"));
	            }
	            if (n.guard) {
	                // Note: esprima does not recognize conditional catch clauses.
	                parts.push(" if ", path.call(print, "guard"));
	            }
	            if (n.param) {
	                parts.push(") ");
	            }
	            parts.push(path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "ThrowStatement":
	            return lines_1.concat(["throw ", path.call(print, "argument"), ";"]);
	        case "SwitchStatement":
	            return lines_1.concat([
	                "switch (",
	                path.call(print, "discriminant"),
	                ") {\n",
	                lines_1.fromString("\n").join(path.map(print, "cases")),
	                "\n}"
	            ]);
	        // Note: ignoring n.lexical because it has no printing consequences.
	        case "SwitchCase":
	            if (n.test)
	                parts.push("case ", path.call(print, "test"), ":");
	            else
	                parts.push("default:");
	            if (n.consequent.length > 0) {
	                parts.push("\n", path.call(function (consequentPath) { return printStatementSequence(consequentPath, options, print); }, "consequent").indent(options.tabWidth));
	            }
	            return lines_1.concat(parts);
	        case "DebuggerStatement":
	            return lines_1.fromString("debugger;");
	        // JSX extensions below.
	        case "JSXAttribute":
	            parts.push(path.call(print, "name"));
	            if (n.value)
	                parts.push("=", path.call(print, "value"));
	            return lines_1.concat(parts);
	        case "JSXIdentifier":
	            return lines_1.fromString(n.name, options);
	        case "JSXNamespacedName":
	            return lines_1.fromString(":").join([
	                path.call(print, "namespace"),
	                path.call(print, "name")
	            ]);
	        case "JSXMemberExpression":
	            return lines_1.fromString(".").join([
	                path.call(print, "object"),
	                path.call(print, "property")
	            ]);
	        case "JSXSpreadAttribute":
	            return lines_1.concat(["{...", path.call(print, "argument"), "}"]);
	        case "JSXSpreadChild":
	            return lines_1.concat(["{...", path.call(print, "expression"), "}"]);
	        case "JSXExpressionContainer":
	            return lines_1.concat(["{", path.call(print, "expression"), "}"]);
	        case "JSXElement":
	        case "JSXFragment":
	            var openingPropName = "opening" + (n.type === "JSXElement" ? "Element" : "Fragment");
	            var closingPropName = "closing" + (n.type === "JSXElement" ? "Element" : "Fragment");
	            var openingLines = path.call(print, openingPropName);
	            if (n[openingPropName].selfClosing) {
	                assert_1.default.ok(!n[closingPropName], "unexpected " + closingPropName + " element in self-closing " + n.type);
	                return openingLines;
	            }
	            var childLines = lines_1.concat(path.map(function (childPath) {
	                var child = childPath.getValue();
	                if (namedTypes.Literal.check(child) &&
	                    typeof child.value === "string") {
	                    if (/\S/.test(child.value)) {
	                        return child.value.replace(/^\s+|\s+$/g, "");
	                    }
	                    else if (/\n/.test(child.value)) {
	                        return "\n";
	                    }
	                }
	                return print(childPath);
	            }, "children")).indentTail(options.tabWidth);
	            var closingLines = path.call(print, closingPropName);
	            return lines_1.concat([
	                openingLines,
	                childLines,
	                closingLines
	            ]);
	        case "JSXOpeningElement":
	            parts.push("<", path.call(print, "name"));
	            var attrParts = [];
	            path.each(function (attrPath) {
	                attrParts.push(" ", print(attrPath));
	            }, "attributes");
	            var attrLines = lines_1.concat(attrParts);
	            var needLineWrap = (attrLines.length > 1 ||
	                attrLines.getLineLength(1) > options.wrapColumn);
	            if (needLineWrap) {
	                attrParts.forEach(function (part, i) {
	                    if (part === " ") {
	                        assert_1.default.strictEqual(i % 2, 0);
	                        attrParts[i] = "\n";
	                    }
	                });
	                attrLines = lines_1.concat(attrParts).indentTail(options.tabWidth);
	            }
	            parts.push(attrLines, n.selfClosing ? " />" : ">");
	            return lines_1.concat(parts);
	        case "JSXClosingElement":
	            return lines_1.concat(["</", path.call(print, "name"), ">"]);
	        case "JSXOpeningFragment":
	            return lines_1.fromString("<>");
	        case "JSXClosingFragment":
	            return lines_1.fromString("</>");
	        case "JSXText":
	            return lines_1.fromString(n.value, options);
	        case "JSXEmptyExpression":
	            return lines_1.fromString("");
	        case "TypeAnnotatedIdentifier":
	            return lines_1.concat([
	                path.call(print, "annotation"),
	                " ",
	                path.call(print, "identifier")
	            ]);
	        case "ClassBody":
	            if (n.body.length === 0) {
	                return lines_1.fromString("{}");
	            }
	            return lines_1.concat([
	                "{\n",
	                path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body").indent(options.tabWidth),
	                "\n}"
	            ]);
	        case "ClassPropertyDefinition":
	            parts.push("static ", path.call(print, "definition"));
	            if (!namedTypes.MethodDefinition.check(n.definition))
	                parts.push(";");
	            return lines_1.concat(parts);
	        case "ClassProperty":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            var access = n.accessibility || n.access;
	            if (typeof access === "string") {
	                parts.push(access, " ");
	            }
	            if (n.static) {
	                parts.push("static ");
	            }
	            if (n.abstract) {
	                parts.push("abstract ");
	            }
	            if (n.readonly) {
	                parts.push("readonly ");
	            }
	            var key = path.call(print, "key");
	            if (n.computed) {
	                key = lines_1.concat(["[", key, "]"]);
	            }
	            if (n.variance) {
	                key = lines_1.concat([printVariance(path, print), key]);
	            }
	            parts.push(key);
	            if (n.optional) {
	                parts.push("?");
	            }
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            if (n.value) {
	                parts.push(" = ", path.call(print, "value"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "ClassPrivateProperty":
	            if (n.static) {
	                parts.push("static ");
	            }
	            parts.push(path.call(print, "key"));
	            if (n.typeAnnotation) {
	                parts.push(path.call(print, "typeAnnotation"));
	            }
	            if (n.value) {
	                parts.push(" = ", path.call(print, "value"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "ClassDeclaration":
	        case "ClassExpression":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            if (n.abstract) {
	                parts.push("abstract ");
	            }
	            parts.push("class");
	            if (n.id) {
	                parts.push(" ", path.call(print, "id"));
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            if (n.superClass) {
	                parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
	            }
	            if (n["implements"] && n['implements'].length > 0) {
	                parts.push(" implements ", lines_1.fromString(", ").join(path.map(print, "implements")));
	            }
	            parts.push(" ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "TemplateElement":
	            return lines_1.fromString(n.value.raw, options).lockIndentTail();
	        case "TemplateLiteral":
	            var expressions = path.map(print, "expressions");
	            parts.push("`");
	            path.each(function (childPath) {
	                var i = childPath.getName();
	                parts.push(print(childPath));
	                if (i < expressions.length) {
	                    parts.push("${", expressions[i], "}");
	                }
	            }, "quasis");
	            parts.push("`");
	            return lines_1.concat(parts).lockIndentTail();
	        case "TaggedTemplateExpression":
	            return lines_1.concat([
	                path.call(print, "tag"),
	                path.call(print, "quasi")
	            ]);
	        // These types are unprintable because they serve as abstract
	        // supertypes for other (printable) types.
	        case "Node":
	        case "Printable":
	        case "SourceLocation":
	        case "Position":
	        case "Statement":
	        case "Function":
	        case "Pattern":
	        case "Expression":
	        case "Declaration":
	        case "Specifier":
	        case "NamedSpecifier":
	        case "Comment": // Supertype of Block and Line
	        case "Flow": // Supertype of all Flow AST node types
	        case "FlowType": // Supertype of all Flow types
	        case "FlowPredicate": // Supertype of InferredPredicate and DeclaredPredicate
	        case "MemberTypeAnnotation": // Flow
	        case "Type": // Flow
	        case "TSHasOptionalTypeParameterInstantiation":
	        case "TSHasOptionalTypeParameters":
	        case "TSHasOptionalTypeAnnotation":
	            throw new Error("unprintable type: " + JSON.stringify(n.type));
	        case "CommentBlock": // Babel block comment.
	        case "Block": // Esprima block comment.
	            return lines_1.concat(["/*", lines_1.fromString(n.value, options), "*/"]);
	        case "CommentLine": // Babel line comment.
	        case "Line": // Esprima line comment.
	            return lines_1.concat(["//", lines_1.fromString(n.value, options)]);
	        // Type Annotations for Facebook Flow, typically stripped out or
	        // transformed away before printing.
	        case "TypeAnnotation":
	            if (n.typeAnnotation) {
	                if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
	                    parts.push(": ");
	                }
	                parts.push(path.call(print, "typeAnnotation"));
	                return lines_1.concat(parts);
	            }
	            return lines_1.fromString("");
	        case "ExistentialTypeParam":
	        case "ExistsTypeAnnotation":
	            return lines_1.fromString("*", options);
	        case "EmptyTypeAnnotation":
	            return lines_1.fromString("empty", options);
	        case "AnyTypeAnnotation":
	            return lines_1.fromString("any", options);
	        case "MixedTypeAnnotation":
	            return lines_1.fromString("mixed", options);
	        case "ArrayTypeAnnotation":
	            return lines_1.concat([
	                path.call(print, "elementType"),
	                "[]"
	            ]);
	        case "TupleTypeAnnotation":
	            var printed = path.map(print, "types");
	            var joined = lines_1.fromString(", ").join(printed);
	            var oneLine = joined.getLineLength(1) <= options.wrapColumn;
	            if (oneLine) {
	                if (options.arrayBracketSpacing) {
	                    parts.push("[ ");
	                }
	                else {
	                    parts.push("[");
	                }
	            }
	            else {
	                parts.push("[\n");
	            }
	            path.each(function (elemPath) {
	                var i = elemPath.getName();
	                var elem = elemPath.getValue();
	                if (!elem) {
	                    // If the array expression ends with a hole, that hole
	                    // will be ignored by the interpreter, but if it ends with
	                    // two (or more) holes, we need to write out two (or more)
	                    // commas so that the resulting code is interpreted with
	                    // both (all) of the holes.
	                    parts.push(",");
	                }
	                else {
	                    var lines_4 = printed[i];
	                    if (oneLine) {
	                        if (i > 0)
	                            parts.push(" ");
	                    }
	                    else {
	                        lines_4 = lines_4.indent(options.tabWidth);
	                    }
	                    parts.push(lines_4);
	                    if (i < n.types.length - 1 || (!oneLine && util$9.isTrailingCommaEnabled(options, "arrays")))
	                        parts.push(",");
	                    if (!oneLine)
	                        parts.push("\n");
	                }
	            }, "types");
	            if (oneLine && options.arrayBracketSpacing) {
	                parts.push(" ]");
	            }
	            else {
	                parts.push("]");
	            }
	            return lines_1.concat(parts);
	        case "BooleanTypeAnnotation":
	            return lines_1.fromString("boolean", options);
	        case "BooleanLiteralTypeAnnotation":
	            assert_1.default.strictEqual(typeof n.value, "boolean");
	            return lines_1.fromString("" + n.value, options);
	        case "InterfaceTypeAnnotation":
	            parts.push("interface");
	            if (n.extends && n.extends.length > 0) {
	                parts.push(" extends ", lines_1.fromString(", ").join(path.map(print, "extends")));
	            }
	            parts.push(" ", path.call(print, "body"));
	            return lines_1.concat(parts);
	        case "DeclareClass":
	            return printFlowDeclaration(path, [
	                "class ",
	                path.call(print, "id"),
	                " ",
	                path.call(print, "body"),
	            ]);
	        case "DeclareFunction":
	            return printFlowDeclaration(path, [
	                "function ",
	                path.call(print, "id"),
	                ";"
	            ]);
	        case "DeclareModule":
	            return printFlowDeclaration(path, [
	                "module ",
	                path.call(print, "id"),
	                " ",
	                path.call(print, "body"),
	            ]);
	        case "DeclareModuleExports":
	            return printFlowDeclaration(path, [
	                "module.exports",
	                path.call(print, "typeAnnotation"),
	            ]);
	        case "DeclareVariable":
	            return printFlowDeclaration(path, [
	                "var ",
	                path.call(print, "id"),
	                ";"
	            ]);
	        case "DeclareExportDeclaration":
	        case "DeclareExportAllDeclaration":
	            return lines_1.concat([
	                "declare ",
	                printExportDeclaration(path, options, print)
	            ]);
	        case "InferredPredicate":
	            return lines_1.fromString("%checks", options);
	        case "DeclaredPredicate":
	            return lines_1.concat([
	                "%checks(",
	                path.call(print, "value"),
	                ")"
	            ]);
	        case "FunctionTypeAnnotation":
	            // FunctionTypeAnnotation is ambiguous:
	            // declare function(a: B): void; OR
	            // var A: (a: B) => void;
	            var parent = path.getParentNode(0);
	            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||
	                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||
	                namedTypes.DeclareFunction.check(path.getParentNode(2)));
	            var needsColon = isArrowFunctionTypeAnnotation &&
	                !namedTypes.FunctionTypeParam.check(parent) &&
	                !namedTypes.TypeAlias.check(parent);
	            if (needsColon) {
	                parts.push(": ");
	            }
	            var needsParens = n.params.length !== 1 || n.params[0].name;
	            parts.push(needsParens ? "(" : '', printFunctionParams(path, options, print), needsParens ? ")" : '');
	            // The returnType is not wrapped in a TypeAnnotation, so the colon
	            // needs to be added separately.
	            if (n.returnType) {
	                parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
	            }
	            return lines_1.concat(parts);
	        case "FunctionTypeParam":
	            var name = path.call(print, "name");
	            parts.push(name);
	            if (n.optional) {
	                parts.push('?');
	            }
	            if (name.infos[0].line) {
	                parts.push(': ');
	            }
	            parts.push(path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "GenericTypeAnnotation":
	            return lines_1.concat([
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            ]);
	        case "DeclareInterface":
	            parts.push("declare ");
	        // Fall through to InterfaceDeclaration...
	        case "InterfaceDeclaration":
	        case "TSInterfaceDeclaration":
	            if (n.declare) {
	                parts.push("declare ");
	            }
	            parts.push("interface ", path.call(print, "id"), path.call(print, "typeParameters"), " ");
	            if (n["extends"] && n["extends"].length > 0) {
	                parts.push("extends ", lines_1.fromString(", ").join(path.map(print, "extends")), " ");
	            }
	            if (n.body) {
	                parts.push(path.call(print, "body"));
	            }
	            return lines_1.concat(parts);
	        case "ClassImplements":
	        case "InterfaceExtends":
	            return lines_1.concat([
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            ]);
	        case "IntersectionTypeAnnotation":
	            return lines_1.fromString(" & ").join(path.map(print, "types"));
	        case "NullableTypeAnnotation":
	            return lines_1.concat([
	                "?",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "NullLiteralTypeAnnotation":
	            return lines_1.fromString("null", options);
	        case "ThisTypeAnnotation":
	            return lines_1.fromString("this", options);
	        case "NumberTypeAnnotation":
	            return lines_1.fromString("number", options);
	        case "ObjectTypeCallProperty":
	            return path.call(print, "value");
	        case "ObjectTypeIndexer":
	            return lines_1.concat([
	                printVariance(path, print),
	                "[",
	                path.call(print, "id"),
	                ": ",
	                path.call(print, "key"),
	                "]: ",
	                path.call(print, "value")
	            ]);
	        case "ObjectTypeProperty":
	            return lines_1.concat([
	                printVariance(path, print),
	                path.call(print, "key"),
	                n.optional ? "?" : "",
	                ": ",
	                path.call(print, "value")
	            ]);
	        case "ObjectTypeInternalSlot":
	            return lines_1.concat([
	                n.static ? "static " : "",
	                "[[",
	                path.call(print, "id"),
	                "]]",
	                n.optional ? "?" : "",
	                n.value.type !== "FunctionTypeAnnotation" ? ": " : "",
	                path.call(print, "value")
	            ]);
	        case "QualifiedTypeIdentifier":
	            return lines_1.concat([
	                path.call(print, "qualification"),
	                ".",
	                path.call(print, "id")
	            ]);
	        case "StringLiteralTypeAnnotation":
	            return lines_1.fromString(nodeStr(n.value, options), options);
	        case "NumberLiteralTypeAnnotation":
	        case "NumericLiteralTypeAnnotation":
	            assert_1.default.strictEqual(typeof n.value, "number");
	            return lines_1.fromString(JSON.stringify(n.value), options);
	        case "StringTypeAnnotation":
	            return lines_1.fromString("string", options);
	        case "DeclareTypeAlias":
	            parts.push("declare ");
	        // Fall through to TypeAlias...
	        case "TypeAlias":
	            return lines_1.concat([
	                "type ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	                " = ",
	                path.call(print, "right"),
	                ";"
	            ]);
	        case "DeclareOpaqueType":
	            parts.push("declare ");
	        // Fall through to OpaqueType...
	        case "OpaqueType":
	            parts.push("opaque type ", path.call(print, "id"), path.call(print, "typeParameters"));
	            if (n["supertype"]) {
	                parts.push(": ", path.call(print, "supertype"));
	            }
	            if (n["impltype"]) {
	                parts.push(" = ", path.call(print, "impltype"));
	            }
	            parts.push(";");
	            return lines_1.concat(parts);
	        case "TypeCastExpression":
	            return lines_1.concat([
	                "(",
	                path.call(print, "expression"),
	                path.call(print, "typeAnnotation"),
	                ")"
	            ]);
	        case "TypeParameterDeclaration":
	        case "TypeParameterInstantiation":
	            return lines_1.concat([
	                "<",
	                lines_1.fromString(", ").join(path.map(print, "params")),
	                ">"
	            ]);
	        case "Variance":
	            if (n.kind === "plus") {
	                return lines_1.fromString("+");
	            }
	            if (n.kind === "minus") {
	                return lines_1.fromString("-");
	            }
	            return lines_1.fromString("");
	        case "TypeParameter":
	            if (n.variance) {
	                parts.push(printVariance(path, print));
	            }
	            parts.push(path.call(print, 'name'));
	            if (n.bound) {
	                parts.push(path.call(print, 'bound'));
	            }
	            if (n['default']) {
	                parts.push('=', path.call(print, 'default'));
	            }
	            return lines_1.concat(parts);
	        case "TypeofTypeAnnotation":
	            return lines_1.concat([
	                lines_1.fromString("typeof ", options),
	                path.call(print, "argument")
	            ]);
	        case "UnionTypeAnnotation":
	            return lines_1.fromString(" | ").join(path.map(print, "types"));
	        case "VoidTypeAnnotation":
	            return lines_1.fromString("void", options);
	        case "NullTypeAnnotation":
	            return lines_1.fromString("null", options);
	        // Type Annotations for TypeScript (when using Babylon as parser)
	        case "TSType":
	            throw new Error("unprintable type: " + JSON.stringify(n.type));
	        case "TSNumberKeyword":
	            return lines_1.fromString("number", options);
	        case "TSBigIntKeyword":
	            return lines_1.fromString("bigint", options);
	        case "TSObjectKeyword":
	            return lines_1.fromString("object", options);
	        case "TSBooleanKeyword":
	            return lines_1.fromString("boolean", options);
	        case "TSStringKeyword":
	            return lines_1.fromString("string", options);
	        case "TSSymbolKeyword":
	            return lines_1.fromString("symbol", options);
	        case "TSAnyKeyword":
	            return lines_1.fromString("any", options);
	        case "TSVoidKeyword":
	            return lines_1.fromString("void", options);
	        case "TSThisType":
	            return lines_1.fromString("this", options);
	        case "TSNullKeyword":
	            return lines_1.fromString("null", options);
	        case "TSUndefinedKeyword":
	            return lines_1.fromString("undefined", options);
	        case "TSUnknownKeyword":
	            return lines_1.fromString("unknown", options);
	        case "TSNeverKeyword":
	            return lines_1.fromString("never", options);
	        case "TSArrayType":
	            return lines_1.concat([
	                path.call(print, "elementType"),
	                "[]"
	            ]);
	        case "TSLiteralType":
	            return path.call(print, "literal");
	        case "TSUnionType":
	            return lines_1.fromString(" | ").join(path.map(print, "types"));
	        case "TSIntersectionType":
	            return lines_1.fromString(" & ").join(path.map(print, "types"));
	        case "TSConditionalType":
	            parts.push(path.call(print, "checkType"), " extends ", path.call(print, "extendsType"), " ? ", path.call(print, "trueType"), " : ", path.call(print, "falseType"));
	            return lines_1.concat(parts);
	        case "TSInferType":
	            parts.push("infer ", path.call(print, "typeParameter"));
	            return lines_1.concat(parts);
	        case "TSParenthesizedType":
	            return lines_1.concat([
	                "(",
	                path.call(print, "typeAnnotation"),
	                ")"
	            ]);
	        case "TSFunctionType":
	            return lines_1.concat([
	                path.call(print, "typeParameters"),
	                "(",
	                printFunctionParams(path, options, print),
	                ")",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSConstructorType":
	            return lines_1.concat([
	                "new ",
	                path.call(print, 'typeParameters'),
	                "(",
	                printFunctionParams(path, options, print),
	                ")",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSMappedType": {
	            parts.push(n.readonly ? "readonly " : "", "[", path.call(print, "typeParameter"), "]", n.optional ? "?" : "");
	            if (n.typeAnnotation) {
	                parts.push(": ", path.call(print, "typeAnnotation"), ";");
	            }
	            return lines_1.concat([
	                "{\n",
	                lines_1.concat(parts).indent(options.tabWidth),
	                "\n}",
	            ]);
	        }
	        case "TSTupleType":
	            return lines_1.concat([
	                "[",
	                lines_1.fromString(", ").join(path.map(print, "elementTypes")),
	                "]"
	            ]);
	        case "TSRestType":
	            return lines_1.concat([
	                "...",
	                path.call(print, "typeAnnotation"),
	                "[]"
	            ]);
	        case "TSOptionalType":
	            return lines_1.concat([
	                path.call(print, "typeAnnotation"),
	                "?"
	            ]);
	        case "TSIndexedAccessType":
	            return lines_1.concat([
	                path.call(print, "objectType"),
	                "[",
	                path.call(print, "indexType"),
	                "]"
	            ]);
	        case "TSTypeOperator":
	            return lines_1.concat([
	                path.call(print, "operator"),
	                " ",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSTypeLiteral": {
	            var memberLines_1 = lines_1.fromString(",\n").join(path.map(print, "members"));
	            if (memberLines_1.isEmpty()) {
	                return lines_1.fromString("{}", options);
	            }
	            parts.push("{\n", memberLines_1.indent(options.tabWidth), "\n}");
	            return lines_1.concat(parts);
	        }
	        case "TSEnumMember":
	            parts.push(path.call(print, "id"));
	            if (n.initializer) {
	                parts.push(" = ", path.call(print, "initializer"));
	            }
	            return lines_1.concat(parts);
	        case "TSTypeQuery":
	            return lines_1.concat([
	                "typeof ",
	                path.call(print, "exprName"),
	            ]);
	        case "TSParameterProperty":
	            if (n.accessibility) {
	                parts.push(n.accessibility, " ");
	            }
	            if (n.export) {
	                parts.push("export ");
	            }
	            if (n.static) {
	                parts.push("static ");
	            }
	            if (n.readonly) {
	                parts.push("readonly ");
	            }
	            parts.push(path.call(print, "parameter"));
	            return lines_1.concat(parts);
	        case "TSTypeReference":
	            return lines_1.concat([
	                path.call(print, "typeName"),
	                path.call(print, "typeParameters")
	            ]);
	        case "TSQualifiedName":
	            return lines_1.concat([
	                path.call(print, "left"),
	                ".",
	                path.call(print, "right")
	            ]);
	        case "TSAsExpression": {
	            var withParens = n.extra && n.extra.parenthesized === true;
	            if (withParens)
	                parts.push("(");
	            var expression = path.call(print, "expression");
	            var expressionType = path.getValue().expression.type;
	            var needParens = expressionType === "ArrowFunctionExpression" || expressionType === "FunctionExpression";
	            parts.push(needParens ? '(' + expression + ')' : expression, lines_1.fromString(" as "), path.call(print, "typeAnnotation"));
	            if (withParens)
	                parts.push(")");
	            return lines_1.concat(parts);
	        }
	        case "TSNonNullExpression":
	            return lines_1.concat([
	                path.call(print, "expression"),
	                "!"
	            ]);
	        case "TSTypeAnnotation": {
	            // similar to flow's FunctionTypeAnnotation, this can be
	            // ambiguous: it can be prefixed by => or :
	            // in a type predicate, it takes the for u is U
	            var parent = path.getParentNode(0);
	            var prefix = ": ";
	            if (namedTypes.TSFunctionType.check(parent) || namedTypes.TSConstructorType.check(parent)) {
	                prefix = " => ";
	            }
	            if (namedTypes.TSTypePredicate.check(parent)) {
	                prefix = " is ";
	            }
	            return lines_1.concat([
	                prefix,
	                path.call(print, "typeAnnotation")
	            ]);
	        }
	        case "TSIndexSignature":
	            return lines_1.concat([
	                n.readonly ? "readonly " : "",
	                "[",
	                path.map(print, "parameters"),
	                "]",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSPropertySignature":
	            parts.push(printVariance(path, print), n.readonly ? "readonly " : "");
	            if (n.computed) {
	                parts.push("[", path.call(print, "key"), "]");
	            }
	            else {
	                parts.push(path.call(print, "key"));
	            }
	            parts.push(n.optional ? "?" : "", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSMethodSignature":
	            if (n.computed) {
	                parts.push("[", path.call(print, "key"), "]");
	            }
	            else {
	                parts.push(path.call(print, "key"));
	            }
	            if (n.optional) {
	                parts.push("?");
	            }
	            parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSTypePredicate":
	            return lines_1.concat([
	                path.call(print, "parameterName"),
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSCallSignatureDeclaration":
	            return lines_1.concat([
	                path.call(print, "typeParameters"),
	                "(",
	                printFunctionParams(path, options, print),
	                ")",
	                path.call(print, "typeAnnotation")
	            ]);
	        case "TSConstructSignatureDeclaration":
	            if (n.typeParameters) {
	                parts.push("new", path.call(print, "typeParameters"));
	            }
	            else {
	                parts.push("new ");
	            }
	            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
	            return lines_1.concat(parts);
	        case "TSTypeAliasDeclaration":
	            return lines_1.concat([
	                n.declare ? "declare " : "",
	                "type ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters"),
	                " = ",
	                path.call(print, "typeAnnotation"),
	                ";"
	            ]);
	        case "TSTypeParameter":
	            parts.push(path.call(print, "name"));
	            // ambiguous because of TSMappedType
	            var parent = path.getParentNode(0);
	            var isInMappedType = namedTypes.TSMappedType.check(parent);
	            if (n.constraint) {
	                parts.push(isInMappedType ? " in " : " extends ", path.call(print, "constraint"));
	            }
	            if (n["default"]) {
	                parts.push(" = ", path.call(print, "default"));
	            }
	            return lines_1.concat(parts);
	        case "TSTypeAssertion":
	            var withParens = n.extra && n.extra.parenthesized === true;
	            if (withParens) {
	                parts.push("(");
	            }
	            parts.push("<", path.call(print, "typeAnnotation"), "> ", path.call(print, "expression"));
	            if (withParens) {
	                parts.push(")");
	            }
	            return lines_1.concat(parts);
	        case "TSTypeParameterDeclaration":
	        case "TSTypeParameterInstantiation":
	            return lines_1.concat([
	                "<",
	                lines_1.fromString(", ").join(path.map(print, "params")),
	                ">"
	            ]);
	        case "TSEnumDeclaration":
	            parts.push(n.declare ? "declare " : "", n.const ? "const " : "", "enum ", path.call(print, "id"));
	            var memberLines = lines_1.fromString(",\n").join(path.map(print, "members"));
	            if (memberLines.isEmpty()) {
	                parts.push(" {}");
	            }
	            else {
	                parts.push(" {\n", memberLines.indent(options.tabWidth), "\n}");
	            }
	            return lines_1.concat(parts);
	        case "TSExpressionWithTypeArguments":
	            return lines_1.concat([
	                path.call(print, "expression"),
	                path.call(print, "typeParameters")
	            ]);
	        case "TSInterfaceBody":
	            var lines = lines_1.fromString(";\n").join(path.map(print, "body"));
	            if (lines.isEmpty()) {
	                return lines_1.fromString("{}", options);
	            }
	            return lines_1.concat([
	                "{\n",
	                lines.indent(options.tabWidth), ";",
	                "\n}",
	            ]);
	        case "TSImportType":
	            parts.push("import(", path.call(print, "argument"), ")");
	            if (n.qualifier) {
	                parts.push(".", path.call(print, "qualifier"));
	            }
	            if (n.typeParameters) {
	                parts.push(path.call(print, "typeParameters"));
	            }
	            return lines_1.concat(parts);
	        case "TSImportEqualsDeclaration":
	            if (n.isExport) {
	                parts.push("export ");
	            }
	            parts.push("import ", path.call(print, "id"), " = ", path.call(print, "moduleReference"));
	            return maybeAddSemicolon(lines_1.concat(parts));
	        case "TSExternalModuleReference":
	            return lines_1.concat(["require(", path.call(print, "expression"), ")"]);
	        case "TSModuleDeclaration": {
	            var parent_1 = path.getParentNode();
	            if (parent_1.type === "TSModuleDeclaration") {
	                parts.push(".");
	            }
	            else {
	                if (n.declare) {
	                    parts.push("declare ");
	                }
	                if (!n.global) {
	                    var isExternal = n.id.type === "StringLiteral" ||
	                        (n.id.type === "Literal" &&
	                            typeof n.id.value === "string");
	                    if (isExternal) {
	                        parts.push("module ");
	                    }
	                    else if (n.loc &&
	                        n.loc.lines &&
	                        n.id.loc) {
	                        var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);
	                        // These keywords are fundamentally ambiguous in the
	                        // Babylon parser, and not reflected in the AST, so
	                        // the best we can do is to match the original code,
	                        // when possible.
	                        if (prefix.indexOf("module") >= 0) {
	                            parts.push("module ");
	                        }
	                        else {
	                            parts.push("namespace ");
	                        }
	                    }
	                    else {
	                        parts.push("namespace ");
	                    }
	                }
	            }
	            parts.push(path.call(print, "id"));
	            if (n.body && n.body.type === "TSModuleDeclaration") {
	                parts.push(path.call(print, "body"));
	            }
	            else if (n.body) {
	                var bodyLines = path.call(print, "body");
	                if (bodyLines.isEmpty()) {
	                    parts.push(" {}");
	                }
	                else {
	                    parts.push(" {\n", bodyLines.indent(options.tabWidth), "\n}");
	                }
	            }
	            return lines_1.concat(parts);
	        }
	        case "TSModuleBlock":
	            return path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
	        // Unhandled types below. If encountered, nodes of these types should
	        // be either left alone or desugared into AST types that are fully
	        // supported by the pretty-printer.
	        case "ClassHeritage": // TODO
	        case "ComprehensionBlock": // TODO
	        case "ComprehensionExpression": // TODO
	        case "Glob": // TODO
	        case "GeneratorExpression": // TODO
	        case "LetStatement": // TODO
	        case "LetExpression": // TODO
	        case "GraphExpression": // TODO
	        case "GraphIndexExpression": // TODO
	        // XML types that nobody cares about or needs to print.
	        case "XMLDefaultDeclaration":
	        case "XMLAnyName":
	        case "XMLQualifiedIdentifier":
	        case "XMLFunctionQualifiedIdentifier":
	        case "XMLAttributeSelector":
	        case "XMLFilterExpression":
	        case "XML":
	        case "XMLElement":
	        case "XMLList":
	        case "XMLEscape":
	        case "XMLText":
	        case "XMLStartTag":
	        case "XMLEndTag":
	        case "XMLPointTag":
	        case "XMLName":
	        case "XMLAttribute":
	        case "XMLCdata":
	        case "XMLComment":
	        case "XMLProcessingInstruction":
	        default:
	            debugger;
	            throw new Error("unknown type: " + JSON.stringify(n.type));
	    }
	}
	function printDecorators(path, printPath) {
	    var parts = [];
	    var node = path.getValue();
	    if (node.decorators &&
	        node.decorators.length > 0 &&
	        // If the parent node is an export declaration, it will be
	        // responsible for printing node.decorators.
	        !util$9.getParentExportDeclaration(path)) {
	        path.each(function (decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "decorators");
	    }
	    else if (util$9.isExportDeclaration(node) &&
	        node.declaration &&
	        node.declaration.decorators) {
	        // Export declarations are responsible for printing any decorators
	        // that logically apply to node.declaration.
	        path.each(function (decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "declaration", "decorators");
	    }
	    return lines_1.concat(parts);
	}
	function printStatementSequence(path, options, print) {
	    var filtered = [];
	    var sawComment = false;
	    var sawStatement = false;
	    path.each(function (stmtPath) {
	        var stmt = stmtPath.getValue();
	        // Just in case the AST has been modified to contain falsy
	        // "statements," it's safer simply to skip them.
	        if (!stmt) {
	            return;
	        }
	        // Skip printing EmptyStatement nodes to avoid leaving stray
	        // semicolons lying around.
	        if (stmt.type === "EmptyStatement" &&
	            !(stmt.comments && stmt.comments.length > 0)) {
	            return;
	        }
	        if (namedTypes.Comment.check(stmt)) {
	            // The pretty printer allows a dangling Comment node to act as
	            // a Statement when the Comment can't be attached to any other
	            // non-Comment node in the tree.
	            sawComment = true;
	        }
	        else if (namedTypes.Statement.check(stmt)) {
	            sawStatement = true;
	        }
	        else {
	            // When the pretty printer encounters a string instead of an
	            // AST node, it just prints the string. This behavior can be
	            // useful for fine-grained formatting decisions like inserting
	            // blank lines.
	            isString$2.assert(stmt);
	        }
	        // We can't hang onto stmtPath outside of this function, because
	        // it's just a reference to a mutable FastPath object, so we have
	        // to go ahead and print it here.
	        filtered.push({
	            node: stmt,
	            printed: print(stmtPath)
	        });
	    });
	    if (sawComment) {
	        assert_1.default.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " +
	            "lists, but may not coexist with non-Comment nodes.");
	    }
	    var prevTrailingSpace = null;
	    var len = filtered.length;
	    var parts = [];
	    filtered.forEach(function (info, i) {
	        var printed = info.printed;
	        var stmt = info.node;
	        var multiLine = printed.length > 1;
	        var notFirst = i > 0;
	        var notLast = i < len - 1;
	        var leadingSpace;
	        var trailingSpace;
	        var lines = stmt && stmt.loc && stmt.loc.lines;
	        var trueLoc = lines && options.reuseWhitespace &&
	            util$9.getTrueLoc(stmt, lines);
	        if (notFirst) {
	            if (trueLoc) {
	                var beforeStart = lines.skipSpaces(trueLoc.start, true);
	                var beforeStartLine = beforeStart ? beforeStart.line : 1;
	                var leadingGap = trueLoc.start.line - beforeStartLine;
	                leadingSpace = Array(leadingGap + 1).join("\n");
	            }
	            else {
	                leadingSpace = multiLine ? "\n\n" : "\n";
	            }
	        }
	        else {
	            leadingSpace = "";
	        }
	        if (notLast) {
	            if (trueLoc) {
	                var afterEnd = lines.skipSpaces(trueLoc.end);
	                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
	                var trailingGap = afterEndLine - trueLoc.end.line;
	                trailingSpace = Array(trailingGap + 1).join("\n");
	            }
	            else {
	                trailingSpace = multiLine ? "\n\n" : "\n";
	            }
	        }
	        else {
	            trailingSpace = "";
	        }
	        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
	        if (notLast) {
	            prevTrailingSpace = trailingSpace;
	        }
	        else if (trailingSpace) {
	            parts.push(trailingSpace);
	        }
	    });
	    return lines_1.concat(parts);
	}
	function maxSpace(s1, s2) {
	    if (!s1 && !s2) {
	        return lines_1.fromString("");
	    }
	    if (!s1) {
	        return lines_1.fromString(s2);
	    }
	    if (!s2) {
	        return lines_1.fromString(s1);
	    }
	    var spaceLines1 = lines_1.fromString(s1);
	    var spaceLines2 = lines_1.fromString(s2);
	    if (spaceLines2.length > spaceLines1.length) {
	        return spaceLines2;
	    }
	    return spaceLines1;
	}
	function printMethod(path, options, print) {
	    var node = path.getNode();
	    var kind = node.kind;
	    var parts = [];
	    var nodeValue = node.value;
	    if (!namedTypes.FunctionExpression.check(nodeValue)) {
	        nodeValue = node;
	    }
	    var access = node.accessibility || node.access;
	    if (typeof access === "string") {
	        parts.push(access, " ");
	    }
	    if (node.static) {
	        parts.push("static ");
	    }
	    if (node.abstract) {
	        parts.push("abstract ");
	    }
	    if (node.readonly) {
	        parts.push("readonly ");
	    }
	    if (nodeValue.async) {
	        parts.push("async ");
	    }
	    if (nodeValue.generator) {
	        parts.push("*");
	    }
	    if (kind === "get" || kind === "set") {
	        parts.push(kind, " ");
	    }
	    var key = path.call(print, "key");
	    if (node.computed) {
	        key = lines_1.concat(["[", key, "]"]);
	    }
	    parts.push(key);
	    if (node.optional) {
	        parts.push("?");
	    }
	    if (node === nodeValue) {
	        parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
	        if (node.body) {
	            parts.push(" ", path.call(print, "body"));
	        }
	        else {
	            parts.push(";");
	        }
	    }
	    else {
	        parts.push(path.call(print, "value", "typeParameters"), "(", path.call(function (valuePath) { return printFunctionParams(valuePath, options, print); }, "value"), ")", path.call(print, "value", "returnType"));
	        if (nodeValue.body) {
	            parts.push(" ", path.call(print, "value", "body"));
	        }
	        else {
	            parts.push(";");
	        }
	    }
	    return lines_1.concat(parts);
	}
	function printArgumentsList(path, options, print) {
	    var printed = path.map(print, "arguments");
	    var trailingComma = util$9.isTrailingCommaEnabled(options, "parameters");
	    var joined = lines_1.fromString(", ").join(printed);
	    if (joined.getLineLength(1) > options.wrapColumn) {
	        joined = lines_1.fromString(",\n").join(printed);
	        return lines_1.concat([
	            "(\n",
	            joined.indent(options.tabWidth),
	            trailingComma ? ",\n)" : "\n)"
	        ]);
	    }
	    return lines_1.concat(["(", joined, ")"]);
	}
	function printFunctionParams(path, options, print) {
	    var fun = path.getValue();
	    if (fun.params) {
	        var params = fun.params;
	        var printed = path.map(print, "params");
	    }
	    else if (fun.parameters) {
	        params = fun.parameters;
	        printed = path.map(print, "parameters");
	    }
	    if (fun.defaults) {
	        path.each(function (defExprPath) {
	            var i = defExprPath.getName();
	            var p = printed[i];
	            if (p && defExprPath.getValue()) {
	                printed[i] = lines_1.concat([p, " = ", print(defExprPath)]);
	            }
	        }, "defaults");
	    }
	    if (fun.rest) {
	        printed.push(lines_1.concat(["...", path.call(print, "rest")]));
	    }
	    var joined = lines_1.fromString(", ").join(printed);
	    if (joined.length > 1 ||
	        joined.getLineLength(1) > options.wrapColumn) {
	        joined = lines_1.fromString(",\n").join(printed);
	        if (util$9.isTrailingCommaEnabled(options, "parameters") &&
	            !fun.rest &&
	            params[params.length - 1].type !== 'RestElement') {
	            joined = lines_1.concat([joined, ",\n"]);
	        }
	        else {
	            joined = lines_1.concat([joined, "\n"]);
	        }
	        return lines_1.concat(["\n", joined.indent(options.tabWidth)]);
	    }
	    return joined;
	}
	function printExportDeclaration(path, options, print) {
	    var decl = path.getValue();
	    var parts = ["export "];
	    if (decl.exportKind && decl.exportKind !== "value") {
	        parts.push(decl.exportKind + " ");
	    }
	    var shouldPrintSpaces = options.objectCurlySpacing;
	    namedTypes.Declaration.assert(decl);
	    if (decl["default"] ||
	        decl.type === "ExportDefaultDeclaration") {
	        parts.push("default ");
	    }
	    if (decl.declaration) {
	        parts.push(path.call(print, "declaration"));
	    }
	    else if (decl.specifiers) {
	        if (decl.specifiers.length === 1 &&
	            decl.specifiers[0].type === "ExportBatchSpecifier") {
	            parts.push("*");
	        }
	        else if (decl.specifiers.length === 0) {
	            parts.push("{}");
	        }
	        else if (decl.specifiers[0].type === 'ExportDefaultSpecifier') {
	            var unbracedSpecifiers_2 = [];
	            var bracedSpecifiers_2 = [];
	            path.each(function (specifierPath) {
	                var spec = specifierPath.getValue();
	                if (spec.type === "ExportDefaultSpecifier") {
	                    unbracedSpecifiers_2.push(print(specifierPath));
	                }
	                else {
	                    bracedSpecifiers_2.push(print(specifierPath));
	                }
	            }, "specifiers");
	            unbracedSpecifiers_2.forEach(function (lines, i) {
	                if (i > 0) {
	                    parts.push(", ");
	                }
	                parts.push(lines);
	            });
	            if (bracedSpecifiers_2.length > 0) {
	                var lines_5 = lines_1.fromString(", ").join(bracedSpecifiers_2);
	                if (lines_5.getLineLength(1) > options.wrapColumn) {
	                    lines_5 = lines_1.concat([
	                        lines_1.fromString(",\n").join(bracedSpecifiers_2).indent(options.tabWidth),
	                        ","
	                    ]);
	                }
	                if (unbracedSpecifiers_2.length > 0) {
	                    parts.push(", ");
	                }
	                if (lines_5.length > 1) {
	                    parts.push("{\n", lines_5, "\n}");
	                }
	                else if (options.objectCurlySpacing) {
	                    parts.push("{ ", lines_5, " }");
	                }
	                else {
	                    parts.push("{", lines_5, "}");
	                }
	            }
	        }
	        else {
	            parts.push(shouldPrintSpaces ? "{ " : "{", lines_1.fromString(", ").join(path.map(print, "specifiers")), shouldPrintSpaces ? " }" : "}");
	        }
	        if (decl.source) {
	            parts.push(" from ", path.call(print, "source"));
	        }
	    }
	    var lines = lines_1.concat(parts);
	    if (lastNonSpaceCharacter(lines) !== ";" &&
	        !(decl.declaration &&
	            (decl.declaration.type === "FunctionDeclaration" ||
	                decl.declaration.type === "ClassDeclaration" ||
	                decl.declaration.type === "TSModuleDeclaration" ||
	                decl.declaration.type === "TSInterfaceDeclaration" ||
	                decl.declaration.type === "TSEnumDeclaration"))) {
	        lines = lines_1.concat([lines, ";"]);
	    }
	    return lines;
	}
	function printFlowDeclaration(path, parts) {
	    var parentExportDecl = util$9.getParentExportDeclaration(path);
	    if (parentExportDecl) {
	        assert_1.default.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
	    }
	    else {
	        // If the parent node has type DeclareExportDeclaration, then it
	        // will be responsible for printing the "declare" token. Otherwise
	        // it needs to be printed with this non-exported declaration node.
	        parts.unshift("declare ");
	    }
	    return lines_1.concat(parts);
	}
	function printVariance(path, print) {
	    return path.call(function (variancePath) {
	        var value = variancePath.getValue();
	        if (value) {
	            if (value === "plus") {
	                return lines_1.fromString("+");
	            }
	            if (value === "minus") {
	                return lines_1.fromString("-");
	            }
	            return print(variancePath);
	        }
	        return lines_1.fromString("");
	    }, "variance");
	}
	function adjustClause(clause, options) {
	    if (clause.length > 1)
	        return lines_1.concat([" ", clause]);
	    return lines_1.concat([
	        "\n",
	        maybeAddSemicolon(clause).indent(options.tabWidth)
	    ]);
	}
	function lastNonSpaceCharacter(lines) {
	    var pos = lines.lastPos();
	    do {
	        var ch = lines.charAt(pos);
	        if (/\S/.test(ch))
	            return ch;
	    } while (lines.prevPos(pos));
	}
	function endsWithBrace(lines) {
	    return lastNonSpaceCharacter(lines) === "}";
	}
	function swapQuotes(str) {
	    return str.replace(/['"]/g, function (m) { return m === '"' ? '\'' : '"'; });
	}
	function nodeStr(str, options) {
	    isString$2.assert(str);
	    switch (options.quote) {
	        case "auto":
	            var double = JSON.stringify(str);
	            var single = swapQuotes(JSON.stringify(swapQuotes(str)));
	            return double.length > single.length ? single : double;
	        case "single":
	            return swapQuotes(JSON.stringify(swapQuotes(str)));
	        case "double":
	        default:
	            return JSON.stringify(str);
	    }
	}
	function maybeAddSemicolon(lines) {
	    var eoc = lastNonSpaceCharacter(lines);
	    if (!eoc || "\n};".indexOf(eoc) < 0)
	        return lines_1.concat([lines, ";"]);
	    return lines;
	}

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(main$3, "__esModule", { value: true });
	var fs_1 = __importDefault(require$$0$5);
	var types$3 = __importStar(main$2);
	main$3.types = types$3;
	var parser_1 = parser$4;
	main$3.parse = parser_1.parse;
	var printer_1 = printer;
	/**
	 * Traverse and potentially modify an abstract syntax tree using a
	 * convenient visitor syntax:
	 *
	 *   recast.visit(ast, {
	 *     names: [],
	 *     visitIdentifier: function(path) {
	 *       var node = path.value;
	 *       this.visitor.names.push(node.name);
	 *       this.traverse(path);
	 *     }
	 *   });
	 */
	var ast_types_1 = main$2;
	main$3.visit = ast_types_1.visit;
	/**
	 * Reprint a modified syntax tree using as much of the original source
	 * code as possible.
	 */
	function print(node, options) {
	    return new printer_1.Printer(options).print(node);
	}
	main$3.print = print;
	/**
	 * Print without attempting to reuse any original source code.
	 */
	function prettyPrint(node, options) {
	    return new printer_1.Printer(options).printGenerically(node);
	}
	main$3.prettyPrint = prettyPrint;
	/**
	 * Convenient command-line interface (see e.g. example/add-braces).
	 */
	function run(transformer, options) {
	    return runFile(process.argv[2], transformer, options);
	}
	main$3.run = run;
	function runFile(path, transformer, options) {
	    fs_1.default.readFile(path, "utf-8", function (err, code) {
	        if (err) {
	            console.error(err);
	            return;
	        }
	        runString(code, transformer, options);
	    });
	}
	function defaultWriteback(output) {
	    null.write(output);
	}
	function runString(code, transformer, options) {
	    var writeback = options && options.writeback || defaultWriteback;
	    transformer(parser_1.parse(code, options), function (node) {
	        writeback(print(node, options).code);
	    });
	}

	var lib$4 = {};

	Object.defineProperty(lib$4, '__esModule', { value: true });

	const beforeExpr = true;
	const startsExpr = true;
	const isLoop = true;
	const isAssign = true;
	const prefix = true;
	const postfix = true;
	class TokenType {
	  constructor(label, conf = {}) {
	    this.label = void 0;
	    this.keyword = void 0;
	    this.beforeExpr = void 0;
	    this.startsExpr = void 0;
	    this.rightAssociative = void 0;
	    this.isLoop = void 0;
	    this.isAssign = void 0;
	    this.prefix = void 0;
	    this.postfix = void 0;
	    this.binop = void 0;
	    this.updateContext = void 0;
	    this.label = label;
	    this.keyword = conf.keyword;
	    this.beforeExpr = !!conf.beforeExpr;
	    this.startsExpr = !!conf.startsExpr;
	    this.rightAssociative = !!conf.rightAssociative;
	    this.isLoop = !!conf.isLoop;
	    this.isAssign = !!conf.isAssign;
	    this.prefix = !!conf.prefix;
	    this.postfix = !!conf.postfix;
	    this.binop = conf.binop != null ? conf.binop : null;
	    this.updateContext = null;
	  }

	}
	const keywords$1 = new Map();

	function createKeyword(name, options = {}) {
	  options.keyword = name;
	  const token = new TokenType(name, options);
	  keywords$1.set(name, token);
	  return token;
	}

	function createBinop(name, binop) {
	  return new TokenType(name, {
	    beforeExpr,
	    binop
	  });
	}

	const types$1$1 = {
	  num: new TokenType("num", {
	    startsExpr
	  }),
	  bigint: new TokenType("bigint", {
	    startsExpr
	  }),
	  decimal: new TokenType("decimal", {
	    startsExpr
	  }),
	  regexp: new TokenType("regexp", {
	    startsExpr
	  }),
	  string: new TokenType("string", {
	    startsExpr
	  }),
	  name: new TokenType("name", {
	    startsExpr
	  }),
	  privateName: new TokenType("#name", {
	    startsExpr
	  }),
	  eof: new TokenType("eof"),
	  bracketL: new TokenType("[", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketHashL: new TokenType("#[", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketBarL: new TokenType("[|", {
	    beforeExpr,
	    startsExpr
	  }),
	  bracketR: new TokenType("]"),
	  bracketBarR: new TokenType("|]"),
	  braceL: new TokenType("{", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceBarL: new TokenType("{|", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceHashL: new TokenType("#{", {
	    beforeExpr,
	    startsExpr
	  }),
	  braceR: new TokenType("}", {
	    beforeExpr
	  }),
	  braceBarR: new TokenType("|}"),
	  parenL: new TokenType("(", {
	    beforeExpr,
	    startsExpr
	  }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", {
	    beforeExpr
	  }),
	  semi: new TokenType(";", {
	    beforeExpr
	  }),
	  colon: new TokenType(":", {
	    beforeExpr
	  }),
	  doubleColon: new TokenType("::", {
	    beforeExpr
	  }),
	  dot: new TokenType("."),
	  question: new TokenType("?", {
	    beforeExpr
	  }),
	  questionDot: new TokenType("?."),
	  arrow: new TokenType("=>", {
	    beforeExpr
	  }),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", {
	    beforeExpr
	  }),
	  backQuote: new TokenType("`", {
	    startsExpr
	  }),
	  dollarBraceL: new TokenType("${", {
	    beforeExpr,
	    startsExpr
	  }),
	  at: new TokenType("@"),
	  hash: new TokenType("#", {
	    startsExpr
	  }),
	  interpreterDirective: new TokenType("#!..."),
	  eq: new TokenType("=", {
	    beforeExpr,
	    isAssign
	  }),
	  assign: new TokenType("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  slashAssign: new TokenType("_=", {
	    beforeExpr,
	    isAssign
	  }),
	  incDec: new TokenType("++/--", {
	    prefix,
	    postfix,
	    startsExpr
	  }),
	  bang: new TokenType("!", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  tilde: new TokenType("~", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  pipeline: createBinop("|>", 0),
	  nullishCoalescing: createBinop("??", 1),
	  logicalOR: createBinop("||", 1),
	  logicalAND: createBinop("&&", 2),
	  bitwiseOR: createBinop("|", 3),
	  bitwiseXOR: createBinop("^", 4),
	  bitwiseAND: createBinop("&", 5),
	  equality: createBinop("==/!=/===/!==", 6),
	  relational: createBinop("</>/<=/>=", 7),
	  bitShift: createBinop("<</>>/>>>", 8),
	  plusMin: new TokenType("+/-", {
	    beforeExpr,
	    binop: 9,
	    prefix,
	    startsExpr
	  }),
	  modulo: new TokenType("%", {
	    beforeExpr,
	    binop: 10,
	    startsExpr
	  }),
	  star: new TokenType("*", {
	    binop: 10
	  }),
	  slash: createBinop("/", 10),
	  exponent: new TokenType("**", {
	    beforeExpr,
	    binop: 11,
	    rightAssociative: true
	  }),
	  _break: createKeyword("break"),
	  _case: createKeyword("case", {
	    beforeExpr
	  }),
	  _catch: createKeyword("catch"),
	  _continue: createKeyword("continue"),
	  _debugger: createKeyword("debugger"),
	  _default: createKeyword("default", {
	    beforeExpr
	  }),
	  _do: createKeyword("do", {
	    isLoop,
	    beforeExpr
	  }),
	  _else: createKeyword("else", {
	    beforeExpr
	  }),
	  _finally: createKeyword("finally"),
	  _for: createKeyword("for", {
	    isLoop
	  }),
	  _function: createKeyword("function", {
	    startsExpr
	  }),
	  _if: createKeyword("if"),
	  _return: createKeyword("return", {
	    beforeExpr
	  }),
	  _switch: createKeyword("switch"),
	  _throw: createKeyword("throw", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _try: createKeyword("try"),
	  _var: createKeyword("var"),
	  _const: createKeyword("const"),
	  _while: createKeyword("while", {
	    isLoop
	  }),
	  _with: createKeyword("with"),
	  _new: createKeyword("new", {
	    beforeExpr,
	    startsExpr
	  }),
	  _this: createKeyword("this", {
	    startsExpr
	  }),
	  _super: createKeyword("super", {
	    startsExpr
	  }),
	  _class: createKeyword("class", {
	    startsExpr
	  }),
	  _extends: createKeyword("extends", {
	    beforeExpr
	  }),
	  _export: createKeyword("export"),
	  _import: createKeyword("import", {
	    startsExpr
	  }),
	  _null: createKeyword("null", {
	    startsExpr
	  }),
	  _true: createKeyword("true", {
	    startsExpr
	  }),
	  _false: createKeyword("false", {
	    startsExpr
	  }),
	  _in: createKeyword("in", {
	    beforeExpr,
	    binop: 7
	  }),
	  _instanceof: createKeyword("instanceof", {
	    beforeExpr,
	    binop: 7
	  }),
	  _typeof: createKeyword("typeof", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _void: createKeyword("void", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  }),
	  _delete: createKeyword("delete", {
	    beforeExpr,
	    prefix,
	    startsExpr
	  })
	};

	const lineBreak = /\r\n?|[\n\u2028\u2029]/;
	const lineBreakG = new RegExp(lineBreak.source, "g");
	function isNewLine(code) {
	  switch (code) {
	    case 10:
	    case 13:
	    case 8232:
	    case 8233:
	      return true;

	    default:
	      return false;
	  }
	}
	const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
	function isWhitespace$9(code) {
	  switch (code) {
	    case 0x0009:
	    case 0x000b:
	    case 0x000c:
	    case 32:
	    case 160:
	    case 5760:
	    case 0x2000:
	    case 0x2001:
	    case 0x2002:
	    case 0x2003:
	    case 0x2004:
	    case 0x2005:
	    case 0x2006:
	    case 0x2007:
	    case 0x2008:
	    case 0x2009:
	    case 0x200a:
	    case 0x202f:
	    case 0x205f:
	    case 0x3000:
	    case 0xfeff:
	      return true;

	    default:
	      return false;
	  }
	}

	class Position {
	  constructor(line, col) {
	    this.line = void 0;
	    this.column = void 0;
	    this.line = line;
	    this.column = col;
	  }

	}
	class SourceLocation {
	  constructor(start, end) {
	    this.start = void 0;
	    this.end = void 0;
	    this.filename = void 0;
	    this.identifierName = void 0;
	    this.start = start;
	    this.end = end;
	  }

	}
	function getLineInfo(input, offset) {
	  let line = 1;
	  let lineStart = 0;
	  let match;
	  lineBreakG.lastIndex = 0;

	  while ((match = lineBreakG.exec(input)) && match.index < offset) {
	    line++;
	    lineStart = lineBreakG.lastIndex;
	  }

	  return new Position(line, offset - lineStart);
	}

	class BaseParser {
	  constructor() {
	    this.sawUnambiguousESM = false;
	    this.ambiguousScriptDifferentAst = false;
	  }

	  hasPlugin(name) {
	    return this.plugins.has(name);
	  }

	  getPluginOption(plugin, name) {
	    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];
	  }

	}

	function last$1(stack) {
	  return stack[stack.length - 1];
	}

	class CommentsParser extends BaseParser {
	  addComment(comment) {
	    if (this.filename) comment.loc.filename = this.filename;
	    this.state.trailingComments.push(comment);
	    this.state.leadingComments.push(comment);
	  }

	  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {
	    if (this.state.leadingComments.length === 0) {
	      return;
	    }

	    let lastElement = null;
	    let i = elements.length;

	    while (lastElement === null && i > 0) {
	      lastElement = elements[--i];
	    }

	    if (lastElement === null) {
	      return;
	    }

	    for (let j = 0; j < this.state.leadingComments.length; j++) {
	      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
	        this.state.leadingComments.splice(j, 1);
	        j--;
	      }
	    }

	    const newTrailingComments = [];

	    for (let i = 0; i < this.state.leadingComments.length; i++) {
	      const leadingComment = this.state.leadingComments[i];

	      if (leadingComment.end < node.end) {
	        newTrailingComments.push(leadingComment);

	        if (!takeAllComments) {
	          this.state.leadingComments.splice(i, 1);
	          i--;
	        }
	      } else {
	        if (node.trailingComments === undefined) {
	          node.trailingComments = [];
	        }

	        node.trailingComments.push(leadingComment);
	      }
	    }

	    if (takeAllComments) this.state.leadingComments = [];

	    if (newTrailingComments.length > 0) {
	      lastElement.trailingComments = newTrailingComments;
	    } else if (lastElement.trailingComments !== undefined) {
	      lastElement.trailingComments = [];
	    }
	  }

	  processComment(node) {
	    if (node.type === "Program" && node.body.length > 0) return;
	    const stack = this.state.commentStack;
	    let firstChild, lastChild, trailingComments, i, j;

	    if (this.state.trailingComments.length > 0) {
	      if (this.state.trailingComments[0].start >= node.end) {
	        trailingComments = this.state.trailingComments;
	        this.state.trailingComments = [];
	      } else {
	        this.state.trailingComments.length = 0;
	      }
	    } else if (stack.length > 0) {
	      const lastInStack = last$1(stack);

	      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	        trailingComments = lastInStack.trailingComments;
	        delete lastInStack.trailingComments;
	      }
	    }

	    if (stack.length > 0 && last$1(stack).start >= node.start) {
	      firstChild = stack.pop();
	    }

	    while (stack.length > 0 && last$1(stack).start >= node.start) {
	      lastChild = stack.pop();
	    }

	    if (!lastChild && firstChild) lastChild = firstChild;

	    if (firstChild) {
	      switch (node.type) {
	        case "ObjectExpression":
	          this.adjustCommentsAfterTrailingComma(node, node.properties);
	          break;

	        case "ObjectPattern":
	          this.adjustCommentsAfterTrailingComma(node, node.properties, true);
	          break;

	        case "CallExpression":
	          this.adjustCommentsAfterTrailingComma(node, node.arguments);
	          break;

	        case "ArrayExpression":
	          this.adjustCommentsAfterTrailingComma(node, node.elements);
	          break;

	        case "ArrayPattern":
	          this.adjustCommentsAfterTrailingComma(node, node.elements, true);
	          break;
	      }
	    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === "ImportSpecifier" && node.type !== "ImportSpecifier" || this.state.commentPreviousNode.type === "ExportSpecifier" && node.type !== "ExportSpecifier")) {
	      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);
	    }

	    if (lastChild) {
	      if (lastChild.leadingComments) {
	        if (lastChild !== node && lastChild.leadingComments.length > 0 && last$1(lastChild.leadingComments).end <= node.start) {
	          node.leadingComments = lastChild.leadingComments;
	          delete lastChild.leadingComments;
	        } else {
	          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	            if (lastChild.leadingComments[i].end <= node.start) {
	              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	              break;
	            }
	          }
	        }
	      }
	    } else if (this.state.leadingComments.length > 0) {
	      if (last$1(this.state.leadingComments).end <= node.start) {
	        if (this.state.commentPreviousNode) {
	          for (j = 0; j < this.state.leadingComments.length; j++) {
	            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
	              this.state.leadingComments.splice(j, 1);
	              j--;
	            }
	          }
	        }

	        if (this.state.leadingComments.length > 0) {
	          node.leadingComments = this.state.leadingComments;
	          this.state.leadingComments = [];
	        }
	      } else {
	        for (i = 0; i < this.state.leadingComments.length; i++) {
	          if (this.state.leadingComments[i].end > node.start) {
	            break;
	          }
	        }

	        const leadingComments = this.state.leadingComments.slice(0, i);

	        if (leadingComments.length) {
	          node.leadingComments = leadingComments;
	        }

	        trailingComments = this.state.leadingComments.slice(i);

	        if (trailingComments.length === 0) {
	          trailingComments = null;
	        }
	      }
	    }

	    this.state.commentPreviousNode = node;

	    if (trailingComments) {
	      if (trailingComments.length && trailingComments[0].start >= node.start && last$1(trailingComments).end <= node.end) {
	        node.innerComments = trailingComments;
	      } else {
	        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);

	        if (firstTrailingCommentIndex > 0) {
	          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);
	          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);
	        } else {
	          node.trailingComments = trailingComments;
	        }
	      }
	    }

	    stack.push(node);
	  }

	}

	const ErrorCodes = Object.freeze({
	  SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
	  SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
	});

	const ErrorMessages = makeErrorTemplates({
	  AccessorIsGenerator: "A %0ter cannot be a generator.",
	  ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
	  AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
	  AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
	  AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
	  AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
	  AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
	  AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
	  BadGetterArity: "A 'get' accesor must not have any formal parameters.",
	  BadSetterArity: "A 'set' accesor must have exactly one formal parameter.",
	  BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.",
	  ConstructorClassField: "Classes may not have a field named 'constructor'.",
	  ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
	  ConstructorIsAccessor: "Class constructor may not be an accessor.",
	  ConstructorIsAsync: "Constructor can't be an async function.",
	  ConstructorIsGenerator: "Constructor can't be a generator.",
	  DeclarationMissingInitializer: "'%0' require an initialization value.",
	  DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.",
	  DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
	  DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.",
	  DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
	  DecoratorStaticBlock: "Decorators can't be used with a static block.",
	  DeletePrivateField: "Deleting a private field is not allowed.",
	  DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
	  DuplicateConstructor: "Duplicate constructor in the same class.",
	  DuplicateDefaultExport: "Only one default export allowed per module.",
	  DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.",
	  DuplicateProto: "Redefinition of __proto__ property.",
	  DuplicateRegExpFlags: "Duplicate regular expression flag.",
	  ElementAfterRest: "Rest element must be last element.",
	  EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
	  ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?",
	  ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
	  ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.",
	  ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
	  ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
	  GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
	  IllegalBreakContinue: "Unsyntactic %0.",
	  IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
	  IllegalReturn: "'return' outside of function.",
	  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?',
	  ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
	  ImportCallArity: "`import()` requires exactly %0.",
	  ImportCallNotNewExpression: "Cannot use new with import(...).",
	  ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
	  InvalidBigIntLiteral: "Invalid BigIntLiteral.",
	  InvalidCodePoint: "Code point out of bounds.",
	  InvalidDecimal: "Invalid decimal.",
	  InvalidDigit: "Expected number in radix %0.",
	  InvalidEscapeSequence: "Bad character escape sequence.",
	  InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
	  InvalidEscapedReservedWord: "Escape sequence in keyword %0.",
	  InvalidIdentifier: "Invalid identifier %0.",
	  InvalidLhs: "Invalid left-hand side in %0.",
	  InvalidLhsBinding: "Binding invalid left-hand side in %0.",
	  InvalidNumber: "Invalid number.",
	  InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
	  InvalidOrUnexpectedToken: "Unexpected character '%0'.",
	  InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
	  InvalidPrivateFieldResolution: "Private name #%0 is not defined.",
	  InvalidPropertyBindingPattern: "Binding member expression.",
	  InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
	  InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
	  LabelRedeclaration: "Label '%0' is already declared.",
	  LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.",
	  LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
	  MalformedRegExpFlags: "Invalid regular expression flag.",
	  MissingClassName: "A class name is required.",
	  MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
	  MissingSemicolon: "Missing semicolon.",
	  MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
	  MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
	  ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
	  ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
	  ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.',
	  ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.",
	  ModuleExportUndefined: "Export '%0' is not defined.",
	  MultipleDefaultsInSwitch: "Multiple default clauses.",
	  NewlineAfterThrow: "Illegal newline after throw.",
	  NoCatchOrFinally: "Missing catch or finally clause.",
	  NumberIdentifier: "Identifier directly after number.",
	  NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
	  ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
	  OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
	  OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
	  OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
	  ParamDupe: "Argument name clash.",
	  PatternHasAccessor: "Object pattern can't contain getter or setter.",
	  PatternHasMethod: "Object pattern can't contain methods.",
	  PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
	  PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
	  PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
	  PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
	  PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
	  PrimaryTopicRequiresSmartPipeline: "Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.",
	  PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).",
	  PrivateNameRedeclaration: "Duplicate private name #%0.",
	  RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  RecordNoProto: "'__proto__' is not allowed in Record expressions.",
	  RestTrailingComma: "Unexpected trailing comma after rest element.",
	  SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
	  StaticPrototype: "Classes may not have static property named prototype.",
	  StrictDelete: "Deleting local variable in strict mode.",
	  StrictEvalArguments: "Assigning to '%0' in strict mode.",
	  StrictEvalArgumentsBinding: "Binding '%0' in strict mode.",
	  StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
	  StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
	  StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
	  StrictWith: "'with' in strict mode.",
	  SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
	  SuperPrivateField: "Private fields can't be accessed on super.",
	  TrailingDecorator: "Decorators must be attached to a class element.",
	  TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
	  TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
	  UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
	  UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
	  UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
	  UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
	  UnexpectedKeyword: "Unexpected keyword '%0'.",
	  UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
	  UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
	  UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
	  UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
	  UnexpectedPrivateField: "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).",
	  UnexpectedReservedWord: "Unexpected reserved word '%0'.",
	  UnexpectedSuper: "'super' is only allowed in object methods and classes.",
	  UnexpectedToken: "Unexpected token '%0'.",
	  UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
	  UnsupportedBind: "Binding should be performed on object property.",
	  UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
	  UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
	  UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
	  UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.",
	  UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
	  UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
	  UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
	  UnterminatedComment: "Unterminated comment.",
	  UnterminatedRegExp: "Unterminated regular expression.",
	  UnterminatedString: "Unterminated string constant.",
	  UnterminatedTemplate: "Unterminated template.",
	  VarRedeclaration: "Identifier '%0' has already been declared.",
	  YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
	  YieldInParameter: "Yield expression is not allowed in formal parameters.",
	  ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
	}, ErrorCodes.SyntaxError);
	const SourceTypeModuleErrorMessages = makeErrorTemplates({
	  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`,
	  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`
	}, ErrorCodes.SourceTypeModuleError);

	function makeErrorTemplates(messages, code) {
	  const templates = {};
	  Object.keys(messages).forEach(reasonCode => {
	    templates[reasonCode] = Object.freeze({
	      code,
	      reasonCode,
	      template: messages[reasonCode]
	    });
	  });
	  return Object.freeze(templates);
	}
	class ParserError extends CommentsParser {
	  getLocationForPosition(pos) {
	    let loc;
	    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);
	    return loc;
	  }

	  raise(pos, {
	    code,
	    reasonCode,
	    template
	  }, ...params) {
	    return this.raiseWithData(pos, {
	      code,
	      reasonCode
	    }, template, ...params);
	  }

	  raiseOverwrite(pos, {
	    code,
	    template
	  }, ...params) {
	    const loc = this.getLocationForPosition(pos);
	    const message = template.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;

	    if (this.options.errorRecovery) {
	      const errors = this.state.errors;

	      for (let i = errors.length - 1; i >= 0; i--) {
	        const error = errors[i];

	        if (error.pos === pos) {
	          return Object.assign(error, {
	            message
	          });
	        } else if (error.pos < pos) {
	          break;
	        }
	      }
	    }

	    return this._raise({
	      code,
	      loc,
	      pos
	    }, message);
	  }

	  raiseWithData(pos, data, errorTemplate, ...params) {
	    const loc = this.getLocationForPosition(pos);
	    const message = errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;
	    return this._raise(Object.assign({
	      loc,
	      pos
	    }, data), message);
	  }

	  _raise(errorContext, message) {
	    const err = new SyntaxError(message);
	    Object.assign(err, errorContext);

	    if (this.options.errorRecovery) {
	      if (!this.isLookahead) this.state.errors.push(err);
	      return err;
	    } else {
	      throw err;
	    }
	  }

	}

	var estree = (superClass => class extends superClass {
	  parseRegExpLiteral({
	    pattern,
	    flags
	  }) {
	    let regex = null;

	    try {
	      regex = new RegExp(pattern, flags);
	    } catch (e) {}

	    const node = this.estreeParseLiteral(regex);
	    node.regex = {
	      pattern,
	      flags
	    };
	    return node;
	  }

	  parseBigIntLiteral(value) {
	    let bigInt;

	    try {
	      bigInt = BigInt(value);
	    } catch (_unused) {
	      bigInt = null;
	    }

	    const node = this.estreeParseLiteral(bigInt);
	    node.bigint = String(node.value || value);
	    return node;
	  }

	  parseDecimalLiteral(value) {
	    const decimal = null;
	    const node = this.estreeParseLiteral(decimal);
	    node.decimal = String(node.value || value);
	    return node;
	  }

	  estreeParseLiteral(value) {
	    return this.parseLiteral(value, "Literal");
	  }

	  parseStringLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  parseNumericLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  parseNullLiteral() {
	    return this.estreeParseLiteral(null);
	  }

	  parseBooleanLiteral(value) {
	    return this.estreeParseLiteral(value);
	  }

	  directiveToStmt(directive) {
	    const directiveLiteral = directive.value;
	    const stmt = this.startNodeAt(directive.start, directive.loc.start);
	    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
	    expression.value = directiveLiteral.extra.expressionValue;
	    expression.raw = directiveLiteral.extra.raw;
	    stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.end, directiveLiteral.loc.end);
	    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
	    return this.finishNodeAt(stmt, "ExpressionStatement", directive.end, directive.loc.end);
	  }

	  initFunction(node, isAsync) {
	    super.initFunction(node, isAsync);
	    node.expression = false;
	  }

	  checkDeclaration(node) {
	    if (node != null && this.isObjectProperty(node)) {
	      this.checkDeclaration(node.value);
	    } else {
	      super.checkDeclaration(node);
	    }
	  }

	  getObjectOrClassMethodParams(method) {
	    return method.value.params;
	  }

	  isValidDirective(stmt) {
	    var _stmt$expression$extr;

	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
	  }

	  stmtToDirective(stmt) {
	    const directive = super.stmtToDirective(stmt);
	    const value = stmt.expression.value;
	    this.addExtra(directive.value, "expressionValue", value);
	    return directive;
	  }

	  parseBlockBody(node, ...args) {
	    super.parseBlockBody(node, ...args);
	    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
	    node.body = directiveStatements.concat(node.body);
	    delete node.directives;
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);

	    if (method.typeParameters) {
	      method.value.typeParameters = method.typeParameters;
	      delete method.typeParameters;
	    }

	    classBody.body.push(method);
	  }

	  parseMaybePrivateName(...args) {
	    const node = super.parseMaybePrivateName(...args);

	    if (node.type === "PrivateName" && this.getPluginOption("estree", "classFeatures")) {
	      return this.convertPrivateNameToPrivateIdentifier(node);
	    }

	    return node;
	  }

	  convertPrivateNameToPrivateIdentifier(node) {
	    const name = super.getPrivateNameSV(node);
	    node = node;
	    delete node.id;
	    node.name = name;
	    node.type = "PrivateIdentifier";
	    return node;
	  }

	  isPrivateName(node) {
	    if (!this.getPluginOption("estree", "classFeatures")) {
	      return super.isPrivateName(node);
	    }

	    return node.type === "PrivateIdentifier";
	  }

	  getPrivateNameSV(node) {
	    if (!this.getPluginOption("estree", "classFeatures")) {
	      return super.getPrivateNameSV(node);
	    }

	    return node.name;
	  }

	  parseLiteral(value, type) {
	    const node = super.parseLiteral(value, type);
	    node.raw = node.extra.raw;
	    delete node.extra;
	    return node;
	  }

	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    super.parseFunctionBody(node, allowExpression, isMethod);
	    node.expression = node.body.type !== "BlockStatement";
	  }

	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    let funcNode = this.startNode();
	    funcNode.kind = node.kind;
	    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
	    funcNode.type = "FunctionExpression";
	    delete funcNode.kind;
	    node.value = funcNode;

	    if (type === "ClassPrivateMethod") {
	      node.computed = false;
	    }

	    type = "MethodDefinition";
	    return this.finishNode(node, type);
	  }

	  parseClassProperty(...args) {
	    const propertyNode = super.parseClassProperty(...args);

	    if (this.getPluginOption("estree", "classFeatures")) {
	      propertyNode.type = "PropertyDefinition";
	    }

	    return propertyNode;
	  }

	  parseClassPrivateProperty(...args) {
	    const propertyNode = super.parseClassPrivateProperty(...args);

	    if (this.getPluginOption("estree", "classFeatures")) {
	      propertyNode.type = "PropertyDefinition";
	      propertyNode.computed = false;
	    }

	    return propertyNode;
	  }

	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);

	    if (node) {
	      node.type = "Property";
	      if (node.kind === "method") node.kind = "init";
	      node.shorthand = false;
	    }

	    return node;
	  }

	  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
	    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);

	    if (node) {
	      node.kind = "init";
	      node.type = "Property";
	    }

	    return node;
	  }

	  toAssignable(node, isLHS = false) {
	    if (node != null && this.isObjectProperty(node)) {
	      this.toAssignable(node.value, isLHS);
	      return node;
	    }

	    return super.toAssignable(node, isLHS);
	  }

	  toAssignableObjectExpressionProp(prop, ...args) {
	    if (prop.kind === "get" || prop.kind === "set") {
	      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);
	    } else if (prop.method) {
	      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);
	    } else {
	      super.toAssignableObjectExpressionProp(prop, ...args);
	    }
	  }

	  finishCallExpression(node, optional) {
	    super.finishCallExpression(node, optional);

	    if (node.callee.type === "Import") {
	      node.type = "ImportExpression";
	      node.source = node.arguments[0];

	      if (this.hasPlugin("importAssertions")) {
	        var _node$arguments$;

	        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
	      }

	      delete node.arguments;
	      delete node.callee;
	    }

	    return node;
	  }

	  toReferencedArguments(node) {
	    if (node.type === "ImportExpression") {
	      return;
	    }

	    super.toReferencedArguments(node);
	  }

	  parseExport(node) {
	    super.parseExport(node);

	    switch (node.type) {
	      case "ExportAllDeclaration":
	        node.exported = null;
	        break;

	      case "ExportNamedDeclaration":
	        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
	          node.type = "ExportAllDeclaration";
	          node.exported = node.specifiers[0].exported;
	          delete node.specifiers;
	        }

	        break;
	    }

	    return node;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);

	    if (state.optionalChainMember) {
	      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
	        node.type = node.type.substring(8);
	      }

	      if (state.stop) {
	        const chain = this.startNodeAtNode(node);
	        chain.expression = node;
	        return this.finishNode(chain, "ChainExpression");
	      }
	    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
	      node.optional = false;
	    }

	    return node;
	  }

	  hasPropertyAsPrivateName(node) {
	    if (node.type === "ChainExpression") {
	      node = node.expression;
	    }

	    return super.hasPropertyAsPrivateName(node);
	  }

	  isOptionalChain(node) {
	    return node.type === "ChainExpression";
	  }

	  isObjectProperty(node) {
	    return node.type === "Property" && node.kind === "init" && !node.method;
	  }

	  isObjectMethod(node) {
	    return node.method || node.kind === "get" || node.kind === "set";
	  }

	});

	class TokContext {
	  constructor(token, preserveSpace) {
	    this.token = void 0;
	    this.preserveSpace = void 0;
	    this.token = token;
	    this.preserveSpace = !!preserveSpace;
	  }

	}
	const types$2 = {
	  brace: new TokContext("{"),
	  template: new TokContext("`", true)
	};

	types$1$1.braceR.updateContext = context => {
	  context.pop();
	};

	types$1$1.braceL.updateContext = types$1$1.braceHashL.updateContext = types$1$1.dollarBraceL.updateContext = context => {
	  context.push(types$2.brace);
	};

	types$1$1.backQuote.updateContext = context => {
	  if (context[context.length - 1] === types$2.template) {
	    context.pop();
	  } else {
	    context.push(types$2.template);
	  }
	};

	let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
	const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

	function isInAstralSet(code, set) {
	  let pos = 0x10000;

	  for (let i = 0, length = set.length; i < length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }

	  return false;
	}

	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code <= 90) return true;
	  if (code < 97) return code === 95;
	  if (code <= 122) return true;

	  if (code <= 0xffff) {
	    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  }

	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}

	const reservedWords = {
	  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
	  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
	  strictBind: ["eval", "arguments"]
	};
	const keywords$2 = new Set(reservedWords.keyword);
	const reservedWordsStrictSet = new Set(reservedWords.strict);
	const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
	function isReservedWord(word, inModule) {
	  return inModule && word === "await" || word === "enum";
	}
	function isStrictReservedWord(word, inModule) {
	  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
	}
	function isStrictBindOnlyReservedWord(word) {
	  return reservedWordsStrictBindSet.has(word);
	}
	function isStrictBindReservedWord(word, inModule) {
	  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
	}
	function isKeyword(word) {
	  return keywords$2.has(word);
	}

	function isIteratorStart(current, next) {
	  return current === 64 && next === 64;
	}
	const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
	function canBeReservedWord(word) {
	  return reservedWordLikeSet.has(word);
	}

	const SCOPE_OTHER = 0b000000000,
	      SCOPE_PROGRAM = 0b000000001,
	      SCOPE_FUNCTION = 0b000000010,
	      SCOPE_ARROW = 0b000000100,
	      SCOPE_SIMPLE_CATCH = 0b000001000,
	      SCOPE_SUPER = 0b000010000,
	      SCOPE_DIRECT_SUPER = 0b000100000,
	      SCOPE_CLASS = 0b001000000,
	      SCOPE_STATIC_BLOCK = 0b010000000,
	      SCOPE_TS_MODULE = 0b100000000,
	      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
	const BIND_KIND_VALUE = 0b000000000001,
	      BIND_KIND_TYPE = 0b000000000010,
	      BIND_SCOPE_VAR = 0b000000000100,
	      BIND_SCOPE_LEXICAL = 0b000000001000,
	      BIND_SCOPE_FUNCTION = 0b000000010000,
	      BIND_FLAGS_NONE = 0b000001000000,
	      BIND_FLAGS_CLASS = 0b000010000000,
	      BIND_FLAGS_TS_ENUM = 0b000100000000,
	      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,
	      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,
	      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;
	const BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,
	      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,
	      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,
	      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,
	      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,
	      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,
	      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,
	      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
	      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,
	      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,
	      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
	      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
	      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
	const CLASS_ELEMENT_FLAG_STATIC = 0b100,
	      CLASS_ELEMENT_KIND_GETTER = 0b010,
	      CLASS_ELEMENT_KIND_SETTER = 0b001,
	      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
	const CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,
	      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,
	      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,
	      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,
	      CLASS_ELEMENT_OTHER = 0;

	class Scope {
	  constructor(flags) {
	    this.var = new Set();
	    this.lexical = new Set();
	    this.functions = new Set();
	    this.flags = flags;
	  }

	}
	class ScopeHandler {
	  constructor(raise, inModule) {
	    this.scopeStack = [];
	    this.undefinedExports = new Map();
	    this.undefinedPrivateNames = new Map();
	    this.raise = raise;
	    this.inModule = inModule;
	  }

	  get inFunction() {
	    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
	  }

	  get allowSuper() {
	    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
	  }

	  get allowDirectSuper() {
	    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
	  }

	  get inClass() {
	    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
	  }

	  get inClassAndNotInNonArrowFunction() {
	    const flags = this.currentThisScopeFlags();
	    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
	  }

	  get inStaticBlock() {
	    return (this.currentThisScopeFlags() & SCOPE_STATIC_BLOCK) > 0;
	  }

	  get inNonArrowFunction() {
	    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
	  }

	  get treatFunctionsAsVar() {
	    return this.treatFunctionsAsVarInScope(this.currentScope());
	  }

	  createScope(flags) {
	    return new Scope(flags);
	  }

	  enter(flags) {
	    this.scopeStack.push(this.createScope(flags));
	  }

	  exit() {
	    this.scopeStack.pop();
	  }

	  treatFunctionsAsVarInScope(scope) {
	    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);
	  }

	  declareName(name, bindingType, pos) {
	    let scope = this.currentScope();

	    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
	      this.checkRedeclarationInScope(scope, name, bindingType, pos);

	      if (bindingType & BIND_SCOPE_FUNCTION) {
	        scope.functions.add(name);
	      } else {
	        scope.lexical.add(name);
	      }

	      if (bindingType & BIND_SCOPE_LEXICAL) {
	        this.maybeExportDefined(scope, name);
	      }
	    } else if (bindingType & BIND_SCOPE_VAR) {
	      for (let i = this.scopeStack.length - 1; i >= 0; --i) {
	        scope = this.scopeStack[i];
	        this.checkRedeclarationInScope(scope, name, bindingType, pos);
	        scope.var.add(name);
	        this.maybeExportDefined(scope, name);
	        if (scope.flags & SCOPE_VAR) break;
	      }
	    }

	    if (this.inModule && scope.flags & SCOPE_PROGRAM) {
	      this.undefinedExports.delete(name);
	    }
	  }

	  maybeExportDefined(scope, name) {
	    if (this.inModule && scope.flags & SCOPE_PROGRAM) {
	      this.undefinedExports.delete(name);
	    }
	  }

	  checkRedeclarationInScope(scope, name, bindingType, pos) {
	    if (this.isRedeclaredInScope(scope, name, bindingType)) {
	      this.raise(pos, ErrorMessages.VarRedeclaration, name);
	    }
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (!(bindingType & BIND_KIND_VALUE)) return false;

	    if (bindingType & BIND_SCOPE_LEXICAL) {
	      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
	    }

	    if (bindingType & BIND_SCOPE_FUNCTION) {
	      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
	    }

	    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
	  }

	  checkLocalExport(id) {
	    const {
	      name
	    } = id;
	    const topLevelScope = this.scopeStack[0];

	    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
	      this.undefinedExports.set(name, id.start);
	    }
	  }

	  currentScope() {
	    return this.scopeStack[this.scopeStack.length - 1];
	  }

	  currentVarScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];

	      if (flags & SCOPE_VAR) {
	        return flags;
	      }
	    }
	  }

	  currentThisScopeFlags() {
	    for (let i = this.scopeStack.length - 1;; i--) {
	      const {
	        flags
	      } = this.scopeStack[i];

	      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
	        return flags;
	      }
	    }
	  }

	}

	class FlowScope extends Scope {
	  constructor(...args) {
	    super(...args);
	    this.declareFunctions = new Set();
	  }

	}

	class FlowScopeHandler extends ScopeHandler {
	  createScope(flags) {
	    return new FlowScope(flags);
	  }

	  declareName(name, bindingType, pos) {
	    const scope = this.currentScope();

	    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
	      this.checkRedeclarationInScope(scope, name, bindingType, pos);
	      this.maybeExportDefined(scope, name);
	      scope.declareFunctions.add(name);
	      return;
	    }

	    super.declareName(...arguments);
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (super.isRedeclaredInScope(...arguments)) return true;

	    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
	      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
	    }

	    return false;
	  }

	  checkLocalExport(id) {
	    if (!this.scopeStack[0].declareFunctions.has(id.name)) {
	      super.checkLocalExport(id);
	    }
	  }

	}

	const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
	const FlowErrors = makeErrorTemplates({
	  AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
	  AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
	  AssignReservedType: "Cannot overwrite reserved type %0.",
	  DeclareClassElement: "The `declare` modifier can only appear on class fields.",
	  DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
	  DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
	  EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.",
	  EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.",
	  EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.",
	  EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
	  EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.",
	  EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.",
	  EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.",
	  EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.",
	  EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.",
	  EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.",
	  EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.",
	  GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
	  ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
	  InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
	  InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
	  InexactVariance: "Explicit inexact syntax cannot have variance.",
	  InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
	  MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
	  NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
	  NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
	  OptionalBindingPattern: "A binding pattern parameter cannot be optional in an implementation signature.",
	  SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
	  SpreadVariance: "Spread properties cannot have variance.",
	  ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
	  ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
	  ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
	  ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
	  ThisParamNoDefault: "The `this` parameter may not have a default value.",
	  TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
	  UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
	  UnexpectedReservedType: "Unexpected reserved type %0.",
	  UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
	  UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
	  UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
	  UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
	  UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
	  UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
	  UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.",
	  UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
	  UnterminatedFlowComment: "Unterminated flow-comment."
	}, ErrorCodes.SyntaxError);

	function isEsModuleType(bodyElement) {
	  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
	}

	function hasTypeImportKind(node) {
	  return node.importKind === "type" || node.importKind === "typeof";
	}

	function isMaybeDefaultImport(state) {
	  return (state.type === types$1$1.name || !!state.type.keyword) && state.value !== "from";
	}

	const exportSuggestions = {
	  const: "declare export var",
	  let: "declare export var",
	  type: "export type",
	  interface: "export interface"
	};

	function partition(list, test) {
	  const list1 = [];
	  const list2 = [];

	  for (let i = 0; i < list.length; i++) {
	    (test(list[i], i, list) ? list1 : list2).push(list[i]);
	  }

	  return [list1, list2];
	}

	const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
	var flow$1 = (superClass => class extends superClass {
	  constructor(...args) {
	    super(...args);
	    this.flowPragma = undefined;
	  }

	  getScopeHandler() {
	    return FlowScopeHandler;
	  }

	  shouldParseTypes() {
	    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
	  }

	  shouldParseEnums() {
	    return !!this.getPluginOption("flow", "enums");
	  }

	  finishToken(type, val) {
	    if (type !== types$1$1.string && type !== types$1$1.semi && type !== types$1$1.interpreterDirective) {
	      if (this.flowPragma === undefined) {
	        this.flowPragma = null;
	      }
	    }

	    return super.finishToken(type, val);
	  }

	  addComment(comment) {
	    if (this.flowPragma === undefined) {
	      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);

	      if (!matches) ; else if (matches[1] === "flow") {
	        this.flowPragma = "flow";
	      } else if (matches[1] === "noflow") {
	        this.flowPragma = "noflow";
	      } else {
	        throw new Error("Unexpected flow pragma");
	      }
	    }

	    return super.addComment(comment);
	  }

	  flowParseTypeInitialiser(tok) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(tok || types$1$1.colon);
	    const type = this.flowParseType();
	    this.state.inType = oldInType;
	    return type;
	  }

	  flowParsePredicate() {
	    const node = this.startNode();
	    const moduloPos = this.state.start;
	    this.next();
	    this.expectContextual("checks");

	    if (this.state.lastTokStart > moduloPos + 1) {
	      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);
	    }

	    if (this.eat(types$1$1.parenL)) {
	      node.value = this.parseExpression();
	      this.expect(types$1$1.parenR);
	      return this.finishNode(node, "DeclaredPredicate");
	    } else {
	      return this.finishNode(node, "InferredPredicate");
	    }
	  }

	  flowParseTypeAndPredicateInitialiser() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    this.expect(types$1$1.colon);
	    let type = null;
	    let predicate = null;

	    if (this.match(types$1$1.modulo)) {
	      this.state.inType = oldInType;
	      predicate = this.flowParsePredicate();
	    } else {
	      type = this.flowParseType();
	      this.state.inType = oldInType;

	      if (this.match(types$1$1.modulo)) {
	        predicate = this.flowParsePredicate();
	      }
	    }

	    return [type, predicate];
	  }

	  flowParseDeclareClass(node) {
	    this.next();
	    this.flowParseInterfaceish(node, true);
	    return this.finishNode(node, "DeclareClass");
	  }

	  flowParseDeclareFunction(node) {
	    this.next();
	    const id = node.id = this.parseIdentifier();
	    const typeNode = this.startNode();
	    const typeContainer = this.startNode();

	    if (this.isRelational("<")) {
	      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      typeNode.typeParameters = null;
	    }

	    this.expect(types$1$1.parenL);
	    const tmp = this.flowParseFunctionTypeParams();
	    typeNode.params = tmp.params;
	    typeNode.rest = tmp.rest;
	    typeNode.this = tmp._this;
	    this.expect(types$1$1.parenR);
	    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	    this.resetEndLocation(id);
	    this.semicolon();
	    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);
	    return this.finishNode(node, "DeclareFunction");
	  }

	  flowParseDeclare(node, insideModule) {
	    if (this.match(types$1$1._class)) {
	      return this.flowParseDeclareClass(node);
	    } else if (this.match(types$1$1._function)) {
	      return this.flowParseDeclareFunction(node);
	    } else if (this.match(types$1$1._var)) {
	      return this.flowParseDeclareVariable(node);
	    } else if (this.eatContextual("module")) {
	      if (this.match(types$1$1.dot)) {
	        return this.flowParseDeclareModuleExports(node);
	      } else {
	        if (insideModule) {
	          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);
	        }

	        return this.flowParseDeclareModule(node);
	      }
	    } else if (this.isContextual("type")) {
	      return this.flowParseDeclareTypeAlias(node);
	    } else if (this.isContextual("opaque")) {
	      return this.flowParseDeclareOpaqueType(node);
	    } else if (this.isContextual("interface")) {
	      return this.flowParseDeclareInterface(node);
	    } else if (this.match(types$1$1._export)) {
	      return this.flowParseDeclareExportDeclaration(node, insideModule);
	    } else {
	      throw this.unexpected();
	    }
	  }

	  flowParseDeclareVariable(node) {
	    this.next();
	    node.id = this.flowParseTypeAnnotatableIdentifier(true);
	    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);
	    this.semicolon();
	    return this.finishNode(node, "DeclareVariable");
	  }

	  flowParseDeclareModule(node) {
	    this.scope.enter(SCOPE_OTHER);

	    if (this.match(types$1$1.string)) {
	      node.id = this.parseExprAtom();
	    } else {
	      node.id = this.parseIdentifier();
	    }

	    const bodyNode = node.body = this.startNode();
	    const body = bodyNode.body = [];
	    this.expect(types$1$1.braceL);

	    while (!this.match(types$1$1.braceR)) {
	      let bodyNode = this.startNode();

	      if (this.match(types$1$1._import)) {
	        this.next();

	        if (!this.isContextual("type") && !this.match(types$1$1._typeof)) {
	          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);
	        }

	        this.parseImport(bodyNode);
	      } else {
	        this.expectContextual("declare", FlowErrors.UnsupportedStatementInDeclareModule);
	        bodyNode = this.flowParseDeclare(bodyNode, true);
	      }

	      body.push(bodyNode);
	    }

	    this.scope.exit();
	    this.expect(types$1$1.braceR);
	    this.finishNode(bodyNode, "BlockStatement");
	    let kind = null;
	    let hasModuleExport = false;
	    body.forEach(bodyElement => {
	      if (isEsModuleType(bodyElement)) {
	        if (kind === "CommonJS") {
	          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
	        }

	        kind = "ES";
	      } else if (bodyElement.type === "DeclareModuleExports") {
	        if (hasModuleExport) {
	          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);
	        }

	        if (kind === "ES") {
	          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);
	        }

	        kind = "CommonJS";
	        hasModuleExport = true;
	      }
	    });
	    node.kind = kind || "CommonJS";
	    return this.finishNode(node, "DeclareModule");
	  }

	  flowParseDeclareExportDeclaration(node, insideModule) {
	    this.expect(types$1$1._export);

	    if (this.eat(types$1$1._default)) {
	      if (this.match(types$1$1._function) || this.match(types$1$1._class)) {
	        node.declaration = this.flowParseDeclare(this.startNode());
	      } else {
	        node.declaration = this.flowParseType();
	        this.semicolon();
	      }

	      node.default = true;
	      return this.finishNode(node, "DeclareExportDeclaration");
	    } else {
	      if (this.match(types$1$1._const) || this.isLet() || (this.isContextual("type") || this.isContextual("interface")) && !insideModule) {
	        const label = this.state.value;
	        const suggestion = exportSuggestions[label];
	        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);
	      }

	      if (this.match(types$1$1._var) || this.match(types$1$1._function) || this.match(types$1$1._class) || this.isContextual("opaque")) {
	          node.declaration = this.flowParseDeclare(this.startNode());
	          node.default = false;
	          return this.finishNode(node, "DeclareExportDeclaration");
	        } else if (this.match(types$1$1.star) || this.match(types$1$1.braceL) || this.isContextual("interface") || this.isContextual("type") || this.isContextual("opaque")) {
	          node = this.parseExport(node);

	          if (node.type === "ExportNamedDeclaration") {
	            node.type = "ExportDeclaration";
	            node.default = false;
	            delete node.exportKind;
	          }

	          node.type = "Declare" + node.type;
	          return node;
	        }
	    }

	    throw this.unexpected();
	  }

	  flowParseDeclareModuleExports(node) {
	    this.next();
	    this.expectContextual("exports");
	    node.typeAnnotation = this.flowParseTypeAnnotation();
	    this.semicolon();
	    return this.finishNode(node, "DeclareModuleExports");
	  }

	  flowParseDeclareTypeAlias(node) {
	    this.next();
	    this.flowParseTypeAlias(node);
	    node.type = "DeclareTypeAlias";
	    return node;
	  }

	  flowParseDeclareOpaqueType(node) {
	    this.next();
	    this.flowParseOpaqueType(node, true);
	    node.type = "DeclareOpaqueType";
	    return node;
	  }

	  flowParseDeclareInterface(node) {
	    this.next();
	    this.flowParseInterfaceish(node);
	    return this.finishNode(node, "DeclareInterface");
	  }

	  flowParseInterfaceish(node, isClass = false) {
	    node.id = this.flowParseRestrictedIdentifier(!isClass, true);
	    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.extends = [];
	    node.implements = [];
	    node.mixins = [];

	    if (this.eat(types$1$1._extends)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (!isClass && this.eat(types$1$1.comma));
	    }

	    if (this.isContextual("mixins")) {
	      this.next();

	      do {
	        node.mixins.push(this.flowParseInterfaceExtends());
	      } while (this.eat(types$1$1.comma));
	    }

	    if (this.isContextual("implements")) {
	      this.next();

	      do {
	        node.implements.push(this.flowParseInterfaceExtends());
	      } while (this.eat(types$1$1.comma));
	    }

	    node.body = this.flowParseObjectType({
	      allowStatic: isClass,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: isClass,
	      allowInexact: false
	    });
	  }

	  flowParseInterfaceExtends() {
	    const node = this.startNode();
	    node.id = this.flowParseQualifiedTypeIdentifier();

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    } else {
	      node.typeParameters = null;
	    }

	    return this.finishNode(node, "InterfaceExtends");
	  }

	  flowParseInterface(node) {
	    this.flowParseInterfaceish(node);
	    return this.finishNode(node, "InterfaceDeclaration");
	  }

	  checkNotUnderscore(word) {
	    if (word === "_") {
	      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);
	    }
	  }

	  checkReservedType(word, startLoc, declaration) {
	    if (!reservedTypes.has(word)) return;
	    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);
	  }

	  flowParseRestrictedIdentifier(liberal, declaration) {
	    this.checkReservedType(this.state.value, this.state.start, declaration);
	    return this.parseIdentifier(liberal);
	  }

	  flowParseTypeAlias(node) {
	    node.id = this.flowParseRestrictedIdentifier(false, true);
	    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.right = this.flowParseTypeInitialiser(types$1$1.eq);
	    this.semicolon();
	    return this.finishNode(node, "TypeAlias");
	  }

	  flowParseOpaqueType(node, declare) {
	    this.expectContextual("type");
	    node.id = this.flowParseRestrictedIdentifier(true, true);
	    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    } else {
	      node.typeParameters = null;
	    }

	    node.supertype = null;

	    if (this.match(types$1$1.colon)) {
	      node.supertype = this.flowParseTypeInitialiser(types$1$1.colon);
	    }

	    node.impltype = null;

	    if (!declare) {
	      node.impltype = this.flowParseTypeInitialiser(types$1$1.eq);
	    }

	    this.semicolon();
	    return this.finishNode(node, "OpaqueType");
	  }

	  flowParseTypeParameter(requireDefault = false) {
	    const nodeStart = this.state.start;
	    const node = this.startNode();
	    const variance = this.flowParseVariance();
	    const ident = this.flowParseTypeAnnotatableIdentifier();
	    node.name = ident.name;
	    node.variance = variance;
	    node.bound = ident.typeAnnotation;

	    if (this.match(types$1$1.eq)) {
	      this.eat(types$1$1.eq);
	      node.default = this.flowParseType();
	    } else {
	      if (requireDefault) {
	        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);
	      }
	    }

	    return this.finishNode(node, "TypeParameter");
	  }

	  flowParseTypeParameterDeclaration() {
	    const oldInType = this.state.inType;
	    const node = this.startNode();
	    node.params = [];
	    this.state.inType = true;

	    if (this.isRelational("<") || this.match(types$1$1.jsxTagStart)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }

	    let defaultRequired = false;

	    do {
	      const typeParameter = this.flowParseTypeParameter(defaultRequired);
	      node.params.push(typeParameter);

	      if (typeParameter.default) {
	        defaultRequired = true;
	      }

	      if (!this.isRelational(">")) {
	        this.expect(types$1$1.comma);
	      }
	    } while (!this.isRelational(">"));

	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterDeclaration");
	  }

	  flowParseTypeParameterInstantiation() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expectRelational("<");
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	    this.state.noAnonFunctionType = false;

	    while (!this.isRelational(">")) {
	      node.params.push(this.flowParseType());

	      if (!this.isRelational(">")) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }

	  flowParseTypeParameterInstantiationCallOrNew() {
	    const node = this.startNode();
	    const oldInType = this.state.inType;
	    node.params = [];
	    this.state.inType = true;
	    this.expectRelational("<");

	    while (!this.isRelational(">")) {
	      node.params.push(this.flowParseTypeOrImplicitInstantiation());

	      if (!this.isRelational(">")) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    this.expectRelational(">");
	    this.state.inType = oldInType;
	    return this.finishNode(node, "TypeParameterInstantiation");
	  }

	  flowParseInterfaceType() {
	    const node = this.startNode();
	    this.expectContextual("interface");
	    node.extends = [];

	    if (this.eat(types$1$1._extends)) {
	      do {
	        node.extends.push(this.flowParseInterfaceExtends());
	      } while (this.eat(types$1$1.comma));
	    }

	    node.body = this.flowParseObjectType({
	      allowStatic: false,
	      allowExact: false,
	      allowSpread: false,
	      allowProto: false,
	      allowInexact: false
	    });
	    return this.finishNode(node, "InterfaceTypeAnnotation");
	  }

	  flowParseObjectPropertyKey() {
	    return this.match(types$1$1.num) || this.match(types$1$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }

	  flowParseObjectTypeIndexer(node, isStatic, variance) {
	    node.static = isStatic;

	    if (this.lookahead().type === types$1$1.colon) {
	      node.id = this.flowParseObjectPropertyKey();
	      node.key = this.flowParseTypeInitialiser();
	    } else {
	      node.id = null;
	      node.key = this.flowParseType();
	    }

	    this.expect(types$1$1.bracketR);
	    node.value = this.flowParseTypeInitialiser();
	    node.variance = variance;
	    return this.finishNode(node, "ObjectTypeIndexer");
	  }

	  flowParseObjectTypeInternalSlot(node, isStatic) {
	    node.static = isStatic;
	    node.id = this.flowParseObjectPropertyKey();
	    this.expect(types$1$1.bracketR);
	    this.expect(types$1$1.bracketR);

	    if (this.isRelational("<") || this.match(types$1$1.parenL)) {
	      node.method = true;
	      node.optional = false;
	      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
	    } else {
	      node.method = false;

	      if (this.eat(types$1$1.question)) {
	        node.optional = true;
	      }

	      node.value = this.flowParseTypeInitialiser();
	    }

	    return this.finishNode(node, "ObjectTypeInternalSlot");
	  }

	  flowParseObjectTypeMethodish(node) {
	    node.params = [];
	    node.rest = null;
	    node.typeParameters = null;
	    node.this = null;

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    this.expect(types$1$1.parenL);

	    if (this.match(types$1$1._this)) {
	      node.this = this.flowParseFunctionTypeParam(true);
	      node.this.name = null;

	      if (!this.match(types$1$1.parenR)) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    while (!this.match(types$1$1.parenR) && !this.match(types$1$1.ellipsis)) {
	      node.params.push(this.flowParseFunctionTypeParam(false));

	      if (!this.match(types$1$1.parenR)) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    if (this.eat(types$1$1.ellipsis)) {
	      node.rest = this.flowParseFunctionTypeParam(false);
	    }

	    this.expect(types$1$1.parenR);
	    node.returnType = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "FunctionTypeAnnotation");
	  }

	  flowParseObjectTypeCallProperty(node, isStatic) {
	    const valueNode = this.startNode();
	    node.static = isStatic;
	    node.value = this.flowParseObjectTypeMethodish(valueNode);
	    return this.finishNode(node, "ObjectTypeCallProperty");
	  }

	  flowParseObjectType({
	    allowStatic,
	    allowExact,
	    allowSpread,
	    allowProto,
	    allowInexact
	  }) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const nodeStart = this.startNode();
	    nodeStart.callProperties = [];
	    nodeStart.properties = [];
	    nodeStart.indexers = [];
	    nodeStart.internalSlots = [];
	    let endDelim;
	    let exact;
	    let inexact = false;

	    if (allowExact && this.match(types$1$1.braceBarL)) {
	      this.expect(types$1$1.braceBarL);
	      endDelim = types$1$1.braceBarR;
	      exact = true;
	    } else {
	      this.expect(types$1$1.braceL);
	      endDelim = types$1$1.braceR;
	      exact = false;
	    }

	    nodeStart.exact = exact;

	    while (!this.match(endDelim)) {
	      let isStatic = false;
	      let protoStart = null;
	      let inexactStart = null;
	      const node = this.startNode();

	      if (allowProto && this.isContextual("proto")) {
	        const lookahead = this.lookahead();

	        if (lookahead.type !== types$1$1.colon && lookahead.type !== types$1$1.question) {
	          this.next();
	          protoStart = this.state.start;
	          allowStatic = false;
	        }
	      }

	      if (allowStatic && this.isContextual("static")) {
	        const lookahead = this.lookahead();

	        if (lookahead.type !== types$1$1.colon && lookahead.type !== types$1$1.question) {
	          this.next();
	          isStatic = true;
	        }
	      }

	      const variance = this.flowParseVariance();

	      if (this.eat(types$1$1.bracketL)) {
	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (this.eat(types$1$1.bracketL)) {
	          if (variance) {
	            this.unexpected(variance.start);
	          }

	          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
	        } else {
	          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
	        }
	      } else if (this.match(types$1$1.parenL) || this.isRelational("<")) {
	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (variance) {
	          this.unexpected(variance.start);
	        }

	        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
	      } else {
	        let kind = "init";

	        if (this.isContextual("get") || this.isContextual("set")) {
	          const lookahead = this.lookahead();

	          if (lookahead.type === types$1$1.name || lookahead.type === types$1$1.string || lookahead.type === types$1$1.num) {
	            kind = this.state.value;
	            this.next();
	          }
	        }

	        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);

	        if (propOrInexact === null) {
	          inexact = true;
	          inexactStart = this.state.lastTokStart;
	        } else {
	          nodeStart.properties.push(propOrInexact);
	        }
	      }

	      this.flowObjectTypeSemicolon();

	      if (inexactStart && !this.match(types$1$1.braceR) && !this.match(types$1$1.braceBarR)) {
	        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);
	      }
	    }

	    this.expect(endDelim);

	    if (allowSpread) {
	      nodeStart.inexact = inexact;
	    }

	    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
	    this.state.inType = oldInType;
	    return out;
	  }

	  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {
	    if (this.eat(types$1$1.ellipsis)) {
	      const isInexactToken = this.match(types$1$1.comma) || this.match(types$1$1.semi) || this.match(types$1$1.braceR) || this.match(types$1$1.braceBarR);

	      if (isInexactToken) {
	        if (!allowSpread) {
	          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);
	        } else if (!allowInexact) {
	          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);
	        }

	        if (variance) {
	          this.raise(variance.start, FlowErrors.InexactVariance);
	        }

	        return null;
	      }

	      if (!allowSpread) {
	        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);
	      }

	      if (protoStart != null) {
	        this.unexpected(protoStart);
	      }

	      if (variance) {
	        this.raise(variance.start, FlowErrors.SpreadVariance);
	      }

	      node.argument = this.flowParseType();
	      return this.finishNode(node, "ObjectTypeSpreadProperty");
	    } else {
	      node.key = this.flowParseObjectPropertyKey();
	      node.static = isStatic;
	      node.proto = protoStart != null;
	      node.kind = kind;
	      let optional = false;

	      if (this.isRelational("<") || this.match(types$1$1.parenL)) {
	        node.method = true;

	        if (protoStart != null) {
	          this.unexpected(protoStart);
	        }

	        if (variance) {
	          this.unexpected(variance.start);
	        }

	        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));

	        if (kind === "get" || kind === "set") {
	          this.flowCheckGetterSetterParams(node);
	        }

	        if (!allowSpread && node.key.name === "constructor" && node.value.this) {
	          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);
	        }
	      } else {
	        if (kind !== "init") this.unexpected();
	        node.method = false;

	        if (this.eat(types$1$1.question)) {
	          optional = true;
	        }

	        node.value = this.flowParseTypeInitialiser();
	        node.variance = variance;
	      }

	      node.optional = optional;
	      return this.finishNode(node, "ObjectTypeProperty");
	    }
	  }

	  flowCheckGetterSetterParams(property) {
	    const paramCount = property.kind === "get" ? 0 : 1;
	    const start = property.start;
	    const length = property.value.params.length + (property.value.rest ? 1 : 0);

	    if (property.value.this) {
	      this.raise(property.value.this.start, property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);
	    }

	    if (length !== paramCount) {
	      if (property.kind === "get") {
	        this.raise(start, ErrorMessages.BadGetterArity);
	      } else {
	        this.raise(start, ErrorMessages.BadSetterArity);
	      }
	    }

	    if (property.kind === "set" && property.value.rest) {
	      this.raise(start, ErrorMessages.BadSetterRestParameter);
	    }
	  }

	  flowObjectTypeSemicolon() {
	    if (!this.eat(types$1$1.semi) && !this.eat(types$1$1.comma) && !this.match(types$1$1.braceR) && !this.match(types$1$1.braceBarR)) {
	      this.unexpected();
	    }
	  }

	  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
	    startPos = startPos || this.state.start;
	    startLoc = startLoc || this.state.startLoc;
	    let node = id || this.flowParseRestrictedIdentifier(true);

	    while (this.eat(types$1$1.dot)) {
	      const node2 = this.startNodeAt(startPos, startLoc);
	      node2.qualification = node;
	      node2.id = this.flowParseRestrictedIdentifier(true);
	      node = this.finishNode(node2, "QualifiedTypeIdentifier");
	    }

	    return node;
	  }

	  flowParseGenericType(startPos, startLoc, id) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.typeParameters = null;
	    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterInstantiation();
	    }

	    return this.finishNode(node, "GenericTypeAnnotation");
	  }

	  flowParseTypeofType() {
	    const node = this.startNode();
	    this.expect(types$1$1._typeof);
	    node.argument = this.flowParsePrimaryType();
	    return this.finishNode(node, "TypeofTypeAnnotation");
	  }

	  flowParseTupleType() {
	    const node = this.startNode();
	    node.types = [];
	    this.expect(types$1$1.bracketL);

	    while (this.state.pos < this.length && !this.match(types$1$1.bracketR)) {
	      node.types.push(this.flowParseType());
	      if (this.match(types$1$1.bracketR)) break;
	      this.expect(types$1$1.comma);
	    }

	    this.expect(types$1$1.bracketR);
	    return this.finishNode(node, "TupleTypeAnnotation");
	  }

	  flowParseFunctionTypeParam(first) {
	    let name = null;
	    let optional = false;
	    let typeAnnotation = null;
	    const node = this.startNode();
	    const lh = this.lookahead();
	    const isThis = this.state.type === types$1$1._this;

	    if (lh.type === types$1$1.colon || lh.type === types$1$1.question) {
	      if (isThis && !first) {
	        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);
	      }

	      name = this.parseIdentifier(isThis);

	      if (this.eat(types$1$1.question)) {
	        optional = true;

	        if (isThis) {
	          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);
	        }
	      }

	      typeAnnotation = this.flowParseTypeInitialiser();
	    } else {
	      typeAnnotation = this.flowParseType();
	    }

	    node.name = name;
	    node.optional = optional;
	    node.typeAnnotation = typeAnnotation;
	    return this.finishNode(node, "FunctionTypeParam");
	  }

	  reinterpretTypeAsFunctionTypeParam(type) {
	    const node = this.startNodeAt(type.start, type.loc.start);
	    node.name = null;
	    node.optional = false;
	    node.typeAnnotation = type;
	    return this.finishNode(node, "FunctionTypeParam");
	  }

	  flowParseFunctionTypeParams(params = []) {
	    let rest = null;
	    let _this = null;

	    if (this.match(types$1$1._this)) {
	      _this = this.flowParseFunctionTypeParam(true);
	      _this.name = null;

	      if (!this.match(types$1$1.parenR)) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    while (!this.match(types$1$1.parenR) && !this.match(types$1$1.ellipsis)) {
	      params.push(this.flowParseFunctionTypeParam(false));

	      if (!this.match(types$1$1.parenR)) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    if (this.eat(types$1$1.ellipsis)) {
	      rest = this.flowParseFunctionTypeParam(false);
	    }

	    return {
	      params,
	      rest,
	      _this
	    };
	  }

	  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
	    switch (id.name) {
	      case "any":
	        return this.finishNode(node, "AnyTypeAnnotation");

	      case "bool":
	      case "boolean":
	        return this.finishNode(node, "BooleanTypeAnnotation");

	      case "mixed":
	        return this.finishNode(node, "MixedTypeAnnotation");

	      case "empty":
	        return this.finishNode(node, "EmptyTypeAnnotation");

	      case "number":
	        return this.finishNode(node, "NumberTypeAnnotation");

	      case "string":
	        return this.finishNode(node, "StringTypeAnnotation");

	      case "symbol":
	        return this.finishNode(node, "SymbolTypeAnnotation");

	      default:
	        this.checkNotUnderscore(id.name);
	        return this.flowParseGenericType(startPos, startLoc, id);
	    }
	  }

	  flowParsePrimaryType() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const node = this.startNode();
	    let tmp;
	    let type;
	    let isGroupedType = false;
	    const oldNoAnonFunctionType = this.state.noAnonFunctionType;

	    switch (this.state.type) {
	      case types$1$1.name:
	        if (this.isContextual("interface")) {
	          return this.flowParseInterfaceType();
	        }

	        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

	      case types$1$1.braceL:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: false,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: true
	        });

	      case types$1$1.braceBarL:
	        return this.flowParseObjectType({
	          allowStatic: false,
	          allowExact: true,
	          allowSpread: true,
	          allowProto: false,
	          allowInexact: false
	        });

	      case types$1$1.bracketL:
	        this.state.noAnonFunctionType = false;
	        type = this.flowParseTupleType();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        return type;

	      case types$1$1.relational:
	        if (this.state.value === "<") {
	          node.typeParameters = this.flowParseTypeParameterDeclaration();
	          this.expect(types$1$1.parenL);
	          tmp = this.flowParseFunctionTypeParams();
	          node.params = tmp.params;
	          node.rest = tmp.rest;
	          node.this = tmp._this;
	          this.expect(types$1$1.parenR);
	          this.expect(types$1$1.arrow);
	          node.returnType = this.flowParseType();
	          return this.finishNode(node, "FunctionTypeAnnotation");
	        }

	        break;

	      case types$1$1.parenL:
	        this.next();

	        if (!this.match(types$1$1.parenR) && !this.match(types$1$1.ellipsis)) {
	          if (this.match(types$1$1.name) || this.match(types$1$1._this)) {
	            const token = this.lookahead().type;
	            isGroupedType = token !== types$1$1.question && token !== types$1$1.colon;
	          } else {
	            isGroupedType = true;
	          }
	        }

	        if (isGroupedType) {
	          this.state.noAnonFunctionType = false;
	          type = this.flowParseType();
	          this.state.noAnonFunctionType = oldNoAnonFunctionType;

	          if (this.state.noAnonFunctionType || !(this.match(types$1$1.comma) || this.match(types$1$1.parenR) && this.lookahead().type === types$1$1.arrow)) {
	            this.expect(types$1$1.parenR);
	            return type;
	          } else {
	            this.eat(types$1$1.comma);
	          }
	        }

	        if (type) {
	          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
	        } else {
	          tmp = this.flowParseFunctionTypeParams();
	        }

	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        node.this = tmp._this;
	        this.expect(types$1$1.parenR);
	        this.expect(types$1$1.arrow);
	        node.returnType = this.flowParseType();
	        node.typeParameters = null;
	        return this.finishNode(node, "FunctionTypeAnnotation");

	      case types$1$1.string:
	        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

	      case types$1$1._true:
	      case types$1$1._false:
	        node.value = this.match(types$1$1._true);
	        this.next();
	        return this.finishNode(node, "BooleanLiteralTypeAnnotation");

	      case types$1$1.plusMin:
	        if (this.state.value === "-") {
	          this.next();

	          if (this.match(types$1$1.num)) {
	            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
	          }

	          if (this.match(types$1$1.bigint)) {
	            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
	          }

	          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);
	        }

	        throw this.unexpected();

	      case types$1$1.num:
	        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");

	      case types$1$1.bigint:
	        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");

	      case types$1$1._void:
	        this.next();
	        return this.finishNode(node, "VoidTypeAnnotation");

	      case types$1$1._null:
	        this.next();
	        return this.finishNode(node, "NullLiteralTypeAnnotation");

	      case types$1$1._this:
	        this.next();
	        return this.finishNode(node, "ThisTypeAnnotation");

	      case types$1$1.star:
	        this.next();
	        return this.finishNode(node, "ExistsTypeAnnotation");

	      default:
	        if (this.state.type.keyword === "typeof") {
	          return this.flowParseTypeofType();
	        } else if (this.state.type.keyword) {
	          const label = this.state.type.label;
	          this.next();
	          return super.createIdentifier(node, label);
	        }

	    }

	    throw this.unexpected();
	  }

	  flowParsePostfixType() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let type = this.flowParsePrimaryType();
	    let seenOptionalIndexedAccess = false;

	    while ((this.match(types$1$1.bracketL) || this.match(types$1$1.questionDot)) && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startPos, startLoc);
	      const optional = this.eat(types$1$1.questionDot);
	      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
	      this.expect(types$1$1.bracketL);

	      if (!optional && this.match(types$1$1.bracketR)) {
	        node.elementType = type;
	        this.next();
	        type = this.finishNode(node, "ArrayTypeAnnotation");
	      } else {
	        node.objectType = type;
	        node.indexType = this.flowParseType();
	        this.expect(types$1$1.bracketR);

	        if (seenOptionalIndexedAccess) {
	          node.optional = optional;
	          type = this.finishNode(node, "OptionalIndexedAccessType");
	        } else {
	          type = this.finishNode(node, "IndexedAccessType");
	        }
	      }
	    }

	    return type;
	  }

	  flowParsePrefixType() {
	    const node = this.startNode();

	    if (this.eat(types$1$1.question)) {
	      node.typeAnnotation = this.flowParsePrefixType();
	      return this.finishNode(node, "NullableTypeAnnotation");
	    } else {
	      return this.flowParsePostfixType();
	    }
	  }

	  flowParseAnonFunctionWithoutParens() {
	    const param = this.flowParsePrefixType();

	    if (!this.state.noAnonFunctionType && this.eat(types$1$1.arrow)) {
	      const node = this.startNodeAt(param.start, param.loc.start);
	      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
	      node.rest = null;
	      node.this = null;
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	      return this.finishNode(node, "FunctionTypeAnnotation");
	    }

	    return param;
	  }

	  flowParseIntersectionType() {
	    const node = this.startNode();
	    this.eat(types$1$1.bitwiseAND);
	    const type = this.flowParseAnonFunctionWithoutParens();
	    node.types = [type];

	    while (this.eat(types$1$1.bitwiseAND)) {
	      node.types.push(this.flowParseAnonFunctionWithoutParens());
	    }

	    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	  }

	  flowParseUnionType() {
	    const node = this.startNode();
	    this.eat(types$1$1.bitwiseOR);
	    const type = this.flowParseIntersectionType();
	    node.types = [type];

	    while (this.eat(types$1$1.bitwiseOR)) {
	      node.types.push(this.flowParseIntersectionType());
	    }

	    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	  }

	  flowParseType() {
	    const oldInType = this.state.inType;
	    this.state.inType = true;
	    const type = this.flowParseUnionType();
	    this.state.inType = oldInType;
	    return type;
	  }

	  flowParseTypeOrImplicitInstantiation() {
	    if (this.state.type === types$1$1.name && this.state.value === "_") {
	      const startPos = this.state.start;
	      const startLoc = this.state.startLoc;
	      const node = this.parseIdentifier();
	      return this.flowParseGenericType(startPos, startLoc, node);
	    } else {
	      return this.flowParseType();
	    }
	  }

	  flowParseTypeAnnotation() {
	    const node = this.startNode();
	    node.typeAnnotation = this.flowParseTypeInitialiser();
	    return this.finishNode(node, "TypeAnnotation");
	  }

	  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
	    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();

	    if (this.match(types$1$1.colon)) {
	      ident.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(ident);
	    }

	    return ident;
	  }

	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
	    return node.expression;
	  }

	  flowParseVariance() {
	    let variance = null;

	    if (this.match(types$1$1.plusMin)) {
	      variance = this.startNode();

	      if (this.state.value === "+") {
	        variance.kind = "plus";
	      } else {
	        variance.kind = "minus";
	      }

	      this.next();
	      this.finishNode(variance, "Variance");
	    }

	    return variance;
	  }

	  parseFunctionBody(node, allowExpressionBody, isMethod = false) {
	    if (allowExpressionBody) {
	      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
	    }

	    return super.parseFunctionBody(node, false, isMethod);
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(types$1$1.colon)) {
	      const typeNode = this.startNode();
	      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
	    }

	    super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }

	  parseStatement(context, topLevel) {
	    if (this.state.strict && this.match(types$1$1.name) && this.state.value === "interface") {
	      const lookahead = this.lookahead();

	      if (lookahead.type === types$1$1.name || isKeyword(lookahead.value)) {
	        const node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      }
	    } else if (this.shouldParseEnums() && this.isContextual("enum")) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }

	    const stmt = super.parseStatement(context, topLevel);

	    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
	      this.flowPragma = null;
	    }

	    return stmt;
	  }

	  parseExpressionStatement(node, expr) {
	    if (expr.type === "Identifier") {
	      if (expr.name === "declare") {
	        if (this.match(types$1$1._class) || this.match(types$1$1.name) || this.match(types$1$1._function) || this.match(types$1$1._var) || this.match(types$1$1._export)) {
	          return this.flowParseDeclare(node);
	        }
	      } else if (this.match(types$1$1.name)) {
	        if (expr.name === "interface") {
	          return this.flowParseInterface(node);
	        } else if (expr.name === "type") {
	          return this.flowParseTypeAlias(node);
	        } else if (expr.name === "opaque") {
	          return this.flowParseOpaqueType(node, false);
	        }
	      }
	    }

	    return super.parseExpressionStatement(node, expr);
	  }

	  shouldParseExportDeclaration() {
	    return this.isContextual("type") || this.isContextual("interface") || this.isContextual("opaque") || this.shouldParseEnums() && this.isContextual("enum") || super.shouldParseExportDeclaration();
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(types$1$1.name) && (this.state.value === "type" || this.state.value === "interface" || this.state.value === "opaque" || this.shouldParseEnums() && this.state.value === "enum")) {
	      return false;
	    }

	    return super.isExportDefaultSpecifier();
	  }

	  parseExportDefaultExpression() {
	    if (this.shouldParseEnums() && this.isContextual("enum")) {
	      const node = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(node);
	    }

	    return super.parseExportDefaultExpression();
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (!this.match(types$1$1.question)) return expr;

	    if (this.state.maybeInArrowParameters) {
	      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));

	      if (!result.node) {
	        if (result.error) {
	          super.setOptionalParametersError(refExpressionErrors, result.error);
	        }

	        return expr;
	      }

	      if (result.error) this.state = result.failState;
	      return result.node;
	    }

	    this.expect(types$1$1.question);
	    const state = this.state.clone();
	    const originalNoArrowAt = this.state.noArrowAt;
	    const node = this.startNodeAt(startPos, startLoc);
	    let {
	      consequent,
	      failed
	    } = this.tryParseConditionalConsequent();
	    let [valid, invalid] = this.getArrowLikeExpressions(consequent);

	    if (failed || invalid.length > 0) {
	      const noArrowAt = [...originalNoArrowAt];

	      if (invalid.length > 0) {
	        this.state = state;
	        this.state.noArrowAt = noArrowAt;

	        for (let i = 0; i < invalid.length; i++) {
	          noArrowAt.push(invalid[i].start);
	        }

	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	        [valid, invalid] = this.getArrowLikeExpressions(consequent);
	      }

	      if (failed && valid.length > 1) {
	        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);
	      }

	      if (failed && valid.length === 1) {
	        this.state = state;
	        this.state.noArrowAt = noArrowAt.concat(valid[0].start);
	        ({
	          consequent,
	          failed
	        } = this.tryParseConditionalConsequent());
	      }
	    }

	    this.getArrowLikeExpressions(consequent, true);
	    this.state.noArrowAt = originalNoArrowAt;
	    this.expect(types$1$1.colon);
	    node.test = expr;
	    node.consequent = consequent;
	    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
	    return this.finishNode(node, "ConditionalExpression");
	  }

	  tryParseConditionalConsequent() {
	    this.state.noArrowParamsConversionAt.push(this.state.start);
	    const consequent = this.parseMaybeAssignAllowIn();
	    const failed = !this.match(types$1$1.colon);
	    this.state.noArrowParamsConversionAt.pop();
	    return {
	      consequent,
	      failed
	    };
	  }

	  getArrowLikeExpressions(node, disallowInvalid) {
	    const stack = [node];
	    const arrows = [];

	    while (stack.length !== 0) {
	      const node = stack.pop();

	      if (node.type === "ArrowFunctionExpression") {
	        if (node.typeParameters || !node.returnType) {
	          this.finishArrowValidation(node);
	        } else {
	          arrows.push(node);
	        }

	        stack.push(node.body);
	      } else if (node.type === "ConditionalExpression") {
	        stack.push(node.consequent);
	        stack.push(node.alternate);
	      }
	    }

	    if (disallowInvalid) {
	      arrows.forEach(node => this.finishArrowValidation(node));
	      return [arrows, []];
	    }

	    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
	  }

	  finishArrowValidation(node) {
	    var _node$extra;

	    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
	    super.checkParams(node, false, true);
	    this.scope.exit();
	  }

	  forwardNoArrowParamsConversionAt(node, parse) {
	    let result;

	    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      this.state.noArrowParamsConversionAt.push(this.state.start);
	      result = parse();
	      this.state.noArrowParamsConversionAt.pop();
	    } else {
	      result = parse();
	    }

	    return result;
	  }

	  parseParenItem(node, startPos, startLoc) {
	    node = super.parseParenItem(node, startPos, startLoc);

	    if (this.eat(types$1$1.question)) {
	      node.optional = true;
	      this.resetEndLocation(node);
	    }

	    if (this.match(types$1$1.colon)) {
	      const typeCastNode = this.startNodeAt(startPos, startLoc);
	      typeCastNode.expression = node;
	      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TypeCastExpression");
	    }

	    return node;
	  }

	  assertModuleNodeAllowed(node) {
	    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
	      return;
	    }

	    super.assertModuleNodeAllowed(node);
	  }

	  parseExport(node) {
	    const decl = super.parseExport(node);

	    if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
	      decl.exportKind = decl.exportKind || "value";
	    }

	    return decl;
	  }

	  parseExportDeclaration(node) {
	    if (this.isContextual("type")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();

	      if (this.match(types$1$1.braceL)) {
	        node.specifiers = this.parseExportSpecifiers();
	        this.parseExportFrom(node);
	        return null;
	      } else {
	        return this.flowParseTypeAlias(declarationNode);
	      }
	    } else if (this.isContextual("opaque")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseOpaqueType(declarationNode, false);
	    } else if (this.isContextual("interface")) {
	      node.exportKind = "type";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseInterface(declarationNode);
	    } else if (this.shouldParseEnums() && this.isContextual("enum")) {
	      node.exportKind = "value";
	      const declarationNode = this.startNode();
	      this.next();
	      return this.flowParseEnumDeclaration(declarationNode);
	    } else {
	      return super.parseExportDeclaration(node);
	    }
	  }

	  eatExportStar(node) {
	    if (super.eatExportStar(...arguments)) return true;

	    if (this.isContextual("type") && this.lookahead().type === types$1$1.star) {
	      node.exportKind = "type";
	      this.next();
	      this.next();
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamespaceSpecifier(node) {
	    const pos = this.state.start;
	    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);

	    if (hasNamespace && node.exportKind === "type") {
	      this.unexpected(pos);
	    }

	    return hasNamespace;
	  }

	  parseClassId(node, isStatement, optionalId) {
	    super.parseClassId(node, isStatement, optionalId);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }
	  }

	  parseClassMember(classBody, member, state) {
	    const pos = this.state.start;

	    if (this.isContextual("declare")) {
	      if (this.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }

	      member.declare = true;
	    }

	    super.parseClassMember(classBody, member, state);

	    if (member.declare) {
	      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
	          this.raise(pos, FlowErrors.DeclareClassElement);
	        } else if (member.value) {
	        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);
	      }
	    }
	  }

	  isIterator(word) {
	    return word === "iterator" || word === "asyncIterator";
	  }

	  readIterator() {
	    const word = super.readWord1();
	    const fullWord = "@@" + word;

	    if (!this.isIterator(word) || !this.state.inType) {
	      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);
	    }

	    this.finishToken(types$1$1.name, fullWord);
	  }

	  getTokenFromCode(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 123 && next === 124) {
	      return this.finishOp(types$1$1.braceBarL, 2);
	    } else if (this.state.inType && (code === 62 || code === 60)) {
	      return this.finishOp(types$1$1.relational, 1);
	    } else if (this.state.inType && code === 63) {
	      if (next === 46) {
	        return this.finishOp(types$1$1.questionDot, 2);
	      }

	      return this.finishOp(types$1$1.question, 1);
	    } else if (isIteratorStart(code, next)) {
	      this.state.pos += 2;
	      return this.readIterator();
	    } else {
	      return super.getTokenFromCode(code);
	    }
	  }

	  isAssignable(node, isBinding) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        return true;

	      case "ObjectExpression":
	        {
	          const last = node.properties.length - 1;
	          return node.properties.every((prop, i) => {
	            return prop.type !== "ObjectMethod" && (i === last || prop.type === "SpreadElement") && this.isAssignable(prop);
	          });
	        }

	      case "ObjectProperty":
	        return this.isAssignable(node.value);

	      case "SpreadElement":
	        return this.isAssignable(node.argument);

	      case "ArrayExpression":
	        return node.elements.every(element => this.isAssignable(element));

	      case "AssignmentExpression":
	        return node.operator === "=";

	      case "ParenthesizedExpression":
	      case "TypeCastExpression":
	        return this.isAssignable(node.expression);

	      case "MemberExpression":
	      case "OptionalMemberExpression":
	        return !isBinding;

	      default:
	        return false;
	    }
	  }

	  toAssignable(node, isLHS = false) {
	    if (node.type === "TypeCastExpression") {
	      return super.toAssignable(this.typeCastToParameter(node), isLHS);
	    } else {
	      return super.toAssignable(node, isLHS);
	    }
	  }

	  toAssignableList(exprList, trailingCommaPos, isLHS) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];

	      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
	        exprList[i] = this.typeCastToParameter(expr);
	      }
	    }

	    return super.toAssignableList(exprList, trailingCommaPos, isLHS);
	  }

	  toReferencedList(exprList, isParenthesizedExpr) {
	    for (let i = 0; i < exprList.length; i++) {
	      var _expr$extra;

	      const expr = exprList[i];

	      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
	        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);
	      }
	    }

	    return exprList;
	  }

	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);

	    if (canBePattern && !this.state.maybeInArrowParameters) {
	      this.toReferencedList(node.elements);
	    }

	    return node;
	  }

	  checkLVal(expr, ...args) {
	    if (expr.type !== "TypeCastExpression") {
	      return super.checkLVal(expr, ...args);
	    }
	  }

	  parseClassProperty(node) {
	    if (this.match(types$1$1.colon)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }

	    return super.parseClassProperty(node);
	  }

	  parseClassPrivateProperty(node) {
	    if (this.match(types$1$1.colon)) {
	      node.typeAnnotation = this.flowParseTypeAnnotation();
	    }

	    return super.parseClassPrivateProperty(node);
	  }

	  isClassMethod() {
	    return this.isRelational("<") || super.isClassMethod();
	  }

	  isClassProperty() {
	    return this.match(types$1$1.colon) || super.isClassProperty();
	  }

	  isNonstaticConstructor(method) {
	    return !this.match(types$1$1.colon) && super.isNonstaticConstructor(method);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    if (method.variance) {
	      this.unexpected(method.variance.start);
	    }

	    delete method.variance;

	    if (this.isRelational("<")) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);

	    if (method.params && isConstructor) {
	      const params = method.params;

	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
	      }
	    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
	      const params = method.value.params;

	      if (params.length > 0 && this.isThisParam(params[0])) {
	        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);
	      }
	    }
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    if (method.variance) {
	      this.unexpected(method.variance.start);
	    }

	    delete method.variance;

	    if (this.isRelational("<")) {
	      method.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }

	  parseClassSuper(node) {
	    super.parseClassSuper(node);

	    if (node.superClass && this.isRelational("<")) {
	      node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	    }

	    if (this.isContextual("implements")) {
	      this.next();
	      const implemented = node.implements = [];

	      do {
	        const node = this.startNode();
	        node.id = this.flowParseRestrictedIdentifier(true);

	        if (this.isRelational("<")) {
	          node.typeParameters = this.flowParseTypeParameterInstantiation();
	        } else {
	          node.typeParameters = null;
	        }

	        implemented.push(this.finishNode(node, "ClassImplements"));
	      } while (this.eat(types$1$1.comma));
	    }
	  }

	  checkGetterSetterParams(method) {
	    super.checkGetterSetterParams(method);
	    const params = this.getObjectOrClassMethodParams(method);

	    if (params.length > 0) {
	      const param = params[0];

	      if (this.isThisParam(param) && method.kind === "get") {
	        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);
	      } else if (this.isThisParam(param)) {
	        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);
	      }
	    }
	  }

	  parsePropertyName(node, isPrivateNameAllowed) {
	    const variance = this.flowParseVariance();
	    const key = super.parsePropertyName(node, isPrivateNameAllowed);
	    node.variance = variance;
	    return key;
	  }

	  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    if (prop.variance) {
	      this.unexpected(prop.variance.start);
	    }

	    delete prop.variance;
	    let typeParameters;

	    if (this.isRelational("<") && !isAccessor) {
	      typeParameters = this.flowParseTypeParameterDeclaration();
	      if (!this.match(types$1$1.parenL)) this.unexpected();
	    }

	    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);

	    if (typeParameters) {
	      (prop.value || prop).typeParameters = typeParameters;
	    }
	  }

	  parseAssignableListItemTypes(param) {
	    if (this.eat(types$1$1.question)) {
	      if (param.type !== "Identifier") {
	        this.raise(param.start, FlowErrors.OptionalBindingPattern);
	      }

	      if (this.isThisParam(param)) {
	        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);
	      }

	      param.optional = true;
	    }

	    if (this.match(types$1$1.colon)) {
	      param.typeAnnotation = this.flowParseTypeAnnotation();
	    } else if (this.isThisParam(param)) {
	      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);
	    }

	    if (this.match(types$1$1.eq) && this.isThisParam(param)) {
	      this.raise(param.start, FlowErrors.ThisParamNoDefault);
	    }

	    this.resetEndLocation(param);
	    return param;
	  }

	  parseMaybeDefault(startPos, startLoc, left) {
	    const node = super.parseMaybeDefault(startPos, startLoc, left);

	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);
	    }

	    return node;
	  }

	  shouldParseDefaultImport(node) {
	    if (!hasTypeImportKind(node)) {
	      return super.shouldParseDefaultImport(node);
	    }

	    return isMaybeDefaultImport(this.state);
	  }

	  parseImportSpecifierLocal(node, specifier, type, contextDescription) {
	    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
	    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, type));
	  }

	  maybeParseDefaultImportSpecifier(node) {
	    node.importKind = "value";
	    let kind = null;

	    if (this.match(types$1$1._typeof)) {
	      kind = "typeof";
	    } else if (this.isContextual("type")) {
	      kind = "type";
	    }

	    if (kind) {
	      const lh = this.lookahead();

	      if (kind === "type" && lh.type === types$1$1.star) {
	        this.unexpected(lh.start);
	      }

	      if (isMaybeDefaultImport(lh) || lh.type === types$1$1.braceL || lh.type === types$1$1.star) {
	        this.next();
	        node.importKind = kind;
	      }
	    }

	    return super.maybeParseDefaultImportSpecifier(node);
	  }

	  parseImportSpecifier(node) {
	    const specifier = this.startNode();
	    const firstIdentIsString = this.match(types$1$1.string);
	    const firstIdent = this.parseModuleExportName();
	    let specifierTypeKind = null;

	    if (firstIdent.type === "Identifier") {
	      if (firstIdent.name === "type") {
	        specifierTypeKind = "type";
	      } else if (firstIdent.name === "typeof") {
	        specifierTypeKind = "typeof";
	      }
	    }

	    let isBinding = false;

	    if (this.isContextual("as") && !this.isLookaheadContextual("as")) {
	      const as_ident = this.parseIdentifier(true);

	      if (specifierTypeKind !== null && !this.match(types$1$1.name) && !this.state.type.keyword) {
	        specifier.imported = as_ident;
	        specifier.importKind = specifierTypeKind;
	        specifier.local = as_ident.__clone();
	      } else {
	        specifier.imported = firstIdent;
	        specifier.importKind = null;
	        specifier.local = this.parseIdentifier();
	      }
	    } else if (specifierTypeKind !== null && (this.match(types$1$1.name) || this.state.type.keyword)) {
	      specifier.imported = this.parseIdentifier(true);
	      specifier.importKind = specifierTypeKind;

	      if (this.eatContextual("as")) {
	        specifier.local = this.parseIdentifier();
	      } else {
	        isBinding = true;
	        specifier.local = specifier.imported.__clone();
	      }
	    } else {
	      if (firstIdentIsString) {
	        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);
	      }

	      isBinding = true;
	      specifier.imported = firstIdent;
	      specifier.importKind = null;
	      specifier.local = specifier.imported.__clone();
	    }

	    const nodeIsTypeImport = hasTypeImportKind(node);
	    const specifierIsTypeImport = hasTypeImportKind(specifier);

	    if (nodeIsTypeImport && specifierIsTypeImport) {
	      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);
	    }

	    if (nodeIsTypeImport || specifierIsTypeImport) {
	      this.checkReservedType(specifier.local.name, specifier.local.start, true);
	    }

	    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
	      this.checkReservedWord(specifier.local.name, specifier.start, true, true);
	    }

	    this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case types$1$1._this:
	        return this.parseIdentifier(true);

	      default:
	        return super.parseBindingAtom();
	    }
	  }

	  parseFunctionParams(node, allowModifiers) {
	    const kind = node.kind;

	    if (kind !== "get" && kind !== "set" && this.isRelational("<")) {
	      node.typeParameters = this.flowParseTypeParameterDeclaration();
	    }

	    super.parseFunctionParams(node, allowModifiers);
	  }

	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);

	    if (this.match(types$1$1.colon)) {
	      decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	      this.resetEndLocation(decl.id);
	    }
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(types$1$1.colon)) {
	      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	      this.state.noAnonFunctionType = true;
	      node.returnType = this.flowParseTypeAnnotation();
	      this.state.noAnonFunctionType = oldNoAnonFunctionType;
	    }

	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }

	  shouldParseAsyncArrow() {
	    return this.match(types$1$1.colon) || super.shouldParseAsyncArrow();
	  }

	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    var _jsx;

	    let state = null;
	    let jsx;

	    if (this.hasPlugin("jsx") && (this.match(types$1$1.jsxTagStart) || this.isRelational("<"))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;
	      const curContext = context[context.length - 1];

	      if (curContext === types$2.j_oTag) {
	        context.length -= 2;
	      } else if (curContext === types$2.j_expr) {
	        context.length -= 1;
	      }
	    }

	    if ((_jsx = jsx) != null && _jsx.error || this.isRelational("<")) {
	      var _jsx2, _jsx3;

	      state = state || this.state.clone();
	      let typeParameters;
	      const arrow = this.tryParse(abort => {
	        var _arrowExpression$extr;

	        typeParameters = this.flowParseTypeParameterDeclaration();
	        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
	          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	          this.resetStartLocationFromNode(result, typeParameters);
	          return result;
	        });

	        if (arrowExpression.type !== "ArrowFunctionExpression" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {
	          abort();
	        }

	        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
	        expr.typeParameters = typeParameters;
	        this.resetStartLocationFromNode(expr, typeParameters);
	        return arrowExpression;
	      }, state);
	      let arrowExpression = null;

	      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
	        if (!arrow.error && !arrow.aborted) {
	          if (arrow.node.async) {
	            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);
	          }

	          return arrow.node;
	        }

	        arrowExpression = arrow.node;
	      }

	      if ((_jsx2 = jsx) != null && _jsx2.node) {
	        this.state = jsx.failState;
	        return jsx.node;
	      }

	      if (arrowExpression) {
	        this.state = arrow.failState;
	        return arrowExpression;
	      }

	      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
	      if (arrow.thrown) throw arrow.error;
	      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);
	    }

	    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
	  }

	  parseArrow(node) {
	    if (this.match(types$1$1.colon)) {
	      const result = this.tryParse(() => {
	        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
	        this.state.noAnonFunctionType = true;
	        const typeNode = this.startNode();
	        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
	        this.state.noAnonFunctionType = oldNoAnonFunctionType;
	        if (this.canInsertSemicolon()) this.unexpected();
	        if (!this.match(types$1$1.arrow)) this.unexpected();
	        return typeNode;
	      });
	      if (result.thrown) return null;
	      if (result.error) this.state = result.failState;
	      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
	    }

	    return super.parseArrow(node);
	  }

	  shouldParseArrow() {
	    return this.match(types$1$1.colon) || super.shouldParseArrow();
	  }

	  setArrowFunctionParameters(node, params) {
	    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      node.params = params;
	    } else {
	      super.setArrowFunctionParameters(node, params);
	    }
	  }

	  checkParams(node, allowDuplicates, isArrowFunction) {
	    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
	      return;
	    }

	    for (let i = 0; i < node.params.length; i++) {
	      if (this.isThisParam(node.params[i]) && i > 0) {
	        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);
	      }
	    }

	    return super.checkParams(...arguments);
	  }

	  parseParenAndDistinguishExpression(canBeArrow) {
	    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
	  }

	  parseSubscripts(base, startPos, startLoc, noCalls) {
	    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
	      this.next();
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, false);
	      base = this.finishNode(node, "CallExpression");
	    } else if (base.type === "Identifier" && base.name === "async" && this.isRelational("<")) {
	      const state = this.state.clone();
	      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
	      if (!arrow.error && !arrow.aborted) return arrow.node;
	      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
	      if (result.node && !result.error) return result.node;

	      if (arrow.node) {
	        this.state = arrow.failState;
	        return arrow.node;
	      }

	      if (result.node) {
	        this.state = result.failState;
	        return result.node;
	      }

	      throw arrow.error || result.error;
	    }

	    return super.parseSubscripts(base, startPos, startLoc, noCalls);
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
	    if (this.match(types$1$1.questionDot) && this.isLookaheadToken_lt()) {
	      subscriptState.optionalChainMember = true;

	      if (noCalls) {
	        subscriptState.stop = true;
	        return base;
	      }

	      this.next();
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.typeArguments = this.flowParseTypeParameterInstantiation();
	      this.expect(types$1$1.parenL);
	      node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, false);
	      node.optional = true;
	      return this.finishCallExpression(node, true);
	    } else if (!noCalls && this.shouldParseTypes() && this.isRelational("<")) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      const result = this.tryParse(() => {
	        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
	        this.expect(types$1$1.parenL);
	        node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, false);
	        if (subscriptState.optionalChainMember) node.optional = false;
	        return this.finishCallExpression(node, subscriptState.optionalChainMember);
	      });

	      if (result.node) {
	        if (result.error) this.state = result.failState;
	        return result.node;
	      }
	    }

	    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
	  }

	  parseNewArguments(node) {
	    let targs = null;

	    if (this.shouldParseTypes() && this.isRelational("<")) {
	      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
	    }

	    node.typeArguments = targs;
	    super.parseNewArguments(node);
	  }

	  parseAsyncArrowWithTypeParameters(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    this.parseFunctionParams(node);
	    if (!this.parseArrow(node)) return;
	    return this.parseArrowExpression(node, undefined, true);
	  }

	  readToken_mult_modulo(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 42 && next === 47 && this.state.hasFlowComment) {
	      this.state.hasFlowComment = false;
	      this.state.pos += 2;
	      this.nextToken();
	      return;
	    }

	    super.readToken_mult_modulo(code);
	  }

	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 124 && next === 125) {
	      this.finishOp(types$1$1.braceBarR, 2);
	      return;
	    }

	    super.readToken_pipe_amp(code);
	  }

	  parseTopLevel(file, program) {
	    const fileNode = super.parseTopLevel(file, program);

	    if (this.state.hasFlowComment) {
	      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);
	    }

	    return fileNode;
	  }

	  skipBlockComment() {
	    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
	      if (this.state.hasFlowComment) {
	        this.unexpected(null, FlowErrors.NestedFlowComment);
	      }

	      this.hasFlowCommentCompletion();
	      this.state.pos += this.skipFlowComment();
	      this.state.hasFlowComment = true;
	      return;
	    }

	    if (this.state.hasFlowComment) {
	      const end = this.input.indexOf("*-/", this.state.pos += 2);

	      if (end === -1) {
	        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);
	      }

	      this.state.pos = end + 3;
	      return;
	    }

	    super.skipBlockComment();
	  }

	  skipFlowComment() {
	    const {
	      pos
	    } = this.state;
	    let shiftToFirstNonWhiteSpace = 2;

	    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
	      shiftToFirstNonWhiteSpace++;
	    }

	    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
	    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);

	    if (ch2 === 58 && ch3 === 58) {
	      return shiftToFirstNonWhiteSpace + 2;
	    }

	    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
	      return shiftToFirstNonWhiteSpace + 12;
	    }

	    if (ch2 === 58 && ch3 !== 58) {
	      return shiftToFirstNonWhiteSpace;
	    }

	    return false;
	  }

	  hasFlowCommentCompletion() {
	    const end = this.input.indexOf("*/", this.state.pos);

	    if (end === -1) {
	      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);
	    }
	  }

	  flowEnumErrorBooleanMemberNotInitialized(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);
	  }

	  flowEnumErrorInvalidMemberName(pos, {
	    enumName,
	    memberName
	  }) {
	    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);
	    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);
	  }

	  flowEnumErrorDuplicateMemberName(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);
	  }

	  flowEnumErrorInconsistentMemberValues(pos, {
	    enumName
	  }) {
	    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);
	  }

	  flowEnumErrorInvalidExplicitType(pos, {
	    enumName,
	    suppliedType
	  }) {
	    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);
	  }

	  flowEnumErrorInvalidMemberInitializer(pos, {
	    enumName,
	    explicitType,
	    memberName
	  }) {
	    let message = null;

	    switch (explicitType) {
	      case "boolean":
	      case "number":
	      case "string":
	        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;
	        break;

	      case "symbol":
	        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;
	        break;

	      default:
	        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;
	    }

	    return this.raise(pos, message, enumName, memberName, explicitType);
	  }

	  flowEnumErrorNumberMemberNotInitialized(pos, {
	    enumName,
	    memberName
	  }) {
	    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);
	  }

	  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {
	    enumName
	  }) {
	    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);
	  }

	  flowEnumMemberInit() {
	    const startPos = this.state.start;

	    const endOfInit = () => this.match(types$1$1.comma) || this.match(types$1$1.braceR);

	    switch (this.state.type) {
	      case types$1$1.num:
	        {
	          const literal = this.parseNumericLiteral(this.state.value);

	          if (endOfInit()) {
	            return {
	              type: "number",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      case types$1$1.string:
	        {
	          const literal = this.parseStringLiteral(this.state.value);

	          if (endOfInit()) {
	            return {
	              type: "string",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      case types$1$1._true:
	      case types$1$1._false:
	        {
	          const literal = this.parseBooleanLiteral(this.match(types$1$1._true));

	          if (endOfInit()) {
	            return {
	              type: "boolean",
	              pos: literal.start,
	              value: literal
	            };
	          }

	          return {
	            type: "invalid",
	            pos: startPos
	          };
	        }

	      default:
	        return {
	          type: "invalid",
	          pos: startPos
	        };
	    }
	  }

	  flowEnumMemberRaw() {
	    const pos = this.state.start;
	    const id = this.parseIdentifier(true);
	    const init = this.eat(types$1$1.eq) ? this.flowEnumMemberInit() : {
	      type: "none",
	      pos
	    };
	    return {
	      id,
	      init
	    };
	  }

	  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {
	    const {
	      explicitType
	    } = context;

	    if (explicitType === null) {
	      return;
	    }

	    if (explicitType !== expectedType) {
	      this.flowEnumErrorInvalidMemberInitializer(pos, context);
	    }
	  }

	  flowEnumMembers({
	    enumName,
	    explicitType
	  }) {
	    const seenNames = new Set();
	    const members = {
	      booleanMembers: [],
	      numberMembers: [],
	      stringMembers: [],
	      defaultedMembers: []
	    };
	    let hasUnknownMembers = false;

	    while (!this.match(types$1$1.braceR)) {
	      if (this.eat(types$1$1.ellipsis)) {
	        hasUnknownMembers = true;
	        break;
	      }

	      const memberNode = this.startNode();
	      const {
	        id,
	        init
	      } = this.flowEnumMemberRaw();
	      const memberName = id.name;

	      if (memberName === "") {
	        continue;
	      }

	      if (/^[a-z]/.test(memberName)) {
	        this.flowEnumErrorInvalidMemberName(id.start, {
	          enumName,
	          memberName
	        });
	      }

	      if (seenNames.has(memberName)) {
	        this.flowEnumErrorDuplicateMemberName(id.start, {
	          enumName,
	          memberName
	        });
	      }

	      seenNames.add(memberName);
	      const context = {
	        enumName,
	        explicitType,
	        memberName
	      };
	      memberNode.id = id;

	      switch (init.type) {
	        case "boolean":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "boolean");
	            memberNode.init = init.value;
	            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
	            break;
	          }

	        case "number":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "number");
	            memberNode.init = init.value;
	            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
	            break;
	          }

	        case "string":
	          {
	            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, "string");
	            memberNode.init = init.value;
	            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
	            break;
	          }

	        case "invalid":
	          {
	            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);
	          }

	        case "none":
	          {
	            switch (explicitType) {
	              case "boolean":
	                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);
	                break;

	              case "number":
	                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);
	                break;

	              default:
	                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
	            }
	          }
	      }

	      if (!this.match(types$1$1.braceR)) {
	        this.expect(types$1$1.comma);
	      }
	    }

	    return {
	      members,
	      hasUnknownMembers
	    };
	  }

	  flowEnumStringMembers(initializedMembers, defaultedMembers, {
	    enumName
	  }) {
	    if (initializedMembers.length === 0) {
	      return defaultedMembers;
	    } else if (defaultedMembers.length === 0) {
	      return initializedMembers;
	    } else if (defaultedMembers.length > initializedMembers.length) {
	      for (const member of initializedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
	          enumName
	        });
	      }

	      return defaultedMembers;
	    } else {
	      for (const member of defaultedMembers) {
	        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {
	          enumName
	        });
	      }

	      return initializedMembers;
	    }
	  }

	  flowEnumParseExplicitType({
	    enumName
	  }) {
	    if (this.eatContextual("of")) {
	      if (!this.match(types$1$1.name)) {
	        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {
	          enumName,
	          suppliedType: null
	        });
	      }

	      const {
	        value
	      } = this.state;
	      this.next();

	      if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
	        this.flowEnumErrorInvalidExplicitType(this.state.start, {
	          enumName,
	          suppliedType: value
	        });
	      }

	      return value;
	    }

	    return null;
	  }

	  flowEnumBody(node, {
	    enumName,
	    nameLoc
	  }) {
	    const explicitType = this.flowEnumParseExplicitType({
	      enumName
	    });
	    this.expect(types$1$1.braceL);
	    const {
	      members,
	      hasUnknownMembers
	    } = this.flowEnumMembers({
	      enumName,
	      explicitType
	    });
	    node.hasUnknownMembers = hasUnknownMembers;

	    switch (explicitType) {
	      case "boolean":
	        node.explicitType = true;
	        node.members = members.booleanMembers;
	        this.expect(types$1$1.braceR);
	        return this.finishNode(node, "EnumBooleanBody");

	      case "number":
	        node.explicitType = true;
	        node.members = members.numberMembers;
	        this.expect(types$1$1.braceR);
	        return this.finishNode(node, "EnumNumberBody");

	      case "string":
	        node.explicitType = true;
	        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	          enumName
	        });
	        this.expect(types$1$1.braceR);
	        return this.finishNode(node, "EnumStringBody");

	      case "symbol":
	        node.members = members.defaultedMembers;
	        this.expect(types$1$1.braceR);
	        return this.finishNode(node, "EnumSymbolBody");

	      default:
	        {
	          const empty = () => {
	            node.members = [];
	            this.expect(types$1$1.braceR);
	            return this.finishNode(node, "EnumStringBody");
	          };

	          node.explicitType = false;
	          const boolsLen = members.booleanMembers.length;
	          const numsLen = members.numberMembers.length;
	          const strsLen = members.stringMembers.length;
	          const defaultedLen = members.defaultedMembers.length;

	          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
	            return empty();
	          } else if (!boolsLen && !numsLen) {
	            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
	              enumName
	            });
	            this.expect(types$1$1.braceR);
	            return this.finishNode(node, "EnumStringBody");
	          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }

	            node.members = members.booleanMembers;
	            this.expect(types$1$1.braceR);
	            return this.finishNode(node, "EnumBooleanBody");
	          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
	            for (const member of members.defaultedMembers) {
	              this.flowEnumErrorNumberMemberNotInitialized(member.start, {
	                enumName,
	                memberName: member.id.name
	              });
	            }

	            node.members = members.numberMembers;
	            this.expect(types$1$1.braceR);
	            return this.finishNode(node, "EnumNumberBody");
	          } else {
	            this.flowEnumErrorInconsistentMemberValues(nameLoc, {
	              enumName
	            });
	            return empty();
	          }
	        }
	    }
	  }

	  flowParseEnumDeclaration(node) {
	    const id = this.parseIdentifier();
	    node.id = id;
	    node.body = this.flowEnumBody(this.startNode(), {
	      enumName: id.name,
	      nameLoc: id.start
	    });
	    return this.finishNode(node, "EnumDeclaration");
	  }

	  isLookaheadToken_lt() {
	    const next = this.nextTokenStart();

	    if (this.input.charCodeAt(next) === 60) {
	      const afterNext = this.input.charCodeAt(next + 1);
	      return afterNext !== 60 && afterNext !== 61;
	    }

	    return false;
	  }

	  maybeUnwrapTypeCastExpression(node) {
	    return node.type === "TypeCastExpression" ? node.expression : node;
	  }

	});

	const entities = {
	  quot: "\u0022",
	  amp: "&",
	  apos: "\u0027",
	  lt: "<",
	  gt: ">",
	  nbsp: "\u00A0",
	  iexcl: "\u00A1",
	  cent: "\u00A2",
	  pound: "\u00A3",
	  curren: "\u00A4",
	  yen: "\u00A5",
	  brvbar: "\u00A6",
	  sect: "\u00A7",
	  uml: "\u00A8",
	  copy: "\u00A9",
	  ordf: "\u00AA",
	  laquo: "\u00AB",
	  not: "\u00AC",
	  shy: "\u00AD",
	  reg: "\u00AE",
	  macr: "\u00AF",
	  deg: "\u00B0",
	  plusmn: "\u00B1",
	  sup2: "\u00B2",
	  sup3: "\u00B3",
	  acute: "\u00B4",
	  micro: "\u00B5",
	  para: "\u00B6",
	  middot: "\u00B7",
	  cedil: "\u00B8",
	  sup1: "\u00B9",
	  ordm: "\u00BA",
	  raquo: "\u00BB",
	  frac14: "\u00BC",
	  frac12: "\u00BD",
	  frac34: "\u00BE",
	  iquest: "\u00BF",
	  Agrave: "\u00C0",
	  Aacute: "\u00C1",
	  Acirc: "\u00C2",
	  Atilde: "\u00C3",
	  Auml: "\u00C4",
	  Aring: "\u00C5",
	  AElig: "\u00C6",
	  Ccedil: "\u00C7",
	  Egrave: "\u00C8",
	  Eacute: "\u00C9",
	  Ecirc: "\u00CA",
	  Euml: "\u00CB",
	  Igrave: "\u00CC",
	  Iacute: "\u00CD",
	  Icirc: "\u00CE",
	  Iuml: "\u00CF",
	  ETH: "\u00D0",
	  Ntilde: "\u00D1",
	  Ograve: "\u00D2",
	  Oacute: "\u00D3",
	  Ocirc: "\u00D4",
	  Otilde: "\u00D5",
	  Ouml: "\u00D6",
	  times: "\u00D7",
	  Oslash: "\u00D8",
	  Ugrave: "\u00D9",
	  Uacute: "\u00DA",
	  Ucirc: "\u00DB",
	  Uuml: "\u00DC",
	  Yacute: "\u00DD",
	  THORN: "\u00DE",
	  szlig: "\u00DF",
	  agrave: "\u00E0",
	  aacute: "\u00E1",
	  acirc: "\u00E2",
	  atilde: "\u00E3",
	  auml: "\u00E4",
	  aring: "\u00E5",
	  aelig: "\u00E6",
	  ccedil: "\u00E7",
	  egrave: "\u00E8",
	  eacute: "\u00E9",
	  ecirc: "\u00EA",
	  euml: "\u00EB",
	  igrave: "\u00EC",
	  iacute: "\u00ED",
	  icirc: "\u00EE",
	  iuml: "\u00EF",
	  eth: "\u00F0",
	  ntilde: "\u00F1",
	  ograve: "\u00F2",
	  oacute: "\u00F3",
	  ocirc: "\u00F4",
	  otilde: "\u00F5",
	  ouml: "\u00F6",
	  divide: "\u00F7",
	  oslash: "\u00F8",
	  ugrave: "\u00F9",
	  uacute: "\u00FA",
	  ucirc: "\u00FB",
	  uuml: "\u00FC",
	  yacute: "\u00FD",
	  thorn: "\u00FE",
	  yuml: "\u00FF",
	  OElig: "\u0152",
	  oelig: "\u0153",
	  Scaron: "\u0160",
	  scaron: "\u0161",
	  Yuml: "\u0178",
	  fnof: "\u0192",
	  circ: "\u02C6",
	  tilde: "\u02DC",
	  Alpha: "\u0391",
	  Beta: "\u0392",
	  Gamma: "\u0393",
	  Delta: "\u0394",
	  Epsilon: "\u0395",
	  Zeta: "\u0396",
	  Eta: "\u0397",
	  Theta: "\u0398",
	  Iota: "\u0399",
	  Kappa: "\u039A",
	  Lambda: "\u039B",
	  Mu: "\u039C",
	  Nu: "\u039D",
	  Xi: "\u039E",
	  Omicron: "\u039F",
	  Pi: "\u03A0",
	  Rho: "\u03A1",
	  Sigma: "\u03A3",
	  Tau: "\u03A4",
	  Upsilon: "\u03A5",
	  Phi: "\u03A6",
	  Chi: "\u03A7",
	  Psi: "\u03A8",
	  Omega: "\u03A9",
	  alpha: "\u03B1",
	  beta: "\u03B2",
	  gamma: "\u03B3",
	  delta: "\u03B4",
	  epsilon: "\u03B5",
	  zeta: "\u03B6",
	  eta: "\u03B7",
	  theta: "\u03B8",
	  iota: "\u03B9",
	  kappa: "\u03BA",
	  lambda: "\u03BB",
	  mu: "\u03BC",
	  nu: "\u03BD",
	  xi: "\u03BE",
	  omicron: "\u03BF",
	  pi: "\u03C0",
	  rho: "\u03C1",
	  sigmaf: "\u03C2",
	  sigma: "\u03C3",
	  tau: "\u03C4",
	  upsilon: "\u03C5",
	  phi: "\u03C6",
	  chi: "\u03C7",
	  psi: "\u03C8",
	  omega: "\u03C9",
	  thetasym: "\u03D1",
	  upsih: "\u03D2",
	  piv: "\u03D6",
	  ensp: "\u2002",
	  emsp: "\u2003",
	  thinsp: "\u2009",
	  zwnj: "\u200C",
	  zwj: "\u200D",
	  lrm: "\u200E",
	  rlm: "\u200F",
	  ndash: "\u2013",
	  mdash: "\u2014",
	  lsquo: "\u2018",
	  rsquo: "\u2019",
	  sbquo: "\u201A",
	  ldquo: "\u201C",
	  rdquo: "\u201D",
	  bdquo: "\u201E",
	  dagger: "\u2020",
	  Dagger: "\u2021",
	  bull: "\u2022",
	  hellip: "\u2026",
	  permil: "\u2030",
	  prime: "\u2032",
	  Prime: "\u2033",
	  lsaquo: "\u2039",
	  rsaquo: "\u203A",
	  oline: "\u203E",
	  frasl: "\u2044",
	  euro: "\u20AC",
	  image: "\u2111",
	  weierp: "\u2118",
	  real: "\u211C",
	  trade: "\u2122",
	  alefsym: "\u2135",
	  larr: "\u2190",
	  uarr: "\u2191",
	  rarr: "\u2192",
	  darr: "\u2193",
	  harr: "\u2194",
	  crarr: "\u21B5",
	  lArr: "\u21D0",
	  uArr: "\u21D1",
	  rArr: "\u21D2",
	  dArr: "\u21D3",
	  hArr: "\u21D4",
	  forall: "\u2200",
	  part: "\u2202",
	  exist: "\u2203",
	  empty: "\u2205",
	  nabla: "\u2207",
	  isin: "\u2208",
	  notin: "\u2209",
	  ni: "\u220B",
	  prod: "\u220F",
	  sum: "\u2211",
	  minus: "\u2212",
	  lowast: "\u2217",
	  radic: "\u221A",
	  prop: "\u221D",
	  infin: "\u221E",
	  ang: "\u2220",
	  and: "\u2227",
	  or: "\u2228",
	  cap: "\u2229",
	  cup: "\u222A",
	  int: "\u222B",
	  there4: "\u2234",
	  sim: "\u223C",
	  cong: "\u2245",
	  asymp: "\u2248",
	  ne: "\u2260",
	  equiv: "\u2261",
	  le: "\u2264",
	  ge: "\u2265",
	  sub: "\u2282",
	  sup: "\u2283",
	  nsub: "\u2284",
	  sube: "\u2286",
	  supe: "\u2287",
	  oplus: "\u2295",
	  otimes: "\u2297",
	  perp: "\u22A5",
	  sdot: "\u22C5",
	  lceil: "\u2308",
	  rceil: "\u2309",
	  lfloor: "\u230A",
	  rfloor: "\u230B",
	  lang: "\u2329",
	  rang: "\u232A",
	  loz: "\u25CA",
	  spades: "\u2660",
	  clubs: "\u2663",
	  hearts: "\u2665",
	  diams: "\u2666"
	};

	class State {
	  constructor() {
	    this.strict = void 0;
	    this.curLine = void 0;
	    this.startLoc = void 0;
	    this.endLoc = void 0;
	    this.errors = [];
	    this.potentialArrowAt = -1;
	    this.noArrowAt = [];
	    this.noArrowParamsConversionAt = [];
	    this.maybeInArrowParameters = false;
	    this.inPipeline = false;
	    this.inType = false;
	    this.noAnonFunctionType = false;
	    this.inPropertyName = false;
	    this.hasFlowComment = false;
	    this.isAmbientContext = false;
	    this.inAbstractClass = false;
	    this.topicContext = {
	      maxNumOfResolvableTopics: 0,
	      maxTopicIndex: null
	    };
	    this.soloAwait = false;
	    this.inFSharpPipelineDirectBody = false;
	    this.labels = [];
	    this.decoratorStack = [[]];
	    this.comments = [];
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];
	    this.commentPreviousNode = null;
	    this.pos = 0;
	    this.lineStart = 0;
	    this.type = types$1$1.eof;
	    this.value = null;
	    this.start = 0;
	    this.end = 0;
	    this.lastTokEndLoc = null;
	    this.lastTokStartLoc = null;
	    this.lastTokStart = 0;
	    this.lastTokEnd = 0;
	    this.context = [types$2.brace];
	    this.exprAllowed = true;
	    this.containsEsc = false;
	    this.strictErrors = new Map();
	    this.tokensLength = 0;
	  }

	  init(options) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";
	    this.curLine = options.startLine;
	    this.startLoc = this.endLoc = this.curPosition();
	  }

	  curPosition() {
	    return new Position(this.curLine, this.pos - this.lineStart);
	  }

	  clone(skipArrays) {
	    const state = new State();
	    const keys = Object.keys(this);

	    for (let i = 0, length = keys.length; i < length; i++) {
	      const key = keys[i];
	      let val = this[key];

	      if (!skipArrays && Array.isArray(val)) {
	        val = val.slice();
	      }

	      state[key] = val;
	    }

	    return state;
	  }

	}

	const HEX_NUMBER = /^[\da-fA-F]+$/;
	const DECIMAL_NUMBER = /^\d+$/;
	const JsxErrors = makeErrorTemplates({
	  AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
	  MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.",
	  MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
	  UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
	  UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
	  UnterminatedJsxContent: "Unterminated JSX contents.",
	  UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
	}, ErrorCodes.SyntaxError);
	types$2.j_oTag = new TokContext("<tag");
	types$2.j_cTag = new TokContext("</tag");
	types$2.j_expr = new TokContext("<tag>...</tag>", true);
	types$1$1.jsxName = new TokenType("jsxName");
	types$1$1.jsxText = new TokenType("jsxText", {
	  beforeExpr: true
	});
	types$1$1.jsxTagStart = new TokenType("jsxTagStart", {
	  startsExpr: true
	});
	types$1$1.jsxTagEnd = new TokenType("jsxTagEnd");

	types$1$1.jsxTagStart.updateContext = context => {
	  context.push(types$2.j_expr, types$2.j_oTag);
	};

	function isFragment(object) {
	  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
	}

	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }

	  throw new Error("Node had unexpected type: " + object.type);
	}

	var jsx = (superClass => class extends superClass {
	  jsxReadToken() {
	    let out = "";
	    let chunkStart = this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);

	      switch (ch) {
	        case 60:
	        case 123:
	          if (this.state.pos === this.state.start) {
	            if (ch === 60 && this.state.exprAllowed) {
	              ++this.state.pos;
	              return this.finishToken(types$1$1.jsxTagStart);
	            }

	            return super.getTokenFromCode(ch);
	          }

	          out += this.input.slice(chunkStart, this.state.pos);
	          return this.finishToken(types$1$1.jsxText, out);

	        case 38:
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadEntity();
	          chunkStart = this.state.pos;
	          break;

	        case 62:
	        case 125:

	        default:
	          if (isNewLine(ch)) {
	            out += this.input.slice(chunkStart, this.state.pos);
	            out += this.jsxReadNewLine(true);
	            chunkStart = this.state.pos;
	          } else {
	            ++this.state.pos;
	          }

	      }
	    }
	  }

	  jsxReadNewLine(normalizeCRLF) {
	    const ch = this.input.charCodeAt(this.state.pos);
	    let out;
	    ++this.state.pos;

	    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	      ++this.state.pos;
	      out = normalizeCRLF ? "\n" : "\r\n";
	    } else {
	      out = String.fromCharCode(ch);
	    }

	    ++this.state.curLine;
	    this.state.lineStart = this.state.pos;
	    return out;
	  }

	  jsxReadString(quote) {
	    let out = "";
	    let chunkStart = ++this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;

	      if (ch === 38) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	      } else if (isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadNewLine(false);
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }

	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(types$1$1.string, out);
	  }

	  jsxReadEntity() {
	    let str = "";
	    let count = 0;
	    let entity;
	    let ch = this.input[this.state.pos];
	    const startPos = ++this.state.pos;

	    while (this.state.pos < this.length && count++ < 10) {
	      ch = this.input[this.state.pos++];

	      if (ch === ";") {
	        if (str[0] === "#") {
	          if (str[1] === "x") {
	            str = str.substr(2);

	            if (HEX_NUMBER.test(str)) {
	              entity = String.fromCodePoint(parseInt(str, 16));
	            }
	          } else {
	            str = str.substr(1);

	            if (DECIMAL_NUMBER.test(str)) {
	              entity = String.fromCodePoint(parseInt(str, 10));
	            }
	          }
	        } else {
	          entity = entities[str];
	        }

	        break;
	      }

	      str += ch;
	    }

	    if (!entity) {
	      this.state.pos = startPos;
	      return "&";
	    }

	    return entity;
	  }

	  jsxReadWord() {
	    let ch;
	    const start = this.state.pos;

	    do {
	      ch = this.input.charCodeAt(++this.state.pos);
	    } while (isIdentifierChar(ch) || ch === 45);

	    return this.finishToken(types$1$1.jsxName, this.input.slice(start, this.state.pos));
	  }

	  jsxParseIdentifier() {
	    const node = this.startNode();

	    if (this.match(types$1$1.jsxName)) {
	      node.name = this.state.value;
	    } else if (this.state.type.keyword) {
	      node.name = this.state.type.keyword;
	    } else {
	      this.unexpected();
	    }

	    this.next();
	    return this.finishNode(node, "JSXIdentifier");
	  }

	  jsxParseNamespacedName() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const name = this.jsxParseIdentifier();
	    if (!this.eat(types$1$1.colon)) return name;
	    const node = this.startNodeAt(startPos, startLoc);
	    node.namespace = name;
	    node.name = this.jsxParseIdentifier();
	    return this.finishNode(node, "JSXNamespacedName");
	  }

	  jsxParseElementName() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let node = this.jsxParseNamespacedName();

	    if (node.type === "JSXNamespacedName") {
	      return node;
	    }

	    while (this.eat(types$1$1.dot)) {
	      const newNode = this.startNodeAt(startPos, startLoc);
	      newNode.object = node;
	      newNode.property = this.jsxParseIdentifier();
	      node = this.finishNode(newNode, "JSXMemberExpression");
	    }

	    return node;
	  }

	  jsxParseAttributeValue() {
	    let node;

	    switch (this.state.type) {
	      case types$1$1.braceL:
	        node = this.startNode();
	        this.next();
	        node = this.jsxParseExpressionContainer(node);

	        if (node.expression.type === "JSXEmptyExpression") {
	          this.raise(node.start, JsxErrors.AttributeIsEmpty);
	        }

	        return node;

	      case types$1$1.jsxTagStart:
	      case types$1$1.string:
	        return this.parseExprAtom();

	      default:
	        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);
	    }
	  }

	  jsxParseEmptyExpression() {
	    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
	    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.start, this.state.startLoc);
	  }

	  jsxParseSpreadChild(node) {
	    this.next();
	    node.expression = this.parseExpression();
	    this.expect(types$1$1.braceR);
	    return this.finishNode(node, "JSXSpreadChild");
	  }

	  jsxParseExpressionContainer(node) {
	    if (this.match(types$1$1.braceR)) {
	      node.expression = this.jsxParseEmptyExpression();
	    } else {
	      const expression = this.parseExpression();
	      node.expression = expression;
	    }

	    this.expect(types$1$1.braceR);
	    return this.finishNode(node, "JSXExpressionContainer");
	  }

	  jsxParseAttribute() {
	    const node = this.startNode();

	    if (this.eat(types$1$1.braceL)) {
	      this.expect(types$1$1.ellipsis);
	      node.argument = this.parseMaybeAssignAllowIn();
	      this.expect(types$1$1.braceR);
	      return this.finishNode(node, "JSXSpreadAttribute");
	    }

	    node.name = this.jsxParseNamespacedName();
	    node.value = this.eat(types$1$1.eq) ? this.jsxParseAttributeValue() : null;
	    return this.finishNode(node, "JSXAttribute");
	  }

	  jsxParseOpeningElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);

	    if (this.match(types$1$1.jsxTagEnd)) {
	      this.expect(types$1$1.jsxTagEnd);
	      return this.finishNode(node, "JSXOpeningFragment");
	    }

	    node.name = this.jsxParseElementName();
	    return this.jsxParseOpeningElementAfterName(node);
	  }

	  jsxParseOpeningElementAfterName(node) {
	    const attributes = [];

	    while (!this.match(types$1$1.slash) && !this.match(types$1$1.jsxTagEnd)) {
	      attributes.push(this.jsxParseAttribute());
	    }

	    node.attributes = attributes;
	    node.selfClosing = this.eat(types$1$1.slash);
	    this.expect(types$1$1.jsxTagEnd);
	    return this.finishNode(node, "JSXOpeningElement");
	  }

	  jsxParseClosingElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);

	    if (this.match(types$1$1.jsxTagEnd)) {
	      this.expect(types$1$1.jsxTagEnd);
	      return this.finishNode(node, "JSXClosingFragment");
	    }

	    node.name = this.jsxParseElementName();
	    this.expect(types$1$1.jsxTagEnd);
	    return this.finishNode(node, "JSXClosingElement");
	  }

	  jsxParseElementAt(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    const children = [];
	    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	    let closingElement = null;

	    if (!openingElement.selfClosing) {
	      contents: for (;;) {
	        switch (this.state.type) {
	          case types$1$1.jsxTagStart:
	            startPos = this.state.start;
	            startLoc = this.state.startLoc;
	            this.next();

	            if (this.eat(types$1$1.slash)) {
	              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	              break contents;
	            }

	            children.push(this.jsxParseElementAt(startPos, startLoc));
	            break;

	          case types$1$1.jsxText:
	            children.push(this.parseExprAtom());
	            break;

	          case types$1$1.braceL:
	            {
	              const node = this.startNode();
	              this.next();

	              if (this.match(types$1$1.ellipsis)) {
	                children.push(this.jsxParseSpreadChild(node));
	              } else {
	                children.push(this.jsxParseExpressionContainer(node));
	              }

	              break;
	            }

	          default:
	            throw this.unexpected();
	        }
	      }

	      if (isFragment(openingElement) && !isFragment(closingElement)) {
	        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);
	      } else if (!isFragment(openingElement) && isFragment(closingElement)) {
	        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
	      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
	        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));
	        }
	      }
	    }

	    if (isFragment(openingElement)) {
	      node.openingFragment = openingElement;
	      node.closingFragment = closingElement;
	    } else {
	      node.openingElement = openingElement;
	      node.closingElement = closingElement;
	    }

	    node.children = children;

	    if (this.isRelational("<")) {
	      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);
	    }

	    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
	  }

	  jsxParseElement() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    this.next();
	    return this.jsxParseElementAt(startPos, startLoc);
	  }

	  parseExprAtom(refExpressionErrors) {
	    if (this.match(types$1$1.jsxText)) {
	      return this.parseLiteral(this.state.value, "JSXText");
	    } else if (this.match(types$1$1.jsxTagStart)) {
	      return this.jsxParseElement();
	    } else if (this.isRelational("<") && this.input.charCodeAt(this.state.pos) !== 33) {
	      this.finishToken(types$1$1.jsxTagStart);
	      return this.jsxParseElement();
	    } else {
	      return super.parseExprAtom(refExpressionErrors);
	    }
	  }

	  createLookaheadState(state) {
	    const lookaheadState = super.createLookaheadState(state);
	    lookaheadState.inPropertyName = state.inPropertyName;
	    return lookaheadState;
	  }

	  getTokenFromCode(code) {
	    if (this.state.inPropertyName) return super.getTokenFromCode(code);
	    const context = this.curContext();

	    if (context === types$2.j_expr) {
	      return this.jsxReadToken();
	    }

	    if (context === types$2.j_oTag || context === types$2.j_cTag) {
	      if (isIdentifierStart(code)) {
	        return this.jsxReadWord();
	      }

	      if (code === 62) {
	        ++this.state.pos;
	        return this.finishToken(types$1$1.jsxTagEnd);
	      }

	      if ((code === 34 || code === 39) && context === types$2.j_oTag) {
	        return this.jsxReadString(code);
	      }
	    }

	    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {
	      ++this.state.pos;
	      return this.finishToken(types$1$1.jsxTagStart);
	    }

	    return super.getTokenFromCode(code);
	  }

	  updateContext(prevType) {
	    super.updateContext(prevType);
	    const {
	      context,
	      type
	    } = this.state;

	    if (type === types$1$1.slash && prevType === types$1$1.jsxTagStart) {
	      context.splice(-2, 2, types$2.j_cTag);
	      this.state.exprAllowed = false;
	    } else if (type === types$1$1.jsxTagEnd) {
	      const out = context.pop();

	      if (out === types$2.j_oTag && prevType === types$1$1.slash || out === types$2.j_cTag) {
	        context.pop();
	        this.state.exprAllowed = context[context.length - 1] === types$2.j_expr;
	      } else {
	        this.state.exprAllowed = true;
	      }
	    } else if (type.keyword && (prevType === types$1$1.dot || prevType === types$1$1.questionDot)) {
	      this.state.exprAllowed = false;
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  }

	});

	class TypeScriptScope extends Scope {
	  constructor(...args) {
	    super(...args);
	    this.types = new Set();
	    this.enums = new Set();
	    this.constEnums = new Set();
	    this.classes = new Set();
	    this.exportOnlyBindings = new Set();
	  }

	}

	class TypeScriptScopeHandler extends ScopeHandler {
	  createScope(flags) {
	    return new TypeScriptScope(flags);
	  }

	  declareName(name, bindingType, pos) {
	    const scope = this.currentScope();

	    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
	      this.maybeExportDefined(scope, name);
	      scope.exportOnlyBindings.add(name);
	      return;
	    }

	    super.declareName(...arguments);

	    if (bindingType & BIND_KIND_TYPE) {
	      if (!(bindingType & BIND_KIND_VALUE)) {
	        this.checkRedeclarationInScope(scope, name, bindingType, pos);
	        this.maybeExportDefined(scope, name);
	      }

	      scope.types.add(name);
	    }

	    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);
	    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);
	    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);
	  }

	  isRedeclaredInScope(scope, name, bindingType) {
	    if (scope.enums.has(name)) {
	      if (bindingType & BIND_FLAGS_TS_ENUM) {
	        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
	        const wasConst = scope.constEnums.has(name);
	        return isConst !== wasConst;
	      }

	      return true;
	    }

	    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
	      if (scope.lexical.has(name)) {
	        return !!(bindingType & BIND_KIND_VALUE);
	      } else {
	        return false;
	      }
	    }

	    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
	      return true;
	    }

	    return super.isRedeclaredInScope(...arguments);
	  }

	  checkLocalExport(id) {
	    const topLevelScope = this.scopeStack[0];
	    const {
	      name
	    } = id;

	    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
	      super.checkLocalExport(id);
	    }
	  }

	}

	const PARAM = 0b0000,
	      PARAM_YIELD = 0b0001,
	      PARAM_AWAIT = 0b0010,
	      PARAM_RETURN = 0b0100,
	      PARAM_IN = 0b1000;
	class ProductionParameterHandler {
	  constructor() {
	    this.stacks = [];
	  }

	  enter(flags) {
	    this.stacks.push(flags);
	  }

	  exit() {
	    this.stacks.pop();
	  }

	  currentFlags() {
	    return this.stacks[this.stacks.length - 1];
	  }

	  get hasAwait() {
	    return (this.currentFlags() & PARAM_AWAIT) > 0;
	  }

	  get hasYield() {
	    return (this.currentFlags() & PARAM_YIELD) > 0;
	  }

	  get hasReturn() {
	    return (this.currentFlags() & PARAM_RETURN) > 0;
	  }

	  get hasIn() {
	    return (this.currentFlags() & PARAM_IN) > 0;
	  }

	}
	function functionFlags(isAsync, isGenerator) {
	  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
	}

	function nonNull(x) {
	  if (x == null) {
	    throw new Error(`Unexpected ${x} value.`);
	  }

	  return x;
	}

	function assert$1(x) {
	  if (!x) {
	    throw new Error("Assert fail");
	  }
	}

	const TSErrors = makeErrorTemplates({
	  AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.",
	  AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
	  AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
	  ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
	  ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
	  ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
	  DeclareAccessor: "'declare' is not allowed in %0ters.",
	  DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
	  DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
	  DuplicateAccessibilityModifier: "Accessibility modifier already seen.",
	  DuplicateModifier: "Duplicate modifier: '%0'.",
	  EmptyHeritageClauseType: "'%0' list cannot be empty.",
	  EmptyTypeArguments: "Type argument list cannot be empty.",
	  EmptyTypeParameters: "Type parameter list cannot be empty.",
	  ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
	  ImportAliasHasImportType: "An import alias can not use 'import type'.",
	  IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.",
	  IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
	  IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').",
	  IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
	  IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
	  IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
	  InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.",
	  InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.",
	  InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
	  MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.",
	  NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
	  NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
	  OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
	  OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
	  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
	  PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
	  PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').",
	  ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
	  SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
	  SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
	  SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
	  StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
	  TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
	  TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
	  UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
	  UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
	  UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
	  UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
	  UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
	  UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
	  UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."
	}, ErrorCodes.SyntaxError);

	function keywordTypeFromName(value) {
	  switch (value) {
	    case "any":
	      return "TSAnyKeyword";

	    case "boolean":
	      return "TSBooleanKeyword";

	    case "bigint":
	      return "TSBigIntKeyword";

	    case "never":
	      return "TSNeverKeyword";

	    case "number":
	      return "TSNumberKeyword";

	    case "object":
	      return "TSObjectKeyword";

	    case "string":
	      return "TSStringKeyword";

	    case "symbol":
	      return "TSSymbolKeyword";

	    case "undefined":
	      return "TSUndefinedKeyword";

	    case "unknown":
	      return "TSUnknownKeyword";

	    default:
	      return undefined;
	  }
	}

	function tsIsAccessModifier(modifier) {
	  return modifier === "private" || modifier === "public" || modifier === "protected";
	}

	var typescript = (superClass => class extends superClass {
	  getScopeHandler() {
	    return TypeScriptScopeHandler;
	  }

	  tsIsIdentifier() {
	    return this.match(types$1$1.name);
	  }

	  tsTokenCanFollowModifier() {
	    return (this.match(types$1$1.bracketL) || this.match(types$1$1.braceL) || this.match(types$1$1.star) || this.match(types$1$1.ellipsis) || this.match(types$1$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
	  }

	  tsNextTokenCanFollowModifier() {
	    this.next();
	    return this.tsTokenCanFollowModifier();
	  }

	  tsParseModifier(allowedModifiers) {
	    if (!this.match(types$1$1.name)) {
	      return undefined;
	    }

	    const modifier = this.state.value;

	    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
	      return modifier;
	    }

	    return undefined;
	  }

	  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {
	    const enforceOrder = (pos, modifier, before, after) => {
	      if (modifier === before && modified[after]) {
	        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);
	      }
	    };

	    const incompatible = (pos, modifier, mod1, mod2) => {
	      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
	        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);
	      }
	    };

	    for (;;) {
	      const startPos = this.state.start;
	      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));
	      if (!modifier) break;

	      if (tsIsAccessModifier(modifier)) {
	        if (modified.accessibility) {
	          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);
	        } else {
	          enforceOrder(startPos, modifier, modifier, "override");
	          enforceOrder(startPos, modifier, modifier, "static");
	          enforceOrder(startPos, modifier, modifier, "readonly");
	          modified.accessibility = modifier;
	        }
	      } else {
	        if (Object.hasOwnProperty.call(modified, modifier)) {
	          this.raise(startPos, TSErrors.DuplicateModifier, modifier);
	        } else {
	          enforceOrder(startPos, modifier, "static", "readonly");
	          enforceOrder(startPos, modifier, "static", "override");
	          enforceOrder(startPos, modifier, "override", "readonly");
	          enforceOrder(startPos, modifier, "abstract", "override");
	          incompatible(startPos, modifier, "declare", "override");
	          incompatible(startPos, modifier, "static", "abstract");
	        }

	        modified[modifier] = true;
	      }

	      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
	        this.raise(startPos, errorTemplate, modifier);
	      }
	    }
	  }

	  tsIsListTerminator(kind) {
	    switch (kind) {
	      case "EnumMembers":
	      case "TypeMembers":
	        return this.match(types$1$1.braceR);

	      case "HeritageClauseElement":
	        return this.match(types$1$1.braceL);

	      case "TupleElementTypes":
	        return this.match(types$1$1.bracketR);

	      case "TypeParametersOrArguments":
	        return this.isRelational(">");
	    }

	    throw new Error("Unreachable");
	  }

	  tsParseList(kind, parseElement) {
	    const result = [];

	    while (!this.tsIsListTerminator(kind)) {
	      result.push(parseElement());
	    }

	    return result;
	  }

	  tsParseDelimitedList(kind, parseElement) {
	    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));
	  }

	  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {
	    const result = [];

	    for (;;) {
	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }

	      const element = parseElement();

	      if (element == null) {
	        return undefined;
	      }

	      result.push(element);

	      if (this.eat(types$1$1.comma)) {
	        continue;
	      }

	      if (this.tsIsListTerminator(kind)) {
	        break;
	      }

	      if (expectSuccess) {
	        this.expect(types$1$1.comma);
	      }

	      return undefined;
	    }

	    return result;
	  }

	  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {
	    if (!skipFirstToken) {
	      if (bracket) {
	        this.expect(types$1$1.bracketL);
	      } else {
	        this.expectRelational("<");
	      }
	    }

	    const result = this.tsParseDelimitedList(kind, parseElement);

	    if (bracket) {
	      this.expect(types$1$1.bracketR);
	    } else {
	      this.expectRelational(">");
	    }

	    return result;
	  }

	  tsParseImportType() {
	    const node = this.startNode();
	    this.expect(types$1$1._import);
	    this.expect(types$1$1.parenL);

	    if (!this.match(types$1$1.string)) {
	      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);
	    }

	    node.argument = this.parseExprAtom();
	    this.expect(types$1$1.parenR);

	    if (this.eat(types$1$1.dot)) {
	      node.qualifier = this.tsParseEntityName(true);
	    }

	    if (this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSImportType");
	  }

	  tsParseEntityName(allowReservedWords) {
	    let entity = this.parseIdentifier();

	    while (this.eat(types$1$1.dot)) {
	      const node = this.startNodeAtNode(entity);
	      node.left = entity;
	      node.right = this.parseIdentifier(allowReservedWords);
	      entity = this.finishNode(node, "TSQualifiedName");
	    }

	    return entity;
	  }

	  tsParseTypeReference() {
	    const node = this.startNode();
	    node.typeName = this.tsParseEntityName(false);

	    if (!this.hasPrecedingLineBreak() && this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSTypeReference");
	  }

	  tsParseThisTypePredicate(lhs) {
	    this.next();
	    const node = this.startNodeAtNode(lhs);
	    node.parameterName = lhs;
	    node.typeAnnotation = this.tsParseTypeAnnotation(false);
	    node.asserts = false;
	    return this.finishNode(node, "TSTypePredicate");
	  }

	  tsParseThisTypeNode() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "TSThisType");
	  }

	  tsParseTypeQuery() {
	    const node = this.startNode();
	    this.expect(types$1$1._typeof);

	    if (this.match(types$1$1._import)) {
	      node.exprName = this.tsParseImportType();
	    } else {
	      node.exprName = this.tsParseEntityName(true);
	    }

	    return this.finishNode(node, "TSTypeQuery");
	  }

	  tsParseTypeParameter() {
	    const node = this.startNode();
	    node.name = this.parseIdentifierName(node.start);
	    node.constraint = this.tsEatThenParseType(types$1$1._extends);
	    node.default = this.tsEatThenParseType(types$1$1.eq);
	    return this.finishNode(node, "TSTypeParameter");
	  }

	  tsTryParseTypeParameters() {
	    if (this.isRelational("<")) {
	      return this.tsParseTypeParameters();
	    }
	  }

	  tsParseTypeParameters() {
	    const node = this.startNode();

	    if (this.isRelational("<") || this.match(types$1$1.jsxTagStart)) {
	      this.next();
	    } else {
	      this.unexpected();
	    }

	    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true);

	    if (node.params.length === 0) {
	      this.raise(node.start, TSErrors.EmptyTypeParameters);
	    }

	    return this.finishNode(node, "TSTypeParameterDeclaration");
	  }

	  tsTryNextParseConstantContext() {
	    if (this.lookahead().type === types$1$1._const) {
	      this.next();
	      return this.tsParseTypeReference();
	    }

	    return null;
	  }

	  tsFillSignature(returnToken, signature) {
	    const returnTokenRequired = returnToken === types$1$1.arrow;
	    signature.typeParameters = this.tsTryParseTypeParameters();
	    this.expect(types$1$1.parenL);
	    signature.parameters = this.tsParseBindingListForSignature();

	    if (returnTokenRequired) {
	      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    } else if (this.match(returnToken)) {
	      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
	    }
	  }

	  tsParseBindingListForSignature() {
	    return this.parseBindingList(types$1$1.parenR, 41).map(pattern => {
	      if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
	        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);
	      }

	      return pattern;
	    });
	  }

	  tsParseTypeMemberSemicolon() {
	    if (!this.eat(types$1$1.comma) && !this.isLineTerminator()) {
	      this.expect(types$1$1.semi);
	    }
	  }

	  tsParseSignatureMember(kind, node) {
	    this.tsFillSignature(types$1$1.colon, node);
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, kind);
	  }

	  tsIsUnambiguouslyIndexSignature() {
	    this.next();
	    return this.eat(types$1$1.name) && this.match(types$1$1.colon);
	  }

	  tsTryParseIndexSignature(node) {
	    if (!(this.match(types$1$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
	      return undefined;
	    }

	    this.expect(types$1$1.bracketL);
	    const id = this.parseIdentifier();
	    id.typeAnnotation = this.tsParseTypeAnnotation();
	    this.resetEndLocation(id);
	    this.expect(types$1$1.bracketR);
	    node.parameters = [id];
	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	    this.tsParseTypeMemberSemicolon();
	    return this.finishNode(node, "TSIndexSignature");
	  }

	  tsParsePropertyOrMethodSignature(node, readonly) {
	    if (this.eat(types$1$1.question)) node.optional = true;
	    const nodeAny = node;

	    if (this.match(types$1$1.parenL) || this.isRelational("<")) {
	      if (readonly) {
	        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);
	      }

	      const method = nodeAny;

	      if (method.kind && this.isRelational("<")) {
	        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);
	      }

	      this.tsFillSignature(types$1$1.colon, method);
	      this.tsParseTypeMemberSemicolon();

	      if (method.kind === "get") {
	        if (method.parameters.length > 0) {
	          this.raise(this.state.pos, ErrorMessages.BadGetterArity);

	          if (this.isThisParam(method.parameters[0])) {
	            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
	          }
	        }
	      } else if (method.kind === "set") {
	        if (method.parameters.length !== 1) {
	          this.raise(this.state.pos, ErrorMessages.BadSetterArity);
	        } else {
	          const firstParameter = method.parameters[0];

	          if (this.isThisParam(firstParameter)) {
	            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);
	          }

	          if (firstParameter.type === "Identifier" && firstParameter.optional) {
	            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);
	          }

	          if (firstParameter.type === "RestElement") {
	            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);
	          }
	        }

	        if (method.typeAnnotation) {
	          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);
	        }
	      } else {
	        method.kind = "method";
	      }

	      return this.finishNode(method, "TSMethodSignature");
	    } else {
	      const property = nodeAny;
	      if (readonly) property.readonly = true;
	      const type = this.tsTryParseTypeAnnotation();
	      if (type) property.typeAnnotation = type;
	      this.tsParseTypeMemberSemicolon();
	      return this.finishNode(property, "TSPropertySignature");
	    }
	  }

	  tsParseTypeMember() {
	    const node = this.startNode();

	    if (this.match(types$1$1.parenL) || this.isRelational("<")) {
	      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
	    }

	    if (this.match(types$1$1._new)) {
	      const id = this.startNode();
	      this.next();

	      if (this.match(types$1$1.parenL) || this.isRelational("<")) {
	        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
	      } else {
	        node.key = this.createIdentifier(id, "new");
	        return this.tsParsePropertyOrMethodSignature(node, false);
	      }
	    }

	    this.tsParseModifiers(node, ["readonly"], ["declare", "abstract", "private", "protected", "public", "static", "override"], TSErrors.InvalidModifierOnTypeMember);
	    const idx = this.tsTryParseIndexSignature(node);

	    if (idx) {
	      return idx;
	    }

	    this.parsePropertyName(node, false);

	    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
	      node.kind = node.key.name;
	      this.parsePropertyName(node, false);
	    }

	    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
	  }

	  tsParseTypeLiteral() {
	    const node = this.startNode();
	    node.members = this.tsParseObjectTypeMembers();
	    return this.finishNode(node, "TSTypeLiteral");
	  }

	  tsParseObjectTypeMembers() {
	    this.expect(types$1$1.braceL);
	    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
	    this.expect(types$1$1.braceR);
	    return members;
	  }

	  tsIsStartOfMappedType() {
	    this.next();

	    if (this.eat(types$1$1.plusMin)) {
	      return this.isContextual("readonly");
	    }

	    if (this.isContextual("readonly")) {
	      this.next();
	    }

	    if (!this.match(types$1$1.bracketL)) {
	      return false;
	    }

	    this.next();

	    if (!this.tsIsIdentifier()) {
	      return false;
	    }

	    this.next();
	    return this.match(types$1$1._in);
	  }

	  tsParseMappedTypeParameter() {
	    const node = this.startNode();
	    node.name = this.parseIdentifierName(node.start);
	    node.constraint = this.tsExpectThenParseType(types$1$1._in);
	    return this.finishNode(node, "TSTypeParameter");
	  }

	  tsParseMappedType() {
	    const node = this.startNode();
	    this.expect(types$1$1.braceL);

	    if (this.match(types$1$1.plusMin)) {
	      node.readonly = this.state.value;
	      this.next();
	      this.expectContextual("readonly");
	    } else if (this.eatContextual("readonly")) {
	      node.readonly = true;
	    }

	    this.expect(types$1$1.bracketL);
	    node.typeParameter = this.tsParseMappedTypeParameter();
	    node.nameType = this.eatContextual("as") ? this.tsParseType() : null;
	    this.expect(types$1$1.bracketR);

	    if (this.match(types$1$1.plusMin)) {
	      node.optional = this.state.value;
	      this.next();
	      this.expect(types$1$1.question);
	    } else if (this.eat(types$1$1.question)) {
	      node.optional = true;
	    }

	    node.typeAnnotation = this.tsTryParseType();
	    this.semicolon();
	    this.expect(types$1$1.braceR);
	    return this.finishNode(node, "TSMappedType");
	  }

	  tsParseTupleType() {
	    const node = this.startNode();
	    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
	    let seenOptionalElement = false;
	    let labeledElements = null;
	    node.elementTypes.forEach(elementNode => {
	      var _labeledElements;

	      let {
	        type
	      } = elementNode;

	      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
	        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);
	      }

	      seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";

	      if (type === "TSRestType") {
	        elementNode = elementNode.typeAnnotation;
	        type = elementNode.type;
	      }

	      const isLabeled = type === "TSNamedTupleMember";
	      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;

	      if (labeledElements !== isLabeled) {
	        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);
	      }
	    });
	    return this.finishNode(node, "TSTupleType");
	  }

	  tsParseTupleElementType() {
	    const {
	      start: startPos,
	      startLoc
	    } = this.state;
	    const rest = this.eat(types$1$1.ellipsis);
	    let type = this.tsParseType();
	    const optional = this.eat(types$1$1.question);
	    const labeled = this.eat(types$1$1.colon);

	    if (labeled) {
	      const labeledNode = this.startNodeAtNode(type);
	      labeledNode.optional = optional;

	      if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
	        labeledNode.label = type.typeName;
	      } else {
	        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);
	        labeledNode.label = type;
	      }

	      labeledNode.elementType = this.tsParseType();
	      type = this.finishNode(labeledNode, "TSNamedTupleMember");
	    } else if (optional) {
	      const optionalTypeNode = this.startNodeAtNode(type);
	      optionalTypeNode.typeAnnotation = type;
	      type = this.finishNode(optionalTypeNode, "TSOptionalType");
	    }

	    if (rest) {
	      const restNode = this.startNodeAt(startPos, startLoc);
	      restNode.typeAnnotation = type;
	      type = this.finishNode(restNode, "TSRestType");
	    }

	    return type;
	  }

	  tsParseParenthesizedType() {
	    const node = this.startNode();
	    this.expect(types$1$1.parenL);
	    node.typeAnnotation = this.tsParseType();
	    this.expect(types$1$1.parenR);
	    return this.finishNode(node, "TSParenthesizedType");
	  }

	  tsParseFunctionOrConstructorType(type, abstract) {
	    const node = this.startNode();

	    if (type === "TSConstructorType") {
	      node.abstract = !!abstract;
	      if (abstract) this.next();
	      this.next();
	    }

	    this.tsFillSignature(types$1$1.arrow, node);
	    return this.finishNode(node, type);
	  }

	  tsParseLiteralTypeNode() {
	    const node = this.startNode();

	    node.literal = (() => {
	      switch (this.state.type) {
	        case types$1$1.num:
	        case types$1$1.bigint:
	        case types$1$1.string:
	        case types$1$1._true:
	        case types$1$1._false:
	          return this.parseExprAtom();

	        default:
	          throw this.unexpected();
	      }
	    })();

	    return this.finishNode(node, "TSLiteralType");
	  }

	  tsParseTemplateLiteralType() {
	    const node = this.startNode();
	    node.literal = this.parseTemplate(false);
	    return this.finishNode(node, "TSLiteralType");
	  }

	  parseTemplateSubstitution() {
	    if (this.state.inType) return this.tsParseType();
	    return super.parseTemplateSubstitution();
	  }

	  tsParseThisTypeOrThisTypePredicate() {
	    const thisKeyword = this.tsParseThisTypeNode();

	    if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
	      return this.tsParseThisTypePredicate(thisKeyword);
	    } else {
	      return thisKeyword;
	    }
	  }

	  tsParseNonArrayType() {
	    switch (this.state.type) {
	      case types$1$1.name:
	      case types$1$1._void:
	      case types$1$1._null:
	        {
	          const type = this.match(types$1$1._void) ? "TSVoidKeyword" : this.match(types$1$1._null) ? "TSNullKeyword" : keywordTypeFromName(this.state.value);

	          if (type !== undefined && this.lookaheadCharCode() !== 46) {
	            const node = this.startNode();
	            this.next();
	            return this.finishNode(node, type);
	          }

	          return this.tsParseTypeReference();
	        }

	      case types$1$1.string:
	      case types$1$1.num:
	      case types$1$1.bigint:
	      case types$1$1._true:
	      case types$1$1._false:
	        return this.tsParseLiteralTypeNode();

	      case types$1$1.plusMin:
	        if (this.state.value === "-") {
	          const node = this.startNode();
	          const nextToken = this.lookahead();

	          if (nextToken.type !== types$1$1.num && nextToken.type !== types$1$1.bigint) {
	            throw this.unexpected();
	          }

	          node.literal = this.parseMaybeUnary();
	          return this.finishNode(node, "TSLiteralType");
	        }

	        break;

	      case types$1$1._this:
	        return this.tsParseThisTypeOrThisTypePredicate();

	      case types$1$1._typeof:
	        return this.tsParseTypeQuery();

	      case types$1$1._import:
	        return this.tsParseImportType();

	      case types$1$1.braceL:
	        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();

	      case types$1$1.bracketL:
	        return this.tsParseTupleType();

	      case types$1$1.parenL:
	        return this.tsParseParenthesizedType();

	      case types$1$1.backQuote:
	        return this.tsParseTemplateLiteralType();
	    }

	    throw this.unexpected();
	  }

	  tsParseArrayTypeOrHigher() {
	    let type = this.tsParseNonArrayType();

	    while (!this.hasPrecedingLineBreak() && this.eat(types$1$1.bracketL)) {
	      if (this.match(types$1$1.bracketR)) {
	        const node = this.startNodeAtNode(type);
	        node.elementType = type;
	        this.expect(types$1$1.bracketR);
	        type = this.finishNode(node, "TSArrayType");
	      } else {
	        const node = this.startNodeAtNode(type);
	        node.objectType = type;
	        node.indexType = this.tsParseType();
	        this.expect(types$1$1.bracketR);
	        type = this.finishNode(node, "TSIndexedAccessType");
	      }
	    }

	    return type;
	  }

	  tsParseTypeOperator(operator) {
	    const node = this.startNode();
	    this.expectContextual(operator);
	    node.operator = operator;
	    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();

	    if (operator === "readonly") {
	      this.tsCheckTypeAnnotationForReadOnly(node);
	    }

	    return this.finishNode(node, "TSTypeOperator");
	  }

	  tsCheckTypeAnnotationForReadOnly(node) {
	    switch (node.typeAnnotation.type) {
	      case "TSTupleType":
	      case "TSArrayType":
	        return;

	      default:
	        this.raise(node.start, TSErrors.UnexpectedReadonly);
	    }
	  }

	  tsParseInferType() {
	    const node = this.startNode();
	    this.expectContextual("infer");
	    const typeParameter = this.startNode();
	    typeParameter.name = this.parseIdentifierName(typeParameter.start);
	    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
	    return this.finishNode(node, "TSInferType");
	  }

	  tsParseTypeOperatorOrHigher() {
	    const operator = ["keyof", "unique", "readonly"].find(kw => this.isContextual(kw));
	    return operator ? this.tsParseTypeOperator(operator) : this.isContextual("infer") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
	  }

	  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
	    const node = this.startNode();
	    const hasLeadingOperator = this.eat(operator);
	    const types = [];

	    do {
	      types.push(parseConstituentType());
	    } while (this.eat(operator));

	    if (types.length === 1 && !hasLeadingOperator) {
	      return types[0];
	    }

	    node.types = types;
	    return this.finishNode(node, kind);
	  }

	  tsParseIntersectionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), types$1$1.bitwiseAND);
	  }

	  tsParseUnionTypeOrHigher() {
	    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), types$1$1.bitwiseOR);
	  }

	  tsIsStartOfFunctionType() {
	    if (this.isRelational("<")) {
	      return true;
	    }

	    return this.match(types$1$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
	  }

	  tsSkipParameterStart() {
	    if (this.match(types$1$1.name) || this.match(types$1$1._this)) {
	      this.next();
	      return true;
	    }

	    if (this.match(types$1$1.braceL)) {
	      let braceStackCounter = 1;
	      this.next();

	      while (braceStackCounter > 0) {
	        if (this.match(types$1$1.braceL)) {
	          ++braceStackCounter;
	        } else if (this.match(types$1$1.braceR)) {
	          --braceStackCounter;
	        }

	        this.next();
	      }

	      return true;
	    }

	    if (this.match(types$1$1.bracketL)) {
	      let braceStackCounter = 1;
	      this.next();

	      while (braceStackCounter > 0) {
	        if (this.match(types$1$1.bracketL)) {
	          ++braceStackCounter;
	        } else if (this.match(types$1$1.bracketR)) {
	          --braceStackCounter;
	        }

	        this.next();
	      }

	      return true;
	    }

	    return false;
	  }

	  tsIsUnambiguouslyStartOfFunctionType() {
	    this.next();

	    if (this.match(types$1$1.parenR) || this.match(types$1$1.ellipsis)) {
	      return true;
	    }

	    if (this.tsSkipParameterStart()) {
	      if (this.match(types$1$1.colon) || this.match(types$1$1.comma) || this.match(types$1$1.question) || this.match(types$1$1.eq)) {
	        return true;
	      }

	      if (this.match(types$1$1.parenR)) {
	        this.next();

	        if (this.match(types$1$1.arrow)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  tsParseTypeOrTypePredicateAnnotation(returnToken) {
	    return this.tsInType(() => {
	      const t = this.startNode();
	      this.expect(returnToken);
	      const node = this.startNode();
	      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));

	      if (asserts && this.match(types$1$1._this)) {
	        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();

	        if (thisTypePredicate.type === "TSThisType") {
	          node.parameterName = thisTypePredicate;
	          node.asserts = true;
	          node.typeAnnotation = null;
	          thisTypePredicate = this.finishNode(node, "TSTypePredicate");
	        } else {
	          this.resetStartLocationFromNode(thisTypePredicate, node);
	          thisTypePredicate.asserts = true;
	        }

	        t.typeAnnotation = thisTypePredicate;
	        return this.finishNode(t, "TSTypeAnnotation");
	      }

	      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

	      if (!typePredicateVariable) {
	        if (!asserts) {
	          return this.tsParseTypeAnnotation(false, t);
	        }

	        node.parameterName = this.parseIdentifier();
	        node.asserts = asserts;
	        node.typeAnnotation = null;
	        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	        return this.finishNode(t, "TSTypeAnnotation");
	      }

	      const type = this.tsParseTypeAnnotation(false);
	      node.parameterName = typePredicateVariable;
	      node.typeAnnotation = type;
	      node.asserts = asserts;
	      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
	      return this.finishNode(t, "TSTypeAnnotation");
	    });
	  }

	  tsTryParseTypeOrTypePredicateAnnotation() {
	    return this.match(types$1$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1$1.colon) : undefined;
	  }

	  tsTryParseTypeAnnotation() {
	    return this.match(types$1$1.colon) ? this.tsParseTypeAnnotation() : undefined;
	  }

	  tsTryParseType() {
	    return this.tsEatThenParseType(types$1$1.colon);
	  }

	  tsParseTypePredicatePrefix() {
	    const id = this.parseIdentifier();

	    if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
	      this.next();
	      return id;
	    }
	  }

	  tsParseTypePredicateAsserts() {
	    if (!this.match(types$1$1.name) || this.state.value !== "asserts" || this.hasPrecedingLineBreak()) {
	      return false;
	    }

	    const containsEsc = this.state.containsEsc;
	    this.next();

	    if (!this.match(types$1$1.name) && !this.match(types$1$1._this)) {
	      return false;
	    }

	    if (containsEsc) {
	      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, "asserts");
	    }

	    return true;
	  }

	  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
	    this.tsInType(() => {
	      if (eatColon) this.expect(types$1$1.colon);
	      t.typeAnnotation = this.tsParseType();
	    });
	    return this.finishNode(t, "TSTypeAnnotation");
	  }

	  tsParseType() {
	    assert$1(this.state.inType);
	    const type = this.tsParseNonConditionalType();

	    if (this.hasPrecedingLineBreak() || !this.eat(types$1$1._extends)) {
	      return type;
	    }

	    const node = this.startNodeAtNode(type);
	    node.checkType = type;
	    node.extendsType = this.tsParseNonConditionalType();
	    this.expect(types$1$1.question);
	    node.trueType = this.tsParseType();
	    this.expect(types$1$1.colon);
	    node.falseType = this.tsParseType();
	    return this.finishNode(node, "TSConditionalType");
	  }

	  isAbstractConstructorSignature() {
	    return this.isContextual("abstract") && this.lookahead().type === types$1$1._new;
	  }

	  tsParseNonConditionalType() {
	    if (this.tsIsStartOfFunctionType()) {
	      return this.tsParseFunctionOrConstructorType("TSFunctionType");
	    }

	    if (this.match(types$1$1._new)) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType");
	    } else if (this.isAbstractConstructorSignature()) {
	      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
	    }

	    return this.tsParseUnionTypeOrHigher();
	  }

	  tsParseTypeAssertion() {
	    const node = this.startNode();

	    const _const = this.tsTryNextParseConstantContext();

	    node.typeAnnotation = _const || this.tsNextThenParseType();
	    this.expectRelational(">");
	    node.expression = this.parseMaybeUnary();
	    return this.finishNode(node, "TSTypeAssertion");
	  }

	  tsParseHeritageClause(descriptor) {
	    const originalStart = this.state.start;
	    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));

	    if (!delimitedList.length) {
	      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);
	    }

	    return delimitedList;
	  }

	  tsParseExpressionWithTypeArguments() {
	    const node = this.startNode();
	    node.expression = this.tsParseEntityName(false);

	    if (this.isRelational("<")) {
	      node.typeParameters = this.tsParseTypeArguments();
	    }

	    return this.finishNode(node, "TSExpressionWithTypeArguments");
	  }

	  tsParseInterfaceDeclaration(node) {
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "typescript interface declaration", BIND_TS_INTERFACE);
	    node.typeParameters = this.tsTryParseTypeParameters();

	    if (this.eat(types$1$1._extends)) {
	      node.extends = this.tsParseHeritageClause("extends");
	    }

	    const body = this.startNode();
	    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
	    node.body = this.finishNode(body, "TSInterfaceBody");
	    return this.finishNode(node, "TSInterfaceDeclaration");
	  }

	  tsParseTypeAliasDeclaration(node) {
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "typescript type alias", BIND_TS_TYPE);
	    node.typeParameters = this.tsTryParseTypeParameters();
	    node.typeAnnotation = this.tsInType(() => {
	      this.expect(types$1$1.eq);

	      if (this.isContextual("intrinsic") && this.lookahead().type !== types$1$1.dot) {
	        const node = this.startNode();
	        this.next();
	        return this.finishNode(node, "TSIntrinsicKeyword");
	      }

	      return this.tsParseType();
	    });
	    this.semicolon();
	    return this.finishNode(node, "TSTypeAliasDeclaration");
	  }

	  tsInNoContext(cb) {
	    const oldContext = this.state.context;
	    this.state.context = [oldContext[0]];

	    try {
	      return cb();
	    } finally {
	      this.state.context = oldContext;
	    }
	  }

	  tsInType(cb) {
	    const oldInType = this.state.inType;
	    this.state.inType = true;

	    try {
	      return cb();
	    } finally {
	      this.state.inType = oldInType;
	    }
	  }

	  tsEatThenParseType(token) {
	    return !this.match(token) ? undefined : this.tsNextThenParseType();
	  }

	  tsExpectThenParseType(token) {
	    return this.tsDoThenParseType(() => this.expect(token));
	  }

	  tsNextThenParseType() {
	    return this.tsDoThenParseType(() => this.next());
	  }

	  tsDoThenParseType(cb) {
	    return this.tsInType(() => {
	      cb();
	      return this.tsParseType();
	    });
	  }

	  tsParseEnumMember() {
	    const node = this.startNode();
	    node.id = this.match(types$1$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);

	    if (this.eat(types$1$1.eq)) {
	      node.initializer = this.parseMaybeAssignAllowIn();
	    }

	    return this.finishNode(node, "TSEnumMember");
	  }

	  tsParseEnumDeclaration(node, isConst) {
	    if (isConst) node.const = true;
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "typescript enum declaration", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
	    this.expect(types$1$1.braceL);
	    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
	    this.expect(types$1$1.braceR);
	    return this.finishNode(node, "TSEnumDeclaration");
	  }

	  tsParseModuleBlock() {
	    const node = this.startNode();
	    this.scope.enter(SCOPE_OTHER);
	    this.expect(types$1$1.braceL);
	    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1$1.braceR);
	    this.scope.exit();
	    return this.finishNode(node, "TSModuleBlock");
	  }

	  tsParseModuleOrNamespaceDeclaration(node, nested = false) {
	    node.id = this.parseIdentifier();

	    if (!nested) {
	      this.checkLVal(node.id, "module or namespace declaration", BIND_TS_NAMESPACE);
	    }

	    if (this.eat(types$1$1.dot)) {
	      const inner = this.startNode();
	      this.tsParseModuleOrNamespaceDeclaration(inner, true);
	      node.body = inner;
	    } else {
	      this.scope.enter(SCOPE_TS_MODULE);
	      this.prodParam.enter(PARAM);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    }

	    return this.finishNode(node, "TSModuleDeclaration");
	  }

	  tsParseAmbientExternalModuleDeclaration(node) {
	    if (this.isContextual("global")) {
	      node.global = true;
	      node.id = this.parseIdentifier();
	    } else if (this.match(types$1$1.string)) {
	      node.id = this.parseExprAtom();
	    } else {
	      this.unexpected();
	    }

	    if (this.match(types$1$1.braceL)) {
	      this.scope.enter(SCOPE_TS_MODULE);
	      this.prodParam.enter(PARAM);
	      node.body = this.tsParseModuleBlock();
	      this.prodParam.exit();
	      this.scope.exit();
	    } else {
	      this.semicolon();
	    }

	    return this.finishNode(node, "TSModuleDeclaration");
	  }

	  tsParseImportEqualsDeclaration(node, isExport) {
	    node.isExport = isExport || false;
	    node.id = this.parseIdentifier();
	    this.checkLVal(node.id, "import equals declaration", BIND_LEXICAL);
	    this.expect(types$1$1.eq);
	    const moduleReference = this.tsParseModuleReference();

	    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
	      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);
	    }

	    node.moduleReference = moduleReference;
	    this.semicolon();
	    return this.finishNode(node, "TSImportEqualsDeclaration");
	  }

	  tsIsExternalModuleReference() {
	    return this.isContextual("require") && this.lookaheadCharCode() === 40;
	  }

	  tsParseModuleReference() {
	    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
	  }

	  tsParseExternalModuleReference() {
	    const node = this.startNode();
	    this.expectContextual("require");
	    this.expect(types$1$1.parenL);

	    if (!this.match(types$1$1.string)) {
	      throw this.unexpected();
	    }

	    node.expression = this.parseExprAtom();
	    this.expect(types$1$1.parenR);
	    return this.finishNode(node, "TSExternalModuleReference");
	  }

	  tsLookAhead(f) {
	    const state = this.state.clone();
	    const res = f();
	    this.state = state;
	    return res;
	  }

	  tsTryParseAndCatch(f) {
	    const result = this.tryParse(abort => f() || abort());
	    if (result.aborted || !result.node) return undefined;
	    if (result.error) this.state = result.failState;
	    return result.node;
	  }

	  tsTryParse(f) {
	    const state = this.state.clone();
	    const result = f();

	    if (result !== undefined && result !== false) {
	      return result;
	    } else {
	      this.state = state;
	      return undefined;
	    }
	  }

	  tsTryParseDeclare(nany) {
	    if (this.isLineTerminator()) {
	      return;
	    }

	    let starttype = this.state.type;
	    let kind;

	    if (this.isContextual("let")) {
	      starttype = types$1$1._var;
	      kind = "let";
	    }

	    return this.tsInAmbientContext(() => {
	      switch (starttype) {
	        case types$1$1._function:
	          nany.declare = true;
	          return this.parseFunctionStatement(nany, false, true);

	        case types$1$1._class:
	          nany.declare = true;
	          return this.parseClass(nany, true, false);

	        case types$1$1._const:
	          if (this.match(types$1$1._const) && this.isLookaheadContextual("enum")) {
	            this.expect(types$1$1._const);
	            this.expectContextual("enum");
	            return this.tsParseEnumDeclaration(nany, true);
	          }

	        case types$1$1._var:
	          kind = kind || this.state.value;
	          return this.parseVarStatement(nany, kind);

	        case types$1$1.name:
	          {
	            const value = this.state.value;

	            if (value === "global") {
	              return this.tsParseAmbientExternalModuleDeclaration(nany);
	            } else {
	              return this.tsParseDeclaration(nany, value, true);
	            }
	          }
	      }
	    });
	  }

	  tsTryParseExportDeclaration() {
	    return this.tsParseDeclaration(this.startNode(), this.state.value, true);
	  }

	  tsParseExpressionStatement(node, expr) {
	    switch (expr.name) {
	      case "declare":
	        {
	          const declaration = this.tsTryParseDeclare(node);

	          if (declaration) {
	            declaration.declare = true;
	            return declaration;
	          }

	          break;
	        }

	      case "global":
	        if (this.match(types$1$1.braceL)) {
	          this.scope.enter(SCOPE_TS_MODULE);
	          this.prodParam.enter(PARAM);
	          const mod = node;
	          mod.global = true;
	          mod.id = expr;
	          mod.body = this.tsParseModuleBlock();
	          this.scope.exit();
	          this.prodParam.exit();
	          return this.finishNode(mod, "TSModuleDeclaration");
	        }

	        break;

	      default:
	        return this.tsParseDeclaration(node, expr.name, false);
	    }
	  }

	  tsParseDeclaration(node, value, next) {
	    switch (value) {
	      case "abstract":
	        if (this.tsCheckLineTerminator(next) && (this.match(types$1$1._class) || this.match(types$1$1.name))) {
	          return this.tsParseAbstractDeclaration(node);
	        }

	        break;

	      case "enum":
	        if (next || this.match(types$1$1.name)) {
	          if (next) this.next();
	          return this.tsParseEnumDeclaration(node, false);
	        }

	        break;

	      case "interface":
	        if (this.tsCheckLineTerminator(next) && this.match(types$1$1.name)) {
	          return this.tsParseInterfaceDeclaration(node);
	        }

	        break;

	      case "module":
	        if (this.tsCheckLineTerminator(next)) {
	          if (this.match(types$1$1.string)) {
	            return this.tsParseAmbientExternalModuleDeclaration(node);
	          } else if (this.match(types$1$1.name)) {
	            return this.tsParseModuleOrNamespaceDeclaration(node);
	          }
	        }

	        break;

	      case "namespace":
	        if (this.tsCheckLineTerminator(next) && this.match(types$1$1.name)) {
	          return this.tsParseModuleOrNamespaceDeclaration(node);
	        }

	        break;

	      case "type":
	        if (this.tsCheckLineTerminator(next) && this.match(types$1$1.name)) {
	          return this.tsParseTypeAliasDeclaration(node);
	        }

	        break;
	    }
	  }

	  tsCheckLineTerminator(next) {
	    if (next) {
	      if (this.hasFollowingLineBreak()) return false;
	      this.next();
	      return true;
	    }

	    return !this.isLineTerminator();
	  }

	  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
	    if (!this.isRelational("<")) {
	      return undefined;
	    }

	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = true;
	    const res = this.tsTryParseAndCatch(() => {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.typeParameters = this.tsParseTypeParameters();
	      super.parseFunctionParams(node);
	      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
	      this.expect(types$1$1.arrow);
	      return node;
	    });
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;

	    if (!res) {
	      return undefined;
	    }

	    return this.parseArrowExpression(res, null, true);
	  }

	  tsParseTypeArguments() {
	    const node = this.startNode();
	    node.params = this.tsInType(() => this.tsInNoContext(() => {
	      this.expectRelational("<");
	      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
	    }));

	    if (node.params.length === 0) {
	      this.raise(node.start, TSErrors.EmptyTypeArguments);
	    }

	    this.expectRelational(">");
	    return this.finishNode(node, "TSTypeParameterInstantiation");
	  }

	  tsIsDeclarationStart() {
	    if (this.match(types$1$1.name)) {
	      switch (this.state.value) {
	        case "abstract":
	        case "declare":
	        case "enum":
	        case "interface":
	        case "module":
	        case "namespace":
	        case "type":
	          return true;
	      }
	    }

	    return false;
	  }

	  isExportDefaultSpecifier() {
	    if (this.tsIsDeclarationStart()) return false;
	    return super.isExportDefaultSpecifier();
	  }

	  parseAssignableListItem(allowModifiers, decorators) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let accessibility;
	    let readonly = false;
	    let override = false;

	    if (allowModifiers !== undefined) {
	      const modified = {};
	      this.tsParseModifiers(modified, ["public", "private", "protected", "override", "readonly"]);
	      accessibility = modified.accessibility;
	      override = modified.override;
	      readonly = modified.readonly;

	      if (allowModifiers === false && (accessibility || readonly || override)) {
	        this.raise(startPos, TSErrors.UnexpectedParameterModifier);
	      }
	    }

	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left);
	    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

	    if (accessibility || readonly || override) {
	      const pp = this.startNodeAt(startPos, startLoc);

	      if (decorators.length) {
	        pp.decorators = decorators;
	      }

	      if (accessibility) pp.accessibility = accessibility;
	      if (readonly) pp.readonly = readonly;
	      if (override) pp.override = override;

	      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
	        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);
	      }

	      pp.parameter = elt;
	      return this.finishNode(pp, "TSParameterProperty");
	    }

	    if (decorators.length) {
	      left.decorators = decorators;
	    }

	    return elt;
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    if (this.match(types$1$1.colon)) {
	      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1$1.colon);
	    }

	    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" ? "TSDeclareMethod" : undefined;

	    if (bodilessType && !this.match(types$1$1.braceL) && this.isLineTerminator()) {
	      this.finishNode(node, bodilessType);
	      return;
	    }

	    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
	      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);

	      if (node.declare) {
	        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
	        return;
	      }
	    }

	    super.parseFunctionBodyAndFinish(node, type, isMethod);
	  }

	  registerFunctionStatementId(node) {
	    if (!node.body && node.id) {
	      this.checkLVal(node.id, "function name", BIND_TS_AMBIENT);
	    } else {
	      super.registerFunctionStatementId(...arguments);
	    }
	  }

	  tsCheckForInvalidTypeCasts(items) {
	    items.forEach(node => {
	      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
	        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);
	      }
	    });
	  }

	  toReferencedList(exprList, isInParens) {
	    this.tsCheckForInvalidTypeCasts(exprList);
	    return exprList;
	  }

	  parseArrayLike(...args) {
	    const node = super.parseArrayLike(...args);

	    if (node.type === "ArrayExpression") {
	      this.tsCheckForInvalidTypeCasts(node.elements);
	    }

	    return node;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    if (!this.hasPrecedingLineBreak() && this.match(types$1$1.bang)) {
	      this.state.exprAllowed = false;
	      this.next();
	      const nonNullExpression = this.startNodeAt(startPos, startLoc);
	      nonNullExpression.expression = base;
	      return this.finishNode(nonNullExpression, "TSNonNullExpression");
	    }

	    if (this.isRelational("<")) {
	      const result = this.tsTryParseAndCatch(() => {
	        if (!noCalls && this.atPossibleAsyncArrow(base)) {
	          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);

	          if (asyncArrowFn) {
	            return asyncArrowFn;
	          }
	        }

	        const node = this.startNodeAt(startPos, startLoc);
	        node.callee = base;
	        const typeArguments = this.tsParseTypeArguments();

	        if (typeArguments) {
	          if (!noCalls && this.eat(types$1$1.parenL)) {
	            node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, false);
	            this.tsCheckForInvalidTypeCasts(node.arguments);
	            node.typeParameters = typeArguments;

	            if (state.optionalChainMember) {
	              node.optional = false;
	            }

	            return this.finishCallExpression(node, state.optionalChainMember);
	          } else if (this.match(types$1$1.backQuote)) {
	            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
	            result.typeParameters = typeArguments;
	            return result;
	          }
	        }

	        this.unexpected();
	      });
	      if (result) return result;
	    }

	    return super.parseSubscript(base, startPos, startLoc, noCalls, state);
	  }

	  parseNewArguments(node) {
	    if (this.isRelational("<")) {
	      const typeParameters = this.tsTryParseAndCatch(() => {
	        const args = this.tsParseTypeArguments();
	        if (!this.match(types$1$1.parenL)) this.unexpected();
	        return args;
	      });

	      if (typeParameters) {
	        node.typeParameters = typeParameters;
	      }
	    }

	    super.parseNewArguments(node);
	  }

	  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
	    if (nonNull(types$1$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual("as")) {
	      const node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.expression = left;

	      const _const = this.tsTryNextParseConstantContext();

	      if (_const) {
	        node.typeAnnotation = _const;
	      } else {
	        node.typeAnnotation = this.tsNextThenParseType();
	      }

	      this.finishNode(node, "TSAsExpression");
	      this.reScan_lt_gt();
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
	    }

	    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
	  }

	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}

	  checkDuplicateExports() {}

	  parseImport(node) {
	    node.importKind = "value";

	    if (this.match(types$1$1.name) || this.match(types$1$1.star) || this.match(types$1$1.braceL)) {
	      let ahead = this.lookahead();

	      if (this.isContextual("type") && ahead.type !== types$1$1.comma && !(ahead.type === types$1$1.name && ahead.value === "from") && ahead.type !== types$1$1.eq) {
	        node.importKind = "type";
	        this.next();
	        ahead = this.lookahead();
	      }

	      if (this.match(types$1$1.name) && ahead.type === types$1$1.eq) {
	        return this.tsParseImportEqualsDeclaration(node);
	      }
	    }

	    const importNode = super.parseImport(node);

	    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
	      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);
	    }

	    return importNode;
	  }

	  parseExport(node) {
	    if (this.match(types$1$1._import)) {
	      this.next();

	      if (this.isContextual("type") && this.lookaheadCharCode() !== 61) {
	        node.importKind = "type";
	        this.next();
	      } else {
	        node.importKind = "value";
	      }

	      return this.tsParseImportEqualsDeclaration(node, true);
	    } else if (this.eat(types$1$1.eq)) {
	      const assign = node;
	      assign.expression = this.parseExpression();
	      this.semicolon();
	      return this.finishNode(assign, "TSExportAssignment");
	    } else if (this.eatContextual("as")) {
	      const decl = node;
	      this.expectContextual("namespace");
	      decl.id = this.parseIdentifier();
	      this.semicolon();
	      return this.finishNode(decl, "TSNamespaceExportDeclaration");
	    } else {
	      if (this.isContextual("type") && this.lookahead().type === types$1$1.braceL) {
	        this.next();
	        node.exportKind = "type";
	      } else {
	        node.exportKind = "value";
	      }

	      return super.parseExport(node);
	    }
	  }

	  isAbstractClass() {
	    return this.isContextual("abstract") && this.lookahead().type === types$1$1._class;
	  }

	  parseExportDefaultExpression() {
	    if (this.isAbstractClass()) {
	      const cls = this.startNode();
	      this.next();
	      cls.abstract = true;
	      this.parseClass(cls, true, true);
	      return cls;
	    }

	    if (this.state.value === "interface") {
	      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);
	      if (result) return result;
	    }

	    return super.parseExportDefaultExpression();
	  }

	  parseStatementContent(context, topLevel) {
	    if (this.state.type === types$1$1._const) {
	      const ahead = this.lookahead();

	      if (ahead.type === types$1$1.name && ahead.value === "enum") {
	        const node = this.startNode();
	        this.expect(types$1$1._const);
	        this.expectContextual("enum");
	        return this.tsParseEnumDeclaration(node, true);
	      }
	    }

	    return super.parseStatementContent(context, topLevel);
	  }

	  parseAccessModifier() {
	    return this.tsParseModifier(["public", "protected", "private"]);
	  }

	  tsHasSomeModifiers(member, modifiers) {
	    return modifiers.some(modifier => {
	      if (tsIsAccessModifier(modifier)) {
	        return member.accessibility === modifier;
	      }

	      return !!member[modifier];
	    });
	  }

	  parseClassMember(classBody, member, state) {
	    const invalidModifersForStaticBlocks = ["declare", "private", "public", "protected", "override", "abstract", "readonly"];
	    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat(["static"]));

	    const callParseClassMemberWithIsStatic = () => {
	      const isStatic = !!member.static;

	      if (isStatic && this.eat(types$1$1.braceL)) {
	        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {
	          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);
	        }

	        this.parseClassStaticBlock(classBody, member);
	      } else {
	        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	      }
	    };

	    if (member.declare) {
	      this.tsInAmbientContext(callParseClassMemberWithIsStatic);
	    } else {
	      callParseClassMemberWithIsStatic();
	    }
	  }

	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const idx = this.tsTryParseIndexSignature(member);

	    if (idx) {
	      classBody.body.push(idx);

	      if (member.abstract) {
	        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);
	      }

	      if (member.accessibility) {
	        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);
	      }

	      if (member.declare) {
	        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);
	      }

	      if (member.override) {
	        this.raise(member.start, TSErrors.IndexSignatureHasOverride);
	      }

	      return;
	    }

	    if (!this.state.inAbstractClass && member.abstract) {
	      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);
	    }

	    if (member.override) {
	      if (!state.hadSuperClass) {
	        this.raise(member.start, TSErrors.OverrideNotInSubClass);
	      }
	    }

	    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }

	  parsePostMemberNameModifiers(methodOrProp) {
	    const optional = this.eat(types$1$1.question);
	    if (optional) methodOrProp.optional = true;

	    if (methodOrProp.readonly && this.match(types$1$1.parenL)) {
	      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);
	    }

	    if (methodOrProp.declare && this.match(types$1$1.parenL)) {
	      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);
	    }
	  }

	  parseExpressionStatement(node, expr) {
	    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr) : undefined;
	    return decl || super.parseExpressionStatement(node, expr);
	  }

	  shouldParseExportDeclaration() {
	    if (this.tsIsDeclarationStart()) return true;
	    return super.shouldParseExportDeclaration();
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (!this.state.maybeInArrowParameters || !this.match(types$1$1.question)) {
	      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
	    }

	    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));

	    if (!result.node) {
	      if (result.error) {
	        super.setOptionalParametersError(refExpressionErrors, result.error);
	      }

	      return expr;
	    }

	    if (result.error) this.state = result.failState;
	    return result.node;
	  }

	  parseParenItem(node, startPos, startLoc) {
	    node = super.parseParenItem(node, startPos, startLoc);

	    if (this.eat(types$1$1.question)) {
	      node.optional = true;
	      this.resetEndLocation(node);
	    }

	    if (this.match(types$1$1.colon)) {
	      const typeCastNode = this.startNodeAt(startPos, startLoc);
	      typeCastNode.expression = node;
	      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
	      return this.finishNode(typeCastNode, "TSTypeCastExpression");
	    }

	    return node;
	  }

	  parseExportDeclaration(node) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const isDeclare = this.eatContextual("declare");

	    if (isDeclare && (this.isContextual("declare") || !this.shouldParseExportDeclaration())) {
	      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);
	    }

	    let declaration;

	    if (this.match(types$1$1.name)) {
	      declaration = this.tsTryParseExportDeclaration();
	    }

	    if (!declaration) {
	      declaration = super.parseExportDeclaration(node);
	    }

	    if (declaration && (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare)) {
	      node.exportKind = "type";
	    }

	    if (declaration && isDeclare) {
	      this.resetStartLocation(declaration, startPos, startLoc);
	      declaration.declare = true;
	    }

	    return declaration;
	  }

	  parseClassId(node, isStatement, optionalId) {
	    if ((!isStatement || optionalId) && this.isContextual("implements")) {
	      return;
	    }

	    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) node.typeParameters = typeParameters;
	  }

	  parseClassPropertyAnnotation(node) {
	    if (!node.optional && this.eat(types$1$1.bang)) {
	      node.definite = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();
	    if (type) node.typeAnnotation = type;
	  }

	  parseClassProperty(node) {
	    this.parseClassPropertyAnnotation(node);

	    if (this.state.isAmbientContext && this.match(types$1$1.eq)) {
	      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);
	    }

	    return super.parseClassProperty(node);
	  }

	  parseClassPrivateProperty(node) {
	    if (node.abstract) {
	      this.raise(node.start, TSErrors.PrivateElementHasAbstract);
	    }

	    if (node.accessibility) {
	      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);
	    }

	    this.parseClassPropertyAnnotation(node);
	    return super.parseClassPrivateProperty(node);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    const typeParameters = this.tsTryParseTypeParameters();

	    if (typeParameters && isConstructor) {
	      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);
	    }

	    if (method.declare && (method.kind === "get" || method.kind === "set")) {
	      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);
	    }

	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) method.typeParameters = typeParameters;
	    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
	  }

	  parseClassSuper(node) {
	    super.parseClassSuper(node);

	    if (node.superClass && this.isRelational("<")) {
	      node.superTypeParameters = this.tsParseTypeArguments();
	    }

	    if (this.eatContextual("implements")) {
	      node.implements = this.tsParseHeritageClause("implements");
	    }
	  }

	  parseObjPropValue(prop, ...args) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) prop.typeParameters = typeParameters;
	    super.parseObjPropValue(prop, ...args);
	  }

	  parseFunctionParams(node, allowModifiers) {
	    const typeParameters = this.tsTryParseTypeParameters();
	    if (typeParameters) node.typeParameters = typeParameters;
	    super.parseFunctionParams(node, allowModifiers);
	  }

	  parseVarId(decl, kind) {
	    super.parseVarId(decl, kind);

	    if (decl.id.type === "Identifier" && this.eat(types$1$1.bang)) {
	      decl.definite = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();

	    if (type) {
	      decl.id.typeAnnotation = type;
	      this.resetEndLocation(decl.id);
	    }
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    if (this.match(types$1$1.colon)) {
	      node.returnType = this.tsParseTypeAnnotation();
	    }

	    return super.parseAsyncArrowFromCallExpression(node, call);
	  }

	  parseMaybeAssign(...args) {
	    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;

	    let state;
	    let jsx;
	    let typeCast;

	    if (this.hasPlugin("jsx") && (this.match(types$1$1.jsxTagStart) || this.isRelational("<"))) {
	      state = this.state.clone();
	      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);
	      if (!jsx.error) return jsx.node;
	      const {
	        context
	      } = this.state;

	      if (context[context.length - 1] === types$2.j_oTag) {
	        context.length -= 2;
	      } else if (context[context.length - 1] === types$2.j_expr) {
	        context.length -= 1;
	      }
	    }

	    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational("<")) {
	      return super.parseMaybeAssign(...args);
	    }

	    let typeParameters;
	    state = state || this.state.clone();
	    const arrow = this.tryParse(abort => {
	      var _expr$extra, _typeParameters;

	      typeParameters = this.tsParseTypeParameters();
	      const expr = super.parseMaybeAssign(...args);

	      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
	        abort();
	      }

	      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
	        this.resetStartLocationFromNode(expr, typeParameters);
	      }

	      expr.typeParameters = typeParameters;
	      return expr;
	    }, state);
	    if (!arrow.error && !arrow.aborted) return arrow.node;

	    if (!jsx) {
	      assert$1(!this.hasPlugin("jsx"));
	      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
	      if (!typeCast.error) return typeCast.node;
	    }

	    if ((_jsx2 = jsx) != null && _jsx2.node) {
	      this.state = jsx.failState;
	      return jsx.node;
	    }

	    if (arrow.node) {
	      this.state = arrow.failState;
	      return arrow.node;
	    }

	    if ((_typeCast = typeCast) != null && _typeCast.node) {
	      this.state = typeCast.failState;
	      return typeCast.node;
	    }

	    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
	    if (arrow.thrown) throw arrow.error;
	    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;
	    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
	  }

	  parseMaybeUnary(refExpressionErrors) {
	    if (!this.hasPlugin("jsx") && this.isRelational("<")) {
	      return this.tsParseTypeAssertion();
	    } else {
	      return super.parseMaybeUnary(refExpressionErrors);
	    }
	  }

	  parseArrow(node) {
	    if (this.match(types$1$1.colon)) {
	      const result = this.tryParse(abort => {
	        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1$1.colon);
	        if (this.canInsertSemicolon() || !this.match(types$1$1.arrow)) abort();
	        return returnType;
	      });
	      if (result.aborted) return;

	      if (!result.thrown) {
	        if (result.error) this.state = result.failState;
	        node.returnType = result.node;
	      }
	    }

	    return super.parseArrow(node);
	  }

	  parseAssignableListItemTypes(param) {
	    if (this.eat(types$1$1.question)) {
	      if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
	        this.raise(param.start, TSErrors.PatternIsOptional);
	      }

	      param.optional = true;
	    }

	    const type = this.tsTryParseTypeAnnotation();
	    if (type) param.typeAnnotation = type;
	    this.resetEndLocation(param);
	    return param;
	  }

	  toAssignable(node, isLHS = false) {
	    switch (node.type) {
	      case "TSTypeCastExpression":
	        return super.toAssignable(this.typeCastToParameter(node), isLHS);

	      case "TSParameterProperty":
	        return super.toAssignable(node, isLHS);

	      case "ParenthesizedExpression":
	        return this.toAssignableParenthesizedExpression(node, isLHS);

	      case "TSAsExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	        node.expression = this.toAssignable(node.expression, isLHS);
	        return node;

	      default:
	        return super.toAssignable(node, isLHS);
	    }
	  }

	  toAssignableParenthesizedExpression(node, isLHS) {
	    switch (node.expression.type) {
	      case "TSAsExpression":
	      case "TSNonNullExpression":
	      case "TSTypeAssertion":
	      case "ParenthesizedExpression":
	        node.expression = this.toAssignable(node.expression, isLHS);
	        return node;

	      default:
	        return super.toAssignable(node, isLHS);
	    }
	  }

	  checkLVal(expr, contextDescription, ...args) {
	    var _expr$extra2;

	    switch (expr.type) {
	      case "TSTypeCastExpression":
	        return;

	      case "TSParameterProperty":
	        this.checkLVal(expr.parameter, "parameter property", ...args);
	        return;

	      case "TSAsExpression":
	      case "TSTypeAssertion":
	        if (!args[0] && contextDescription !== "parenthesized expression" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {
	          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);
	          break;
	        }

	        this.checkLVal(expr.expression, "parenthesized expression", ...args);
	        return;

	      case "TSNonNullExpression":
	        this.checkLVal(expr.expression, contextDescription, ...args);
	        return;

	      default:
	        super.checkLVal(expr, contextDescription, ...args);
	        return;
	    }
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case types$1$1._this:
	        return this.parseIdentifier(true);

	      default:
	        return super.parseBindingAtom();
	    }
	  }

	  parseMaybeDecoratorArguments(expr) {
	    if (this.isRelational("<")) {
	      const typeArguments = this.tsParseTypeArguments();

	      if (this.match(types$1$1.parenL)) {
	        const call = super.parseMaybeDecoratorArguments(expr);
	        call.typeParameters = typeArguments;
	        return call;
	      }

	      this.unexpected(this.state.start, types$1$1.parenL);
	    }

	    return super.parseMaybeDecoratorArguments(expr);
	  }

	  checkCommaAfterRest(close) {
	    if (this.state.isAmbientContext && this.match(types$1$1.comma) && this.lookaheadCharCode() === close) {
	      this.next();
	    } else {
	      super.checkCommaAfterRest(close);
	    }
	  }

	  isClassMethod() {
	    return this.isRelational("<") || super.isClassMethod();
	  }

	  isClassProperty() {
	    return this.match(types$1$1.bang) || this.match(types$1$1.colon) || super.isClassProperty();
	  }

	  parseMaybeDefault(...args) {
	    const node = super.parseMaybeDefault(...args);

	    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
	      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);
	    }

	    return node;
	  }

	  getTokenFromCode(code) {
	    if (this.state.inType && (code === 62 || code === 60)) {
	      return this.finishOp(types$1$1.relational, 1);
	    } else {
	      return super.getTokenFromCode(code);
	    }
	  }

	  reScan_lt_gt() {
	    if (this.match(types$1$1.relational)) {
	      const code = this.input.charCodeAt(this.state.start);

	      if (code === 60 || code === 62) {
	        this.state.pos -= 1;
	        this.readToken_lt_gt(code);
	      }
	    }
	  }

	  toAssignableList(exprList) {
	    for (let i = 0; i < exprList.length; i++) {
	      const expr = exprList[i];
	      if (!expr) continue;

	      switch (expr.type) {
	        case "TSTypeCastExpression":
	          exprList[i] = this.typeCastToParameter(expr);
	          break;

	        case "TSAsExpression":
	        case "TSTypeAssertion":
	          if (!this.state.maybeInArrowParameters) {
	            exprList[i] = this.typeCastToParameter(expr);
	          } else {
	            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);
	          }

	          break;
	      }
	    }

	    return super.toAssignableList(...arguments);
	  }

	  typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);
	    return node.expression;
	  }

	  shouldParseArrow() {
	    return this.match(types$1$1.colon) || super.shouldParseArrow();
	  }

	  shouldParseAsyncArrow() {
	    return this.match(types$1$1.colon) || super.shouldParseAsyncArrow();
	  }

	  canHaveLeadingDecorator() {
	    return super.canHaveLeadingDecorator() || this.isAbstractClass();
	  }

	  jsxParseOpeningElementAfterName(node) {
	    if (this.isRelational("<")) {
	      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());
	      if (typeArguments) node.typeParameters = typeArguments;
	    }

	    return super.jsxParseOpeningElementAfterName(node);
	  }

	  getGetterSetterExpectedParamCount(method) {
	    const baseCount = super.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    const firstParam = params[0];
	    const hasContextParam = firstParam && this.isThisParam(firstParam);
	    return hasContextParam ? baseCount + 1 : baseCount;
	  }

	  parseCatchClauseParam() {
	    const param = super.parseCatchClauseParam();
	    const type = this.tsTryParseTypeAnnotation();

	    if (type) {
	      param.typeAnnotation = type;
	      this.resetEndLocation(param);
	    }

	    return param;
	  }

	  tsInAmbientContext(cb) {
	    const oldIsAmbientContext = this.state.isAmbientContext;
	    this.state.isAmbientContext = true;

	    try {
	      return cb();
	    } finally {
	      this.state.isAmbientContext = oldIsAmbientContext;
	    }
	  }

	  parseClass(node, ...args) {
	    const oldInAbstractClass = this.state.inAbstractClass;
	    this.state.inAbstractClass = !!node.abstract;

	    try {
	      return super.parseClass(node, ...args);
	    } finally {
	      this.state.inAbstractClass = oldInAbstractClass;
	    }
	  }

	  tsParseAbstractDeclaration(node) {
	    if (this.match(types$1$1._class)) {
	      node.abstract = true;
	      return this.parseClass(node, true, false);
	    } else if (this.isContextual("interface")) {
	      if (!this.hasFollowingLineBreak()) {
	        node.abstract = true;
	        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);
	        this.next();
	        return this.tsParseInterfaceDeclaration(node);
	      }
	    } else {
	      this.unexpected(null, types$1$1._class);
	    }
	  }

	  parseMethod(...args) {
	    const method = super.parseMethod(...args);

	    if (method.abstract) {
	      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;

	      if (hasBody) {
	        const {
	          key
	        } = method;
	        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === "Identifier" ? key.name : `[${this.input.slice(key.start, key.end)}]`);
	      }
	    }

	    return method;
	  }

	  shouldParseAsAmbientContext() {
	    return !!this.getPluginOption("typescript", "dts");
	  }

	  parse() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }

	    return super.parse();
	  }

	  getExpression() {
	    if (this.shouldParseAsAmbientContext()) {
	      this.state.isAmbientContext = true;
	    }

	    return super.getExpression();
	  }

	});

	types$1$1.placeholder = new TokenType("%%", {
	  startsExpr: true
	});
	const PlaceHolderErrors = makeErrorTemplates({
	  ClassNameIsRequired: "A class name is required."
	}, ErrorCodes.SyntaxError);
	var placeholders = (superClass => class extends superClass {
	  parsePlaceholder(expectedNode) {
	    if (this.match(types$1$1.placeholder)) {
	      const node = this.startNode();
	      this.next();
	      this.assertNoSpace("Unexpected space in placeholder.");
	      node.name = super.parseIdentifier(true);
	      this.assertNoSpace("Unexpected space in placeholder.");
	      this.expect(types$1$1.placeholder);
	      return this.finishPlaceholder(node, expectedNode);
	    }
	  }

	  finishPlaceholder(node, expectedNode) {
	    const isFinished = !!(node.expectedNode && node.type === "Placeholder");
	    node.expectedNode = expectedNode;
	    return isFinished ? node : this.finishNode(node, "Placeholder");
	  }

	  getTokenFromCode(code) {
	    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
	      return this.finishOp(types$1$1.placeholder, 2);
	    }

	    return super.getTokenFromCode(...arguments);
	  }

	  parseExprAtom() {
	    return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
	  }

	  parseIdentifier() {
	    return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
	  }

	  checkReservedWord(word) {
	    if (word !== undefined) super.checkReservedWord(...arguments);
	  }

	  parseBindingAtom() {
	    return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
	  }

	  checkLVal(expr) {
	    if (expr.type !== "Placeholder") super.checkLVal(...arguments);
	  }

	  toAssignable(node) {
	    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
	      node.expectedNode = "Pattern";
	      return node;
	    }

	    return super.toAssignable(...arguments);
	  }

	  isLet(context) {
	    if (super.isLet(context)) {
	      return true;
	    }

	    if (!this.isContextual("let")) {
	      return false;
	    }

	    if (context) return false;
	    const nextToken = this.lookahead();

	    if (nextToken.type === types$1$1.placeholder) {
	      return true;
	    }

	    return false;
	  }

	  verifyBreakContinue(node) {
	    if (node.label && node.label.type === "Placeholder") return;
	    super.verifyBreakContinue(...arguments);
	  }

	  parseExpressionStatement(node, expr) {
	    if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
	      return super.parseExpressionStatement(...arguments);
	    }

	    if (this.match(types$1$1.colon)) {
	      const stmt = node;
	      stmt.label = this.finishPlaceholder(expr, "Identifier");
	      this.next();
	      stmt.body = this.parseStatement("label");
	      return this.finishNode(stmt, "LabeledStatement");
	    }

	    this.semicolon();
	    node.name = expr.name;
	    return this.finishPlaceholder(node, "Statement");
	  }

	  parseBlock() {
	    return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
	  }

	  parseFunctionId() {
	    return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
	  }

	  parseClass(node, isStatement, optionalId) {
	    const type = isStatement ? "ClassDeclaration" : "ClassExpression";
	    this.next();
	    this.takeDecorators(node);
	    const oldStrict = this.state.strict;
	    const placeholder = this.parsePlaceholder("Identifier");

	    if (placeholder) {
	      if (this.match(types$1$1._extends) || this.match(types$1$1.placeholder) || this.match(types$1$1.braceL)) {
	        node.id = placeholder;
	      } else if (optionalId || !isStatement) {
	        node.id = null;
	        node.body = this.finishPlaceholder(placeholder, "ClassBody");
	        return this.finishNode(node, type);
	      } else {
	        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);
	      }
	    } else {
	      this.parseClassId(node, isStatement, optionalId);
	    }

	    this.parseClassSuper(node);
	    node.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, type);
	  }

	  parseExport(node) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseExport(...arguments);

	    if (!this.isContextual("from") && !this.match(types$1$1.comma)) {
	      node.specifiers = [];
	      node.source = null;
	      node.declaration = this.finishPlaceholder(placeholder, "Declaration");
	      return this.finishNode(node, "ExportNamedDeclaration");
	    }

	    this.expectPlugin("exportDefaultFrom");
	    const specifier = this.startNode();
	    specifier.exported = placeholder;
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    return super.parseExport(node);
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(types$1$1._default)) {
	      const next = this.nextTokenStart();

	      if (this.isUnparsedContextual(next, "from")) {
	        if (this.input.startsWith(types$1$1.placeholder.label, this.nextTokenStartSince(next + 4))) {
	          return true;
	        }
	      }
	    }

	    return super.isExportDefaultSpecifier();
	  }

	  maybeParseExportDefaultSpecifier(node) {
	    if (node.specifiers && node.specifiers.length > 0) {
	      return true;
	    }

	    return super.maybeParseExportDefaultSpecifier(...arguments);
	  }

	  checkExport(node) {
	    const {
	      specifiers
	    } = node;

	    if (specifiers != null && specifiers.length) {
	      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
	    }

	    super.checkExport(node);
	    node.specifiers = specifiers;
	  }

	  parseImport(node) {
	    const placeholder = this.parsePlaceholder("Identifier");
	    if (!placeholder) return super.parseImport(...arguments);
	    node.specifiers = [];

	    if (!this.isContextual("from") && !this.match(types$1$1.comma)) {
	      node.source = this.finishPlaceholder(placeholder, "StringLiteral");
	      this.semicolon();
	      return this.finishNode(node, "ImportDeclaration");
	    }

	    const specifier = this.startNodeAtNode(placeholder);
	    specifier.local = placeholder;
	    this.finishNode(specifier, "ImportDefaultSpecifier");
	    node.specifiers.push(specifier);

	    if (this.eat(types$1$1.comma)) {
	      const hasStarImport = this.maybeParseStarImportSpecifier(node);
	      if (!hasStarImport) this.parseNamedImportSpecifiers(node);
	    }

	    this.expectContextual("from");
	    node.source = this.parseImportSource();
	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }

	  parseImportSource() {
	    return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
	  }

	});

	var v8intrinsic = (superClass => class extends superClass {
	  parseV8Intrinsic() {
	    if (this.match(types$1$1.modulo)) {
	      const v8IntrinsicStart = this.state.start;
	      const node = this.startNode();
	      this.eat(types$1$1.modulo);

	      if (this.match(types$1$1.name)) {
	        const name = this.parseIdentifierName(this.state.start);
	        const identifier = this.createIdentifier(node, name);
	        identifier.type = "V8IntrinsicIdentifier";

	        if (this.match(types$1$1.parenL)) {
	          return identifier;
	        }
	      }

	      this.unexpected(v8IntrinsicStart);
	    }
	  }

	  parseExprAtom() {
	    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
	  }

	});

	function hasPlugin(plugins, name) {
	  return plugins.some(plugin => {
	    if (Array.isArray(plugin)) {
	      return plugin[0] === name;
	    } else {
	      return plugin === name;
	    }
	  });
	}
	function getPluginOption(plugins, name, option) {
	  const plugin = plugins.find(plugin => {
	    if (Array.isArray(plugin)) {
	      return plugin[0] === name;
	    } else {
	      return plugin === name;
	    }
	  });

	  if (plugin && Array.isArray(plugin)) {
	    return plugin[1][option];
	  }

	  return null;
	}
	const PIPELINE_PROPOSALS = ["minimal", "smart", "fsharp"];
	const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
	function validatePlugins(plugins) {
	  if (hasPlugin(plugins, "decorators")) {
	    if (hasPlugin(plugins, "decorators-legacy")) {
	      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
	    }

	    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");

	    if (decoratorsBeforeExport == null) {
	      throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option," + " whose value must be a boolean. If you are migrating from" + " Babylon/Babel 6 or want to use the old decorators proposal, you" + " should use the 'decorators-legacy' plugin instead of 'decorators'.");
	    } else if (typeof decoratorsBeforeExport !== "boolean") {
	      throw new Error("'decoratorsBeforeExport' must be a boolean.");
	    }
	  }

	  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
	    throw new Error("Cannot combine flow and typescript plugins.");
	  }

	  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
	    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
	  }

	  if (hasPlugin(plugins, "pipelineOperator") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, "pipelineOperator", "proposal"))) {
	    throw new Error("'pipelineOperator' requires 'proposal' option whose value should be one of: " + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(", "));
	  }

	  if (hasPlugin(plugins, "moduleAttributes")) {
	    {
	      if (hasPlugin(plugins, "importAssertions")) {
	        throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
	      }

	      const moduleAttributesVerionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");

	      if (moduleAttributesVerionPluginOption !== "may-2020") {
	        throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
	      }
	    }
	  }

	  if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
	    throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
	  }

	  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
	    const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
	    error.missingPlugins = "doExpressions";
	    throw error;
	  }
	}
	const mixinPlugins = {
	  estree,
	  jsx,
	  flow: flow$1,
	  typescript,
	  v8intrinsic,
	  placeholders
	};
	const mixinPluginNames = Object.keys(mixinPlugins);

	const defaultOptions = {
	  sourceType: "script",
	  sourceFilename: undefined,
	  startLine: 1,
	  allowAwaitOutsideFunction: false,
	  allowReturnOutsideFunction: false,
	  allowImportExportEverywhere: false,
	  allowSuperOutsideMethod: false,
	  allowUndeclaredExports: false,
	  plugins: [],
	  strictMode: null,
	  ranges: false,
	  tokens: false,
	  createParenthesizedExpressions: false,
	  errorRecovery: false
	};
	function getOptions$2(opts) {
	  const options = {};

	  for (const key of Object.keys(defaultOptions)) {
	    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
	  }

	  return options;
	}

	var _isDigit = function isDigit(code) {
	  return code >= 48 && code <= 57;
	};
	const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);
	const forbiddenNumericSeparatorSiblings = {
	  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
	  hex: [46, 88, 95, 120]
	};
	const allowedNumericSeparatorSiblings = {};
	allowedNumericSeparatorSiblings.bin = [48, 49];
	allowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];
	allowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];
	allowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
	class Token {
	  constructor(state) {
	    this.type = state.type;
	    this.value = state.value;
	    this.start = state.start;
	    this.end = state.end;
	    this.loc = new SourceLocation(state.startLoc, state.endLoc);
	  }

	}
	class Tokenizer extends ParserError {
	  constructor(options, input) {
	    super();
	    this.isLookahead = void 0;
	    this.tokens = [];
	    this.state = new State();
	    this.state.init(options);
	    this.input = input;
	    this.length = input.length;
	    this.isLookahead = false;
	  }

	  pushToken(token) {
	    this.tokens.length = this.state.tokensLength;
	    this.tokens.push(token);
	    ++this.state.tokensLength;
	  }

	  next() {
	    this.checkKeywordEscapes();

	    if (this.options.tokens) {
	      this.pushToken(new Token(this.state));
	    }

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  }

	  eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  }

	  match(type) {
	    return this.state.type === type;
	  }

	  createLookaheadState(state) {
	    return {
	      pos: state.pos,
	      value: null,
	      type: state.type,
	      start: state.start,
	      end: state.end,
	      lastTokEnd: state.end,
	      context: [this.curContext()],
	      inType: state.inType
	    };
	  }

	  lookahead() {
	    const old = this.state;
	    this.state = this.createLookaheadState(old);
	    this.isLookahead = true;
	    this.nextToken();
	    this.isLookahead = false;
	    const curr = this.state;
	    this.state = old;
	    return curr;
	  }

	  nextTokenStart() {
	    return this.nextTokenStartSince(this.state.pos);
	  }

	  nextTokenStartSince(pos) {
	    skipWhiteSpace.lastIndex = pos;
	    const skip = skipWhiteSpace.exec(this.input);
	    return pos + skip[0].length;
	  }

	  lookaheadCharCode() {
	    return this.input.charCodeAt(this.nextTokenStart());
	  }

	  codePointAtPos(pos) {
	    let cp = this.input.charCodeAt(pos);

	    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
	      const trail = this.input.charCodeAt(pos);

	      if ((trail & 0xfc00) === 0xdc00) {
	        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
	      }
	    }

	    return cp;
	  }

	  setStrict(strict) {
	    this.state.strict = strict;

	    if (strict) {
	      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));
	      this.state.strictErrors.clear();
	    }
	  }

	  curContext() {
	    return this.state.context[this.state.context.length - 1];
	  }

	  nextToken() {
	    const curContext = this.curContext();
	    if (!curContext.preserveSpace) this.skipSpace();
	    this.state.start = this.state.pos;
	    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();

	    if (this.state.pos >= this.length) {
	      this.finishToken(types$1$1.eof);
	      return;
	    }

	    if (curContext === types$2.template) {
	      this.readTmplToken();
	    } else {
	      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
	    }
	  }

	  pushComment(block, text, start, end, startLoc, endLoc) {
	    const comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new SourceLocation(startLoc, endLoc)
	    };
	    if (this.options.tokens) this.pushToken(comment);
	    this.state.comments.push(comment);
	    this.addComment(comment);
	  }

	  skipBlockComment() {
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    const start = this.state.pos;
	    const end = this.input.indexOf("*/", this.state.pos + 2);
	    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);
	    this.state.pos = end + 2;
	    lineBreakG.lastIndex = start;
	    let match;

	    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }

	    if (this.isLookahead) return;
	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  }

	  skipLineComment(startSkip) {
	    const start = this.state.pos;
	    let startLoc;
	    if (!this.isLookahead) startLoc = this.state.curPosition();
	    let ch = this.input.charCodeAt(this.state.pos += startSkip);

	    if (this.state.pos < this.length) {
	      while (!isNewLine(ch) && ++this.state.pos < this.length) {
	        ch = this.input.charCodeAt(this.state.pos);
	      }
	    }

	    if (this.isLookahead) return;
	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  }

	  skipSpace() {
	    loop: while (this.state.pos < this.length) {
	      const ch = this.input.charCodeAt(this.state.pos);

	      switch (ch) {
	        case 32:
	        case 160:
	        case 9:
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:
	        case 8232:
	        case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              this.skipBlockComment();
	              break;

	            case 47:
	              this.skipLineComment(2);
	              break;

	            default:
	              break loop;
	          }

	          break;

	        default:
	          if (isWhitespace$9(ch)) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }

	      }
	    }
	  }

	  finishToken(type, val) {
	    this.state.end = this.state.pos;
	    const prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    if (!this.isLookahead) {
	      this.state.endLoc = this.state.curPosition();
	      this.updateContext(prevType);
	    }
	  }

	  readToken_numberSign() {
	    if (this.state.pos === 0 && this.readToken_interpreter()) {
	      return;
	    }

	    const nextPos = this.state.pos + 1;
	    const next = this.codePointAtPos(nextPos);

	    if (next >= 48 && next <= 57) {
	      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);
	    }

	    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
	      this.expectPlugin("recordAndTuple");

	      if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") {
	        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);
	      }

	      this.state.pos += 2;

	      if (next === 123) {
	        this.finishToken(types$1$1.braceHashL);
	      } else {
	        this.finishToken(types$1$1.bracketHashL);
	      }
	    } else if (isIdentifierStart(next)) {
	      ++this.state.pos;
	      this.finishToken(types$1$1.privateName, this.readWord1(next));
	    } else if (next === 92) {
	      ++this.state.pos;
	      this.finishToken(types$1$1.privateName, this.readWord1());
	    } else {
	      this.finishOp(types$1$1.hash, 1);
	    }
	  }

	  readToken_dot() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next >= 48 && next <= 57) {
	      this.readNumber(true);
	      return;
	    }

	    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
	      this.state.pos += 3;
	      this.finishToken(types$1$1.ellipsis);
	    } else {
	      ++this.state.pos;
	      this.finishToken(types$1$1.dot);
	    }
	  }

	  readToken_slash() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(types$1$1.slashAssign, 2);
	    } else {
	      this.finishOp(types$1$1.slash, 1);
	    }
	  }

	  readToken_interpreter() {
	    if (this.state.pos !== 0 || this.length < 2) return false;
	    let ch = this.input.charCodeAt(this.state.pos + 1);
	    if (ch !== 33) return false;
	    const start = this.state.pos;
	    this.state.pos += 1;

	    while (!isNewLine(ch) && ++this.state.pos < this.length) {
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    const value = this.input.slice(start + 2, this.state.pos);
	    this.finishToken(types$1$1.interpreterDirective, value);
	    return true;
	  }

	  readToken_mult_modulo(code) {
	    let type = code === 42 ? types$1$1.star : types$1$1.modulo;
	    let width = 1;
	    let next = this.input.charCodeAt(this.state.pos + 1);

	    if (code === 42 && next === 42) {
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = types$1$1.exponent;
	    }

	    if (next === 61 && !this.state.inType) {
	      width++;
	      type = types$1$1.assign;
	    }

	    this.finishOp(type, width);
	  }

	  readToken_pipe_amp(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (this.input.charCodeAt(this.state.pos + 2) === 61) {
	        this.finishOp(types$1$1.assign, 3);
	      } else {
	        this.finishOp(code === 124 ? types$1$1.logicalOR : types$1$1.logicalAND, 2);
	      }

	      return;
	    }

	    if (code === 124) {
	      if (next === 62) {
	        this.finishOp(types$1$1.pipeline, 2);
	        return;
	      }

	      if (this.hasPlugin("recordAndTuple") && next === 125) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);
	        }

	        this.state.pos += 2;
	        this.finishToken(types$1$1.braceBarR);
	        return;
	      }

	      if (this.hasPlugin("recordAndTuple") && next === 93) {
	        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);
	        }

	        this.state.pos += 2;
	        this.finishToken(types$1$1.bracketBarR);
	        return;
	      }
	    }

	    if (next === 61) {
	      this.finishOp(types$1$1.assign, 2);
	      return;
	    }

	    this.finishOp(code === 124 ? types$1$1.bitwiseOR : types$1$1.bitwiseAND, 1);
	  }

	  readToken_caret() {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(types$1$1.assign, 2);
	    } else {
	      this.finishOp(types$1$1.bitwiseXOR, 1);
	    }
	  }

	  readToken_plus_min(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {
	        this.skipLineComment(3);
	        this.skipSpace();
	        this.nextToken();
	        return;
	      }

	      this.finishOp(types$1$1.incDec, 2);
	      return;
	    }

	    if (next === 61) {
	      this.finishOp(types$1$1.assign, 2);
	    } else {
	      this.finishOp(types$1$1.plusMin, 1);
	    }
	  }

	  readToken_lt_gt(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    let size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;

	      if (this.input.charCodeAt(this.state.pos + size) === 61) {
	        this.finishOp(types$1$1.assign, size + 1);
	        return;
	      }

	      this.finishOp(types$1$1.bitShift, size);
	      return;
	    }

	    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      this.skipLineComment(4);
	      this.skipSpace();
	      this.nextToken();
	      return;
	    }

	    if (next === 61) {
	      size = 2;
	    }

	    this.finishOp(types$1$1.relational, size);
	  }

	  readToken_eq_excl(code) {
	    const next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 61) {
	      this.finishOp(types$1$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	      return;
	    }

	    if (code === 61 && next === 62) {
	      this.state.pos += 2;
	      this.finishToken(types$1$1.arrow);
	      return;
	    }

	    this.finishOp(code === 61 ? types$1$1.eq : types$1$1.bang, 1);
	  }

	  readToken_question() {
	    const next = this.input.charCodeAt(this.state.pos + 1);
	    const next2 = this.input.charCodeAt(this.state.pos + 2);

	    if (next === 63) {
	      if (next2 === 61) {
	        this.finishOp(types$1$1.assign, 3);
	      } else {
	        this.finishOp(types$1$1.nullishCoalescing, 2);
	      }
	    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
	      this.state.pos += 2;
	      this.finishToken(types$1$1.questionDot);
	    } else {
	      ++this.state.pos;
	      this.finishToken(types$1$1.question);
	    }
	  }

	  getTokenFromCode(code) {
	    switch (code) {
	      case 46:
	        this.readToken_dot();
	        return;

	      case 40:
	        ++this.state.pos;
	        this.finishToken(types$1$1.parenL);
	        return;

	      case 41:
	        ++this.state.pos;
	        this.finishToken(types$1$1.parenR);
	        return;

	      case 59:
	        ++this.state.pos;
	        this.finishToken(types$1$1.semi);
	        return;

	      case 44:
	        ++this.state.pos;
	        this.finishToken(types$1$1.comma);
	        return;

	      case 91:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);
	          }

	          this.state.pos += 2;
	          this.finishToken(types$1$1.bracketBarL);
	        } else {
	          ++this.state.pos;
	          this.finishToken(types$1$1.bracketL);
	        }

	        return;

	      case 93:
	        ++this.state.pos;
	        this.finishToken(types$1$1.bracketR);
	        return;

	      case 123:
	        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
	          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
	            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);
	          }

	          this.state.pos += 2;
	          this.finishToken(types$1$1.braceBarL);
	        } else {
	          ++this.state.pos;
	          this.finishToken(types$1$1.braceL);
	        }

	        return;

	      case 125:
	        ++this.state.pos;
	        this.finishToken(types$1$1.braceR);
	        return;

	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          this.finishOp(types$1$1.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          this.finishToken(types$1$1.colon);
	        }

	        return;

	      case 63:
	        this.readToken_question();
	        return;

	      case 96:
	        ++this.state.pos;
	        this.finishToken(types$1$1.backQuote);
	        return;

	      case 48:
	        {
	          const next = this.input.charCodeAt(this.state.pos + 1);

	          if (next === 120 || next === 88) {
	            this.readRadixNumber(16);
	            return;
	          }

	          if (next === 111 || next === 79) {
	            this.readRadixNumber(8);
	            return;
	          }

	          if (next === 98 || next === 66) {
	            this.readRadixNumber(2);
	            return;
	          }
	        }

	      case 49:
	      case 50:
	      case 51:
	      case 52:
	      case 53:
	      case 54:
	      case 55:
	      case 56:
	      case 57:
	        this.readNumber(false);
	        return;

	      case 34:
	      case 39:
	        this.readString(code);
	        return;

	      case 47:
	        this.readToken_slash();
	        return;

	      case 37:
	      case 42:
	        this.readToken_mult_modulo(code);
	        return;

	      case 124:
	      case 38:
	        this.readToken_pipe_amp(code);
	        return;

	      case 94:
	        this.readToken_caret();
	        return;

	      case 43:
	      case 45:
	        this.readToken_plus_min(code);
	        return;

	      case 60:
	      case 62:
	        this.readToken_lt_gt(code);
	        return;

	      case 61:
	      case 33:
	        this.readToken_eq_excl(code);
	        return;

	      case 126:
	        this.finishOp(types$1$1.tilde, 1);
	        return;

	      case 64:
	        ++this.state.pos;
	        this.finishToken(types$1$1.at);
	        return;

	      case 35:
	        this.readToken_numberSign();
	        return;

	      case 92:
	        this.readWord();
	        return;

	      default:
	        if (isIdentifierStart(code)) {
	          this.readWord(code);
	          return;
	        }

	    }

	    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));
	  }

	  finishOp(type, size) {
	    const str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    this.finishToken(type, str);
	  }

	  readRegexp() {
	    const start = this.state.start + 1;
	    let escaped, inClass;
	    let {
	      pos
	    } = this.state;

	    for (;; ++pos) {
	      if (pos >= this.length) {
	        throw this.raise(start, ErrorMessages.UnterminatedRegExp);
	      }

	      const ch = this.input.charCodeAt(pos);

	      if (isNewLine(ch)) {
	        throw this.raise(start, ErrorMessages.UnterminatedRegExp);
	      }

	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === 91) {
	          inClass = true;
	        } else if (ch === 93 && inClass) {
	          inClass = false;
	        } else if (ch === 47 && !inClass) {
	          break;
	        }

	        escaped = ch === 92;
	      }
	    }

	    const content = this.input.slice(start, pos);
	    ++pos;
	    let mods = "";

	    while (pos < this.length) {
	      const cp = this.codePointAtPos(pos);
	      const char = String.fromCharCode(cp);

	      if (VALID_REGEX_FLAGS.has(cp)) {
	        if (mods.includes(char)) {
	          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);
	        }
	      } else if (isIdentifierChar(cp) || cp === 92) {
	        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);
	      } else {
	        break;
	      }

	      ++pos;
	      mods += char;
	    }

	    this.state.pos = pos;
	    this.finishToken(types$1$1.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  }

	  readInt(radix, len, forceLen, allowNumSeparator = true) {
	    const start = this.state.pos;
	    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
	    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;
	    let invalid = false;
	    let total = 0;

	    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      const code = this.input.charCodeAt(this.state.pos);
	      let val;

	      if (code === 95) {
	        const prev = this.input.charCodeAt(this.state.pos - 1);
	        const next = this.input.charCodeAt(this.state.pos + 1);

	        if (allowedSiblings.indexOf(next) === -1) {
	          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
	        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {
	          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);
	        }

	        if (!allowNumSeparator) {
	          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);
	        }

	        ++this.state.pos;
	        continue;
	      }

	      if (code >= 97) {
	        val = code - 97 + 10;
	      } else if (code >= 65) {
	        val = code - 65 + 10;
	      } else if (_isDigit(code)) {
	        val = code - 48;
	      } else {
	        val = Infinity;
	      }

	      if (val >= radix) {
	        if (this.options.errorRecovery && val <= 9) {
	          val = 0;
	          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);
	        } else if (forceLen) {
	          val = 0;
	          invalid = true;
	        } else {
	          break;
	        }
	      }

	      ++this.state.pos;
	      total = total * radix + val;
	    }

	    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
	      return null;
	    }

	    return total;
	  }

	  readRadixNumber(radix) {
	    const start = this.state.pos;
	    let isBigInt = false;
	    this.state.pos += 2;
	    const val = this.readInt(radix);

	    if (val == null) {
	      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);
	    }

	    const next = this.input.charCodeAt(this.state.pos);

	    if (next === 110) {
	      ++this.state.pos;
	      isBigInt = true;
	    } else if (next === 109) {
	      throw this.raise(start, ErrorMessages.InvalidDecimal);
	    }

	    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
	    }

	    if (isBigInt) {
	      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
	      this.finishToken(types$1$1.bigint, str);
	      return;
	    }

	    this.finishToken(types$1$1.num, val);
	  }

	  readNumber(startsWithDot) {
	    const start = this.state.pos;
	    let isFloat = false;
	    let isBigInt = false;
	    let isDecimal = false;
	    let hasExponent = false;
	    let isOctal = false;

	    if (!startsWithDot && this.readInt(10) === null) {
	      this.raise(start, ErrorMessages.InvalidNumber);
	    }

	    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;

	    if (hasLeadingZero) {
	      const integer = this.input.slice(start, this.state.pos);
	      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);

	      if (!this.state.strict) {
	        const underscorePos = integer.indexOf("_");

	        if (underscorePos > 0) {
	          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);
	        }
	      }

	      isOctal = hasLeadingZero && !/[89]/.test(integer);
	    }

	    let next = this.input.charCodeAt(this.state.pos);

	    if (next === 46 && !isOctal) {
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }

	    if ((next === 69 || next === 101) && !isOctal) {
	      next = this.input.charCodeAt(++this.state.pos);

	      if (next === 43 || next === 45) {
	        ++this.state.pos;
	      }

	      if (this.readInt(10) === null) {
	        this.raise(start, ErrorMessages.InvalidOrMissingExponent);
	      }

	      isFloat = true;
	      hasExponent = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }

	    if (next === 110) {
	      if (isFloat || hasLeadingZero) {
	        this.raise(start, ErrorMessages.InvalidBigIntLiteral);
	      }

	      ++this.state.pos;
	      isBigInt = true;
	    }

	    if (next === 109) {
	      this.expectPlugin("decimal", this.state.pos);

	      if (hasExponent || hasLeadingZero) {
	        this.raise(start, ErrorMessages.InvalidDecimal);
	      }

	      ++this.state.pos;
	      isDecimal = true;
	    }

	    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
	      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);
	    }

	    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");

	    if (isBigInt) {
	      this.finishToken(types$1$1.bigint, str);
	      return;
	    }

	    if (isDecimal) {
	      this.finishToken(types$1$1.decimal, str);
	      return;
	    }

	    const val = isOctal ? parseInt(str, 8) : parseFloat(str);
	    this.finishToken(types$1$1.num, val);
	  }

	  readCodePoint(throwOnInvalid) {
	    const ch = this.input.charCodeAt(this.state.pos);
	    let code;

	    if (ch === 123) {
	      const codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
	      ++this.state.pos;

	      if (code !== null && code > 0x10ffff) {
	        if (throwOnInvalid) {
	          this.raise(codePos, ErrorMessages.InvalidCodePoint);
	        } else {
	          return null;
	        }
	      }
	    } else {
	      code = this.readHexChar(4, false, throwOnInvalid);
	    }

	    return code;
	  }

	  readString(quote) {
	    let out = "",
	        chunkStart = ++this.state.pos;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;

	      if (ch === 92) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else if (ch === 8232 || ch === 8233) {
	        ++this.state.pos;
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	      } else if (isNewLine(ch)) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);
	      } else {
	        ++this.state.pos;
	      }
	    }

	    out += this.input.slice(chunkStart, this.state.pos++);
	    this.finishToken(types$1$1.string, out);
	  }

	  readTmplToken() {
	    let out = "",
	        chunkStart = this.state.pos,
	        containsInvalid = false;

	    for (;;) {
	      if (this.state.pos >= this.length) {
	        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);
	      }

	      const ch = this.input.charCodeAt(this.state.pos);

	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        if (this.state.pos === this.state.start && this.match(types$1$1.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            this.finishToken(types$1$1.dollarBraceL);
	            return;
	          } else {
	            ++this.state.pos;
	            this.finishToken(types$1$1.backQuote);
	            return;
	          }
	        }

	        out += this.input.slice(chunkStart, this.state.pos);
	        this.finishToken(types$1$1.template, containsInvalid ? null : out);
	        return;
	      }

	      if (ch === 92) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        const escaped = this.readEscapedChar(true);

	        if (escaped === null) {
	          containsInvalid = true;
	        } else {
	          out += escaped;
	        }

	        chunkStart = this.state.pos;
	      } else if (isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;

	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) {
	              ++this.state.pos;
	            }

	          case 10:
	            out += "\n";
	            break;

	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }

	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  }

	  recordStrictModeErrors(pos, message) {
	    if (this.state.strict && !this.state.strictErrors.has(pos)) {
	      this.raise(pos, message);
	    } else {
	      this.state.strictErrors.set(pos, message);
	    }
	  }

	  readEscapedChar(inTemplate) {
	    const throwOnInvalid = !inTemplate;
	    const ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;

	    switch (ch) {
	      case 110:
	        return "\n";

	      case 114:
	        return "\r";

	      case 120:
	        {
	          const code = this.readHexChar(2, false, throwOnInvalid);
	          return code === null ? null : String.fromCharCode(code);
	        }

	      case 117:
	        {
	          const code = this.readCodePoint(throwOnInvalid);
	          return code === null ? null : String.fromCodePoint(code);
	        }

	      case 116:
	        return "\t";

	      case 98:
	        return "\b";

	      case 118:
	        return "\u000b";

	      case 102:
	        return "\f";

	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) {
	          ++this.state.pos;
	        }

	      case 10:
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;

	      case 8232:
	      case 8233:
	        return "";

	      case 56:
	      case 57:
	        if (inTemplate) {
	          return null;
	        } else {
	          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);
	        }

	      default:
	        if (ch >= 48 && ch <= 55) {
	          const codePos = this.state.pos - 1;
	          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);
	          let octalStr = match[0];
	          let octal = parseInt(octalStr, 8);

	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }

	          this.state.pos += octalStr.length - 1;
	          const next = this.input.charCodeAt(this.state.pos);

	          if (octalStr !== "0" || next === 56 || next === 57) {
	            if (inTemplate) {
	              return null;
	            } else {
	              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);
	            }
	          }

	          return String.fromCharCode(octal);
	        }

	        return String.fromCharCode(ch);
	    }
	  }

	  readHexChar(len, forceLen, throwOnInvalid) {
	    const codePos = this.state.pos;
	    const n = this.readInt(16, len, forceLen, false);

	    if (n === null) {
	      if (throwOnInvalid) {
	        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);
	      } else {
	        this.state.pos = codePos - 1;
	      }
	    }

	    return n;
	  }

	  readWord1(firstCode) {
	    this.state.containsEsc = false;
	    let word = "";
	    const start = this.state.pos;
	    let chunkStart = this.state.pos;

	    if (firstCode !== undefined) {
	      this.state.pos += firstCode <= 0xffff ? 1 : 2;
	    }

	    while (this.state.pos < this.length) {
	      const ch = this.codePointAtPos(this.state.pos);

	      if (isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        this.state.containsEsc = true;
	        word += this.input.slice(chunkStart, this.state.pos);
	        const escStart = this.state.pos;
	        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);
	          chunkStart = this.state.pos - 1;
	          continue;
	        }

	        ++this.state.pos;
	        const esc = this.readCodePoint(true);

	        if (esc !== null) {
	          if (!identifierCheck(esc)) {
	            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);
	          }

	          word += String.fromCodePoint(esc);
	        }

	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	    }

	    return word + this.input.slice(chunkStart, this.state.pos);
	  }

	  readWord(firstCode) {
	    const word = this.readWord1(firstCode);
	    const type = keywords$1.get(word) || types$1$1.name;
	    this.finishToken(type, word);
	  }

	  checkKeywordEscapes() {
	    const kw = this.state.type.keyword;

	    if (kw && this.state.containsEsc) {
	      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);
	    }
	  }

	  updateContext(prevType) {
	    var _this$state$type$upda, _this$state$type;

	    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);
	  }

	}

	class ClassScope {
	  constructor() {
	    this.privateNames = new Set();
	    this.loneAccessors = new Map();
	    this.undefinedPrivateNames = new Map();
	  }

	}
	class ClassScopeHandler {
	  constructor(raise) {
	    this.stack = [];
	    this.undefinedPrivateNames = new Map();
	    this.raise = raise;
	  }

	  current() {
	    return this.stack[this.stack.length - 1];
	  }

	  enter() {
	    this.stack.push(new ClassScope());
	  }

	  exit() {
	    const oldClassScope = this.stack.pop();
	    const current = this.current();

	    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {
	      if (current) {
	        if (!current.undefinedPrivateNames.has(name)) {
	          current.undefinedPrivateNames.set(name, pos);
	        }
	      } else {
	        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
	      }
	    }
	  }

	  declarePrivateName(name, elementType, pos) {
	    const classScope = this.current();
	    let redefined = classScope.privateNames.has(name);

	    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
	      const accessor = redefined && classScope.loneAccessors.get(name);

	      if (accessor) {
	        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
	        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
	        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
	        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
	        redefined = oldKind === newKind || oldStatic !== newStatic;
	        if (!redefined) classScope.loneAccessors.delete(name);
	      } else if (!redefined) {
	        classScope.loneAccessors.set(name, elementType);
	      }
	    }

	    if (redefined) {
	      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);
	    }

	    classScope.privateNames.add(name);
	    classScope.undefinedPrivateNames.delete(name);
	  }

	  usePrivateName(name, pos) {
	    let classScope;

	    for (classScope of this.stack) {
	      if (classScope.privateNames.has(name)) return;
	    }

	    if (classScope) {
	      classScope.undefinedPrivateNames.set(name, pos);
	    } else {
	      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);
	    }
	  }

	}

	const kExpression = 0,
	      kMaybeArrowParameterDeclaration = 1,
	      kMaybeAsyncArrowParameterDeclaration = 2,
	      kParameterDeclaration = 3;

	class ExpressionScope {
	  constructor(type = kExpression) {
	    this.type = void 0;
	    this.type = type;
	  }

	  canBeArrowParameterDeclaration() {
	    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
	  }

	  isCertainlyParameterDeclaration() {
	    return this.type === kParameterDeclaration;
	  }

	}

	class ArrowHeadParsingScope extends ExpressionScope {
	  constructor(type) {
	    super(type);
	    this.errors = new Map();
	  }

	  recordDeclarationError(pos, template) {
	    this.errors.set(pos, template);
	  }

	  clearDeclarationError(pos) {
	    this.errors.delete(pos);
	  }

	  iterateErrors(iterator) {
	    this.errors.forEach(iterator);
	  }

	}

	class ExpressionScopeHandler {
	  constructor(raise) {
	    this.stack = [new ExpressionScope()];
	    this.raise = raise;
	  }

	  enter(scope) {
	    this.stack.push(scope);
	  }

	  exit() {
	    this.stack.pop();
	  }

	  recordParameterInitializerError(pos, template) {
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];

	    while (!scope.isCertainlyParameterDeclaration()) {
	      if (scope.canBeArrowParameterDeclaration()) {
	        scope.recordDeclarationError(pos, template);
	      } else {
	        return;
	      }

	      scope = stack[--i];
	    }

	    this.raise(pos, template);
	  }

	  recordParenthesizedIdentifierError(pos, template) {
	    const {
	      stack
	    } = this;
	    const scope = stack[stack.length - 1];

	    if (scope.isCertainlyParameterDeclaration()) {
	      this.raise(pos, template);
	    } else if (scope.canBeArrowParameterDeclaration()) {
	      scope.recordDeclarationError(pos, template);
	    } else {
	      return;
	    }
	  }

	  recordAsyncArrowParametersError(pos, template) {
	    const {
	      stack
	    } = this;
	    let i = stack.length - 1;
	    let scope = stack[i];

	    while (scope.canBeArrowParameterDeclaration()) {
	      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
	        scope.recordDeclarationError(pos, template);
	      }

	      scope = stack[--i];
	    }
	  }

	  validateAsPattern() {
	    const {
	      stack
	    } = this;
	    const currentScope = stack[stack.length - 1];
	    if (!currentScope.canBeArrowParameterDeclaration()) return;
	    currentScope.iterateErrors((template, pos) => {
	      this.raise(pos, template);
	      let i = stack.length - 2;
	      let scope = stack[i];

	      while (scope.canBeArrowParameterDeclaration()) {
	        scope.clearDeclarationError(pos);
	        scope = stack[--i];
	      }
	    });
	  }

	}
	function newParameterDeclarationScope() {
	  return new ExpressionScope(kParameterDeclaration);
	}
	function newArrowHeadScope() {
	  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
	}
	function newAsyncArrowScope() {
	  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
	}
	function newExpressionScope() {
	  return new ExpressionScope();
	}

	class UtilParser extends Tokenizer {
	  addExtra(node, key, val) {
	    if (!node) return;
	    const extra = node.extra = node.extra || {};
	    extra[key] = val;
	  }

	  isRelational(op) {
	    return this.match(types$1$1.relational) && this.state.value === op;
	  }

	  expectRelational(op) {
	    if (this.isRelational(op)) {
	      this.next();
	    } else {
	      this.unexpected(null, types$1$1.relational);
	    }
	  }

	  isContextual(name) {
	    return this.match(types$1$1.name) && this.state.value === name && !this.state.containsEsc;
	  }

	  isUnparsedContextual(nameStart, name) {
	    const nameEnd = nameStart + name.length;

	    if (this.input.slice(nameStart, nameEnd) === name) {
	      const nextCh = this.input.charCodeAt(nameEnd);
	      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);
	    }

	    return false;
	  }

	  isLookaheadContextual(name) {
	    const next = this.nextTokenStart();
	    return this.isUnparsedContextual(next, name);
	  }

	  eatContextual(name) {
	    return this.isContextual(name) && this.eat(types$1$1.name);
	  }

	  expectContextual(name, template) {
	    if (!this.eatContextual(name)) this.unexpected(null, template);
	  }

	  canInsertSemicolon() {
	    return this.match(types$1$1.eof) || this.match(types$1$1.braceR) || this.hasPrecedingLineBreak();
	  }

	  hasPrecedingLineBreak() {
	    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	  }

	  hasFollowingLineBreak() {
	    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));
	  }

	  isLineTerminator() {
	    return this.eat(types$1$1.semi) || this.canInsertSemicolon();
	  }

	  semicolon(allowAsi = true) {
	    if (allowAsi ? this.isLineTerminator() : this.eat(types$1$1.semi)) return;
	    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);
	  }

	  expect(type, pos) {
	    this.eat(type) || this.unexpected(pos, type);
	  }

	  assertNoSpace(message = "Unexpected space.") {
	    if (this.state.start > this.state.lastTokEnd) {
	      this.raise(this.state.lastTokEnd, {
	        code: ErrorCodes.SyntaxError,
	        reasonCode: "UnexpectedSpace",
	        template: message
	      });
	    }
	  }

	  unexpected(pos, messageOrType = {
	    code: ErrorCodes.SyntaxError,
	    reasonCode: "UnexpectedToken",
	    template: "Unexpected token"
	  }) {
	    if (messageOrType instanceof TokenType) {
	      messageOrType = {
	        code: ErrorCodes.SyntaxError,
	        reasonCode: "UnexpectedToken",
	        template: `Unexpected token, expected "${messageOrType.label}"`
	      };
	    }

	    throw this.raise(pos != null ? pos : this.state.start, messageOrType);
	  }

	  expectPlugin(name, pos) {
	    if (!this.hasPlugin(name)) {
	      throw this.raiseWithData(pos != null ? pos : this.state.start, {
	        missingPlugin: [name]
	      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);
	    }

	    return true;
	  }

	  expectOnePlugin(names, pos) {
	    if (!names.some(n => this.hasPlugin(n))) {
	      throw this.raiseWithData(pos != null ? pos : this.state.start, {
	        missingPlugin: names
	      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(", ")}'`);
	    }
	  }

	  tryParse(fn, oldState = this.state.clone()) {
	    const abortSignal = {
	      node: null
	    };

	    try {
	      const node = fn((node = null) => {
	        abortSignal.node = node;
	        throw abortSignal;
	      });

	      if (this.state.errors.length > oldState.errors.length) {
	        const failState = this.state;
	        this.state = oldState;
	        this.state.tokensLength = failState.tokensLength;
	        return {
	          node,
	          error: failState.errors[oldState.errors.length],
	          thrown: false,
	          aborted: false,
	          failState
	        };
	      }

	      return {
	        node,
	        error: null,
	        thrown: false,
	        aborted: false,
	        failState: null
	      };
	    } catch (error) {
	      const failState = this.state;
	      this.state = oldState;

	      if (error instanceof SyntaxError) {
	        return {
	          node: null,
	          error,
	          thrown: true,
	          aborted: false,
	          failState
	        };
	      }

	      if (error === abortSignal) {
	        return {
	          node: abortSignal.node,
	          error: null,
	          thrown: false,
	          aborted: true,
	          failState
	        };
	      }

	      throw error;
	    }
	  }

	  checkExpressionErrors(refExpressionErrors, andThrow) {
	    if (!refExpressionErrors) return false;
	    const {
	      shorthandAssign,
	      doubleProto,
	      optionalParameters
	    } = refExpressionErrors;

	    if (!andThrow) {
	      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;
	    }

	    if (shorthandAssign >= 0) {
	      this.unexpected(shorthandAssign);
	    }

	    if (doubleProto >= 0) {
	      this.raise(doubleProto, ErrorMessages.DuplicateProto);
	    }

	    if (optionalParameters >= 0) {
	      this.unexpected(optionalParameters);
	    }
	  }

	  isLiteralPropertyName() {
	    return this.match(types$1$1.name) || !!this.state.type.keyword || this.match(types$1$1.string) || this.match(types$1$1.num) || this.match(types$1$1.bigint) || this.match(types$1$1.decimal);
	  }

	  isPrivateName(node) {
	    return node.type === "PrivateName";
	  }

	  getPrivateNameSV(node) {
	    return node.id.name;
	  }

	  hasPropertyAsPrivateName(node) {
	    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
	  }

	  isOptionalChain(node) {
	    return node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression";
	  }

	  isObjectProperty(node) {
	    return node.type === "ObjectProperty";
	  }

	  isObjectMethod(node) {
	    return node.type === "ObjectMethod";
	  }

	  initializeScopes(inModule = this.options.sourceType === "module") {
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    const oldExportedIdentifiers = this.exportedIdentifiers;
	    this.exportedIdentifiers = new Set();
	    const oldInModule = this.inModule;
	    this.inModule = inModule;
	    const oldScope = this.scope;
	    const ScopeHandler = this.getScopeHandler();
	    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);
	    const oldProdParam = this.prodParam;
	    this.prodParam = new ProductionParameterHandler();
	    const oldClassScope = this.classScope;
	    this.classScope = new ClassScopeHandler(this.raise.bind(this));
	    const oldExpressionScope = this.expressionScope;
	    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));
	    return () => {
	      this.state.labels = oldLabels;
	      this.exportedIdentifiers = oldExportedIdentifiers;
	      this.inModule = oldInModule;
	      this.scope = oldScope;
	      this.prodParam = oldProdParam;
	      this.classScope = oldClassScope;
	      this.expressionScope = oldExpressionScope;
	    };
	  }

	  enterInitialScopes() {
	    let paramFlags = PARAM;

	    if (this.hasPlugin("topLevelAwait") && this.inModule) {
	      paramFlags |= PARAM_AWAIT;
	    }

	    this.scope.enter(SCOPE_PROGRAM);
	    this.prodParam.enter(paramFlags);
	  }

	}
	class ExpressionErrors {
	  constructor() {
	    this.shorthandAssign = -1;
	    this.doubleProto = -1;
	    this.optionalParameters = -1;
	  }

	}

	class Node$6 {
	  constructor(parser, pos, loc) {
	    this.type = void 0;
	    this.start = void 0;
	    this.end = void 0;
	    this.loc = void 0;
	    this.range = void 0;
	    this.leadingComments = void 0;
	    this.trailingComments = void 0;
	    this.innerComments = void 0;
	    this.extra = void 0;
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new SourceLocation(loc);
	    if (parser != null && parser.options.ranges) this.range = [pos, 0];
	    if (parser != null && parser.filename) this.loc.filename = parser.filename;
	  }

	  __clone() {
	    const newNode = new Node$6();
	    const keys = Object.keys(this);

	    for (let i = 0, length = keys.length; i < length; i++) {
	      const key = keys[i];

	      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
	        newNode[key] = this[key];
	      }
	    }

	    return newNode;
	  }

	}

	class NodeUtils extends UtilParser {
	  startNode() {
	    return new Node$6(this, this.state.start, this.state.startLoc);
	  }

	  startNodeAt(pos, loc) {
	    return new Node$6(this, pos, loc);
	  }

	  startNodeAtNode(type) {
	    return this.startNodeAt(type.start, type.loc.start);
	  }

	  finishNode(node, type) {
	    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	  }

	  finishNodeAt(node, type, pos, loc) {

	    node.type = type;
	    node.end = pos;
	    node.loc.end = loc;
	    if (this.options.ranges) node.range[1] = pos;
	    this.processComment(node);
	    return node;
	  }

	  resetStartLocation(node, start, startLoc) {
	    node.start = start;
	    node.loc.start = startLoc;
	    if (this.options.ranges) node.range[0] = start;
	  }

	  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {
	    node.end = end;
	    node.loc.end = endLoc;
	    if (this.options.ranges) node.range[1] = end;
	  }

	  resetStartLocationFromNode(node, locationNode) {
	    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
	  }

	}

	const unwrapParenthesizedExpression = node => {
	  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
	};

	class LValParser extends NodeUtils {
	  toAssignable(node, isLHS = false) {
	    var _node$extra, _node$extra3;

	    let parenthesized = undefined;

	    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
	      parenthesized = unwrapParenthesizedExpression(node);

	      if (isLHS) {
	        if (parenthesized.type === "Identifier") {
	          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	        } else if (parenthesized.type !== "MemberExpression") {
	          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	        }
	      } else {
	        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);
	      }
	    }

	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";

	        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
	          var _node$extra2;

	          const prop = node.properties[i];
	          const isLast = i === last;
	          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);

	          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {
	            this.raiseRestNotLast(node.extra.trailingComma);
	          }
	        }

	        break;

	      case "ObjectProperty":
	        this.toAssignable(node.value, isLHS);
	        break;

	      case "SpreadElement":
	        {
	          this.checkToRestConversion(node);
	          node.type = "RestElement";
	          const arg = node.argument;
	          this.toAssignable(arg, isLHS);
	          break;
	        }

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);
	        break;

	      case "AssignmentExpression":
	        if (node.operator !== "=") {
	          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);
	        }

	        node.type = "AssignmentPattern";
	        delete node.operator;
	        this.toAssignable(node.left, isLHS);
	        break;

	      case "ParenthesizedExpression":
	        this.toAssignable(parenthesized, isLHS);
	        break;
	    }

	    return node;
	  }

	  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
	    if (prop.type === "ObjectMethod") {
	      const error = prop.kind === "get" || prop.kind === "set" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;
	      this.raise(prop.key.start, error);
	    } else if (prop.type === "SpreadElement" && !isLast) {
	      this.raiseRestNotLast(prop.start);
	    } else {
	      this.toAssignable(prop, isLHS);
	    }
	  }

	  toAssignableList(exprList, trailingCommaPos, isLHS) {
	    let end = exprList.length;

	    if (end) {
	      const last = exprList[end - 1];

	      if ((last == null ? void 0 : last.type) === "RestElement") {
	        --end;
	      } else if ((last == null ? void 0 : last.type) === "SpreadElement") {
	        last.type = "RestElement";
	        let arg = last.argument;
	        this.toAssignable(arg, isLHS);
	        arg = unwrapParenthesizedExpression(arg);

	        if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern" && arg.type !== "ObjectPattern") {
	          this.unexpected(arg.start);
	        }

	        if (trailingCommaPos) {
	          this.raiseTrailingCommaAfterRest(trailingCommaPos);
	        }

	        --end;
	      }
	    }

	    for (let i = 0; i < end; i++) {
	      const elt = exprList[i];

	      if (elt) {
	        this.toAssignable(elt, isLHS);

	        if (elt.type === "RestElement") {
	          this.raiseRestNotLast(elt.start);
	        }
	      }
	    }

	    return exprList;
	  }

	  toReferencedList(exprList, isParenthesizedExpr) {
	    return exprList;
	  }

	  toReferencedListDeep(exprList, isParenthesizedExpr) {
	    this.toReferencedList(exprList, isParenthesizedExpr);

	    for (const expr of exprList) {
	      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
	        this.toReferencedListDeep(expr.elements);
	      }
	    }
	  }

	  parseSpread(refExpressionErrors, refNeedsArrowPos) {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);
	    return this.finishNode(node, "SpreadElement");
	  }

	  parseRestBinding() {
	    const node = this.startNode();
	    this.next();
	    node.argument = this.parseBindingAtom();
	    return this.finishNode(node, "RestElement");
	  }

	  parseBindingAtom() {
	    switch (this.state.type) {
	      case types$1$1.bracketL:
	        {
	          const node = this.startNode();
	          this.next();
	          node.elements = this.parseBindingList(types$1$1.bracketR, 93, true);
	          return this.finishNode(node, "ArrayPattern");
	        }

	      case types$1$1.braceL:
	        return this.parseObjectLike(types$1$1.braceR, true);
	    }

	    return this.parseIdentifier();
	  }

	  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
	    const elts = [];
	    let first = true;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma);
	      }

	      if (allowEmpty && this.match(types$1$1.comma)) {
	        elts.push(null);
	      } else if (this.eat(close)) {
	        break;
	      } else if (this.match(types$1$1.ellipsis)) {
	        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));
	        this.checkCommaAfterRest(closeCharCode);
	        this.expect(close);
	        break;
	      } else {
	        const decorators = [];

	        if (this.match(types$1$1.at) && this.hasPlugin("decorators")) {
	          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);
	        }

	        while (this.match(types$1$1.at)) {
	          decorators.push(this.parseDecorator());
	        }

	        elts.push(this.parseAssignableListItem(allowModifiers, decorators));
	      }
	    }

	    return elts;
	  }

	  parseAssignableListItem(allowModifiers, decorators) {
	    const left = this.parseMaybeDefault();
	    this.parseAssignableListItemTypes(left);
	    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

	    if (decorators.length) {
	      left.decorators = decorators;
	    }

	    return elt;
	  }

	  parseAssignableListItemTypes(param) {
	    return param;
	  }

	  parseMaybeDefault(startPos, startLoc, left) {
	    var _startLoc, _startPos, _left;

	    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
	    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
	    left = (_left = left) != null ? _left : this.parseBindingAtom();
	    if (!this.eat(types$1$1.eq)) return left;
	    const node = this.startNodeAt(startPos, startLoc);
	    node.left = left;
	    node.right = this.parseMaybeAssignAllowIn();
	    return this.finishNode(node, "AssignmentPattern");
	  }

	  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {
	    switch (expr.type) {
	      case "Identifier":
	        {
	          const {
	            name
	          } = expr;

	          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {
	            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);
	          }

	          if (checkClashes) {
	            if (checkClashes.has(name)) {
	              this.raise(expr.start, ErrorMessages.ParamDupe);
	            } else {
	              checkClashes.add(name);
	            }
	          }

	          if (disallowLetBinding && name === "let") {
	            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);
	          }

	          if (!(bindingType & BIND_NONE)) {
	            this.scope.declareName(name, bindingType, expr.start);
	          }

	          break;
	        }

	      case "MemberExpression":
	        if (bindingType !== BIND_NONE) {
	          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);
	        }

	        break;

	      case "ObjectPattern":
	        for (let prop of expr.properties) {
	          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;
	          this.checkLVal(prop, "object destructuring pattern", bindingType, checkClashes, disallowLetBinding);
	        }

	        break;

	      case "ArrayPattern":
	        for (const elem of expr.elements) {
	          if (elem) {
	            this.checkLVal(elem, "array destructuring pattern", bindingType, checkClashes, disallowLetBinding);
	          }
	        }

	        break;

	      case "AssignmentPattern":
	        this.checkLVal(expr.left, "assignment pattern", bindingType, checkClashes);
	        break;

	      case "RestElement":
	        this.checkLVal(expr.argument, "rest element", bindingType, checkClashes);
	        break;

	      case "ParenthesizedExpression":
	        this.checkLVal(expr.expression, "parenthesized expression", bindingType, checkClashes);
	        break;

	      default:
	        {
	          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);
	        }
	    }
	  }

	  checkToRestConversion(node) {
	    if (node.argument.type !== "Identifier" && node.argument.type !== "MemberExpression") {
	      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);
	    }
	  }

	  checkCommaAfterRest(close) {
	    if (this.match(types$1$1.comma)) {
	      if (this.lookaheadCharCode() === close) {
	        this.raiseTrailingCommaAfterRest(this.state.start);
	      } else {
	        this.raiseRestNotLast(this.state.start);
	      }
	    }
	  }

	  raiseRestNotLast(pos) {
	    throw this.raise(pos, ErrorMessages.ElementAfterRest);
	  }

	  raiseTrailingCommaAfterRest(pos) {
	    this.raise(pos, ErrorMessages.RestTrailingComma);
	  }

	}

	class ExpressionParser extends LValParser {
	  checkProto(prop, isRecord, protoRef, refExpressionErrors) {
	    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
	      return;
	    }

	    const key = prop.key;
	    const name = key.type === "Identifier" ? key.name : key.value;

	    if (name === "__proto__") {
	      if (isRecord) {
	        this.raise(key.start, ErrorMessages.RecordNoProto);
	        return;
	      }

	      if (protoRef.used) {
	        if (refExpressionErrors) {
	          if (refExpressionErrors.doubleProto === -1) {
	            refExpressionErrors.doubleProto = key.start;
	          }
	        } else {
	          this.raise(key.start, ErrorMessages.DuplicateProto);
	        }
	      }

	      protoRef.used = true;
	    }
	  }

	  shouldExitDescending(expr, potentialArrowAt) {
	    return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
	  }

	  getExpression() {
	    let paramFlags = PARAM;

	    if (this.hasPlugin("topLevelAwait") && this.inModule) {
	      paramFlags |= PARAM_AWAIT;
	    }

	    this.scope.enter(SCOPE_PROGRAM);
	    this.prodParam.enter(paramFlags);
	    this.nextToken();
	    const expr = this.parseExpression();

	    if (!this.match(types$1$1.eof)) {
	      this.unexpected();
	    }

	    expr.comments = this.state.comments;
	    expr.errors = this.state.errors;

	    if (this.options.tokens) {
	      expr.tokens = this.tokens;
	    }

	    return expr;
	  }

	  parseExpression(disallowIn, refExpressionErrors) {
	    if (disallowIn) {
	      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	    }

	    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
	  }

	  parseExpressionBase(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const expr = this.parseMaybeAssign(refExpressionErrors);

	    if (this.match(types$1$1.comma)) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.expressions = [expr];

	      while (this.eat(types$1$1.comma)) {
	        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
	      }

	      this.toReferencedList(node.expressions);
	      return this.finishNode(node, "SequenceExpression");
	    }

	    return expr;
	  }

	  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
	    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }

	  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
	    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
	  }

	  setOptionalParametersError(refExpressionErrors, resultError) {
	    var _resultError$pos;

	    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;
	  }

	  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;

	    if (this.isContextual("yield")) {
	      if (this.prodParam.hasYield) {
	        let left = this.parseYield();

	        if (afterLeftParse) {
	          left = afterLeftParse.call(this, left, startPos, startLoc);
	        }

	        return left;
	      }
	    }

	    let ownExpressionErrors;

	    if (refExpressionErrors) {
	      ownExpressionErrors = false;
	    } else {
	      refExpressionErrors = new ExpressionErrors();
	      ownExpressionErrors = true;
	    }

	    if (this.match(types$1$1.parenL) || this.match(types$1$1.name)) {
	      this.state.potentialArrowAt = this.state.start;
	    }

	    let left = this.parseMaybeConditional(refExpressionErrors);

	    if (afterLeftParse) {
	      left = afterLeftParse.call(this, left, startPos, startLoc);
	    }

	    if (this.state.type.isAssign) {
	      const node = this.startNodeAt(startPos, startLoc);
	      const operator = this.state.value;
	      node.operator = operator;

	      if (this.match(types$1$1.eq)) {
	        node.left = this.toAssignable(left, true);
	        refExpressionErrors.doubleProto = -1;
	      } else {
	        node.left = left;
	      }

	      if (refExpressionErrors.shorthandAssign >= node.left.start) {
	        refExpressionErrors.shorthandAssign = -1;
	      }

	      this.checkLVal(left, "assignment expression");
	      this.next();
	      node.right = this.parseMaybeAssign();
	      return this.finishNode(node, "AssignmentExpression");
	    } else if (ownExpressionErrors) {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }

	    return left;
	  }

	  parseMaybeConditional(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprOps(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
	  }

	  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
	    if (this.eat(types$1$1.question)) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.test = expr;
	      node.consequent = this.parseMaybeAssignAllowIn();
	      this.expect(types$1$1.colon);
	      node.alternate = this.parseMaybeAssign();
	      return this.finishNode(node, "ConditionalExpression");
	    }

	    return expr;
	  }

	  parseExprOps(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseMaybeUnary(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseExprOp(expr, startPos, startLoc, -1);
	  }

	  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
	    let prec = this.state.type.binop;

	    if (prec != null && (this.prodParam.hasIn || !this.match(types$1$1._in))) {
	      if (prec > minPrec) {
	        const op = this.state.type;

	        if (op === types$1$1.pipeline) {
	          this.expectPlugin("pipelineOperator");

	          if (this.state.inFSharpPipelineDirectBody) {
	            return left;
	          }

	          this.state.inPipeline = true;
	          this.checkPipelineAtInfixOperator(left, leftStartPos);
	        }

	        const node = this.startNodeAt(leftStartPos, leftStartLoc);
	        node.left = left;
	        node.operator = this.state.value;
	        const logical = op === types$1$1.logicalOR || op === types$1$1.logicalAND;
	        const coalesce = op === types$1$1.nullishCoalescing;

	        if (coalesce) {
	          prec = types$1$1.logicalAND.binop;
	        }

	        this.next();

	        if (op === types$1$1.pipeline && this.getPluginOption("pipelineOperator", "proposal") === "minimal") {
	          if (this.match(types$1$1.name) && this.state.value === "await" && this.prodParam.hasAwait) {
	            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);
	          }
	        }

	        node.right = this.parseExprOpRightExpr(op, prec);
	        this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
	        const nextOp = this.state.type;

	        if (coalesce && (nextOp === types$1$1.logicalOR || nextOp === types$1$1.logicalAND) || logical && nextOp === types$1$1.nullishCoalescing) {
	          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);
	        }

	        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
	      }
	    }

	    return left;
	  }

	  parseExprOpRightExpr(op, prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;

	    switch (op) {
	      case types$1$1.pipeline:
	        switch (this.getPluginOption("pipelineOperator", "proposal")) {
	          case "smart":
	            return this.withTopicPermittingContext(() => {
	              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
	            });

	          case "fsharp":
	            return this.withSoloAwaitPermittingContext(() => {
	              return this.parseFSharpPipelineBody(prec);
	            });
	        }

	      default:
	        return this.parseExprOpBaseRightExpr(op, prec);
	    }
	  }

	  parseExprOpBaseRightExpr(op, prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);
	  }

	  checkExponentialAfterUnary(node) {
	    if (this.match(types$1$1.exponent)) {
	      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);
	    }
	  }

	  parseMaybeUnary(refExpressionErrors, sawUnary) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const isAwait = this.isContextual("await");

	    if (isAwait && this.isAwaitAllowed()) {
	      this.next();
	      const expr = this.parseAwait(startPos, startLoc);
	      if (!sawUnary) this.checkExponentialAfterUnary(expr);
	      return expr;
	    }

	    if (this.isContextual("module") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
	      return this.parseModuleExpression();
	    }

	    const update = this.match(types$1$1.incDec);
	    const node = this.startNode();

	    if (this.state.type.prefix) {
	      node.operator = this.state.value;
	      node.prefix = true;

	      if (this.match(types$1$1._throw)) {
	        this.expectPlugin("throwExpressions");
	      }

	      const isDelete = this.match(types$1$1._delete);
	      this.next();
	      node.argument = this.parseMaybeUnary(null, true);
	      this.checkExpressionErrors(refExpressionErrors, true);

	      if (this.state.strict && isDelete) {
	        const arg = node.argument;

	        if (arg.type === "Identifier") {
	          this.raise(node.start, ErrorMessages.StrictDelete);
	        } else if (this.hasPropertyAsPrivateName(arg)) {
	          this.raise(node.start, ErrorMessages.DeletePrivateField);
	        }
	      }

	      if (!update) {
	        if (!sawUnary) this.checkExponentialAfterUnary(node);
	        return this.finishNode(node, "UnaryExpression");
	      }
	    }

	    const expr = this.parseUpdate(node, update, refExpressionErrors);

	    if (isAwait) {
	      const startsExpr = this.hasPlugin("v8intrinsic") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1$1.modulo);

	      if (startsExpr && !this.isAmbiguousAwait()) {
	        this.raiseOverwrite(startPos, this.hasPlugin("topLevelAwait") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);
	        return this.parseAwait(startPos, startLoc);
	      }
	    }

	    return expr;
	  }

	  parseUpdate(node, update, refExpressionErrors) {
	    if (update) {
	      this.checkLVal(node.argument, "prefix operation");
	      return this.finishNode(node, "UpdateExpression");
	    }

	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let expr = this.parseExprSubscripts(refExpressionErrors);
	    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;

	    while (this.state.type.postfix && !this.canInsertSemicolon()) {
	      const node = this.startNodeAt(startPos, startLoc);
	      node.operator = this.state.value;
	      node.prefix = false;
	      node.argument = expr;
	      this.checkLVal(expr, "postfix operation");
	      this.next();
	      expr = this.finishNode(node, "UpdateExpression");
	    }

	    return expr;
	  }

	  parseExprSubscripts(refExpressionErrors) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    const potentialArrowAt = this.state.potentialArrowAt;
	    const expr = this.parseExprAtom(refExpressionErrors);

	    if (this.shouldExitDescending(expr, potentialArrowAt)) {
	      return expr;
	    }

	    return this.parseSubscripts(expr, startPos, startLoc);
	  }

	  parseSubscripts(base, startPos, startLoc, noCalls) {
	    const state = {
	      optionalChainMember: false,
	      maybeAsyncArrow: this.atPossibleAsyncArrow(base),
	      stop: false
	    };

	    do {
	      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);
	      state.maybeAsyncArrow = false;
	    } while (!state.stop);

	    return base;
	  }

	  parseSubscript(base, startPos, startLoc, noCalls, state) {
	    if (!noCalls && this.eat(types$1$1.doubleColon)) {
	      return this.parseBind(base, startPos, startLoc, noCalls, state);
	    } else if (this.match(types$1$1.backQuote)) {
	      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
	    }

	    let optional = false;

	    if (this.match(types$1$1.questionDot)) {
	      if (noCalls && this.lookaheadCharCode() === 40) {
	        state.stop = true;
	        return base;
	      }

	      state.optionalChainMember = optional = true;
	      this.next();
	    }

	    if (!noCalls && this.match(types$1$1.parenL)) {
	      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
	    } else if (optional || this.match(types$1$1.bracketL) || this.eat(types$1$1.dot)) {
	      return this.parseMember(base, startPos, startLoc, state, optional);
	    } else {
	      state.stop = true;
	      return base;
	    }
	  }

	  parseMember(base, startPos, startLoc, state, optional) {
	    const node = this.startNodeAt(startPos, startLoc);
	    const computed = this.eat(types$1$1.bracketL);
	    node.object = base;
	    node.computed = computed;
	    const privateName = !computed && this.match(types$1$1.privateName) && this.state.value;
	    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);

	    if (privateName !== false) {
	      if (node.object.type === "Super") {
	        this.raise(startPos, ErrorMessages.SuperPrivateField);
	      }

	      this.classScope.usePrivateName(privateName, property.start);
	    }

	    node.property = property;

	    if (computed) {
	      this.expect(types$1$1.bracketR);
	    }

	    if (state.optionalChainMember) {
	      node.optional = optional;
	      return this.finishNode(node, "OptionalMemberExpression");
	    } else {
	      return this.finishNode(node, "MemberExpression");
	    }
	  }

	  parseBind(base, startPos, startLoc, noCalls, state) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.object = base;
	    node.callee = this.parseNoCallExpr();
	    state.stop = true;
	    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	  }

	  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    let refExpressionErrors = null;
	    this.state.maybeInArrowParameters = true;
	    this.next();
	    let node = this.startNodeAt(startPos, startLoc);
	    node.callee = base;

	    if (state.maybeAsyncArrow) {
	      this.expressionScope.enter(newAsyncArrowScope());
	      refExpressionErrors = new ExpressionErrors();
	    }

	    if (state.optionalChainMember) {
	      node.optional = optional;
	    }

	    if (optional) {
	      node.arguments = this.parseCallExpressionArguments(types$1$1.parenR);
	    } else {
	      node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
	    }

	    this.finishCallExpression(node, state.optionalChainMember);

	    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
	      state.stop = true;
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	    } else {
	      if (state.maybeAsyncArrow) {
	        this.checkExpressionErrors(refExpressionErrors, true);
	        this.expressionScope.exit();
	      }

	      this.toReferencedArguments(node);
	    }

	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return node;
	  }

	  toReferencedArguments(node, isParenthesizedExpr) {
	    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
	  }

	  parseTaggedTemplateExpression(base, startPos, startLoc, state) {
	    const node = this.startNodeAt(startPos, startLoc);
	    node.tag = base;
	    node.quasi = this.parseTemplate(true);

	    if (state.optionalChainMember) {
	      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);
	    }

	    return this.finishNode(node, "TaggedTemplateExpression");
	  }

	  atPossibleAsyncArrow(base) {
	    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
	  }

	  finishCallExpression(node, optional) {
	    if (node.callee.type === "Import") {
	      if (node.arguments.length === 2) {
	        {
	          if (!this.hasPlugin("moduleAttributes")) {
	            this.expectPlugin("importAssertions");
	          }
	        }
	      }

	      if (node.arguments.length === 0 || node.arguments.length > 2) {
	        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
	      } else {
	        for (const arg of node.arguments) {
	          if (arg.type === "SpreadElement") {
	            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);
	          }
	        }
	      }
	    }

	    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
	  }

	  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
	    const elts = [];
	    let first = true;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma);

	        if (this.match(close)) {
	          if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
	            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);
	          }

	          if (nodeForExtra) {
	            this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
	          }

	          this.next();
	          break;
	        }
	      }

	      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
	    }

	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return elts;
	  }

	  shouldParseAsyncArrow() {
	    return this.match(types$1$1.arrow) && !this.canInsertSemicolon();
	  }

	  parseAsyncArrowFromCallExpression(node, call) {
	    var _call$extra;

	    this.expect(types$1$1.arrow);
	    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);
	    return node;
	  }

	  parseNoCallExpr() {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	  }

	  parseExprAtom(refExpressionErrors) {
	    let node;

	    switch (this.state.type) {
	      case types$1$1._super:
	        return this.parseSuper();

	      case types$1$1._import:
	        node = this.startNode();
	        this.next();

	        if (this.match(types$1$1.dot)) {
	          return this.parseImportMetaProperty(node);
	        }

	        if (!this.match(types$1$1.parenL)) {
	          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);
	        }

	        return this.finishNode(node, "Import");

	      case types$1$1._this:
	        node = this.startNode();
	        this.next();
	        return this.finishNode(node, "ThisExpression");

	      case types$1$1.name:
	        {
	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          const containsEsc = this.state.containsEsc;
	          const id = this.parseIdentifier();

	          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
	            if (this.match(types$1$1._function)) {
	              this.next();
	              return this.parseFunction(this.startNodeAtNode(id), undefined, true);
	            } else if (this.match(types$1$1.name)) {
	              if (this.lookaheadCharCode() === 61) {
	                return this.parseAsyncArrowUnaryFunction(id);
	              } else {
	                return id;
	              }
	            } else if (this.match(types$1$1._do)) {
	              return this.parseDo(true);
	            }
	          }

	          if (canBeArrow && this.match(types$1$1.arrow) && !this.canInsertSemicolon()) {
	            this.next();
	            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
	          }

	          return id;
	        }

	      case types$1$1._do:
	        {
	          return this.parseDo(false);
	        }

	      case types$1$1.slash:
	      case types$1$1.slashAssign:
	        {
	          this.readRegexp();
	          return this.parseRegExpLiteral(this.state.value);
	        }

	      case types$1$1.num:
	        return this.parseNumericLiteral(this.state.value);

	      case types$1$1.bigint:
	        return this.parseBigIntLiteral(this.state.value);

	      case types$1$1.decimal:
	        return this.parseDecimalLiteral(this.state.value);

	      case types$1$1.string:
	        return this.parseStringLiteral(this.state.value);

	      case types$1$1._null:
	        return this.parseNullLiteral();

	      case types$1$1._true:
	        return this.parseBooleanLiteral(true);

	      case types$1$1._false:
	        return this.parseBooleanLiteral(false);

	      case types$1$1.parenL:
	        {
	          const canBeArrow = this.state.potentialArrowAt === this.state.start;
	          return this.parseParenAndDistinguishExpression(canBeArrow);
	        }

	      case types$1$1.bracketBarL:
	      case types$1$1.bracketHashL:
	        {
	          return this.parseArrayLike(this.state.type === types$1$1.bracketBarL ? types$1$1.bracketBarR : types$1$1.bracketR, false, true, refExpressionErrors);
	        }

	      case types$1$1.bracketL:
	        {
	          return this.parseArrayLike(types$1$1.bracketR, true, false, refExpressionErrors);
	        }

	      case types$1$1.braceBarL:
	      case types$1$1.braceHashL:
	        {
	          return this.parseObjectLike(this.state.type === types$1$1.braceBarL ? types$1$1.braceBarR : types$1$1.braceR, false, true, refExpressionErrors);
	        }

	      case types$1$1.braceL:
	        {
	          return this.parseObjectLike(types$1$1.braceR, false, false, refExpressionErrors);
	        }

	      case types$1$1._function:
	        return this.parseFunctionOrFunctionSent();

	      case types$1$1.at:
	        this.parseDecorators();

	      case types$1$1._class:
	        node = this.startNode();
	        this.takeDecorators(node);
	        return this.parseClass(node, false);

	      case types$1$1._new:
	        return this.parseNewOrNewTarget();

	      case types$1$1.backQuote:
	        return this.parseTemplate(false);

	      case types$1$1.doubleColon:
	        {
	          node = this.startNode();
	          this.next();
	          node.object = null;
	          const callee = node.callee = this.parseNoCallExpr();

	          if (callee.type === "MemberExpression") {
	            return this.finishNode(node, "BindExpression");
	          } else {
	            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);
	          }
	        }

	      case types$1$1.privateName:
	        {
	          const start = this.state.start;
	          const value = this.state.value;
	          node = this.parsePrivateName();

	          if (this.match(types$1$1._in)) {
	            this.expectPlugin("privateIn");
	            this.classScope.usePrivateName(value, node.start);
	          } else if (this.hasPlugin("privateIn")) {
	            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);
	          } else {
	            throw this.unexpected(start);
	          }

	          return node;
	        }

	      case types$1$1.hash:
	        {
	          if (this.state.inPipeline) {
	            node = this.startNode();

	            if (this.getPluginOption("pipelineOperator", "proposal") !== "smart") {
	              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);
	            }

	            this.next();

	            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {
	              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);
	            }

	            this.registerTopicReference();
	            return this.finishNode(node, "PipelinePrimaryTopicReference");
	          }
	        }

	      case types$1$1.relational:
	        {
	          if (this.state.value === "<") {
	            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());

	            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
	                this.expectOnePlugin(["jsx", "flow", "typescript"]);
	              }
	          }
	        }

	      default:
	        throw this.unexpected();
	    }
	  }

	  parseAsyncArrowUnaryFunction(id) {
	    const node = this.startNodeAtNode(id);
	    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
	    const params = [this.parseIdentifier()];
	    this.prodParam.exit();

	    if (this.hasPrecedingLineBreak()) {
	      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);
	    }

	    this.expect(types$1$1.arrow);
	    this.parseArrowExpression(node, params, true);
	    return node;
	  }

	  parseDo(isAsync) {
	    this.expectPlugin("doExpressions");

	    if (isAsync) {
	      this.expectPlugin("asyncDoExpressions");
	    }

	    const node = this.startNode();
	    node.async = isAsync;
	    this.next();
	    const oldLabels = this.state.labels;
	    this.state.labels = [];

	    if (isAsync) {
	      this.prodParam.enter(PARAM_AWAIT);
	      node.body = this.parseBlock();
	      this.prodParam.exit();
	    } else {
	      node.body = this.parseBlock();
	    }

	    this.state.labels = oldLabels;
	    return this.finishNode(node, "DoExpression");
	  }

	  parseSuper() {
	    const node = this.startNode();
	    this.next();

	    if (this.match(types$1$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(node.start, ErrorMessages.SuperNotAllowed);
	    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
	      this.raise(node.start, ErrorMessages.UnexpectedSuper);
	    }

	    if (!this.match(types$1$1.parenL) && !this.match(types$1$1.bracketL) && !this.match(types$1$1.dot)) {
	      this.raise(node.start, ErrorMessages.UnsupportedSuper);
	    }

	    return this.finishNode(node, "Super");
	  }

	  parseMaybePrivateName(isPrivateNameAllowed) {
	    const isPrivate = this.match(types$1$1.privateName);

	    if (isPrivate) {
	      if (!isPrivateNameAllowed) {
	        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);
	      }

	      return this.parsePrivateName();
	    } else {
	      return this.parseIdentifier(true);
	    }
	  }

	  parsePrivateName() {
	    const node = this.startNode();
	    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));
	    const name = this.state.value;
	    this.next();
	    node.id = this.createIdentifier(id, name);
	    return this.finishNode(node, "PrivateName");
	  }

	  parseFunctionOrFunctionSent() {
	    const node = this.startNode();
	    this.next();

	    if (this.prodParam.hasYield && this.match(types$1$1.dot)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
	      this.next();
	      return this.parseMetaProperty(node, meta, "sent");
	    }

	    return this.parseFunction(node);
	  }

	  parseMetaProperty(node, meta, propertyName) {
	    node.meta = meta;

	    if (meta.name === "function" && propertyName === "sent") {
	      if (this.isContextual(propertyName)) {
	        this.expectPlugin("functionSent");
	      } else if (!this.hasPlugin("functionSent")) {
	        this.unexpected();
	      }
	    }

	    const containsEsc = this.state.containsEsc;
	    node.property = this.parseIdentifier(true);

	    if (node.property.name !== propertyName || containsEsc) {
	      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);
	    }

	    return this.finishNode(node, "MetaProperty");
	  }

	  parseImportMetaProperty(node) {
	    const id = this.createIdentifier(this.startNodeAtNode(node), "import");
	    this.next();

	    if (this.isContextual("meta")) {
	      if (!this.inModule) {
	        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);
	      }

	      this.sawUnambiguousESM = true;
	    }

	    return this.parseMetaProperty(node, id, "meta");
	  }

	  parseLiteralAtNode(value, type, node) {
	    this.addExtra(node, "rawValue", value);
	    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
	    node.value = value;
	    this.next();
	    return this.finishNode(node, type);
	  }

	  parseLiteral(value, type) {
	    const node = this.startNode();
	    return this.parseLiteralAtNode(value, type, node);
	  }

	  parseStringLiteral(value) {
	    return this.parseLiteral(value, "StringLiteral");
	  }

	  parseNumericLiteral(value) {
	    return this.parseLiteral(value, "NumericLiteral");
	  }

	  parseBigIntLiteral(value) {
	    return this.parseLiteral(value, "BigIntLiteral");
	  }

	  parseDecimalLiteral(value) {
	    return this.parseLiteral(value, "DecimalLiteral");
	  }

	  parseRegExpLiteral(value) {
	    const node = this.parseLiteral(value.value, "RegExpLiteral");
	    node.pattern = value.pattern;
	    node.flags = value.flags;
	    return node;
	  }

	  parseBooleanLiteral(value) {
	    const node = this.startNode();
	    node.value = value;
	    this.next();
	    return this.finishNode(node, "BooleanLiteral");
	  }

	  parseNullLiteral() {
	    const node = this.startNode();
	    this.next();
	    return this.finishNode(node, "NullLiteral");
	  }

	  parseParenAndDistinguishExpression(canBeArrow) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    let val;
	    this.next();
	    this.expressionScope.enter(newArrowHeadScope());
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.maybeInArrowParameters = true;
	    this.state.inFSharpPipelineDirectBody = false;
	    const innerStartPos = this.state.start;
	    const innerStartLoc = this.state.startLoc;
	    const exprList = [];
	    const refExpressionErrors = new ExpressionErrors();
	    let first = true;
	    let spreadStart;
	    let optionalCommaStart;

	    while (!this.match(types$1$1.parenR)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);

	        if (this.match(types$1$1.parenR)) {
	          optionalCommaStart = this.state.start;
	          break;
	        }
	      }

	      if (this.match(types$1$1.ellipsis)) {
	        const spreadNodeStartPos = this.state.start;
	        const spreadNodeStartLoc = this.state.startLoc;
	        spreadStart = this.state.start;
	        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));
	        this.checkCommaAfterRest(41);
	        break;
	      } else {
	        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
	      }
	    }

	    const innerEndPos = this.state.lastTokEnd;
	    const innerEndLoc = this.state.lastTokEndLoc;
	    this.expect(types$1$1.parenR);
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let arrowNode = this.startNodeAt(startPos, startLoc);

	    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {
	      this.expressionScope.validateAsPattern();
	      this.expressionScope.exit();
	      this.parseArrowExpression(arrowNode, exprList, false);
	      return arrowNode;
	    }

	    this.expressionScope.exit();

	    if (!exprList.length) {
	      this.unexpected(this.state.lastTokStart);
	    }

	    if (optionalCommaStart) this.unexpected(optionalCommaStart);
	    if (spreadStart) this.unexpected(spreadStart);
	    this.checkExpressionErrors(refExpressionErrors, true);
	    this.toReferencedListDeep(exprList, true);

	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartPos, innerStartLoc);
	      val.expressions = exprList;
	      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }

	    if (!this.options.createParenthesizedExpressions) {
	      this.addExtra(val, "parenthesized", true);
	      this.addExtra(val, "parenStart", startPos);
	      return val;
	    }

	    const parenExpression = this.startNodeAt(startPos, startLoc);
	    parenExpression.expression = val;
	    this.finishNode(parenExpression, "ParenthesizedExpression");
	    return parenExpression;
	  }

	  shouldParseArrow() {
	    return !this.canInsertSemicolon();
	  }

	  parseArrow(node) {
	    if (this.eat(types$1$1.arrow)) {
	      return node;
	    }
	  }

	  parseParenItem(node, startPos, startLoc) {
	    return node;
	  }

	  parseNewOrNewTarget() {
	    const node = this.startNode();
	    this.next();

	    if (this.match(types$1$1.dot)) {
	      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
	      this.next();
	      const metaProp = this.parseMetaProperty(node, meta, "target");

	      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
	        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);
	      }

	      return metaProp;
	    }

	    return this.parseNew(node);
	  }

	  parseNew(node) {
	    node.callee = this.parseNoCallExpr();

	    if (node.callee.type === "Import") {
	      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);
	    } else if (this.isOptionalChain(node.callee)) {
	      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);
	    } else if (this.eat(types$1$1.questionDot)) {
	      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);
	    }

	    this.parseNewArguments(node);
	    return this.finishNode(node, "NewExpression");
	  }

	  parseNewArguments(node) {
	    if (this.eat(types$1$1.parenL)) {
	      const args = this.parseExprList(types$1$1.parenR);
	      this.toReferencedList(args);
	      node.arguments = args;
	    } else {
	      node.arguments = [];
	    }
	  }

	  parseTemplateElement(isTagged) {
	    const elem = this.startNode();

	    if (this.state.value === null) {
	      if (!isTagged) {
	        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);
	      }
	    }

	    elem.value = {
	      raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	      cooked: this.state.value
	    };
	    this.next();
	    elem.tail = this.match(types$1$1.backQuote);
	    return this.finishNode(elem, "TemplateElement");
	  }

	  parseTemplate(isTagged) {
	    const node = this.startNode();
	    this.next();
	    node.expressions = [];
	    let curElt = this.parseTemplateElement(isTagged);
	    node.quasis = [curElt];

	    while (!curElt.tail) {
	      this.expect(types$1$1.dollarBraceL);
	      node.expressions.push(this.parseTemplateSubstitution());
	      this.expect(types$1$1.braceR);
	      node.quasis.push(curElt = this.parseTemplateElement(isTagged));
	    }

	    this.next();
	    return this.finishNode(node, "TemplateLiteral");
	  }

	  parseTemplateSubstitution() {
	    return this.parseExpression();
	  }

	  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
	    if (isRecord) {
	      this.expectPlugin("recordAndTuple");
	    }

	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const propHash = Object.create(null);
	    let first = true;
	    const node = this.startNode();
	    node.properties = [];
	    this.next();

	    while (!this.match(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma);

	        if (this.match(close)) {
	          this.addExtra(node, "trailingComma", this.state.lastTokStart);
	          break;
	        }
	      }

	      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);

	      if (!isPattern) {
	        this.checkProto(prop, isRecord, propHash, refExpressionErrors);
	      }

	      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
	        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);
	      }

	      if (prop.shorthand) {
	        this.addExtra(prop, "shorthand", true);
	      }

	      node.properties.push(prop);
	    }

	    this.next();
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    let type = "ObjectExpression";

	    if (isPattern) {
	      type = "ObjectPattern";
	    } else if (isRecord) {
	      type = "RecordExpression";
	    }

	    return this.finishNode(node, type);
	  }

	  maybeAsyncOrAccessorProp(prop) {
	    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(types$1$1.bracketL) || this.match(types$1$1.star));
	  }

	  parsePropertyDefinition(isPattern, refExpressionErrors) {
	    let decorators = [];

	    if (this.match(types$1$1.at)) {
	      if (this.hasPlugin("decorators")) {
	        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);
	      }

	      while (this.match(types$1$1.at)) {
	        decorators.push(this.parseDecorator());
	      }
	    }

	    const prop = this.startNode();
	    let isGenerator = false;
	    let isAsync = false;
	    let isAccessor = false;
	    let startPos;
	    let startLoc;

	    if (this.match(types$1$1.ellipsis)) {
	      if (decorators.length) this.unexpected();

	      if (isPattern) {
	        this.next();
	        prop.argument = this.parseIdentifier();
	        this.checkCommaAfterRest(125);
	        return this.finishNode(prop, "RestElement");
	      }

	      return this.parseSpread();
	    }

	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }

	    prop.method = false;

	    if (isPattern || refExpressionErrors) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(types$1$1.star);
	    }

	    const containsEsc = this.state.containsEsc;
	    const key = this.parsePropertyName(prop, false);

	    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
	      const keyName = key.name;

	      if (keyName === "async" && !this.hasPrecedingLineBreak()) {
	        isAsync = true;
	        isGenerator = this.eat(types$1$1.star);
	        this.parsePropertyName(prop, false);
	      }

	      if (keyName === "get" || keyName === "set") {
	        isAccessor = true;
	        prop.kind = keyName;

	        if (this.match(types$1$1.star)) {
	          isGenerator = true;
	          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);
	          this.next();
	        }

	        this.parsePropertyName(prop, false);
	      }
	    }

	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
	    return prop;
	  }

	  getGetterSetterExpectedParamCount(method) {
	    return method.kind === "get" ? 0 : 1;
	  }

	  getObjectOrClassMethodParams(method) {
	    return method.params;
	  }

	  checkGetterSetterParams(method) {
	    var _params;

	    const paramCount = this.getGetterSetterExpectedParamCount(method);
	    const params = this.getObjectOrClassMethodParams(method);
	    const start = method.start;

	    if (params.length !== paramCount) {
	      if (method.kind === "get") {
	        this.raise(start, ErrorMessages.BadGetterArity);
	      } else {
	        this.raise(start, ErrorMessages.BadSetterArity);
	      }
	    }

	    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
	      this.raise(start, ErrorMessages.BadSetterRestParameter);
	    }
	  }

	  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
	    if (isAccessor) {
	      this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
	      this.checkGetterSetterParams(prop);
	      return prop;
	    }

	    if (isAsync || isGenerator || this.match(types$1$1.parenL)) {
	      if (isPattern) this.unexpected();
	      prop.kind = "method";
	      prop.method = true;
	      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
	    }
	  }

	  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
	    prop.shorthand = false;

	    if (this.eat(types$1$1.colon)) {
	      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
	      return this.finishNode(prop, "ObjectProperty");
	    }

	    if (!prop.computed && prop.key.type === "Identifier") {
	      this.checkReservedWord(prop.key.name, prop.key.start, true, false);

	      if (isPattern) {
	        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	      } else if (this.match(types$1$1.eq) && refExpressionErrors) {
	        if (refExpressionErrors.shorthandAssign === -1) {
	          refExpressionErrors.shorthandAssign = this.state.start;
	        }

	        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	      } else {
	        prop.value = prop.key.__clone();
	      }

	      prop.shorthand = true;
	      return this.finishNode(prop, "ObjectProperty");
	    }
	  }

	  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
	    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
	    if (!node) this.unexpected();
	    return node;
	  }

	  parsePropertyName(prop, isPrivateNameAllowed) {
	    if (this.eat(types$1$1.bracketL)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssignAllowIn();
	      this.expect(types$1$1.bracketR);
	    } else {
	      const oldInPropertyName = this.state.inPropertyName;
	      this.state.inPropertyName = true;
	      const type = this.state.type;
	      prop.key = type === types$1$1.num || type === types$1$1.string || type === types$1$1.bigint || type === types$1$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);

	      if (type !== types$1$1.privateName) {
	        prop.computed = false;
	      }

	      this.state.inPropertyName = oldInPropertyName;
	    }

	    return prop.key;
	  }

	  initFunction(node, isAsync) {
	    node.id = null;
	    node.generator = false;
	    node.async = !!isAsync;
	  }

	  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
	    this.initFunction(node, isAsync);
	    node.generator = !!isGenerator;
	    const allowModifiers = isConstructor;
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
	    this.prodParam.enter(functionFlags(isAsync, node.generator));
	    this.parseFunctionParams(node, allowModifiers);
	    this.parseFunctionBodyAndFinish(node, type, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    return node;
	  }

	  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
	    if (isTuple) {
	      this.expectPlugin("recordAndTuple");
	    }

	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = false;
	    const node = this.startNode();
	    this.next();
	    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
	  }

	  parseArrowExpression(node, params, isAsync, trailingCommaPos) {
	    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
	    let flags = functionFlags(isAsync, false);

	    if (!this.match(types$1$1.bracketL) && this.prodParam.hasIn) {
	      flags |= PARAM_IN;
	    }

	    this.prodParam.enter(flags);
	    this.initFunction(node, isAsync);
	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;

	    if (params) {
	      this.state.maybeInArrowParameters = true;
	      this.setArrowFunctionParameters(node, params, trailingCommaPos);
	    }

	    this.state.maybeInArrowParameters = false;
	    this.parseFunctionBody(node, true);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return this.finishNode(node, "ArrowFunctionExpression");
	  }

	  setArrowFunctionParameters(node, params, trailingCommaPos) {
	    node.params = this.toAssignableList(params, trailingCommaPos, false);
	  }

	  parseFunctionBodyAndFinish(node, type, isMethod = false) {
	    this.parseFunctionBody(node, false, isMethod);
	    this.finishNode(node, type);
	  }

	  parseFunctionBody(node, allowExpression, isMethod = false) {
	    const isExpression = allowExpression && !this.match(types$1$1.braceL);
	    this.expressionScope.enter(newExpressionScope());

	    if (isExpression) {
	      node.body = this.parseMaybeAssign();
	      this.checkParams(node, false, allowExpression, false);
	    } else {
	      const oldStrict = this.state.strict;
	      const oldLabels = this.state.labels;
	      this.state.labels = [];
	      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
	      node.body = this.parseBlock(true, false, hasStrictModeDirective => {
	        const nonSimple = !this.isSimpleParamList(node.params);

	        if (hasStrictModeDirective && nonSimple) {
	          const errorPos = (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.end : node.start;
	          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);
	        }

	        const strictModeChanged = !oldStrict && this.state.strict;
	        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);

	        if (this.state.strict && node.id) {
	          this.checkLVal(node.id, "function name", BIND_OUTSIDE, undefined, undefined, strictModeChanged);
	        }
	      });
	      this.prodParam.exit();
	      this.expressionScope.exit();
	      this.state.labels = oldLabels;
	    }
	  }

	  isSimpleParamList(params) {
	    for (let i = 0, len = params.length; i < len; i++) {
	      if (params[i].type !== "Identifier") return false;
	    }

	    return true;
	  }

	  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
	    const checkClashes = new Set();

	    for (const param of node.params) {
	      this.checkLVal(param, "function parameter list", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);
	    }
	  }

	  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
	    const elts = [];
	    let first = true;

	    while (!this.eat(close)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma);

	        if (this.match(close)) {
	          if (nodeForExtra) {
	            this.addExtra(nodeForExtra, "trailingComma", this.state.lastTokStart);
	          }

	          this.next();
	          break;
	        }
	      }

	      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
	    }

	    return elts;
	  }

	  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
	    let elt;

	    if (this.match(types$1$1.comma)) {
	      if (!allowEmpty) {
	        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, ",");
	      }

	      elt = null;
	    } else if (this.match(types$1$1.ellipsis)) {
	      const spreadNodeStartPos = this.state.start;
	      const spreadNodeStartLoc = this.state.startLoc;
	      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
	    } else if (this.match(types$1$1.question)) {
	      this.expectPlugin("partialApplication");

	      if (!allowPlaceholder) {
	        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);
	      }

	      const node = this.startNode();
	      this.next();
	      elt = this.finishNode(node, "ArgumentPlaceholder");
	    } else {
	      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
	    }

	    return elt;
	  }

	  parseIdentifier(liberal) {
	    const node = this.startNode();
	    const name = this.parseIdentifierName(node.start, liberal);
	    return this.createIdentifier(node, name);
	  }

	  createIdentifier(node, name) {
	    node.name = name;
	    node.loc.identifierName = name;
	    return this.finishNode(node, "Identifier");
	  }

	  parseIdentifierName(pos, liberal) {
	    let name;
	    const {
	      start,
	      type
	    } = this.state;

	    if (type === types$1$1.name) {
	      name = this.state.value;
	    } else if (type.keyword) {
	      name = type.keyword;
	    } else {
	      throw this.unexpected();
	    }

	    if (liberal) {
	      this.state.type = types$1$1.name;
	    } else {
	      this.checkReservedWord(name, start, !!type.keyword, false);
	    }

	    this.next();
	    return name;
	  }

	  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
	    if (word.length > 10) {
	      return;
	    }

	    if (!canBeReservedWord(word)) {
	      return;
	    }

	    if (word === "yield") {
	      if (this.prodParam.hasYield) {
	        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);
	        return;
	      }
	    } else if (word === "await") {
	      if (this.prodParam.hasAwait) {
	        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);
	        return;
	      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {
	        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);
	        return;
	      } else {
	        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);
	      }
	    } else if (word === "arguments") {
	      if (this.scope.inClassAndNotInNonArrowFunction) {
	        this.raise(startLoc, ErrorMessages.ArgumentsInClass);
	        return;
	      }
	    }

	    if (checkKeywords && isKeyword(word)) {
	      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);
	      return;
	    }

	    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;

	    if (reservedTest(word, this.inModule)) {
	      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);
	    }
	  }

	  isAwaitAllowed() {
	    if (this.prodParam.hasAwait) return true;

	    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
	      return true;
	    }

	    return false;
	  }

	  parseAwait(startPos, startLoc) {
	    const node = this.startNodeAt(startPos, startLoc);
	    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);

	    if (this.eat(types$1$1.star)) {
	      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);
	    }

	    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
	      if (this.isAmbiguousAwait()) {
	        this.ambiguousScriptDifferentAst = true;
	      } else {
	        this.sawUnambiguousESM = true;
	      }
	    }

	    if (!this.state.soloAwait) {
	      node.argument = this.parseMaybeUnary(null, true);
	    }

	    return this.finishNode(node, "AwaitExpression");
	  }

	  isAmbiguousAwait() {
	    return this.hasPrecedingLineBreak() || this.match(types$1$1.plusMin) || this.match(types$1$1.parenL) || this.match(types$1$1.bracketL) || this.match(types$1$1.backQuote) || this.match(types$1$1.regexp) || this.match(types$1$1.slash) || this.hasPlugin("v8intrinsic") && this.match(types$1$1.modulo);
	  }

	  parseYield() {
	    const node = this.startNode();
	    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);
	    this.next();
	    let delegating = false;
	    let argument = null;

	    if (!this.hasPrecedingLineBreak()) {
	      delegating = this.eat(types$1$1.star);

	      switch (this.state.type) {
	        case types$1$1.semi:
	        case types$1$1.eof:
	        case types$1$1.braceR:
	        case types$1$1.parenR:
	        case types$1$1.bracketR:
	        case types$1$1.braceBarR:
	        case types$1$1.colon:
	        case types$1$1.comma:
	          if (!delegating) break;

	        default:
	          argument = this.parseMaybeAssign();
	      }
	    }

	    node.delegate = delegating;
	    node.argument = argument;
	    return this.finishNode(node, "YieldExpression");
	  }

	  checkPipelineAtInfixOperator(left, leftStartPos) {
	    if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {
	      if (left.type === "SequenceExpression") {
	        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);
	      }
	    }
	  }

	  parseSmartPipelineBody(childExpression, startPos, startLoc) {
	    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);
	    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);
	  }

	  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {
	    if (this.match(types$1$1.arrow)) {
	      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);
	    } else if (childExpression.type === "SequenceExpression") {
	      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);
	    }
	  }

	  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {
	    const bodyNode = this.startNodeAt(startPos, startLoc);
	    const isSimpleReference = this.isSimpleReference(childExpression);

	    if (isSimpleReference) {
	      bodyNode.callee = childExpression;
	    } else {
	      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {
	        this.raise(startPos, ErrorMessages.PipelineTopicUnused);
	      }

	      bodyNode.expression = childExpression;
	    }

	    return this.finishNode(bodyNode, isSimpleReference ? "PipelineBareFunction" : "PipelineTopicExpression");
	  }

	  isSimpleReference(expression) {
	    switch (expression.type) {
	      case "MemberExpression":
	        return !expression.computed && this.isSimpleReference(expression.object);

	      case "Identifier":
	        return true;

	      default:
	        return false;
	    }
	  }

	  withTopicPermittingContext(callback) {
	    const outerContextTopicState = this.state.topicContext;
	    this.state.topicContext = {
	      maxNumOfResolvableTopics: 1,
	      maxTopicIndex: null
	    };

	    try {
	      return callback();
	    } finally {
	      this.state.topicContext = outerContextTopicState;
	    }
	  }

	  withTopicForbiddingContext(callback) {
	    const outerContextTopicState = this.state.topicContext;
	    this.state.topicContext = {
	      maxNumOfResolvableTopics: 0,
	      maxTopicIndex: null
	    };

	    try {
	      return callback();
	    } finally {
	      this.state.topicContext = outerContextTopicState;
	    }
	  }

	  withSoloAwaitPermittingContext(callback) {
	    const outerContextSoloAwaitState = this.state.soloAwait;
	    this.state.soloAwait = true;

	    try {
	      return callback();
	    } finally {
	      this.state.soloAwait = outerContextSoloAwaitState;
	    }
	  }

	  allowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToSet = PARAM_IN & ~flags;

	    if (prodParamToSet) {
	      this.prodParam.enter(flags | PARAM_IN);

	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }

	    return callback();
	  }

	  disallowInAnd(callback) {
	    const flags = this.prodParam.currentFlags();
	    const prodParamToClear = PARAM_IN & flags;

	    if (prodParamToClear) {
	      this.prodParam.enter(flags & ~PARAM_IN);

	      try {
	        return callback();
	      } finally {
	        this.prodParam.exit();
	      }
	    }

	    return callback();
	  }

	  registerTopicReference() {
	    this.state.topicContext.maxTopicIndex = 0;
	  }

	  primaryTopicReferenceIsAllowedInCurrentTopicContext() {
	    return this.state.topicContext.maxNumOfResolvableTopics >= 1;
	  }

	  topicReferenceWasUsedInCurrentTopicContext() {
	    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
	  }

	  parseFSharpPipelineBody(prec) {
	    const startPos = this.state.start;
	    const startLoc = this.state.startLoc;
	    this.state.potentialArrowAt = this.state.start;
	    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
	    this.state.inFSharpPipelineDirectBody = true;
	    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);
	    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
	    return ret;
	  }

	  parseModuleExpression() {
	    this.expectPlugin("moduleBlocks");
	    const node = this.startNode();
	    this.next();
	    this.eat(types$1$1.braceL);
	    const revertScopes = this.initializeScopes(true);
	    this.enterInitialScopes();
	    const program = this.startNode();

	    try {
	      node.body = this.parseProgram(program, types$1$1.braceR, "module");
	    } finally {
	      revertScopes();
	    }

	    this.eat(types$1$1.braceR);
	    return this.finishNode(node, "ModuleExpression");
	  }

	}

	const loopLabel = {
	  kind: "loop"
	},
	      switchLabel = {
	  kind: "switch"
	};
	const FUNC_NO_FLAGS = 0b000,
	      FUNC_STATEMENT = 0b001,
	      FUNC_HANGING_STATEMENT = 0b010,
	      FUNC_NULLABLE_ID = 0b100;
	const loneSurrogate = /[\uD800-\uDFFF]/u;
	const keywordRelationalOperator = /in(?:stanceof)?/y;

	function babel7CompatTokens(tokens) {
	  {
	    for (let i = 0; i < tokens.length; i++) {
	      const token = tokens[i];

	      if (token.type === types$1$1.privateName) {
	        const {
	          loc,
	          start,
	          value,
	          end
	        } = token;
	        const hashEndPos = start + 1;
	        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);
	        tokens.splice(i, 1, new Token({
	          type: types$1$1.hash,
	          value: "#",
	          start: start,
	          end: hashEndPos,
	          startLoc: loc.start,
	          endLoc: hashEndLoc
	        }), new Token({
	          type: types$1$1.name,
	          value: value,
	          start: hashEndPos,
	          end: end,
	          startLoc: hashEndLoc,
	          endLoc: loc.end
	        }));
	      }
	    }
	  }
	  return tokens;
	}

	class StatementParser extends ExpressionParser {
	  parseTopLevel(file, program) {
	    file.program = this.parseProgram(program);
	    file.comments = this.state.comments;
	    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);
	    return this.finishNode(file, "File");
	  }

	  parseProgram(program, end = types$1$1.eof, sourceType = this.options.sourceType) {
	    program.sourceType = sourceType;
	    program.interpreter = this.parseInterpreterDirective();
	    this.parseBlockBody(program, true, true, end);

	    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
	      for (const [name] of Array.from(this.scope.undefinedExports)) {
	        const pos = this.scope.undefinedExports.get(name);
	        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);
	      }
	    }

	    return this.finishNode(program, "Program");
	  }

	  stmtToDirective(stmt) {
	    const expr = stmt.expression;
	    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	    const directive = this.startNodeAt(stmt.start, stmt.loc.start);
	    const raw = this.input.slice(expr.start, expr.end);
	    const val = directiveLiteral.value = raw.slice(1, -1);
	    this.addExtra(directiveLiteral, "raw", raw);
	    this.addExtra(directiveLiteral, "rawValue", val);
	    directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);
	    return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	  }

	  parseInterpreterDirective() {
	    if (!this.match(types$1$1.interpreterDirective)) {
	      return null;
	    }

	    const node = this.startNode();
	    node.value = this.state.value;
	    this.next();
	    return this.finishNode(node, "InterpreterDirective");
	  }

	  isLet(context) {
	    if (!this.isContextual("let")) {
	      return false;
	    }

	    return this.isLetKeyword(context);
	  }

	  isLetKeyword(context) {
	    const next = this.nextTokenStart();
	    const nextCh = this.codePointAtPos(next);

	    if (nextCh === 92 || nextCh === 91) {
	      return true;
	    }

	    if (context) return false;
	    if (nextCh === 123) return true;

	    if (isIdentifierStart(nextCh)) {
	      keywordRelationalOperator.lastIndex = next;
	      const matched = keywordRelationalOperator.exec(this.input);

	      if (matched !== null) {
	        const endCh = this.codePointAtPos(next + matched[0].length);

	        if (!isIdentifierChar(endCh) && endCh !== 92) {
	          return false;
	        }
	      }

	      return true;
	    }

	    return false;
	  }

	  parseStatement(context, topLevel) {
	    if (this.match(types$1$1.at)) {
	      this.parseDecorators(true);
	    }

	    return this.parseStatementContent(context, topLevel);
	  }

	  parseStatementContent(context, topLevel) {
	    let starttype = this.state.type;
	    const node = this.startNode();
	    let kind;

	    if (this.isLet(context)) {
	      starttype = types$1$1._var;
	      kind = "let";
	    }

	    switch (starttype) {
	      case types$1$1._break:
	      case types$1$1._continue:
	        return this.parseBreakContinueStatement(node, starttype.keyword);

	      case types$1$1._debugger:
	        return this.parseDebuggerStatement(node);

	      case types$1$1._do:
	        return this.parseDoStatement(node);

	      case types$1$1._for:
	        return this.parseForStatement(node);

	      case types$1$1._function:
	        if (this.lookaheadCharCode() === 46) break;

	        if (context) {
	          if (this.state.strict) {
	            this.raise(this.state.start, ErrorMessages.StrictFunction);
	          } else if (context !== "if" && context !== "label") {
	            this.raise(this.state.start, ErrorMessages.SloppyFunction);
	          }
	        }

	        return this.parseFunctionStatement(node, false, !context);

	      case types$1$1._class:
	        if (context) this.unexpected();
	        return this.parseClass(node, true);

	      case types$1$1._if:
	        return this.parseIfStatement(node);

	      case types$1$1._return:
	        return this.parseReturnStatement(node);

	      case types$1$1._switch:
	        return this.parseSwitchStatement(node);

	      case types$1$1._throw:
	        return this.parseThrowStatement(node);

	      case types$1$1._try:
	        return this.parseTryStatement(node);

	      case types$1$1._const:
	      case types$1$1._var:
	        kind = kind || this.state.value;

	        if (context && kind !== "var") {
	          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);
	        }

	        return this.parseVarStatement(node, kind);

	      case types$1$1._while:
	        return this.parseWhileStatement(node);

	      case types$1$1._with:
	        return this.parseWithStatement(node);

	      case types$1$1.braceL:
	        return this.parseBlock();

	      case types$1$1.semi:
	        return this.parseEmptyStatement(node);

	      case types$1$1._import:
	        {
	          const nextTokenCharCode = this.lookaheadCharCode();

	          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
	              break;
	            }
	        }

	      case types$1$1._export:
	        {
	          if (!this.options.allowImportExportEverywhere && !topLevel) {
	            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);
	          }

	          this.next();
	          let result;

	          if (starttype === types$1$1._import) {
	            result = this.parseImport(node);

	            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
	              this.sawUnambiguousESM = true;
	            }
	          } else {
	            result = this.parseExport(node);

	            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
	              this.sawUnambiguousESM = true;
	            }
	          }

	          this.assertModuleNodeAllowed(node);
	          return result;
	        }

	      default:
	        {
	          if (this.isAsyncFunction()) {
	            if (context) {
	              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);
	            }

	            this.next();
	            return this.parseFunctionStatement(node, true, !context);
	          }
	        }
	    }

	    const maybeName = this.state.value;
	    const expr = this.parseExpression();

	    if (starttype === types$1$1.name && expr.type === "Identifier" && this.eat(types$1$1.colon)) {
	      return this.parseLabeledStatement(node, maybeName, expr, context);
	    } else {
	      return this.parseExpressionStatement(node, expr);
	    }
	  }

	  assertModuleNodeAllowed(node) {
	    if (!this.options.allowImportExportEverywhere && !this.inModule) {
	      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);
	    }
	  }

	  takeDecorators(node) {
	    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    if (decorators.length) {
	      node.decorators = decorators;
	      this.resetStartLocationFromNode(node, decorators[0]);
	      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
	    }
	  }

	  canHaveLeadingDecorator() {
	    return this.match(types$1$1._class);
	  }

	  parseDecorators(allowExport) {
	    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    while (this.match(types$1$1.at)) {
	      const decorator = this.parseDecorator();
	      currentContextDecorators.push(decorator);
	    }

	    if (this.match(types$1$1._export)) {
	      if (!allowExport) {
	        this.unexpected();
	      }

	      if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);
	      }
	    } else if (!this.canHaveLeadingDecorator()) {
	      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);
	    }
	  }

	  parseDecorator() {
	    this.expectOnePlugin(["decorators-legacy", "decorators"]);
	    const node = this.startNode();
	    this.next();

	    if (this.hasPlugin("decorators")) {
	      this.state.decoratorStack.push([]);
	      const startPos = this.state.start;
	      const startLoc = this.state.startLoc;
	      let expr;

	      if (this.eat(types$1$1.parenL)) {
	        expr = this.parseExpression();
	        this.expect(types$1$1.parenR);
	      } else {
	        expr = this.parseIdentifier(false);

	        while (this.eat(types$1$1.dot)) {
	          const node = this.startNodeAt(startPos, startLoc);
	          node.object = expr;
	          node.property = this.parseIdentifier(true);
	          node.computed = false;
	          expr = this.finishNode(node, "MemberExpression");
	        }
	      }

	      node.expression = this.parseMaybeDecoratorArguments(expr);
	      this.state.decoratorStack.pop();
	    } else {
	      node.expression = this.parseExprSubscripts();
	    }

	    return this.finishNode(node, "Decorator");
	  }

	  parseMaybeDecoratorArguments(expr) {
	    if (this.eat(types$1$1.parenL)) {
	      const node = this.startNodeAtNode(expr);
	      node.callee = expr;
	      node.arguments = this.parseCallExpressionArguments(types$1$1.parenR, false);
	      this.toReferencedList(node.arguments);
	      return this.finishNode(node, "CallExpression");
	    }

	    return expr;
	  }

	  parseBreakContinueStatement(node, keyword) {
	    const isBreak = keyword === "break";
	    this.next();

	    if (this.isLineTerminator()) {
	      node.label = null;
	    } else {
	      node.label = this.parseIdentifier();
	      this.semicolon();
	    }

	    this.verifyBreakContinue(node, keyword);
	    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	  }

	  verifyBreakContinue(node, keyword) {
	    const isBreak = keyword === "break";
	    let i;

	    for (i = 0; i < this.state.labels.length; ++i) {
	      const lab = this.state.labels[i];

	      if (node.label == null || lab.name === node.label.name) {
	        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	        if (node.label && isBreak) break;
	      }
	    }

	    if (i === this.state.labels.length) {
	      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);
	    }
	  }

	  parseDebuggerStatement(node) {
	    this.next();
	    this.semicolon();
	    return this.finishNode(node, "DebuggerStatement");
	  }

	  parseHeaderExpression() {
	    this.expect(types$1$1.parenL);
	    const val = this.parseExpression();
	    this.expect(types$1$1.parenR);
	    return val;
	  }

	  parseDoStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel);
	    node.body = this.withTopicForbiddingContext(() => this.parseStatement("do"));
	    this.state.labels.pop();
	    this.expect(types$1$1._while);
	    node.test = this.parseHeaderExpression();
	    this.eat(types$1$1.semi);
	    return this.finishNode(node, "DoWhileStatement");
	  }

	  parseForStatement(node) {
	    this.next();
	    this.state.labels.push(loopLabel);
	    let awaitAt = -1;

	    if (this.isAwaitAllowed() && this.eatContextual("await")) {
	      awaitAt = this.state.lastTokStart;
	    }

	    this.scope.enter(SCOPE_OTHER);
	    this.expect(types$1$1.parenL);

	    if (this.match(types$1$1.semi)) {
	      if (awaitAt > -1) {
	        this.unexpected(awaitAt);
	      }

	      return this.parseFor(node, null);
	    }

	    const startsWithLet = this.isContextual("let");
	    const isLet = startsWithLet && this.isLetKeyword();

	    if (this.match(types$1$1._var) || this.match(types$1$1._const) || isLet) {
	      const init = this.startNode();
	      const kind = isLet ? "let" : this.state.value;
	      this.next();
	      this.parseVar(init, true, kind);
	      this.finishNode(init, "VariableDeclaration");

	      if ((this.match(types$1$1._in) || this.isContextual("of")) && init.declarations.length === 1) {
	        return this.parseForIn(node, init, awaitAt);
	      }

	      if (awaitAt > -1) {
	        this.unexpected(awaitAt);
	      }

	      return this.parseFor(node, init);
	    }

	    const startsWithUnescapedName = this.match(types$1$1.name) && !this.state.containsEsc;
	    const refExpressionErrors = new ExpressionErrors();
	    const init = this.parseExpression(true, refExpressionErrors);
	    const isForOf = this.isContextual("of");

	    if (isForOf) {
	      if (startsWithLet) {
	        this.raise(init.start, ErrorMessages.ForOfLet);
	      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === "Identifier" && init.name === "async") {
	        this.raise(init.start, ErrorMessages.ForOfAsync);
	      }
	    }

	    if (isForOf || this.match(types$1$1._in)) {
	      this.toAssignable(init, true);
	      const description = isForOf ? "for-of statement" : "for-in statement";
	      this.checkLVal(init, description);
	      return this.parseForIn(node, init, awaitAt);
	    } else {
	      this.checkExpressionErrors(refExpressionErrors, true);
	    }

	    if (awaitAt > -1) {
	      this.unexpected(awaitAt);
	    }

	    return this.parseFor(node, init);
	  }

	  parseFunctionStatement(node, isAsync, declarationPosition) {
	    this.next();
	    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
	  }

	  parseIfStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    node.consequent = this.parseStatement("if");
	    node.alternate = this.eat(types$1$1._else) ? this.parseStatement("if") : null;
	    return this.finishNode(node, "IfStatement");
	  }

	  parseReturnStatement(node) {
	    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
	      this.raise(this.state.start, ErrorMessages.IllegalReturn);
	    }

	    this.next();

	    if (this.isLineTerminator()) {
	      node.argument = null;
	    } else {
	      node.argument = this.parseExpression();
	      this.semicolon();
	    }

	    return this.finishNode(node, "ReturnStatement");
	  }

	  parseSwitchStatement(node) {
	    this.next();
	    node.discriminant = this.parseHeaderExpression();
	    const cases = node.cases = [];
	    this.expect(types$1$1.braceL);
	    this.state.labels.push(switchLabel);
	    this.scope.enter(SCOPE_OTHER);
	    let cur;

	    for (let sawDefault; !this.match(types$1$1.braceR);) {
	      if (this.match(types$1$1._case) || this.match(types$1$1._default)) {
	        const isCase = this.match(types$1$1._case);
	        if (cur) this.finishNode(cur, "SwitchCase");
	        cases.push(cur = this.startNode());
	        cur.consequent = [];
	        this.next();

	        if (isCase) {
	          cur.test = this.parseExpression();
	        } else {
	          if (sawDefault) {
	            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);
	          }

	          sawDefault = true;
	          cur.test = null;
	        }

	        this.expect(types$1$1.colon);
	      } else {
	        if (cur) {
	          cur.consequent.push(this.parseStatement(null));
	        } else {
	          this.unexpected();
	        }
	      }
	    }

	    this.scope.exit();
	    if (cur) this.finishNode(cur, "SwitchCase");
	    this.next();
	    this.state.labels.pop();
	    return this.finishNode(node, "SwitchStatement");
	  }

	  parseThrowStatement(node) {
	    this.next();

	    if (this.hasPrecedingLineBreak()) {
	      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);
	    }

	    node.argument = this.parseExpression();
	    this.semicolon();
	    return this.finishNode(node, "ThrowStatement");
	  }

	  parseCatchClauseParam() {
	    const param = this.parseBindingAtom();
	    const simple = param.type === "Identifier";
	    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
	    this.checkLVal(param, "catch clause", BIND_LEXICAL);
	    return param;
	  }

	  parseTryStatement(node) {
	    this.next();
	    node.block = this.parseBlock();
	    node.handler = null;

	    if (this.match(types$1$1._catch)) {
	      const clause = this.startNode();
	      this.next();

	      if (this.match(types$1$1.parenL)) {
	        this.expect(types$1$1.parenL);
	        clause.param = this.parseCatchClauseParam();
	        this.expect(types$1$1.parenR);
	      } else {
	        clause.param = null;
	        this.scope.enter(SCOPE_OTHER);
	      }

	      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));
	      this.scope.exit();
	      node.handler = this.finishNode(clause, "CatchClause");
	    }

	    node.finalizer = this.eat(types$1$1._finally) ? this.parseBlock() : null;

	    if (!node.handler && !node.finalizer) {
	      this.raise(node.start, ErrorMessages.NoCatchOrFinally);
	    }

	    return this.finishNode(node, "TryStatement");
	  }

	  parseVarStatement(node, kind) {
	    this.next();
	    this.parseVar(node, false, kind);
	    this.semicolon();
	    return this.finishNode(node, "VariableDeclaration");
	  }

	  parseWhileStatement(node) {
	    this.next();
	    node.test = this.parseHeaderExpression();
	    this.state.labels.push(loopLabel);
	    node.body = this.withTopicForbiddingContext(() => this.parseStatement("while"));
	    this.state.labels.pop();
	    return this.finishNode(node, "WhileStatement");
	  }

	  parseWithStatement(node) {
	    if (this.state.strict) {
	      this.raise(this.state.start, ErrorMessages.StrictWith);
	    }

	    this.next();
	    node.object = this.parseHeaderExpression();
	    node.body = this.withTopicForbiddingContext(() => this.parseStatement("with"));
	    return this.finishNode(node, "WithStatement");
	  }

	  parseEmptyStatement(node) {
	    this.next();
	    return this.finishNode(node, "EmptyStatement");
	  }

	  parseLabeledStatement(node, maybeName, expr, context) {
	    for (const label of this.state.labels) {
	      if (label.name === maybeName) {
	        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);
	      }
	    }

	    const kind = this.state.type.isLoop ? "loop" : this.match(types$1$1._switch) ? "switch" : null;

	    for (let i = this.state.labels.length - 1; i >= 0; i--) {
	      const label = this.state.labels[i];

	      if (label.statementStart === node.start) {
	        label.statementStart = this.state.start;
	        label.kind = kind;
	      } else {
	        break;
	      }
	    }

	    this.state.labels.push({
	      name: maybeName,
	      kind: kind,
	      statementStart: this.state.start
	    });
	    node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
	    this.state.labels.pop();
	    node.label = expr;
	    return this.finishNode(node, "LabeledStatement");
	  }

	  parseExpressionStatement(node, expr) {
	    node.expression = expr;
	    this.semicolon();
	    return this.finishNode(node, "ExpressionStatement");
	  }

	  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
	    const node = this.startNode();

	    if (allowDirectives) {
	      this.state.strictErrors.clear();
	    }

	    this.expect(types$1$1.braceL);

	    if (createNewLexicalScope) {
	      this.scope.enter(SCOPE_OTHER);
	    }

	    this.parseBlockBody(node, allowDirectives, false, types$1$1.braceR, afterBlockParse);

	    if (createNewLexicalScope) {
	      this.scope.exit();
	    }

	    return this.finishNode(node, "BlockStatement");
	  }

	  isValidDirective(stmt) {
	    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
	  }

	  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
	    const body = node.body = [];
	    const directives = node.directives = [];
	    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
	  }

	  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
	    const oldStrict = this.state.strict;
	    let hasStrictModeDirective = false;
	    let parsedNonDirective = false;

	    while (!this.match(end)) {
	      const stmt = this.parseStatement(null, topLevel);

	      if (directives && !parsedNonDirective) {
	        if (this.isValidDirective(stmt)) {
	          const directive = this.stmtToDirective(stmt);
	          directives.push(directive);

	          if (!hasStrictModeDirective && directive.value.value === "use strict") {
	            hasStrictModeDirective = true;
	            this.setStrict(true);
	          }

	          continue;
	        }

	        parsedNonDirective = true;
	        this.state.strictErrors.clear();
	      }

	      body.push(stmt);
	    }

	    if (afterBlockParse) {
	      afterBlockParse.call(this, hasStrictModeDirective);
	    }

	    if (!oldStrict) {
	      this.setStrict(false);
	    }

	    this.next();
	  }

	  parseFor(node, init) {
	    node.init = init;
	    this.semicolon(false);
	    node.test = this.match(types$1$1.semi) ? null : this.parseExpression();
	    this.semicolon(false);
	    node.update = this.match(types$1$1.parenR) ? null : this.parseExpression();
	    this.expect(types$1$1.parenR);
	    node.body = this.withTopicForbiddingContext(() => this.parseStatement("for"));
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, "ForStatement");
	  }

	  parseForIn(node, init, awaitAt) {
	    const isForIn = this.match(types$1$1._in);
	    this.next();

	    if (isForIn) {
	      if (awaitAt > -1) this.unexpected(awaitAt);
	    } else {
	      node.await = awaitAt > -1;
	    }

	    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
	      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? "for-in" : "for-of");
	    } else if (init.type === "AssignmentPattern") {
	      this.raise(init.start, ErrorMessages.InvalidLhs, "for-loop");
	    }

	    node.left = init;
	    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
	    this.expect(types$1$1.parenR);
	    node.body = this.withTopicForbiddingContext(() => this.parseStatement("for"));
	    this.scope.exit();
	    this.state.labels.pop();
	    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
	  }

	  parseVar(node, isFor, kind) {
	    const declarations = node.declarations = [];
	    const isTypescript = this.hasPlugin("typescript");
	    node.kind = kind;

	    for (;;) {
	      const decl = this.startNode();
	      this.parseVarId(decl, kind);

	      if (this.eat(types$1$1.eq)) {
	        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
	      } else {
	        if (kind === "const" && !(this.match(types$1$1._in) || this.isContextual("of"))) {
	          if (!isTypescript) {
	            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Const declarations");
	          }
	        } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(types$1$1._in) || this.isContextual("of")))) {
	          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, "Complex binding patterns");
	        }

	        decl.init = null;
	      }

	      declarations.push(this.finishNode(decl, "VariableDeclarator"));
	      if (!this.eat(types$1$1.comma)) break;
	    }

	    return node;
	  }

	  parseVarId(decl, kind) {
	    decl.id = this.parseBindingAtom();
	    this.checkLVal(decl.id, "variable declaration", kind === "var" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== "var");
	  }

	  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
	    const isStatement = statement & FUNC_STATEMENT;
	    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
	    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
	    this.initFunction(node, isAsync);

	    if (this.match(types$1$1.star) && isHangingStatement) {
	      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);
	    }

	    node.generator = this.eat(types$1$1.star);

	    if (isStatement) {
	      node.id = this.parseFunctionId(requireId);
	    }

	    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
	    this.state.maybeInArrowParameters = false;
	    this.scope.enter(SCOPE_FUNCTION);
	    this.prodParam.enter(functionFlags(isAsync, node.generator));

	    if (!isStatement) {
	      node.id = this.parseFunctionId();
	    }

	    this.parseFunctionParams(node, false);
	    this.withTopicForbiddingContext(() => {
	      this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	    });
	    this.prodParam.exit();
	    this.scope.exit();

	    if (isStatement && !isHangingStatement) {
	      this.registerFunctionStatementId(node);
	    }

	    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
	    return node;
	  }

	  parseFunctionId(requireId) {
	    return requireId || this.match(types$1$1.name) ? this.parseIdentifier() : null;
	  }

	  parseFunctionParams(node, allowModifiers) {
	    this.expect(types$1$1.parenL);
	    this.expressionScope.enter(newParameterDeclarationScope());
	    node.params = this.parseBindingList(types$1$1.parenR, 41, false, allowModifiers);
	    this.expressionScope.exit();
	  }

	  registerFunctionStatementId(node) {
	    if (!node.id) return;
	    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);
	  }

	  parseClass(node, isStatement, optionalId) {
	    this.next();
	    this.takeDecorators(node);
	    const oldStrict = this.state.strict;
	    this.state.strict = true;
	    this.parseClassId(node, isStatement, optionalId);
	    this.parseClassSuper(node);
	    node.body = this.parseClassBody(!!node.superClass, oldStrict);
	    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	  }

	  isClassProperty() {
	    return this.match(types$1$1.eq) || this.match(types$1$1.semi) || this.match(types$1$1.braceR);
	  }

	  isClassMethod() {
	    return this.match(types$1$1.parenL);
	  }

	  isNonstaticConstructor(method) {
	    return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
	  }

	  parseClassBody(hadSuperClass, oldStrict) {
	    this.classScope.enter();
	    const state = {
	      hadConstructor: false,
	      hadSuperClass
	    };
	    let decorators = [];
	    const classBody = this.startNode();
	    classBody.body = [];
	    this.expect(types$1$1.braceL);
	    this.withTopicForbiddingContext(() => {
	      while (!this.match(types$1$1.braceR)) {
	        if (this.eat(types$1$1.semi)) {
	          if (decorators.length > 0) {
	            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);
	          }

	          continue;
	        }

	        if (this.match(types$1$1.at)) {
	          decorators.push(this.parseDecorator());
	          continue;
	        }

	        const member = this.startNode();

	        if (decorators.length) {
	          member.decorators = decorators;
	          this.resetStartLocationFromNode(member, decorators[0]);
	          decorators = [];
	        }

	        this.parseClassMember(classBody, member, state);

	        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
	          this.raise(member.start, ErrorMessages.DecoratorConstructor);
	        }
	      }
	    });
	    this.state.strict = oldStrict;
	    this.next();

	    if (decorators.length) {
	      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);
	    }

	    this.classScope.exit();
	    return this.finishNode(classBody, "ClassBody");
	  }

	  parseClassMemberFromModifier(classBody, member) {
	    const key = this.parseIdentifier(true);

	    if (this.isClassMethod()) {
	      const method = member;
	      method.kind = "method";
	      method.computed = false;
	      method.key = key;
	      method.static = false;
	      this.pushClassMethod(classBody, method, false, false, false, false);
	      return true;
	    } else if (this.isClassProperty()) {
	      const prop = member;
	      prop.computed = false;
	      prop.key = key;
	      prop.static = false;
	      classBody.body.push(this.parseClassProperty(prop));
	      return true;
	    }

	    return false;
	  }

	  parseClassMember(classBody, member, state) {
	    const isStatic = this.isContextual("static");

	    if (isStatic) {
	      if (this.parseClassMemberFromModifier(classBody, member)) {
	        return;
	      }

	      if (this.eat(types$1$1.braceL)) {
	        this.parseClassStaticBlock(classBody, member);
	        return;
	      }
	    }

	    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
	  }

	  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
	    const publicMethod = member;
	    const privateMethod = member;
	    const publicProp = member;
	    const privateProp = member;
	    const method = publicMethod;
	    const publicMember = publicMethod;
	    member.static = isStatic;

	    if (this.eat(types$1$1.star)) {
	      method.kind = "method";
	      const isPrivateName = this.match(types$1$1.privateName);
	      this.parseClassElementName(method);

	      if (isPrivateName) {
	        this.pushClassPrivateMethod(classBody, privateMethod, true, false);
	        return;
	      }

	      if (this.isNonstaticConstructor(publicMethod)) {
	        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);
	      }

	      this.pushClassMethod(classBody, publicMethod, true, false, false, false);
	      return;
	    }

	    const containsEsc = this.state.containsEsc;
	    const isPrivate = this.match(types$1$1.privateName);
	    const key = this.parseClassElementName(member);
	    const isSimple = key.type === "Identifier";
	    const maybeQuestionTokenStart = this.state.start;
	    this.parsePostMemberNameModifiers(publicMember);

	    if (this.isClassMethod()) {
	      method.kind = "method";

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	        return;
	      }

	      const isConstructor = this.isNonstaticConstructor(publicMethod);
	      let allowsDirectSuper = false;

	      if (isConstructor) {
	        publicMethod.kind = "constructor";

	        if (state.hadConstructor && !this.hasPlugin("typescript")) {
	          this.raise(key.start, ErrorMessages.DuplicateConstructor);
	        }

	        if (isConstructor && this.hasPlugin("typescript") && member.override) {
	          this.raise(key.start, ErrorMessages.OverrideOnConstructor);
	        }

	        state.hadConstructor = true;
	        allowsDirectSuper = state.hadSuperClass;
	      }

	      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
	    } else if (this.isClassProperty()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else if (isSimple && key.name === "async" && !containsEsc && !this.isLineTerminator()) {
	      const isGenerator = this.eat(types$1$1.star);

	      if (publicMember.optional) {
	        this.unexpected(maybeQuestionTokenStart);
	      }

	      method.kind = "method";
	      const isPrivate = this.match(types$1$1.privateName);
	      this.parseClassElementName(method);
	      this.parsePostMemberNameModifiers(publicMember);

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);
	        }

	        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
	      }
	    } else if (isSimple && (key.name === "get" || key.name === "set") && !containsEsc && !(this.match(types$1$1.star) && this.isLineTerminator())) {
	      method.kind = key.name;
	      const isPrivate = this.match(types$1$1.privateName);
	      this.parseClassElementName(publicMethod);

	      if (isPrivate) {
	        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
	      } else {
	        if (this.isNonstaticConstructor(publicMethod)) {
	          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);
	        }

	        this.pushClassMethod(classBody, publicMethod, false, false, false, false);
	      }

	      this.checkGetterSetterParams(publicMethod);
	    } else if (this.isLineTerminator()) {
	      if (isPrivate) {
	        this.pushClassPrivateProperty(classBody, privateProp);
	      } else {
	        this.pushClassProperty(classBody, publicProp);
	      }
	    } else {
	      this.unexpected();
	    }
	  }

	  parseClassElementName(member) {
	    const {
	      type,
	      value,
	      start
	    } = this.state;

	    if ((type === types$1$1.name || type === types$1$1.string) && member.static && value === "prototype") {
	      this.raise(start, ErrorMessages.StaticPrototype);
	    }

	    if (type === types$1$1.privateName && value === "constructor") {
	      this.raise(start, ErrorMessages.ConstructorClassPrivateField);
	    }

	    return this.parsePropertyName(member, true);
	  }

	  parseClassStaticBlock(classBody, member) {
	    var _member$decorators;

	    this.expectPlugin("classStaticBlock", member.start);
	    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
	    const oldLabels = this.state.labels;
	    this.state.labels = [];
	    this.prodParam.enter(PARAM);
	    const body = member.body = [];
	    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1$1.braceR);
	    this.prodParam.exit();
	    this.scope.exit();
	    this.state.labels = oldLabels;
	    classBody.body.push(this.finishNode(member, "StaticBlock"));

	    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
	      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);
	    }
	  }

	  pushClassProperty(classBody, prop) {
	    if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
	      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);
	    }

	    classBody.body.push(this.parseClassProperty(prop));
	  }

	  pushClassPrivateProperty(classBody, prop) {
	    const node = this.parseClassPrivateProperty(prop);
	    classBody.body.push(node);
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);
	  }

	  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
	    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
	  }

	  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
	    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
	    classBody.body.push(node);
	    const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
	    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);
	  }

	  parsePostMemberNameModifiers(methodOrProp) {}

	  parseClassPrivateProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassPrivateProperty");
	  }

	  parseClassProperty(node) {
	    this.parseInitializer(node);
	    this.semicolon();
	    return this.finishNode(node, "ClassProperty");
	  }

	  parseInitializer(node) {
	    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
	    this.expressionScope.enter(newExpressionScope());
	    this.prodParam.enter(PARAM);
	    node.value = this.eat(types$1$1.eq) ? this.parseMaybeAssignAllowIn() : null;
	    this.expressionScope.exit();
	    this.prodParam.exit();
	    this.scope.exit();
	  }

	  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
	    if (this.match(types$1$1.name)) {
	      node.id = this.parseIdentifier();

	      if (isStatement) {
	        this.checkLVal(node.id, "class name", bindingType);
	      }
	    } else {
	      if (optionalId || !isStatement) {
	        node.id = null;
	      } else {
	        this.unexpected(null, ErrorMessages.MissingClassName);
	      }
	    }
	  }

	  parseClassSuper(node) {
	    node.superClass = this.eat(types$1$1._extends) ? this.parseExprSubscripts() : null;
	  }

	  parseExport(node) {
	    const hasDefault = this.maybeParseExportDefaultSpecifier(node);
	    const parseAfterDefault = !hasDefault || this.eat(types$1$1.comma);
	    const hasStar = parseAfterDefault && this.eatExportStar(node);
	    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
	    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1$1.comma));
	    const isFromRequired = hasDefault || hasStar;

	    if (hasStar && !hasNamespace) {
	      if (hasDefault) this.unexpected();
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }

	    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);

	    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
	      throw this.unexpected(null, types$1$1.braceL);
	    }

	    let hasDeclaration;

	    if (isFromRequired || hasSpecifiers) {
	      hasDeclaration = false;
	      this.parseExportFrom(node, isFromRequired);
	    } else {
	      hasDeclaration = this.maybeParseExportDeclaration(node);
	    }

	    if (isFromRequired || hasSpecifiers || hasDeclaration) {
	      this.checkExport(node, true, false, !!node.source);
	      return this.finishNode(node, "ExportNamedDeclaration");
	    }

	    if (this.eat(types$1$1._default)) {
	      node.declaration = this.parseExportDefaultExpression();
	      this.checkExport(node, true, true);
	      return this.finishNode(node, "ExportDefaultDeclaration");
	    }

	    throw this.unexpected(null, types$1$1.braceL);
	  }

	  eatExportStar(node) {
	    return this.eat(types$1$1.star);
	  }

	  maybeParseExportDefaultSpecifier(node) {
	    if (this.isExportDefaultSpecifier()) {
	      this.expectPlugin("exportDefaultFrom");
	      const specifier = this.startNode();
	      specifier.exported = this.parseIdentifier(true);
	      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamespaceSpecifier(node) {
	    if (this.isContextual("as")) {
	      if (!node.specifiers) node.specifiers = [];
	      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
	      this.next();
	      specifier.exported = this.parseModuleExportName();
	      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportNamedSpecifiers(node) {
	    if (this.match(types$1$1.braceL)) {
	      if (!node.specifiers) node.specifiers = [];
	      node.specifiers.push(...this.parseExportSpecifiers());
	      node.source = null;
	      node.declaration = null;
	      return true;
	    }

	    return false;
	  }

	  maybeParseExportDeclaration(node) {
	    if (this.shouldParseExportDeclaration()) {
	      node.specifiers = [];
	      node.source = null;
	      node.declaration = this.parseExportDeclaration(node);
	      return true;
	    }

	    return false;
	  }

	  isAsyncFunction() {
	    if (!this.isContextual("async")) return false;
	    const next = this.nextTokenStart();
	    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
	  }

	  parseExportDefaultExpression() {
	    const expr = this.startNode();
	    const isAsync = this.isAsyncFunction();

	    if (this.match(types$1$1._function) || isAsync) {
	      this.next();

	      if (isAsync) {
	        this.next();
	      }

	      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
	    } else if (this.match(types$1$1._class)) {
	      return this.parseClass(expr, true, true);
	    } else if (this.match(types$1$1.at)) {
	      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);
	      }

	      this.parseDecorators(false);
	      return this.parseClass(expr, true, true);
	    } else if (this.match(types$1$1._const) || this.match(types$1$1._var) || this.isLet()) {
	      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);
	    } else {
	      const res = this.parseMaybeAssignAllowIn();
	      this.semicolon();
	      return res;
	    }
	  }

	  parseExportDeclaration(node) {
	    return this.parseStatement(null);
	  }

	  isExportDefaultSpecifier() {
	    if (this.match(types$1$1.name)) {
	      const value = this.state.value;

	      if (value === "async" && !this.state.containsEsc || value === "let") {
	        return false;
	      }

	      if ((value === "type" || value === "interface") && !this.state.containsEsc) {
	        const l = this.lookahead();

	        if (l.type === types$1$1.name && l.value !== "from" || l.type === types$1$1.braceL) {
	          this.expectOnePlugin(["flow", "typescript"]);
	          return false;
	        }
	      }
	    } else if (!this.match(types$1$1._default)) {
	      return false;
	    }

	    const next = this.nextTokenStart();
	    const hasFrom = this.isUnparsedContextual(next, "from");

	    if (this.input.charCodeAt(next) === 44 || this.match(types$1$1.name) && hasFrom) {
	      return true;
	    }

	    if (this.match(types$1$1._default) && hasFrom) {
	      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
	      return nextAfterFrom === 34 || nextAfterFrom === 39;
	    }

	    return false;
	  }

	  parseExportFrom(node, expect) {
	    if (this.eatContextual("from")) {
	      node.source = this.parseImportSource();
	      this.checkExport(node);
	      const assertions = this.maybeParseImportAssertions();

	      if (assertions) {
	        node.assertions = assertions;
	      }
	    } else {
	      if (expect) {
	        this.unexpected();
	      } else {
	        node.source = null;
	      }
	    }

	    this.semicolon();
	  }

	  shouldParseExportDeclaration() {
	    if (this.match(types$1$1.at)) {
	      this.expectOnePlugin(["decorators", "decorators-legacy"]);

	      if (this.hasPlugin("decorators")) {
	        if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
	          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);
	        } else {
	          return true;
	        }
	      }
	    }

	    return this.state.type.keyword === "var" || this.state.type.keyword === "const" || this.state.type.keyword === "function" || this.state.type.keyword === "class" || this.isLet() || this.isAsyncFunction();
	  }

	  checkExport(node, checkNames, isDefault, isFrom) {
	    if (checkNames) {
	      if (isDefault) {
	        this.checkDuplicateExports(node, "default");

	        if (this.hasPlugin("exportDefaultFrom")) {
	          var _declaration$extra;

	          const declaration = node.declaration;

	          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
	            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);
	          }
	        }
	      } else if (node.specifiers && node.specifiers.length) {
	        for (const specifier of node.specifiers) {
	          const {
	            exported
	          } = specifier;
	          const exportedName = exported.type === "Identifier" ? exported.name : exported.value;
	          this.checkDuplicateExports(specifier, exportedName);

	          if (!isFrom && specifier.local) {
	            const {
	              local
	            } = specifier;

	            if (local.type !== "Identifier") {
	              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);
	            } else {
	              this.checkReservedWord(local.name, local.start, true, false);
	              this.scope.checkLocalExport(local);
	            }
	          }
	        }
	      } else if (node.declaration) {
	        if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
	          const id = node.declaration.id;
	          if (!id) throw new Error("Assertion failure");
	          this.checkDuplicateExports(node, id.name);
	        } else if (node.declaration.type === "VariableDeclaration") {
	          for (const declaration of node.declaration.declarations) {
	            this.checkDeclaration(declaration.id);
	          }
	        }
	      }
	    }

	    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

	    if (currentContextDecorators.length) {
	      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);
	    }
	  }

	  checkDeclaration(node) {
	    if (node.type === "Identifier") {
	      this.checkDuplicateExports(node, node.name);
	    } else if (node.type === "ObjectPattern") {
	      for (const prop of node.properties) {
	        this.checkDeclaration(prop);
	      }
	    } else if (node.type === "ArrayPattern") {
	      for (const elem of node.elements) {
	        if (elem) {
	          this.checkDeclaration(elem);
	        }
	      }
	    } else if (node.type === "ObjectProperty") {
	      this.checkDeclaration(node.value);
	    } else if (node.type === "RestElement") {
	      this.checkDeclaration(node.argument);
	    } else if (node.type === "AssignmentPattern") {
	      this.checkDeclaration(node.left);
	    }
	  }

	  checkDuplicateExports(node, name) {
	    if (this.exportedIdentifiers.has(name)) {
	      this.raise(node.start, name === "default" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);
	    }

	    this.exportedIdentifiers.add(name);
	  }

	  parseExportSpecifiers() {
	    const nodes = [];
	    let first = true;
	    this.expect(types$1$1.braceL);

	    while (!this.eat(types$1$1.braceR)) {
	      if (first) {
	        first = false;
	      } else {
	        this.expect(types$1$1.comma);
	        if (this.eat(types$1$1.braceR)) break;
	      }

	      const node = this.startNode();
	      node.local = this.parseModuleExportName();
	      node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local.__clone();
	      nodes.push(this.finishNode(node, "ExportSpecifier"));
	    }

	    return nodes;
	  }

	  parseModuleExportName() {
	    if (this.match(types$1$1.string)) {
	      const result = this.parseStringLiteral(this.state.value);
	      const surrogate = result.value.match(loneSurrogate);

	      if (surrogate) {
	        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));
	      }

	      return result;
	    }

	    return this.parseIdentifier(true);
	  }

	  parseImport(node) {
	    node.specifiers = [];

	    if (!this.match(types$1$1.string)) {
	      const hasDefault = this.maybeParseDefaultImportSpecifier(node);
	      const parseNext = !hasDefault || this.eat(types$1$1.comma);
	      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
	      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
	      this.expectContextual("from");
	    }

	    node.source = this.parseImportSource();
	    const assertions = this.maybeParseImportAssertions();

	    if (assertions) {
	      node.assertions = assertions;
	    } else {
	      const attributes = this.maybeParseModuleAttributes();

	      if (attributes) {
	        node.attributes = attributes;
	      }
	    }

	    this.semicolon();
	    return this.finishNode(node, "ImportDeclaration");
	  }

	  parseImportSource() {
	    if (!this.match(types$1$1.string)) this.unexpected();
	    return this.parseExprAtom();
	  }

	  shouldParseDefaultImport(node) {
	    return this.match(types$1$1.name);
	  }

	  parseImportSpecifierLocal(node, specifier, type, contextDescription) {
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, type));
	  }

	  parseAssertEntries() {
	    const attrs = [];
	    const attrNames = new Set();

	    do {
	      if (this.match(types$1$1.braceR)) {
	        break;
	      }

	      const node = this.startNode();
	      const keyName = this.state.value;

	      if (attrNames.has(keyName)) {
	        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);
	      }

	      attrNames.add(keyName);

	      if (this.match(types$1$1.string)) {
	        node.key = this.parseStringLiteral(keyName);
	      } else {
	        node.key = this.parseIdentifier(true);
	      }

	      this.expect(types$1$1.colon);

	      if (!this.match(types$1$1.string)) {
	        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
	      }

	      node.value = this.parseStringLiteral(this.state.value);
	      this.finishNode(node, "ImportAttribute");
	      attrs.push(node);
	    } while (this.eat(types$1$1.comma));

	    return attrs;
	  }

	  maybeParseModuleAttributes() {
	    if (this.match(types$1$1._with) && !this.hasPrecedingLineBreak()) {
	      this.expectPlugin("moduleAttributes");
	      this.next();
	    } else {
	      if (this.hasPlugin("moduleAttributes")) return [];
	      return null;
	    }

	    const attrs = [];
	    const attributes = new Set();

	    do {
	      const node = this.startNode();
	      node.key = this.parseIdentifier(true);

	      if (node.key.name !== "type") {
	        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);
	      }

	      if (attributes.has(node.key.name)) {
	        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);
	      }

	      attributes.add(node.key.name);
	      this.expect(types$1$1.colon);

	      if (!this.match(types$1$1.string)) {
	        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);
	      }

	      node.value = this.parseStringLiteral(this.state.value);
	      this.finishNode(node, "ImportAttribute");
	      attrs.push(node);
	    } while (this.eat(types$1$1.comma));

	    return attrs;
	  }

	  maybeParseImportAssertions() {
	    if (this.isContextual("assert") && !this.hasPrecedingLineBreak()) {
	      this.expectPlugin("importAssertions");
	      this.next();
	    } else {
	      if (this.hasPlugin("importAssertions")) return [];
	      return null;
	    }

	    this.eat(types$1$1.braceL);
	    const attrs = this.parseAssertEntries();
	    this.eat(types$1$1.braceR);
	    return attrs;
	  }

	  maybeParseDefaultImportSpecifier(node) {
	    if (this.shouldParseDefaultImport(node)) {
	      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier", "default import specifier");
	      return true;
	    }

	    return false;
	  }

	  maybeParseStarImportSpecifier(node) {
	    if (this.match(types$1$1.star)) {
	      const specifier = this.startNode();
	      this.next();
	      this.expectContextual("as");
	      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier", "import namespace specifier");
	      return true;
	    }

	    return false;
	  }

	  parseNamedImportSpecifiers(node) {
	    let first = true;
	    this.expect(types$1$1.braceL);

	    while (!this.eat(types$1$1.braceR)) {
	      if (first) {
	        first = false;
	      } else {
	        if (this.eat(types$1$1.colon)) {
	          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);
	        }

	        this.expect(types$1$1.comma);
	        if (this.eat(types$1$1.braceR)) break;
	      }

	      this.parseImportSpecifier(node);
	    }
	  }

	  parseImportSpecifier(node) {
	    const specifier = this.startNode();
	    const importedIsString = this.match(types$1$1.string);
	    specifier.imported = this.parseModuleExportName();

	    if (this.eatContextual("as")) {
	      specifier.local = this.parseIdentifier();
	    } else {
	      const {
	        imported
	      } = specifier;

	      if (importedIsString) {
	        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);
	      }

	      this.checkReservedWord(imported.name, specifier.start, true, true);
	      specifier.local = imported.__clone();
	    }

	    this.checkLVal(specifier.local, "import specifier", BIND_LEXICAL);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }

	  isThisParam(param) {
	    return param.type === "Identifier" && param.name === "this";
	  }

	}

	class Parser$3 extends StatementParser {
	  constructor(options, input) {
	    options = getOptions$2(options);
	    super(options, input);
	    this.options = options;
	    this.initializeScopes();
	    this.plugins = pluginsMap(this.options.plugins);
	    this.filename = options.sourceFilename;
	  }

	  getScopeHandler() {
	    return ScopeHandler;
	  }

	  parse() {
	    this.enterInitialScopes();
	    const file = this.startNode();
	    const program = this.startNode();
	    this.nextToken();
	    file.errors = null;
	    this.parseTopLevel(file, program);
	    file.errors = this.state.errors;
	    return file;
	  }

	}

	function pluginsMap(plugins) {
	  const pluginMap = new Map();

	  for (const plugin of plugins) {
	    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
	    if (!pluginMap.has(name)) pluginMap.set(name, options || {});
	  }

	  return pluginMap;
	}

	function parse$k(input, options) {
	  var _options;

	  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
	    options = Object.assign({}, options);

	    try {
	      options.sourceType = "module";
	      const parser = getParser(options, input);
	      const ast = parser.parse();

	      if (parser.sawUnambiguousESM) {
	        return ast;
	      }

	      if (parser.ambiguousScriptDifferentAst) {
	        try {
	          options.sourceType = "script";
	          return getParser(options, input).parse();
	        } catch (_unused) {}
	      } else {
	        ast.program.sourceType = "script";
	      }

	      return ast;
	    } catch (moduleError) {
	      try {
	        options.sourceType = "script";
	        return getParser(options, input).parse();
	      } catch (_unused2) {}

	      throw moduleError;
	    }
	  } else {
	    return getParser(options, input).parse();
	  }
	}
	function parseExpression(input, options) {
	  const parser = getParser(options, input);

	  if (parser.options.strictMode) {
	    parser.state.strict = true;
	  }

	  return parser.getExpression();
	}

	function getParser(options, input) {
	  let cls = Parser$3;

	  if (options != null && options.plugins) {
	    validatePlugins(options.plugins);
	    cls = getParserClass(options.plugins);
	  }

	  return new cls(options, input);
	}

	const parserClassCache = {};

	function getParserClass(pluginsFromOptions) {
	  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
	  const key = pluginList.join("/");
	  let cls = parserClassCache[key];

	  if (!cls) {
	    cls = Parser$3;

	    for (const plugin of pluginList) {
	      cls = mixinPlugins[plugin](cls);
	    }

	    parserClassCache[key] = cls;
	  }

	  return cls;
	}

	lib$4.parse = parse$k;
	lib$4.parseExpression = parseExpression;
	lib$4.tokTypes = types$1$1;

	const recast$3 = main$3;
	const babelParse = lib$4;
	var parse$j = function(code, options) {
	    options = options || commonjsGlobal.parseOptions;
	    let plugins = ((options && options.plugins) ? options.plugins : [])
	        .concat([
	            'plugin-syntax-typescript',
	            'typescript',
	            'asyncGenerators',
	            'bigInt',
	            'classProperties',
	            'classPrivateProperties',
	            'classPrivateMethods',
	            'doExpressions',
	            'dynamicImport',
	            'exportDefaultFrom',
	            'exportNamespaceFrom',
	            'functionBind',
	            'functionSent',
	            'importMeta',
	            'logicalAssignment',
	            'nullishCoalescingOperator',
	            'numericSeparator',
	            'objectRestSpread',
	            'optionalCatchBinding',
	            'optionalChaining',
	            'partialApplication',
	            ['pipelineOperator', {'proposal': "smart"}],
	            'throwExpressions',
	            'topLevelAwait',
	            'decorators-legacy', 
	            ['@babel/plugin-syntax-decorators','decorators', { decoratorsBeforeExport: true }]
	        ]);
	    const parseOptions = {
	        // sourceType: 'module',
	        allowHashBang: true,
	        ecmaVersion: Infinity,
	        allowImportExportEverywhere: true,
	        allowReturnOutsideFunction: true,
	        allowAwaitOutsideFunction: true,
	        allowUndeclaredExports: true,
	        allowSuperOutsideMethod: true,
	        startLine: 1,
	        tokens: true,
	        ...(options || {}),
	        plugins,
	    };
	    return recast$3.parse(code, {
	        parser: {
	            parse(code) {
	                try {
	                    try {
	                        return babelParse.parse(code, parseOptions);   
	                    } catch(e) {
	                        // 是否存在jsx可能导致parse报错，所以在此兼容
	                        if (parseOptions.plugins) {
	                            const jsxIndex = parseOptions.plugins.indexOf('jsx');
	                            if (jsxIndex == -1) {
	                                parseOptions.plugins.push('jsx');
	                            } else {
	                                parseOptions.plugins.splice(jsxIndex, 1);
	                            }
	                        }
	                        return babelParse.parse(code, parseOptions);
	                    }
	                } catch(e) {
	                    throw Error(e.message)
	                }
	            }
	        }
	    });
	};

	function isObject$7(value) {
	    return typeof value == 'object' && value;
	}

	const hasOwn$3 = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);

	var util$8 = {
	    isObject: isObject$7,
	    hasOwn: hasOwn$3
	};

	const { isObject: isObject$6 } = util$8;

	// 查找时 ast 无用属性，这些属性的保留（如行数信息）会干扰节点的匹配，所以需要过滤掉
	const Props$1 = [
	    'computed',
	    'range',
	    'loc',
	    'type',
	    'raw',
	    'start',
	    'end',
	    'leadingComments',
	    'shorthand',
	    'extra',
	    'static'
	];

	const ignoreTypeList = [
	    'Super', 
	    'Import',
	    'ImportSpecifier', 'ImportDefaultSpecifier', 'ImportNamespaceSpecifier',
	    'exportSpecifier', 'exportDefaultSpecifier', 'exportNamespaceSpecifier'
	];
	const filterProps$5 = function (node, structure, propList, expando) {
	    const props = propList || Props$1;
	    for (const key in node) {
	        // 过滤值为空的字段
	        if ((key === 'type' && ignoreTypeList.indexOf(node[key]) > -1) || (props.indexOf(key) == -1 && node[key])) {
	            if (isObject$6(node[key])) {
	                if (Array.isArray(node[key])) {
	                    structure[key] = [];
	                    node[key].forEach((n, i) => {
	                        structure[key][i] = {};
	                        filterProps$5(n, structure[key][i], props);
	                    });
	                } else {
	                    structure[key] = {};
	                    filterProps$5(node[key], structure[key], props);
	                }
	            } else if (expando) {
	                if (typeof node[key] == 'string') {
	                    node[key] = node[key].replace(/\$_\$/g, expando)
	                        .replace(/\$\$\$/g, expando.slice(0, -1) + '$3')
	                        .replace(/\/\$_\/\$/g, '$_$')
	                        .replace(/\/\$\/\$\/\$/g, '$$$$$$');
	                    structure[key] = node[key];
	                }
	            }
	            else {
	                structure[key] = node[key];
	            }
	        }
	    }
	};

	var filterProp$2 = filterProps$5;

	// 把简单的api转换成ast
	// todo await 
	const recast$2 = main$3;
	const parse$i = parse$j;
	const visit$2 = recast$2.types.visit;
	const filterProps$4 = filterProp$2;

	function getSelector$3(selectorCode, parseOptions, expando) {
	    const selector = { nodeType: '', structure: {} };
	    if (typeof selectorCode != 'string') {
	        // 如果是通过builders造出来的ast结构，比如return语句
	        selector.nodeType = selectorCode.type;
	        filterProps$4(selectorCode, selector.structure, '', expando);
	        selector.type = selectorCode.type; // 兼容只用type匹配的选择器
	        return selector;
	    } else {
	        selectorCode = selectorCode
	            .replace(/\$_\$/g, expando)
	            .replace(/\$\$\$/g, expando.slice(0, -1) + '$3')
	            .replace(/\/\$_\/\$/g, '$_$')
	            .replace(/\/\$\/\$\/\$/g, '$$$$$$');
	    }
	    if (selectorCode.match(/^{((.|\s)+:(.|\s)+)+}$/)) {
	        // 如果是对象字面量
	        let ast = parse$i(`var o = ${selectorCode}`);
	        ast = ast.program.body[0].declarations[0].init;
	        selector.nodeType = 'ObjectExpression';
	        filterProps$4(ast, selector.structure);
	        return selector;
	    }
	    let seletorAst;
	    try {
	        seletorAst = parse$i(selectorCode, parseOptions);
	        if (seletorAst.program.body.length == 0) {
	            // 开头的字符串会被解析成directive
	            if (seletorAst.program.directives.length) {
	                return {
	                    nodeType: 'StringLiteral',
	                    structure: {
	                        value: selectorCode ? selectorCode.slice(1, -1) : ''
	                    }
	                }
	            } else if (seletorAst.program.comments.length) {
	                let ast = seletorAst.program.comments[0];
	                selector.nodeType = ast.type;
	                filterProps$4(ast, selector.structure);
	                return selector;
	            }
	            
	        } else if (seletorAst.program.body[0] && seletorAst.program.body[0].type == 'LabeledStatement') {
	            throw new Error('Missing semicolon')
	        }
	    } catch(e) {
	        // 可能是对象属性
	        try {
	            seletorAst = parse$i(`({${selectorCode}})`, parseOptions);
	            seletorAst = seletorAst.program.body[0].expression.properties[0];
	        } catch(e) {
	            seletorAst = null;
	        }
	        
	        // 可能是类属性
	        let clsSelectorAst = null;
	        try {
	            clsSelectorAst = parse$i(`class a$_$ { ${selectorCode} }`, parseOptions);
	            clsSelectorAst = clsSelectorAst.program.body[0].body.body[0];
	        } catch(e) {
	            //
	        }
	        
	        const result = [seletorAst, clsSelectorAst]
	            .filter(s => !!s)
	            .map(sel => {
	                const selector = {
	                    nodeType: sel.type,
	                    structure: {}
	                };
	                filterProps$4(sel, selector.structure);
	                return selector;
	            });
	        if (result.length) {
	            return result;
	        } else {
	            throw new Error('parse error!' + e.message);
	        }
	    }
	    visit$2(seletorAst, {
	        visitExpressionStatement(path) {
	            const expression = path.value.expression;
	            if (!expression) return;
	            selector.nodeType = expression.type;
	            filterProps$4(expression, selector.structure);
	            this.abort();
	        },
	        visitStatement(path) {
	            const expression = path.value;
	            if (!expression) return;
	            selector.nodeType = expression.type;
	            filterProps$4(expression, selector.structure);
	            this.abort();
	        },
	        visitDeclaration(path) {
	            const declaration = path.value;
	            if (!declaration) return;
	            selector.nodeType = declaration.type;
	            filterProps$4(declaration, selector.structure);
	            this.abort();
	        }
	    });

	    return selector;
	}


	var getSelector_1$1 = getSelector$3;

	const recast$1 = main$3;
	var generate$8 = function(ast, isPretty) {
	    return isPretty ? recast$1.prettyPrint(ast).code : recast$1.print(ast).code;
	};

	const generate$7 = generate$8;
	var specific = function handleSpecific({ full, partial, prop, extraData, Expando } = {}) {
	    let specific, result;
	    if (prop == 'body') {
	        // 匹配一块代码
	        try {
	            let bodyContent = partial.body;
	            if (Array.isArray(partial.body)) {
	                bodyContent = partial.body[0] || partial.body.body[0];
	            } else if (partial.body && partial.body.body) {
	                bodyContent = partial.body.body[0];
	            }
	            let name = '';
	            if (bodyContent) {
	                name = bodyContent.expression ? bodyContent.expression.name : bodyContent.name ? bodyContent.name : '';
	            }
	            if (name && name.match) {
	                if (name.match(Expando)) {
	                    const expandoKey = name.replace(Expando, '') || '0';
	                    extraData[expandoKey] = extraData[expandoKey] || [];
	                    // 去掉首尾花括号
	                    const bodyStr = generate$7(full.body) ? generate$7(full.body).slice(1, -2) : '';
	                    extraData[expandoKey].push({ node: full.body, value: bodyStr });
	                    specific = 'body';
	                    result = true;
	                }
	            }
	        } catch (e) {
	            // console.log(e)
	        }
	    }
	    if (partial && partial.typeName && !partial.typeParameters) {
	        if (partial.typeName.name.match(Expando)) {
	            specific = 'TypeAnnotation';
	            const expandoKey = partial.typeName.name.replace(Expando, '') || '0';
	            extraData[expandoKey] = extraData[expandoKey] || [];
	            extraData[expandoKey].push(full);
	            result = true;
	        }
	    }
	    return { specific, result }
	};

	const { isObject: isObject$5, hasOwn: hasOwn$2 } = util$8;
	// 通过简单ast结构查找ast节点

	const recast = main$3;
	const visit$1 = recast.types.visit;
	const filterProps$3 = filterProp$2;
	const generate$6 = generate$8;
	const handleSpecific = specific;
	const strictSequenceAttrList = ['arguments', 'params'];

	let Expando$1 = 'g123o456g789o';

	function checkIsMatch$1(full, partial, extraData, strictSequence) {
	    return Object.keys(partial).every((prop) => {
	        const { specific, result } = handleSpecific({ full, partial, prop, extraData, Expando: Expando$1 });
	        if (specific) {
	            return result;
	        }
	        if (!full || !partial) {
	            // full没有
	            return false;
	        } else if (isObject$5(partial[prop])) {
	            let res = false;
	            let has$$$ = false;
	            if (Array.isArray(partial[prop])) {
	                // 处理$$$这种情况
	                has$$$ = find$$$$1(partial[prop], full[prop], extraData, strictSequence);
	            }
	            if (Array.isArray(partial[prop]) && !strictSequence && strictSequenceAttrList.indexOf(prop) == -1) {
	                if (hasOwn$2(full, prop)) {
	                    res = partial[prop].every((p) => {
	                        let a = false;
	                        if (!full[prop].length && partial[prop].length == 1 && has$$$) {
	                            return true
	                        }
	                        full[prop] &&
	                            full[prop].forEach((f) => {
	                                if (f && f.type == 'ObjectProperty') {
	                                    // 兼容 { a: 1 } 匹配 { 'a': 1 } 这种情况
	                                    f.key.name && (f.key.value = f.key.name);
	                                    f.key.value && (f.key.name = f.key.value);
	                                }
	                                if (
	                                    checkIsMatch$1(
	                                        f,
	                                        p,
	                                        extraData,
	                                        strictSequence
	                                    )
	                                ) {
	                                    a = true;
	                                }
	                            });
	                        return a;
	                    });
	                } else {
	                    res = false;
	                }
	            } else {
	                try {
	                    // 例如 使用{ $_$: $_$ }匹配{ a() {} }
	                    let fullProp = full[prop];
	                    if (!fullProp && !Array.isArray(full)) {
	                        if (partial[prop] && typeof partial[prop].name == 'string' && 
	                            (partial[prop].name.match(Expando$1) || partial[prop].name.match(new RegExp(Expando$1.slice(0, -1) + '\\$3')))
	                        ) {
	                            fullProp = full;
	                        }
	                    }
	                    res =
	                        // hasOwn(full, prop) 
	                        // &&
	                        checkIsMatch$1(
	                            fullProp,
	                            partial[prop],
	                            extraData,
	                            strictSequence
	                        );
	                } catch (e) {
	                    console.log(e);
	                }
	            }
	            return res;
	        } else {
	            if (partial[prop].match && partial[prop].match(new RegExp(Expando$1.slice(0, -1) + '\\$3'))) {
	                return true;
	            }
	            if (partial[prop].match && partial[prop].match(Expando$1)) {
	                if (!full) return;
	                let extra = {
	                    node: full
	                };
	                const expandoKey = partial[prop].replace(Expando$1, '') || '0';
	                extraData[expandoKey] = extraData[expandoKey] || [];
	                
	                switch (full.type) {
	                case 'Identifier':
	                    extra.value = full.name;
	                    break;
	                case 'ThisExpression':
	                    extra.value = 'this';
	                    break;
	                case 'StringLiteral':
	                    extra.raw = `'${full.value}'`;
	                    extra.value = full.value;
	                    break;
	                case 'NumericLiteral':
	                case 'BooleanLiteral':
	                    extra.value = full.value;
	                    break;
	                case 'NullLiteral':
	                    extra.value = null;
	                    break;
	                case 'CommentLine':
	                case 'CommentBlock':
	                    extra.value = full.value;
	                    break;
	                default:
	                    try {
	                        extra.value = generate$6(full);
	                    } catch(e) {
	                        if (full[prop]) {
	                            extra.value = full[prop];
	                        } else {
	                            extra.value = {};
	                            filterProps$3(full, extra.value);
	                        }
	                    }
	                }
	                extraData[expandoKey].push(extra);
	                return true;
	            } else if (partial[prop]) ;
	            if (full && full.type == 'ObjectProperty') {
	                // 兼容 { a: 1 } 匹配 { 'a': 1 } 这种情况
	                full.key.name && (full.key.value = full.key.name);
	                full.key.value && (full.key.name = full.key.value);
	            }
	            return full ? full[prop] == partial[prop] : false;
	        }
	    });
	}

	function find$$$$1(partial, full, extraData, strictSequence) {
	    // 先考虑strctSequence = false的情况
	    let key$$$;
	    let index$$$ = -1;
	    partial.forEach((p, i) => {
	        for (const key in p) {
	            const value = p[key] ? (p[key].name || p[key].value || p[key]) : null;
	            if (value && value.match && value.match(new RegExp(Expando$1.slice(0, -1) + '\\$3'))) {
	                key$$$ = value.replace(new RegExp(Expando$1.slice(0, -1) + '\\$3'), '') || '$';
	                index$$$ = i;
	          
	                break;
	            }
	        }
	    });
	    if (!key$$$) {
	        return false;
	    }
	    const extraNodeList = full ? full.slice(0) : [];
	    partial.forEach((p, i) => {
	        if (i == index$$$) {
	            return;
	        }
	        let fi = 0;
	        while(extraNodeList[fi]) {
	            if (checkIsMatch$1(extraNodeList[fi], p, {}, strictSequence)) {
	                extraNodeList.splice(fi, 1);
	            } else {
	                fi++;
	            }
	        }
	    });
	    extraData[`$$$${key$$$}`] = (extraData[`$$$${key$$$}`] || []).concat(extraNodeList);
	    return true;
	}
	 
	function find$3(nodeType, structure, strictSequence, deep = 'nn', expando = 'g123o456g789o') {
	    const nodePathList = [];
	    const matchWildCardList = [];
	    let isMatch = false;
	    Expando$1 = expando;
	    visit$1(this, {
	        [`visit${nodeType}`](path) {
	            const extraData = {};
	            if (deep != 'n' || path.parent.name == 'program') {
	                isMatch = checkIsMatch$1(
	                    path.value,
	                    structure,
	                    extraData,
	                    strictSequence
	                );
	            } else {
	                isMatch = false;
	            }
	            if (isMatch) {
	                nodePathList.push(path);
	                matchWildCardList.push(extraData);
	            }
	            switch (deep) {
	            case '1':
	                this.abort();
	                break;
	            case 'n':
	                return false;
	            case 'nn':
	                this.traverse(path);
	                break;
	            default:
	                return false;
	            }
	        },
	        visitComment() {
	            return false;
	        },
	    });
	    return { nodePathList, matchWildCardList };
	}
	var general = { find: find$3, visit: visit$1 };

	var nodeLinkMap$1 = {
	    'JSXAttribute': ' ',
	    'JSXText': '\n',
	    'ObjectProperty': ', \n',
	    'ObjectMethod': ', \n',
	    'Identifier': ',',
	    'StringLiteral': ',',
	    'JSXElement': '\n',
	    'ImportSpecifier': ','
	};

	const getSelector$2 = getSelector_1$1;
	const { find: find$2, visit } = general;
	const parse$h = parse$j;
	const generate$5 = generate$8;
	const nodeLinkMap = nodeLinkMap$1;

	const core$3 = {
	    // 通过选择器获取，返回ast片段
	    getAstsBySelector(ast, selector, { strictSequence, deep, parseOptions, expando = 'g123o456g789o' } = {}) { 
	        //strictSequence作用：
	        // 有的时候数组不要求顺序，如{a:$_$}匹配{b:1, a:2}
	        // 有的时候需要，如function($_$, $_$)匹配function(a, b) {}
	        
	        if (!Array.isArray(selector)) {
	            selector = [selector];
	        }
	        let nodePathList = [];
	        let matchWildCardList = [];
	        const selectorAst = [];
	        selector.forEach(item => {
	            let sels = getSelector$2(item, this.parseOptions || parseOptions, expando);
	            !Array.isArray(sels) && (sels = [sels]);
	            sels.forEach(sel => {
	                if (!sel.nodeType) {
	                    throw new Error('语句类型缺失，请在 https://github.com/thx/gogocode/issues 上提供您的代码样例')
	                }
	                selectorAst.push(sel);
	            });
	        });
	        const posStrList = [];
	        selectorAst.forEach(item => {
	            const res = find$2.call(ast, item.nodeType, item.structure, strictSequence, deep, expando);
	            res.nodePathList.forEach((p, i) => {
	                const posStr = `${p.node.start},${p.node.end}`;
	                if (posStrList.indexOf(posStr) == -1 || item.nodeType.match('Comment')) { // 去重
	                    nodePathList.push(p);
	                    matchWildCardList.push(res.matchWildCardList[i]);
	                    posStrList.push(posStr);
	                }
	            });
	        });
	        return {
	            nodePathList,
	            matchWildCardList,
	            pathList: nodePathList,
	            extraDataList: matchWildCardList
	        };
	    },
	    getParentListByAst(path) {
	        const list = [];
	        while(path && path.parentPath) {
	            list.push(path.parentPath);
	            path = path.parentPath;
	        }
	        return list
	    },
	    getPrevAst(path) {
	        let parent = path.parentPath;
	        while(parent.value && !Array.isArray(parent.value)) {
	            path = parent;
	            parent = parent.parentPath;
	        }
	        parent = parent.value;
	        if (parent) {
	            const index = parent.indexOf(path.node);
	            if (index > 0) {
	                return parent[index - 1];
	            } else return null;
	        }
	        return null;
	    },
	    getNextAst(path) {
	        let parent = path.parentPath;
	        while(parent.value && !Array.isArray(parent.value)) {
	            path = parent;
	            parent = parent.parentPath;
	        }
	        parent = parent.value;
	        if (parent) {
	            const index = parent.indexOf(path.node);
	            if (parent[index + 1]) {
	                return parent[index + 1];
	            } else return null;
	        }
	        return null;
	    },
	    hasChildrenSelector(path, childSelector, expando) {
	        const childCache = path.__childCache || {};
	        for (const childKey in childCache) {
	            if (['type', 'directives'].indexOf(childKey) > -1) {
	                continue;
	            }
	            const child = childCache[childKey];
	            const { nodePathList } = core$3.getAstsBySelector(child, childSelector, { deep: 'nn', expando });
	            if (nodePathList.length > 0) {
	                return true;
	            }
	        }
	    },
	    buildAstByAstStr(str, astPatialMap = {}, { isProgram = false, parseOptions } = {}) {
	        try {
	            let ast;
	            try {
	                const ast = parse$h(str, parseOptions);
	                const program = core$3.replaceStrByAst(ast, astPatialMap);
	                if (program) {
	                    if (isProgram) {
	                        return program;
	                    } else {
	                        if (program.program.body.length > 1) {
	                            return program.program.body
	                        } else if (program.program.body.length == 1) {
	                            return program.program.body[0];
	                        } else if (program.program.comments && program.program.comments[0]) {
	                            return program.program.comments[0];
	                        } else if (program.program.directives 
	                            && program.program.directives[0]
	                            && program.program.directives[0].value 
	                            && program.program.directives[0].value.value) {
	                            return {
	                                type: 'StringLiteral',
	                                value: program.program.directives[0].value.value
	                            }
	                        } else {
	                            return program.program
	                        }
	                    }
	                } else {
	                    return null;
	                }
	            } catch(e) {
	                if (str.match(/^{(\s|.)+\}$/)) {
	                    // 对象字面量
	                    ast = parse$h(`var o = ${str}`);
	                    ast = ast.program.body[0].declarations[0].init;
	                    return ast;
	                } else if (e.message.match('Missing semicolon')) {
	                    // 可能是对象属性
	                    try {
	                        ast = parse$h(`({${str}})`, parseOptions);
	                        ast = ast.program.body[0].expression.properties[0];
	                        return ast
	                    } catch(err) {
	                        throw new Error(`buildAstByAstStr failed:${str}`);
	                    }
	                } else {
	                    throw new Error(`buildAstByAstStr failed:${str}`)
	                }
	            }
	        } catch(error) {
	            throw new Error(`buildAstByAstStr failed:${str}`)
	        }
	    },
	    replaceStrByAst(ast, astPatialMap = {}) {
	        for (let key in astPatialMap) {
	            const valueAst = astPatialMap[key];
	            const { nodePathList } = core$3.getAstsBySelector(ast, [
	                { type: 'Identifier', name: `$_$${key}$_$` },
	                { type: 'StringLiteral', value: `$_$${key}$_$` }
	            ]);
	            if (nodePathList.length > 0) {
	                nodePathList[0].replace(valueAst);
	            }
	        }
	        return ast;
	    },
	    replaceAstByAst(oldAst, newAst) {
	        if (Array.isArray(newAst)) {
	            const { arrPath = {}, index } = getArrPath(oldAst);
	            if (Array.isArray(arrPath.value) && index > -1) {
	                arrPath.value.splice(index, 1, ...newAst);
	                return;
	            }
	        }
	        if (newAst.type == 'BlockStatement' && Array.isArray(oldAst.parentPath.value)) {
	            const parentNode = oldAst.parentPath.value;
	            const oldIndex = parentNode.indexOf(oldAst.node);
	            parentNode.splice(oldIndex, 1);
	            newAst.body.forEach((replacer, index) => {
	                oldAst.parentPath.value.splice(oldIndex + index, 0, replacer);
	            });
	        } else if (!oldAst.parent && oldAst.node.type == 'File' ) {
	            oldAst.node.program.body = [ newAst ];
	        } else {
	            oldAst.replace(newAst);
	        }
	    },
	    replaceSelBySel(ast, selector, replacer, strictSequence, parseOptions, expando = 'g123o456g789o') {
	        // 用于结构不一致的，整体替换
	        const { nodePathList, matchWildCardList } = core$3.getAstsBySelector(ast, selector, { strictSequence, deep: 'nn', parseOptions: this.parseOptions || parseOptions, expando });
	        const originReplacer = replacer;
	        nodePathList.forEach((path, i) => {
	            const extra = matchWildCardList[i];
	            replacer = originReplacer;
	            if (typeof replacer == 'function') {
	                replacer = replacer(extra, path);
	                if (replacer === null) {
	                    return;
	                }
	            }
	            if (Object.keys(extra).length > 0 && typeof replacer == 'string') {
	                let newReplacer = replacer;
	                for(let key in extra) {
	                    if (key.match(/\$\$\$/)) {
	                        let key$$$ = key.replace(/\$\$\$/, '');
	                        key$$$ == '$' && (key$$$ = '');
	                        let join = '\n';

	                        let wildCardCode = extra[key].map(item => {
	                            let codeStr = generate$5(item);
	                            try {
	                                // 嵌套replace
	                                const childAst = core$3.buildAstByAstStr(generate$5(item));
	                                core$3.replaceSelBySel(childAst, selector, replacer, strictSequence, parseOptions, expando);
	                                codeStr = generate$5(childAst);
	                            } catch(e) { // 
	                            }
	                            nodeLinkMap[item.type] && (join = nodeLinkMap[item.type]);
	                            return codeStr
	                        }).join(join);
	                        // 不能都用,连接，还是需要找到$_$
	                        newReplacer = newReplacer.replace('$$$' + key$$$, wildCardCode);
	                    } else {
	                        let realKey = key == '0' ? '' : key;
	                        const matchLength = (newReplacer.match(new RegExp(`\\$_\\$${realKey}`, 'g')) || []).length;
	                        if (matchLength == extra[key].length) {
	                            extra[key].forEach(ext => {
	                                newReplacer = newReplacer
	                                    .replace(`'$_$${realKey}'`, ext.raw || ext.value)
	                                    .replace(`"$_$${realKey}"`, ext.raw || ext.value)
	                                    .replace('$_$' + realKey, ext.raw || ext.value);
	                            });
	                        } else {

	                            // 删除代码块外部{},find里前置处理了，不需要在这里做了
	                            let wildCardCode = extra[key].map(item => 
	                                typeof item.value !== 'object' ? (item.raw || item.value) : ``
	                            ).join(', ');
	                            newReplacer = newReplacer
	                                .replace(new RegExp(`'\\$_\\$${realKey}'`, 'g'), wildCardCode)
	                                .replace(new RegExp(`"\\$_\\$${realKey}"`, 'g'), wildCardCode)
	                                .replace(new RegExp(`\\$_\\$${realKey}`, 'g'), wildCardCode);
	                            // 通过选择器替换ast，返回完整ast
	                        }
	                    }
	                }
	                if (!replacer) {
	                    core$3.removePathSafe(path);
	                } else {
	                    let replacerAst = core$3.buildAstByAstStr(newReplacer);
	                    if (path.node.type == 'ClassMethod') {
	                        replacerAst = core$3.buildAstByAstStr(`class a$ {
                            ${newReplacer}
                        }`, { isProgram: false }).body.body[0];
	                    }
	                    if (replacerAst.expression && replacerAst.expression.type != 'AssignmentExpression' && path.parentPath.name != 'body') {
	                        replacerAst = replacerAst.expression;
	                    }
	                    path && core$3.replaceAstByAst(path, replacerAst);
	                }
	            } else {
	                if (!replacer) {
	                    core$3.removePathSafe(path);
	                } else if (typeof replacer == 'string') {
	                    let replacerAst = replacer.type ? replacer : core$3.buildAstByAstStr(replacer);
	                    if (!replacer.type && path.node.type == 'ClassMethod') {
	                        replacerAst = core$3.buildAstByAstStr(`class a$ {
                            ${replacer}
                        }`, { isProgram: false }).body.body[0];
	                    }
	                    if (replacerAst.expression && replacerAst.expression.type != 'AssignmentExpression' && path.parentPath.name != 'body') {
	                        replacerAst = replacerAst.expression;
	                    }
	                    path && core$3.replaceAstByAst(path, replacerAst);
	                } else {
	                    if (replacer[0] && replacer[0].nodePath) {
	                        path.replace(replacer[0].nodePath.node);
	                    } else {
	                        core$3.replaceAstByAst(path, replacer);
	                    }
	                }
	            }
	        });
	    },
	    insertAstListBefore(path, nodeList) {
	        if (!Array.isArray(nodeList)) {
	            nodeList = [nodeList];
	        }
	        for (let i = 0; i< 3; i++) {
	            const pNode = path.parentPath;
	            if (pNode && pNode.value && Array.isArray(pNode.value)) {
	                const index = pNode.value.indexOf(path.value);
	                nodeList.reverse().forEach(item => {
	                    pNode.value.splice(index, 0, item);
	                });
	                i = 3;
	            } else {
	                path = pNode;
	            }
	        }
	    },
	    insertAstListAfter(path, nodeList) {
	        if (!Array.isArray(nodeList)) {
	            nodeList = [nodeList];
	        }
	        for (let i = 0; i< 3; i++) {
	            const pNode = path.parentPath;
	            if (pNode && pNode.value && Array.isArray(pNode.value)) {
	                const index = pNode.value.indexOf(path.value) + 1;
	                nodeList.reverse().forEach(item => {
	                    pNode.value.splice(index, 0, item);
	                });
	                i = 3;
	            } else {
	                path = pNode;
	            }
	        }
	    },
	    removeAst(ast, selector, { strictSequence, parseOptions, expando } = {}) {
	        if (!ast || typeof ast !== 'object') {
	            throw new Error('remove failed! first argument mast be object')
	        }
	        if (!selector || (typeof selector !== 'object' && typeof selector !== 'string' && !Array.isArray(selector))) {
	            throw new Error('remove failed! first argument mast be object、string or string array')
	        }
	        // const selectorAst = getSelector(selector, this.parseOptions);
	        // console.log(selectorAst)
	        const { nodePathList } = core$3.getAstsBySelector(ast, selector, { strictSequence, parseOptions, expando });
	        // const { nodePathList } = find.call(ast, selectorAst.nodeType, selectorAst.structure, true, 'nn');
	        // console.log(nodePathList)
	        nodePathList.forEach(path => {
	            // 多条语句逗号分割的话，只删除一个；一条语句的话，删除父节点
	            if ((!path.parentPath.value.length) || path.parentPath.value.length == 1) {
	                core$3.removePathSafe(path.parent);
	            } else {
	                core$3.removePathSafe(path);
	            }
	        });
	    },
	    remove(path) {
	        try {
	            core$3.removePathSafe(path);
	        } catch(e) {
	            throw `remove failed: ${e}`
	        }
	    },
	    removePathSafe(path) {
	        // 对于expression 删除之后，父节点 expressionStatement 还在，输出会多个分号。所以应该删除 expressionStatement
	        if (path.name == 'expression') {
	            path.parent.replace();
	        } else {
	            path.replace();
	        }
	    },
	    appendJsxAttr(ast, obj) {
	        if (!ast || typeof ast !== 'object') {
	            throw new Error('appendJsxAttr failed! first argument mast be object')
	        }
	        if (!obj || typeof obj !== 'object') {
	            throw new Error('appendJsxAttr failed! second argument mast be object')
	        }
	        const attrs = [];
	        for (let o in obj) {
	            attrs.push(`${o}=${obj[o]}`.replace(/'\$'/g, "$"));
	        }
	        try {
	            const jsxPartial = core$3.buildAstByAstStr(`<div ${attrs.join(' ')}></div>`);
	            const newAttrs = jsxPartial.expression.openingElement.attributes;
	            if (ast.value) {
	                ast.value.openingElement.attributes = ast.value.openingElement.attributes.concat(newAttrs);
	            } else {
	                ast.expression.openingElement.attributes = ast.expression.openingElement.attributes.concat(newAttrs);
	            }
	            
	        } catch(e) {
	            throw new Error('appendJsxAttr failed!' + e)
	        }
	        
	    },
	    visit() {
	        visit.call(this, ...Array.from(arguments));
	    },
	    traverse(node, cb, parentNode) {
	        if(!node || typeof node !== 'object'){
	            throw new Error('traverse failed! first argument mast be object')
	        }
	        if(!cb || typeof cb !== 'function'){
	            throw new Error('traverse failed! second argument mast be function')
	        }
	        if (node.type && typeof node.type == 'string') {
	            // 是一个ast节点,且不是token
	            if (['File', 'Program'].indexOf(node.type) == -1) {
	                cb(node, { parentNode });
	            }
	            for (let attr in node) {
	                const child = node[attr];
	                if (child) {
	                    if (Array.isArray(child)) {
	                        let i = 0;
	                        while(child[i]) {
	                            const c = child[i];
	                            core$3.traverse(c, cb, child);
	                            i = child.indexOf(c);
	                            i++;
	                        }
	                        // child.forEach(c => core.traverse(c, cb, node));
	                    } else if (child.type) {
	                        core$3.traverse(child, cb, node);
	                    }
	                }
	            }
	        }
	    },
	    initComment(ast) {
	        core$3.traverse(ast, ((node, {parentNode}) => {
	            if (Array.isArray(parentNode)) {
	                const index = parentNode.indexOf(node);
	                if (index == parentNode.length - 1) {
	                    if (node.trailingComments) {
	                        node.trailingComments.forEach(comment => {
	                            parentNode.push(comment);
	                        });
	                    }
	                }
	                if (node.leadingComments) {
	                    node.leadingComments.reverse().forEach(comment => {
	                        parentNode.splice(index, 0, comment);
	                    });
	                }
	            }
	        }));
	    },
	    removeComments(ast) {
	        core$3.traverse(ast, ((node, {parentNode}) => {
	            if (Array.isArray(parentNode)) {
	                if (!parentNode.every(item => typeof item.type == 'string' && item.type.match('Comment'))) {
	                    let i = 0;
	                    while (parentNode[i]) {
	                        const node = parentNode[i];
	                        if (node && typeof node.type == 'string' && node.type.match('Comment')) {
	                            parentNode.splice(i, 1);
	                            i--;
	                        }
	                        i++;
	                    }
	                }
	            }
	        }));
	    }
	};
	function getArrPath(path) {
	    let arrPath = path;
	    if (!arrPath) return;
	    let lastNode = path.node;
	    let i = 0;
	    while(!Array.isArray(arrPath.value) && i < 3) {
	        lastNode = arrPath.node;
	        arrPath = arrPath.parentPath;
	        i++;
	    }
	    if (Array.isArray(arrPath.value)) {
	        return { arrPath: arrPath, index : arrPath.value.indexOf(lastNode) }
	    } else {
	        return { arrPath: {}, index: -1 };
	    }
	}
	var core_1$2 = core$3;

	var _hyntaxYx_1_0_3_hyntaxYx = {};

	const OPEN_TAG_NAME_PATTERN = /^<(\S+)/;
	const CLOSE_TAG_NAME_PATTERN = /^<\/((?:.|\n)*)>$/;

	function prettyJSON (obj) {
	  return JSON.stringify(obj, null, 2)
	}

	/**
	 * Clear tree of nodes from everything
	 * "parentRef" properties so the tree
	 * can be easily stringified into JSON.
	 */
	function clearAst (ast) {
	  const cleanAst = ast;

	  delete cleanAst.parentRef;

	  if (Array.isArray(ast.content.children)) {
	    cleanAst.content.children = ast.content.children.map((node) => {
	      return clearAst(node)
	    });
	  }

	  return cleanAst
	}

	function parseOpenTagName$2 (openTagStartTokenContent) {
	  const match = openTagStartTokenContent.match(OPEN_TAG_NAME_PATTERN);

	  if (match === null) {
	    throw new Error(
	      'Unable to parse open tag name.\n' +
	      `${ openTagStartTokenContent } does not match pattern of opening tag.`
	    )
	  }

	  return match[1]
	}

	function parseCloseTagName$1 (closeTagTokenContent) {
	  const match = closeTagTokenContent.match(CLOSE_TAG_NAME_PATTERN);

	  if (match === null) {
	    throw new Error(
	      'Unable to parse close tag name.\n' +
	      `${ closeTagTokenContent } does not match pattern of closing tag.`
	    )
	  }

	  return match[1].trim()
	}

	function calculateTokenCharactersRange$f (state, { keepBuffer }) {
	  if (keepBuffer === undefined) {
	    throw new Error(
	      'Unable to calculate characters range for token.\n' +
	      '"keepBuffer" parameter is not specified to decide if ' +
	      'the decision buffer is a part of characters range.'
	    )
	  }

	  const startPosition = (
	    state.caretPosition -
	    (state.accumulatedContent.length - 1) -
	    state.decisionBuffer.length
	  );

	  let endPosition;

	  if (!keepBuffer) {
	    endPosition = state.caretPosition - state.decisionBuffer.length;
	  } else {
	    endPosition = state.caretPosition;
	  }

	  return { startPosition, endPosition }
	}

	function isWhitespace$8 (char) {
	  return char === ' ' || char === '\n' || char === '\t'
	}

	var helpers = {
	  prettyJSON,
	  clearAst,
	  parseOpenTagName: parseOpenTagName$2,
	  parseCloseTagName: parseCloseTagName$1,
	  calculateTokenCharactersRange: calculateTokenCharactersRange$f,
	  isWhitespace: isWhitespace$8
	};

	var tokenTypes$1 = {
	  TOKEN_TEXT: 'token:text',

	  TOKEN_OPEN_TAG_START: 'token:open-tag-start',

	  TOKEN_ATTRIBUTE_KEY: 'token:attribute-key',
	  TOKEN_ATTRIBUTE_ASSIGNMENT: 'token:attribute-assignment',
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_START: 'token:attribute-value-wrapper-start',
	  TOKEN_ATTRIBUTE_VALUE: 'token:attribute-value',
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_END: 'token:attribute-value-wrapper-end',

	  TOKEN_OPEN_TAG_END: 'token:open-tag-end',
	  TOKEN_CLOSE_TAG: 'token:close-tag',

	  TOKEN_OPEN_TAG_START_SCRIPT: 'token:open-tag-start-script',
	  TOKEN_SCRIPT_TAG_CONTENT: 'token:script-tag-content',
	  TOKEN_OPEN_TAG_END_SCRIPT: 'token:open-tag-end-script',
	  TOKEN_CLOSE_TAG_SCRIPT: 'token:close-tag-script',

	  TOKEN_OPEN_TAG_START_STYLE: 'token:open-tag-start-style',
	  TOKEN_STYLE_TAG_CONTENT: 'token:style-tag-content',
	  TOKEN_OPEN_TAG_END_STYLE: 'token:open-tag-end-style',
	  TOKEN_CLOSE_TAG_STYLE: 'token:close-tag-style',

	  TOKEN_DOCTYPE_START: 'token:doctype-start',
	  TOKEN_DOCTYPE_END: 'token:doctype-end',
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START: 'token:doctype-attribute-wrapper-start',
	  TOKEN_DOCTYPE_ATTRIBUTE: 'token:doctype-attribute',
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END: 'token:doctype-attribute-wrapper-end',

	  TOKEN_COMMENT_START: 'token:comment-start',
	  TOKEN_COMMENT_CONTENT: 'token:comment-content',
	  TOKEN_COMMENT_END: 'token:comment-end'
	};

	var tokenizerContexts = {
	  DATA_CONTEXT: 'tokenizer-context:data',
	  OPEN_TAG_START_CONTEXT: 'tokenizer-context:open-tag-start',
	  CLOSE_TAG_CONTEXT: 'tokenizer-context:close-tag',
	  ATTRIBUTES_CONTEXT: 'tokenizer-context:attributes',
	  OPEN_TAG_END_CONTEXT: 'tokenizer-context:open-tag-end',
	  ATTRIBUTE_KEY_CONTEXT: 'tokenizer-context:attribute-key',
	  ATTRIBUTE_VALUE_CONTEXT: 'tokenizer-context:attribute-value',
	  ATTRIBUTE_VALUE_BARE_CONTEXT: 'tokenizer-context:attribute-value-bare',
	  ATTRIBUTE_VALUE_WRAPPED_CONTEXT: 'tokenizer-context:attribute-value-wrapped',
	  SCRIPT_CONTENT_CONTEXT: 'tokenizer-context:script-content',
	  STYLE_CONTENT_CONTEXT: 'tokenizer-context:style-content',
	  DOCTYPE_START_CONTEXT: 'tokenizer-context:doctype-start',
	  DOCTYPE_END_CONTEXT: 'tokenizer-context:doctype-end',
	  DOCTYPE_ATTRIBUTES_CONTEXT: 'tokenizer-context:doctype-attributes',
	  DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT: 'tokenizer-context:doctype-attribute-wrapped',
	  DOCTYPE_ATTRIBUTE_BARE_CONTEXT: 'tokenizer-context:doctype-attribute-bare',
	  COMMENT_START_CONTEXT: 'tokenizer-context:comment-start',
	  COMMENT_CONTENT_CONTEXT: 'tokenizer-context:comment-content',
	  COMMENT_END_CONTEXT: 'tokenizer-context:comment-end'
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$e } = helpers;

	const {
	  TOKEN_TEXT: TOKEN_TEXT$1,
	  TOKEN_COMMENT_START: TOKEN_COMMENT_START$2
	} = tokenTypes$1;
	const {
	  OPEN_TAG_START_CONTEXT: OPEN_TAG_START_CONTEXT$1,
	  CLOSE_TAG_CONTEXT: CLOSE_TAG_CONTEXT$1,
	  DOCTYPE_START_CONTEXT: DOCTYPE_START_CONTEXT$1,
	  COMMENT_CONTENT_CONTEXT: COMMENT_CONTENT_CONTEXT$1
	} = tokenizerContexts;

	const COMMENT_START = '<!--';

	function generateTextToken (state) {
	  const range = calculateTokenCharactersRange$e(state, { keepBuffer: false });

	  return {
	    type: TOKEN_TEXT$1,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  }
	}

	function openingCornerBraceWithText (state, tokens) {
	  if (state.accumulatedContent.length !== 0) {
	    tokens.push(generateTextToken(state));
	  }

	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = OPEN_TAG_START_CONTEXT$1;
	  state.caretPosition++;
	}

	function openingCornerBraceWithSlash (state, tokens) {
	  if (state.accumulatedContent.length !== 0) {
	    tokens.push(generateTextToken(state));
	  }

	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = CLOSE_TAG_CONTEXT$1;
	  state.caretPosition++;
	}

	function doctypeStart$1 (state, tokens) {
	  if (state.accumulatedContent.length !== 0) {
	    tokens.push(generateTextToken(state));
	  }

	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_START_CONTEXT$1;
	  state.caretPosition++;
	}

	function commentStart (state, tokens) {
	  if (state.accumulatedContent.length !== 0) {
	    tokens.push(generateTextToken(state));
	  }

	  const commentStartRange = {
	    startPosition: state.caretPosition - (COMMENT_START.length - 1),
	    endPosition: state.caretPosition
	  };

	  tokens.push({
	    type: TOKEN_COMMENT_START$2,
	    content: state.decisionBuffer,
	    startPosition: commentStartRange.startPosition,
	    endPosition: commentStartRange.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = COMMENT_CONTENT_CONTEXT$1;
	  state.caretPosition++;
	}

	function handleContentEnd (state, tokens) {
	  const textContent = state.accumulatedContent + state.decisionBuffer;

	  if (textContent.length !== 0) {
	    const range = calculateTokenCharactersRange$e(state, { keepBuffer: false });

	    tokens.push({
	      type: TOKEN_TEXT$1,
	      content: textContent,
	      startPosition: range.startPosition,
	      endPosition: range.endPosition
	    });
	  }
	}

	function isIncompleteDoctype (chars) {
	  const charsUpperCase = chars.toUpperCase();

	  return (
	    charsUpperCase === '<!'
	    || charsUpperCase === '<!D'
	    || charsUpperCase === '<!DO'
	    || charsUpperCase === '<!DOC'
	    || charsUpperCase === '<!DOCT'
	    || charsUpperCase === '<!DOCTY'
	    || charsUpperCase === '<!DOCTYP'
	  )
	}

	const OPEN_TAG_START_PATTERN = /^<\w/;

	function parseSyntax$g (chars, state, tokens) {
	  if (OPEN_TAG_START_PATTERN.test(chars)) {
	    return openingCornerBraceWithText(state, tokens)
	  }

	  if (chars === '</') {
	    return openingCornerBraceWithSlash(state, tokens)
	  }

	  if (
	    chars === '<'
	    || chars === '<!'
	    || chars === '<!-'
	  ) {
	    state.caretPosition++;

	    return
	  }

	  if (chars === COMMENT_START) {
	    return commentStart(state, tokens)
	  }

	  if (isIncompleteDoctype(chars)) {
	    state.caretPosition++;

	    return
	  }

	  if (chars.toUpperCase() === '<!DOCTYPE') {
	    return doctypeStart$1(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var data = {
	  parseSyntax: parseSyntax$g,
	  handleContentEnd
	};

	const {
	  parseOpenTagName: parseOpenTagName$1,
	  isWhitespace: isWhitespace$7,
	  calculateTokenCharactersRange: calculateTokenCharactersRange$d
	} = helpers;

	const {
	  TOKEN_OPEN_TAG_START: TOKEN_OPEN_TAG_START$3,
	  TOKEN_OPEN_TAG_START_SCRIPT: TOKEN_OPEN_TAG_START_SCRIPT$2,
	  TOKEN_OPEN_TAG_START_STYLE: TOKEN_OPEN_TAG_START_STYLE$2
	} = tokenTypes$1;
	const {
	  OPEN_TAG_END_CONTEXT: OPEN_TAG_END_CONTEXT$3,
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$a
	} = tokenizerContexts;

	const tokensMap$1 = {
	  'script': TOKEN_OPEN_TAG_START_SCRIPT$2,
	  'style': TOKEN_OPEN_TAG_START_STYLE$2,
	  'default': TOKEN_OPEN_TAG_START$3
	};

	function tagEnd$2 (state, tokens) {
	  const tagName = parseOpenTagName$1(state.accumulatedContent);
	  const range = calculateTokenCharactersRange$d(state, { keepBuffer: false });

	  tokens.push({
	    type: tokensMap$1[tagName] || tokensMap$1.default,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.decisionBuffer = '';
	  state.accumulatedContent = '';
	  state.currentContext = OPEN_TAG_END_CONTEXT$3;
	  state.contextParams[OPEN_TAG_END_CONTEXT$3] = { tagName };
	}

	function whitespace$2 (state, tokens) {
	  const tagName = parseOpenTagName$1(state.accumulatedContent);
	  const range = calculateTokenCharactersRange$d(state, { keepBuffer: false });

	  tokens.push({
	    type: tokensMap$1[tagName] || tokensMap$1.default,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTES_CONTEXT$a;
	  state.contextParams[ATTRIBUTES_CONTEXT$a] = { tagName };
	  state.caretPosition++;
	}

	function parseSyntax$f (chars, state, tokens) {
	  if (chars === '>' || chars === '/') {
	    return tagEnd$2(state, tokens)
	  }

	  if (isWhitespace$7(chars)) {
	    return whitespace$2(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var openTagStart = {
	  parseSyntax: parseSyntax$f
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$c } = helpers;

	const { TOKEN_CLOSE_TAG: TOKEN_CLOSE_TAG$2 } = tokenTypes$1;
	const { DATA_CONTEXT: DATA_CONTEXT$6 } = tokenizerContexts;

	function closingCornerBrace$4 (state, tokens) {
	  const range = calculateTokenCharactersRange$c(state, { keepBuffer: true });

	  tokens.push({
	    type: TOKEN_CLOSE_TAG$2,
	    content: state.accumulatedContent + state.decisionBuffer,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DATA_CONTEXT$6;
	  state.caretPosition++;
	}

	function parseSyntax$e (chars, state, tokens) {
	  if (chars === '>') {
	    return closingCornerBrace$4(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var closeTag = {
	  parseSyntax: parseSyntax$e
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$b } = helpers;

	const {
	  TOKEN_OPEN_TAG_END: TOKEN_OPEN_TAG_END$4,
	  TOKEN_OPEN_TAG_END_SCRIPT: TOKEN_OPEN_TAG_END_SCRIPT$4,
	  TOKEN_OPEN_TAG_END_STYLE: TOKEN_OPEN_TAG_END_STYLE$4
	} = tokenTypes$1;
	const {
	  OPEN_TAG_END_CONTEXT: OPEN_TAG_END_CONTEXT$2,
	  DATA_CONTEXT: DATA_CONTEXT$5,
	  SCRIPT_CONTENT_CONTEXT: SCRIPT_CONTENT_CONTEXT$1,
	  STYLE_CONTENT_CONTEXT: STYLE_CONTENT_CONTEXT$1
	} = tokenizerContexts;

	const tokensMap = {
	  'script': TOKEN_OPEN_TAG_END_SCRIPT$4,
	  'style': TOKEN_OPEN_TAG_END_STYLE$4,
	  'default': TOKEN_OPEN_TAG_END$4
	};

	const contextsMap$1 = {
	  'script': SCRIPT_CONTENT_CONTEXT$1,
	  'style': STYLE_CONTENT_CONTEXT$1,
	  'default': DATA_CONTEXT$5
	};

	function closingCornerBrace$3 (state, tokens) {
	  const range = calculateTokenCharactersRange$b(state, { keepBuffer: true });
	  const tagName = state.contextParams[OPEN_TAG_END_CONTEXT$2].tagName;

	  tokens.push({
	    type: tokensMap[tagName] || tokensMap.default,
	    content: state.accumulatedContent + state.decisionBuffer,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = contextsMap$1[tagName] || contextsMap$1.default;
	  state.caretPosition++;

	  state.contextParams[OPEN_TAG_END_CONTEXT$2] = undefined;
	}

	function parseSyntax$d (chars, state, tokens) {
	  if (chars === '>') {
	    return closingCornerBrace$3(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var openTagEnd = {
	  parseSyntax: parseSyntax$d
	};

	const {
	  isWhitespace: isWhitespace$6,
	  calculateTokenCharactersRange: calculateTokenCharactersRange$a
	} = helpers;
	const {
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$9,
	  OPEN_TAG_END_CONTEXT: OPEN_TAG_END_CONTEXT$1,
	  ATTRIBUTE_VALUE_CONTEXT: ATTRIBUTE_VALUE_CONTEXT$3,
	  ATTRIBUTE_KEY_CONTEXT: ATTRIBUTE_KEY_CONTEXT$1
	} = tokenizerContexts;
	const { TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$6 } = tokenTypes$1;

	function tagEnd$1 (state) {
	  const tagName = state.contextParams[ATTRIBUTES_CONTEXT$9].tagName;

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = OPEN_TAG_END_CONTEXT$1;
	  state.contextParams[OPEN_TAG_END_CONTEXT$1] = { tagName };

	  state.contextParams[ATTRIBUTES_CONTEXT$9] = undefined;
	}

	function noneWhitespace (state) {
	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTE_KEY_CONTEXT$1;
	  state.caretPosition++;
	}

	function equal (state, tokens) {
	  const range = calculateTokenCharactersRange$a(state, { keepBuffer: true });

	  tokens.push({
	    type: TOKEN_ATTRIBUTE_ASSIGNMENT$6,
	    content: state.decisionBuffer,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTE_VALUE_CONTEXT$3;
	  state.caretPosition++;
	}

	function parseSyntax$c (chars, state, tokens, next, nextNoWhiteChar) {
	  if (chars === '>' || (chars === '/' && nextNoWhiteChar === '>')) {
	    return tagEnd$1(state)
	  }

	  if (chars === '=') {
	    return equal(state, tokens)
	  }

	  if (!isWhitespace$6(chars)) {
	    return noneWhitespace(state)
	  }

	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var attributes$2 = {
	  parseSyntax: parseSyntax$c
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$9 } = helpers;

	const { TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$6 } = tokenTypes$1;
	const { ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$8 } = tokenizerContexts;

	function keyEnd (state, tokens) {
	  const range = calculateTokenCharactersRange$9(state, { keepBuffer: false });

	  tokens.push({
	    type: TOKEN_ATTRIBUTE_KEY$6,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTES_CONTEXT$8;
	}

	function isKeyBreak (chars) {
	  return (
	    chars === '='
	    || chars === ' '
	    || chars === '\n'
	    || chars === '\t'
	    || chars === '/'
	    || chars === '>'
	  )
	}

	function parseSyntax$b (chars, state, tokens) {
	  if (isKeyBreak(chars)) {
	    return keyEnd(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var attributeKey = {
	  parseSyntax: parseSyntax$b
	};

	const { isWhitespace: isWhitespace$5 } = helpers;
	const {
	  ATTRIBUTE_VALUE_WRAPPED_CONTEXT: ATTRIBUTE_VALUE_WRAPPED_CONTEXT$2,
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$7,
	  ATTRIBUTE_VALUE_BARE_CONTEXT: ATTRIBUTE_VALUE_BARE_CONTEXT$1
	} = tokenizerContexts;
	const {
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_START: TOKEN_ATTRIBUTE_VALUE_WRAPPER_START$1
	} = tokenTypes$1;

	function wrapper$3 (state, tokens) {
	  const wrapper = state.decisionBuffer;

	  tokens.push({
	    type: TOKEN_ATTRIBUTE_VALUE_WRAPPER_START$1,
	    content: wrapper,
	    startPosition: state.caretPosition,
	    endPosition: state.caretPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTE_VALUE_WRAPPED_CONTEXT$2;
	  state.contextParams[ATTRIBUTE_VALUE_WRAPPED_CONTEXT$2] = { wrapper };
	  state.caretPosition++;
	}

	function bare$1 (state) {
	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTE_VALUE_BARE_CONTEXT$1;
	  state.caretPosition++;
	}

	function tagEnd (state) {
	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTES_CONTEXT$7;
	}

	function parseSyntax$a (chars, state, tokens) {
	  if (chars === '"' || chars === '\'') {
	    return wrapper$3(state, tokens)
	  }

	  if (chars === '>' || chars === '/') {
	    return tagEnd(state)
	  }

	  if (!isWhitespace$5(chars)) {
	    return bare$1(state)
	  }

	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var attributeValue$2 = {
	  parseSyntax: parseSyntax$a
	};

	const {
	  calculateTokenCharactersRange: calculateTokenCharactersRange$8,
	  isWhitespace: isWhitespace$4
	} = helpers;

	const { TOKEN_ATTRIBUTE_VALUE: TOKEN_ATTRIBUTE_VALUE$2 } = tokenTypes$1;
	const { ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$6 } = tokenizerContexts;

	function valueEnd (state, tokens) {
	  const range = calculateTokenCharactersRange$8(state, { keepBuffer: false });

	  tokens.push({
	    type: TOKEN_ATTRIBUTE_VALUE$2,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTES_CONTEXT$6;
	}

	function parseSyntax$9 (chars, state, tokens) {
	  if (
	    (!state.accumulatedContent.match('{{') || state.accumulatedContent.match('}}')) && 
	    (isWhitespace$4(chars)
	    || chars === '>'
	    || chars === '/')
	  ) {
	    return valueEnd(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var attributeValueBare = {
	  parseSyntax: parseSyntax$9
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$7 } = helpers;

	const {
	  TOKEN_ATTRIBUTE_VALUE: TOKEN_ATTRIBUTE_VALUE$1,
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_END: TOKEN_ATTRIBUTE_VALUE_WRAPPER_END$1
	} = tokenTypes$1;
	const {
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$5,
	  ATTRIBUTE_VALUE_WRAPPED_CONTEXT: ATTRIBUTE_VALUE_WRAPPED_CONTEXT$1
	} = tokenizerContexts;

	function wrapper$2 (state, tokens) {
	  const range = calculateTokenCharactersRange$7(state, { keepBuffer: false });
	  const endWrapperPosition = range.endPosition + 1;

	  tokens.push(
	    {
	      type: TOKEN_ATTRIBUTE_VALUE$1,
	      content: state.accumulatedContent,
	      startPosition: range.startPosition,
	      endPosition: range.endPosition
	    },
	    {
	      type: TOKEN_ATTRIBUTE_VALUE_WRAPPER_END$1,
	      content: state.decisionBuffer,
	      startPosition: endWrapperPosition,
	      endPosition: endWrapperPosition
	    }
	  );

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = ATTRIBUTES_CONTEXT$5;
	  state.caretPosition++;

	  state.contextParams[ATTRIBUTE_VALUE_WRAPPED_CONTEXT$1] = undefined;
	}

	function parseSyntax$8 (chars, state, tokens) {
	  const wrapperChar = state.contextParams[ATTRIBUTE_VALUE_WRAPPED_CONTEXT$1].wrapper;

	  if (chars === wrapperChar) {
	    return wrapper$2(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var attributeValueWrapped = {
	  parseSyntax: parseSyntax$8
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$6 } = helpers;

	const {
	  TOKEN_SCRIPT_TAG_CONTENT: TOKEN_SCRIPT_TAG_CONTENT$1,
	  TOKEN_CLOSE_TAG_SCRIPT: TOKEN_CLOSE_TAG_SCRIPT$1
	} = tokenTypes$1;
	const { DATA_CONTEXT: DATA_CONTEXT$4 } = tokenizerContexts;

	function closingScriptTag (state, tokens) {
	  if (state.accumulatedContent !== '') {
	    const range = calculateTokenCharactersRange$6(state, { keepBuffer: false });

	    tokens.push({
	      type: TOKEN_SCRIPT_TAG_CONTENT$1,
	      content: state.accumulatedContent,
	      startPosition: range.startPosition,
	      endPosition: range.endPosition
	    });
	  }

	  tokens.push({
	    type: TOKEN_CLOSE_TAG_SCRIPT$1,
	    content: state.decisionBuffer,
	    startPosition: state.caretPosition - (state.decisionBuffer.length - 1),
	    endPosition: state.caretPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DATA_CONTEXT$4;
	  state.caretPosition++;
	}

	const INCOMPLETE_CLOSING_TAG_PATTERN$1 = /<\/[^>]+$/;
	const CLOSING_SCRIPT_TAG_PATTERN = /<\/script\s*>/i;

	function parseSyntax$7 (chars, state, tokens) {
	  if (
	    chars === '<' ||
	    chars === '</' ||
	    INCOMPLETE_CLOSING_TAG_PATTERN$1.test(chars)
	  ) {
	    state.caretPosition++;

	    return
	  }

	  if (CLOSING_SCRIPT_TAG_PATTERN.test(chars)) {
	    return closingScriptTag(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var scriptTagContent = {
	  parseSyntax: parseSyntax$7
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$5 } = helpers;

	const {
	  TOKEN_STYLE_TAG_CONTENT: TOKEN_STYLE_TAG_CONTENT$1,
	  TOKEN_CLOSE_TAG_STYLE: TOKEN_CLOSE_TAG_STYLE$1
	} = tokenTypes$1;
	const { DATA_CONTEXT: DATA_CONTEXT$3 } = tokenizerContexts;

	function closingStyleTag (state, tokens) {
	  if (state.accumulatedContent !== '') {
	    const range = calculateTokenCharactersRange$5(state, { keepBuffer: false });

	    tokens.push({
	      type: TOKEN_STYLE_TAG_CONTENT$1,
	      content: state.accumulatedContent,
	      startPosition: range.startPosition,
	      endPosition: range.endPosition
	    });
	  }

	  tokens.push({
	    type: TOKEN_CLOSE_TAG_STYLE$1,
	    content: state.decisionBuffer,
	    startPosition: state.caretPosition - (state.decisionBuffer.length - 1),
	    endPosition: state.caretPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DATA_CONTEXT$3;
	  state.caretPosition++;
	}

	const INCOMPLETE_CLOSING_TAG_PATTERN = /<\/[^>]+$/;
	const CLOSING_STYLE_TAG_PATTERN = /<\/style\s*>/i;

	function parseSyntax$6 (chars, state, tokens) {
	  if (
	    chars === '<' ||
	    chars === '</' ||
	    INCOMPLETE_CLOSING_TAG_PATTERN.test(chars)
	  ) {
	    state.caretPosition++;

	    return
	  }

	  if (CLOSING_STYLE_TAG_PATTERN.test(chars)) {
	    return closingStyleTag(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var styleTagContent = {
	  parseSyntax: parseSyntax$6
	};

	const { isWhitespace: isWhitespace$3, calculateTokenCharactersRange: calculateTokenCharactersRange$4 } = helpers;

	const {
	  TOKEN_DOCTYPE_START: TOKEN_DOCTYPE_START$2
	} = tokenTypes$1;

	const {
	  DOCTYPE_END_CONTEXT: DOCTYPE_END_CONTEXT$2,
	  DOCTYPE_ATTRIBUTES_CONTEXT: DOCTYPE_ATTRIBUTES_CONTEXT$5
	} = tokenizerContexts;

	function generateDoctypeStartToken (state) {
	  const range = calculateTokenCharactersRange$4(state, { keepBuffer: false });

	  return {
	    type: TOKEN_DOCTYPE_START$2,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  }
	}

	function closingCornerBrace$2 (state, tokens) {
	  tokens.push(generateDoctypeStartToken(state));

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_END_CONTEXT$2;
	}

	function whitespace$1 (state, tokens) {
	  tokens.push(generateDoctypeStartToken(state));

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_ATTRIBUTES_CONTEXT$5;
	}

	function parseSyntax$5 (chars, state, tokens) {
	  if (isWhitespace$3(chars)) {
	    return whitespace$1(state, tokens)
	  }

	  if (chars === '>') {
	    return closingCornerBrace$2(state, tokens)
	  }

	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var doctypeStart = {
	  parseSyntax: parseSyntax$5
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$3 } = helpers;

	const { TOKEN_DOCTYPE_END: TOKEN_DOCTYPE_END$3 } = tokenTypes$1;
	const { DATA_CONTEXT: DATA_CONTEXT$2 } = tokenizerContexts;

	function closingCornerBrace$1 (state, tokens) {
	  const range = calculateTokenCharactersRange$3(state, { keepBuffer: true });

	  tokens.push({
	    type: TOKEN_DOCTYPE_END$3,
	    content: state.decisionBuffer,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DATA_CONTEXT$2;
	  state.caretPosition++;
	}

	function parseSyntax$4 (chars, state, tokens) {
	  return closingCornerBrace$1(state, tokens)
	}

	var doctypeEnd = {
	  parseSyntax: parseSyntax$4
	};

	const { isWhitespace: isWhitespace$2 } = helpers;

	const {
	  DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT: DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$2,
	  DOCTYPE_ATTRIBUTE_BARE_CONTEXT: DOCTYPE_ATTRIBUTE_BARE_CONTEXT$1,
	  DOCTYPE_END_CONTEXT: DOCTYPE_END_CONTEXT$1
	} = tokenizerContexts;
	const {
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$3
	} = tokenTypes$1;

	function wrapper$1 (state, tokens) {
	  const wrapper = state.decisionBuffer;

	  tokens.push({
	    type: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$3,
	    content: wrapper,
	    startPosition: state.caretPosition,
	    endPosition: state.caretPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$2;
	  state.contextParams[DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$2] = { wrapper };
	  state.caretPosition++;
	}

	function bare (state) {
	  state.accumulatedContent = state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_ATTRIBUTE_BARE_CONTEXT$1;
	  state.caretPosition++;
	}

	function closingCornerBrace (state) {
	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_END_CONTEXT$1;
	}

	function parseSyntax$3 (chars, state, tokens) {
	  if (chars === '"' || chars === '\'') {
	    return wrapper$1(state, tokens)
	  }

	  if (chars === '>') {
	    return closingCornerBrace(state)
	  }

	  if (!isWhitespace$2(chars)) {
	    return bare(state)
	  }

	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var doctypeAttributes$2 = {
	  parseSyntax: parseSyntax$3
	};

	const { calculateTokenCharactersRange: calculateTokenCharactersRange$2 } = helpers;

	const {
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END$1,
	  TOKEN_DOCTYPE_ATTRIBUTE: TOKEN_DOCTYPE_ATTRIBUTE$4
	} = tokenTypes$1;
	const {
	  DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT: DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$1,
	  DOCTYPE_ATTRIBUTES_CONTEXT: DOCTYPE_ATTRIBUTES_CONTEXT$4
	} = tokenizerContexts;

	function wrapper (state, tokens) {
	  const range = calculateTokenCharactersRange$2(state, { keepBuffer: false });
	  const endWrapperPosition = range.endPosition + 1;

	  tokens.push({
	    type: TOKEN_DOCTYPE_ATTRIBUTE$4,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  tokens.push({
	    type: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END$1,
	    content: state.decisionBuffer,
	    startPosition: endWrapperPosition,
	    endPosition: endWrapperPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_ATTRIBUTES_CONTEXT$4;
	  state.caretPosition++;

	  state.contextParams[DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$1] = undefined;
	}

	function parseSyntax$2 (chars, state, tokens) {
	  const wrapperChar = state.contextParams[DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT$1].wrapper;

	  if (chars === wrapperChar) {
	    return wrapper(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var doctypeAttributeWrapped = {
	  parseSyntax: parseSyntax$2
	};

	const { isWhitespace: isWhitespace$1, calculateTokenCharactersRange: calculateTokenCharactersRange$1 } = helpers;

	const {
	  TOKEN_DOCTYPE_ATTRIBUTE: TOKEN_DOCTYPE_ATTRIBUTE$3
	} = tokenTypes$1;
	const {
	  DOCTYPE_ATTRIBUTES_CONTEXT: DOCTYPE_ATTRIBUTES_CONTEXT$3
	} = tokenizerContexts;

	function attributeEnd (state, tokens) {
	  const range = calculateTokenCharactersRange$1(state, { keepBuffer: false });

	  tokens.push({
	    type: TOKEN_DOCTYPE_ATTRIBUTE$3,
	    content: state.accumulatedContent,
	    startPosition: range.startPosition,
	    endPosition: range.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DOCTYPE_ATTRIBUTES_CONTEXT$3;
	}

	function parseSyntax$1 (chars, state, tokens) {
	  if (isWhitespace$1(chars) || chars === '>') {
	    return attributeEnd(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var doctypeAttributeBare = {
	  parseSyntax: parseSyntax$1
	};

	const { calculateTokenCharactersRange } = helpers;

	const {
	  TOKEN_COMMENT_END: TOKEN_COMMENT_END$1,
	  TOKEN_COMMENT_CONTENT: TOKEN_COMMENT_CONTENT$1
	} = tokenTypes$1;
	const {
	  DATA_CONTEXT: DATA_CONTEXT$1
	} = tokenizerContexts;

	const COMMENT_END = '-->';

	function commentEnd (state, tokens) {
	  const contentRange = calculateTokenCharactersRange(state, { keepBuffer: false });
	  const commentEndRange = {
	    startPosition: contentRange.endPosition + 1,
	    endPosition: contentRange.endPosition + COMMENT_END.length,
	  };

	  tokens.push({
	    type: TOKEN_COMMENT_CONTENT$1,
	    content: state.accumulatedContent,
	    startPosition: contentRange.startPosition,
	    endPosition: contentRange.endPosition
	  });

	  tokens.push({
	    type: TOKEN_COMMENT_END$1,
	    content: state.decisionBuffer,
	    startPosition: commentEndRange.startPosition,
	    endPosition: commentEndRange.endPosition
	  });

	  state.accumulatedContent = '';
	  state.decisionBuffer = '';
	  state.currentContext = DATA_CONTEXT$1;
	  state.caretPosition++;
	}

	function parseSyntax (chars, state, tokens) {
	  if (chars === '-' || chars === '--') {
	    state.caretPosition++;

	    return
	  }

	  if (chars === COMMENT_END) {
	    return commentEnd(state, tokens)
	  }

	  state.accumulatedContent += state.decisionBuffer;
	  state.decisionBuffer = '';
	  state.caretPosition++;
	}

	var commentContent = {
	  parseSyntax
	};

	const dataContext = data;
	const openTagStartContext = openTagStart;
	const closeTagContext = closeTag;
	const openTagEndContext = openTagEnd;
	const attributesContext = attributes$2;
	const attributeKeyContext = attributeKey;
	const attributeValueContext = attributeValue$2;
	const attributeValueBareContext = attributeValueBare;
	const attributeValueWrappedContext = attributeValueWrapped;
	const scriptContentContext = scriptTagContent;
	const styleContentContext = styleTagContent;
	const doctypeStartContext = doctypeStart;
	const doctypeEndContextFactory = doctypeEnd;
	const doctypeAttributesContext = doctypeAttributes$2;
	const doctypeAttributeWrappedContext = doctypeAttributeWrapped;
	const doctypeAttributeBareEndContext = doctypeAttributeBare;
	const commentContentContext = commentContent;
	const { isWhitespace } = helpers;

	const {
	  DATA_CONTEXT,
	  OPEN_TAG_START_CONTEXT,
	  CLOSE_TAG_CONTEXT,
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$4,
	  OPEN_TAG_END_CONTEXT,
	  ATTRIBUTE_KEY_CONTEXT,
	  ATTRIBUTE_VALUE_CONTEXT: ATTRIBUTE_VALUE_CONTEXT$2,
	  ATTRIBUTE_VALUE_BARE_CONTEXT,
	  ATTRIBUTE_VALUE_WRAPPED_CONTEXT,
	  SCRIPT_CONTENT_CONTEXT,
	  STYLE_CONTENT_CONTEXT,
	  DOCTYPE_START_CONTEXT,
	  DOCTYPE_END_CONTEXT,
	  DOCTYPE_ATTRIBUTES_CONTEXT: DOCTYPE_ATTRIBUTES_CONTEXT$2,
	  DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT,
	  DOCTYPE_ATTRIBUTE_BARE_CONTEXT,
	  COMMENT_CONTENT_CONTEXT,
	} = tokenizerContexts;

	const contextHandlersMap = {
	  [DATA_CONTEXT]: dataContext,
	  [OPEN_TAG_START_CONTEXT]: openTagStartContext,
	  [CLOSE_TAG_CONTEXT]: closeTagContext,
	  [ATTRIBUTES_CONTEXT$4]: attributesContext,
	  [OPEN_TAG_END_CONTEXT]: openTagEndContext,
	  [ATTRIBUTE_KEY_CONTEXT]: attributeKeyContext,
	  [ATTRIBUTE_VALUE_CONTEXT$2]: attributeValueContext,
	  [ATTRIBUTE_VALUE_BARE_CONTEXT]: attributeValueBareContext,
	  [ATTRIBUTE_VALUE_WRAPPED_CONTEXT]: attributeValueWrappedContext,
	  [SCRIPT_CONTENT_CONTEXT]: scriptContentContext,
	  [STYLE_CONTENT_CONTEXT]: styleContentContext,
	  [DOCTYPE_START_CONTEXT]: doctypeStartContext,
	  [DOCTYPE_END_CONTEXT]: doctypeEndContextFactory,
	  [DOCTYPE_ATTRIBUTES_CONTEXT$2]: doctypeAttributesContext,
	  [DOCTYPE_ATTRIBUTE_WRAPPED_CONTEXT]: doctypeAttributeWrappedContext,
	  [DOCTYPE_ATTRIBUTE_BARE_CONTEXT]: doctypeAttributeBareEndContext,
	  [COMMENT_CONTENT_CONTEXT]: commentContentContext
	};

	function tokenizeChars (
	  chars,
	  state,
	  tokens,
	  { isFinalChunk, positionOffset }
	) {
	  let charIndex = state.caretPosition - positionOffset;

	  while (charIndex < chars.length) {
	    const context = contextHandlersMap[state.currentContext];

	    state.decisionBuffer += chars[charIndex];
	    const nextChar = chars[charIndex + 1];
	    let nextNoWhiteChar = nextChar;
	    let nextNoWhiteIndex = charIndex + 1;
	    while (isWhitespace(nextNoWhiteChar)) {
	      nextNoWhiteIndex += 1;
	      nextNoWhiteChar = chars[nextNoWhiteIndex];
	    }
	    context.parseSyntax(state.decisionBuffer, state, tokens, nextChar, nextNoWhiteChar);

	    charIndex = state.caretPosition - positionOffset;
	  }

	  if (isFinalChunk) {
	    const context = contextHandlersMap[state.currentContext];

	    // Move the caret back, as at this point
	    // it in the position outside of chars array,
	    // and it should not be taken into account
	    // when calculating characters range
	    state.caretPosition--;

	    if (context.handleContentEnd !== undefined) {
	      context.handleContentEnd(state, tokens);
	    }
	  }
	}

	function tokenize$5 (
	  content = '',
	  existingState,
	  { isFinalChunk } = {}
	) {
	  isFinalChunk = isFinalChunk === undefined ? true : isFinalChunk;

	  let state;

	  if (existingState !== undefined) {
	    state = Object.assign({}, existingState);
	  } else {
	    state = {
	      currentContext: DATA_CONTEXT,
	      contextParams: {},
	      decisionBuffer: '',
	      accumulatedContent: '',
	      caretPosition: 0
	    };
	  }

	  const chars = state.decisionBuffer + content;
	  const tokens = [];

	  const positionOffset = state.caretPosition - state.decisionBuffer.length;

	  tokenizeChars(chars, state, tokens, {
	    isFinalChunk,
	    positionOffset
	  });

	  return { state, tokens }
	}

	var tokenize_1 = tokenize$5;

	var treeConstructorContexts = {
	  TAG_CONTENT_CONTEXT: 'tree-constructor-context:tag-content',
	  TAG_CONTEXT: 'tree-constructor-context:tag',
	  TAG_NAME_CONTEXT: 'tree-constructor-context:tag-name',
	  ATTRIBUTES_CONTEXT: 'tree-constructor-context:attributes',
	  ATTRIBUTE_CONTEXT: 'tree-constructor-context:attribute',
	  ATTRIBUTE_VALUE_CONTEXT: 'tree-constructor-context:attribute-value',
	  COMMENT_CONTEXT: 'tree-constructor-context:comment',
	  DOCTYPE_CONTEXT: 'tree-constructor-context:doctype',
	  DOCTYPE_ATTRIBUTES_CONTEXT: 'tree-constructor-context:doctype-attributes',
	  DOCTYPE_ATTRIBUTE_CONTEXT: 'tree-constructor-context:doctype-attribute',
	  SCRIPT_TAG_CONTEXT: 'tree-constructor-context:script-tag',
	  STYLE_TAG_CONTEXT: 'tree-constructor-context:style-tag'
	};

	const {
	  TOKEN_OPEN_TAG_START: TOKEN_OPEN_TAG_START$2,
	  TOKEN_OPEN_TAG_END: TOKEN_OPEN_TAG_END$3,
	  TOKEN_CLOSE_TAG: TOKEN_CLOSE_TAG$1,
	  TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$5,
	  TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$5
	} = tokenTypes$1;
	const {
	  TAG_NAME_CONTEXT: TAG_NAME_CONTEXT$1,
	  ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$3,
	  TAG_CONTENT_CONTEXT: TAG_CONTENT_CONTEXT$1
	} = treeConstructorContexts;

	function handleOpenTagStart$1 (state, token) {
	  state.currentNode.content.openStart = token;
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: TAG_NAME_CONTEXT$1
	  };

	  return state
	}

	function handleAttributeStart (state) {
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: ATTRIBUTES_CONTEXT$3
	  };

	  return state
	}

	function handleOpenTagEnd$2 (state, token) {
	  const SELF_CLOSING_TAGS = [
	    'area',
	    'base',
	    'br',
	    'col',
	    'embed',
	    'hr',
	    'img',
	    'input',
	    'keygen',
	    'link',
	    'meta',
	    'param',
	    'source',
	    'track',
	    'wbr'
	  ].concat((state.parseOptions || {}).selfClosingTag || []);
	  const tagName = state.currentNode.content.name;

	  state.currentNode.content.openEnd = token;

	  if (token.content.match(/\/\s*>/) || SELF_CLOSING_TAGS.indexOf(tagName) !== -1) {
	    state.currentNode.content.selfClosing = true;
	    state.currentNode = state.currentNode.parentRef;
	    state.currentContext = state.currentContext.parentRef;
	    state.caretPosition++;

	    return state
	  }

	  state.currentNode.content.selfClosing = false;
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: TAG_CONTENT_CONTEXT$1
	  };
	  state.caretPosition++;

	  return state
	}

	function handleCloseTag$1 (state, token) {
	  state.currentNode.content.close = token;
	  state.currentNode = state.currentNode.parentRef;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	var tag$3 = function tag (token, state) {
	  if (token.type === TOKEN_OPEN_TAG_START$2) {
	    return handleOpenTagStart$1(state, token)
	  }

	  const ATTRIBUTE_START_TOKENS = [
	    TOKEN_ATTRIBUTE_KEY$5,
	    TOKEN_ATTRIBUTE_ASSIGNMENT$5
	  ];

	  if (ATTRIBUTE_START_TOKENS.indexOf(token.type) !== -1) {
	    return handleAttributeStart(state)
	  }

	  if (token.type === TOKEN_OPEN_TAG_END$3) {
	    return handleOpenTagEnd$2(state, token)
	  }

	  if (token.type === TOKEN_CLOSE_TAG$1) {
	    return handleCloseTag$1(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	var astNodes = {
	  NODE_DOCUMENT: 'document',
	  NODE_TAG: 'tag',
	  NODE_TEXT: 'text',
	  NODE_DOCTYPE: 'doctype',
	  NODE_COMMENT: 'comment',
	  NODE_SCRIPT: 'script',
	  NODE_STYLE: 'style'
	};

	const parseCloseTagName = helpers.parseCloseTagName;

	const {
	  TOKEN_OPEN_TAG_START: TOKEN_OPEN_TAG_START$1,
	  TOKEN_CLOSE_TAG,
	  TOKEN_COMMENT_START: TOKEN_COMMENT_START$1,
	  TOKEN_DOCTYPE_START: TOKEN_DOCTYPE_START$1,
	  TOKEN_TEXT,
	  TOKEN_OPEN_TAG_START_SCRIPT: TOKEN_OPEN_TAG_START_SCRIPT$1,
	  TOKEN_OPEN_TAG_START_STYLE: TOKEN_OPEN_TAG_START_STYLE$1
	} = tokenTypes$1;
	const {
	  TAG_CONTEXT: TAG_CONTEXT$1,
	  COMMENT_CONTEXT: COMMENT_CONTEXT$1,
	  DOCTYPE_CONTEXT: DOCTYPE_CONTEXT$1,
	  SCRIPT_TAG_CONTEXT: SCRIPT_TAG_CONTEXT$1,
	  STYLE_TAG_CONTEXT: STYLE_TAG_CONTEXT$1
	} = treeConstructorContexts;
	const {
	  NODE_TAG: NODE_TAG$1,
	  NODE_TEXT: NODE_TEXT$1,
	  NODE_DOCTYPE: NODE_DOCTYPE$1,
	  NODE_COMMENT: NODE_COMMENT$1,
	  NODE_SCRIPT: NODE_SCRIPT$1,
	  NODE_STYLE: NODE_STYLE$1
	} = astNodes;

	function handleOpenTagStart (state) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const tagNode = {
	    nodeType: NODE_TAG$1,
	    parentRef: state.currentNode,
	    content: {}
	  };

	  state.currentNode.content.children.push(tagNode);

	  state.currentNode = tagNode;
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: TAG_CONTEXT$1
	  };

	  return state
	}

	function handleCloseTag (state, token) {
	  const closeTagName = parseCloseTagName(token.content);

	  if (closeTagName !== state.currentNode.content.name) {
	    state.caretPosition++;

	    return state
	  }

	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	function handleCommentStart$1 (state) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const commentNode = {
	    nodeType: NODE_COMMENT$1,
	    parentRef: state.currentNode,
	    content: {}
	  };

	  state.currentNode.content.children.push(commentNode);

	  state.currentNode = commentNode;
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: COMMENT_CONTEXT$1
	  };

	  return state
	}

	function handleDoctypeStart$1 (state) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const doctypeNode = {
	    nodeType: NODE_DOCTYPE$1,
	    parentRef: state.currentNode,
	    content: {}
	  };

	  state.currentNode.content.children.push(doctypeNode);

	  state.currentNode = doctypeNode;
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: DOCTYPE_CONTEXT$1
	  };

	  return state
	}

	function handleText (state, token) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const textNode = {
	    nodeType: NODE_TEXT$1,
	    parentRef: state.currentNode,
	    content: {
	      value: token
	    }
	  };

	  state.currentNode.content.children.push(textNode);
	  state.caretPosition++;

	  return state
	}

	function handleOpenTagStartScript$1 (state) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const scriptNode = {
	    nodeType: NODE_SCRIPT$1,
	    parentRef: state.currentNode,
	    content: {}
	  };

	  state.currentNode.content.children.push(scriptNode);

	  state.currentNode = scriptNode;
	  state.currentContext = {
	    type: SCRIPT_TAG_CONTEXT$1,
	    parentRef: state.currentContext
	  };

	  return state
	}

	function handleOpenTagStartStyle$1 (state) {
	  if (state.currentNode.content.children === undefined) {
	    state.currentNode.content.children = [];
	  }

	  const styleNode = {
	    nodeType: NODE_STYLE$1,
	    parentRef: state.currentNode,
	    content: {}
	  };

	  state.currentNode.content.children.push(styleNode);

	  state.currentNode = styleNode;
	  state.currentContext = {
	    type: STYLE_TAG_CONTEXT$1,
	    parentRef: state.currentContext
	  };

	  return state
	}

	var tagContent$1 = function tagContent (token, state) {
	  if (token.type === TOKEN_OPEN_TAG_START$1) {
	    return handleOpenTagStart(state)
	  }

	  if (token.type === TOKEN_TEXT) {
	    return handleText(state, token)
	  }

	  if (token.type === TOKEN_CLOSE_TAG) {
	    return handleCloseTag(state, token)
	  }

	  if (token.type === TOKEN_COMMENT_START$1) {
	    return handleCommentStart$1(state)
	  }

	  if (token.type === TOKEN_DOCTYPE_START$1) {
	    return handleDoctypeStart$1(state)
	  }

	  if (token.type === TOKEN_OPEN_TAG_START_SCRIPT$1) {
	    return handleOpenTagStartScript$1(state)
	  }

	  if (token.type === TOKEN_OPEN_TAG_START_STYLE$1) {
	    return handleOpenTagStartStyle$1(state)
	  }

	  state.caretPosition++;

	  return state
	};

	/**
	 * Parser for 'tag-name' context.
	 * Parses tag name from 'open-tag-start' (<div)
	 * token and save the tag name as self content.
	 * Ignores tokens others than 'open-tag-start'.
	 */

	const parseOpenTagName = helpers.parseOpenTagName;
	const {
	  TOKEN_OPEN_TAG_START
	} = tokenTypes$1;

	function handleTagOpenStart (state, token) {
	  state.currentNode.content.name = parseOpenTagName(token.content);

	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	var tagName$1 = function tagName (token, state) {
	  if (token.type === TOKEN_OPEN_TAG_START) {
	    handleTagOpenStart(state, token);
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$4,
	  TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$4,
	  TOKEN_OPEN_TAG_END: TOKEN_OPEN_TAG_END$2,
	  TOKEN_OPEN_TAG_END_SCRIPT: TOKEN_OPEN_TAG_END_SCRIPT$3,
	  TOKEN_OPEN_TAG_END_STYLE: TOKEN_OPEN_TAG_END_STYLE$3
	} = tokenTypes$1;
	const {
	  ATTRIBUTE_CONTEXT: ATTRIBUTE_CONTEXT$1
	} = treeConstructorContexts;

	function handlerAttributeStart (state) {
	  if (state.currentNode.content.attributes === undefined) {
	    state.currentNode.content.attributes = [];
	  }

	  // new empty attribute
	  state.currentNode.content.attributes.push({});

	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: ATTRIBUTE_CONTEXT$1
	  };

	  return state
	}

	function handleOpenTagEnd$1 (state) {
	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	var attributes$1 = function attributes (token, state) {
	  const ATTRIBUTE_START_TOKENS = [
	    TOKEN_ATTRIBUTE_KEY$4,
	    TOKEN_ATTRIBUTE_ASSIGNMENT$4
	  ];

	  if (ATTRIBUTE_START_TOKENS.indexOf(token.type) !== -1) {
	    return handlerAttributeStart(state)
	  }

	  const ATTRIBUTES_END_TOKENS = [
	    TOKEN_OPEN_TAG_END$2,
	    TOKEN_OPEN_TAG_END_SCRIPT$3,
	    TOKEN_OPEN_TAG_END_STYLE$3
	  ];

	  if (ATTRIBUTES_END_TOKENS.indexOf(token.type) !== -1) {
	    return handleOpenTagEnd$1(state)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_OPEN_TAG_END: TOKEN_OPEN_TAG_END$1,
	  TOKEN_OPEN_TAG_END_SCRIPT: TOKEN_OPEN_TAG_END_SCRIPT$2,
	  TOKEN_OPEN_TAG_END_STYLE: TOKEN_OPEN_TAG_END_STYLE$2,
	  TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$3,
	  TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$3
	} = tokenTypes$1;
	const {
	  ATTRIBUTE_VALUE_CONTEXT: ATTRIBUTE_VALUE_CONTEXT$1
	} = treeConstructorContexts;

	function getLastAttribute$2 (state) {
	  const attributes = state.currentNode.content.attributes;

	  return attributes[attributes.length - 1]
	}

	function handleOpenTagEnd (state) {
	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	function handleAttributeKey (state, token) {
	  const attribute = getLastAttribute$2(state);

	  if (attribute.key !== undefined || attribute.value !== undefined) {
	    state.currentContext = state.currentContext.parentRef;

	    return state
	  }

	  attribute.key = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeAssignment (state) {
	  const attribute = getLastAttribute$2(state);

	  if (attribute.value !== undefined) {
	    state.currentContext = state.currentContext.parentRef;

	    return state
	  }

	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: ATTRIBUTE_VALUE_CONTEXT$1
	  };
	  state.caretPosition++;

	  return state
	}

	var attribute$3 = function attribute (token, state) {
	  const OPEN_TAG_END_TOKENS = [
	    TOKEN_OPEN_TAG_END$1,
	    TOKEN_OPEN_TAG_END_SCRIPT$2,
	    TOKEN_OPEN_TAG_END_STYLE$2
	  ];

	  if (OPEN_TAG_END_TOKENS.indexOf(token.type) !== -1) {
	    return handleOpenTagEnd(state)
	  }

	  if (token.type === TOKEN_ATTRIBUTE_KEY$3) {
	    return handleAttributeKey(state, token)
	  }

	  if (token.type === TOKEN_ATTRIBUTE_ASSIGNMENT$3) {
	    return handleAttributeAssignment(state)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_OPEN_TAG_END,
	  TOKEN_OPEN_TAG_END_SCRIPT: TOKEN_OPEN_TAG_END_SCRIPT$1,
	  TOKEN_OPEN_TAG_END_STYLE: TOKEN_OPEN_TAG_END_STYLE$1,
	  TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$2,
	  TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$2,
	  TOKEN_ATTRIBUTE_VALUE,
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_START,
	  TOKEN_ATTRIBUTE_VALUE_WRAPPER_END
	} = tokenTypes$1;

	function getLastAttribute$1 (state) {
	  const attributes = state.currentNode.content.attributes;

	  return attributes[attributes.length - 1]
	}

	function handleValueEnd (state) {
	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	function handleAttributeValue$1 (state, token) {
	  const attribute = getLastAttribute$1(state);

	  attribute.value = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeValueWrapperStart (state, token) {
	  const attribute = getLastAttribute$1(state);

	  attribute.startWrapper = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeValueWrapperEnd (state, token) {
	  const attribute = getLastAttribute$1(state);

	  attribute.endWrapper = token;
	  state.caretPosition++;

	  return state
	}

	var attributeValue$1 = function attributeValue (token, state) {
	  const VALUE_END_TOKENS = [
	    TOKEN_OPEN_TAG_END,
	    TOKEN_OPEN_TAG_END_SCRIPT$1,
	    TOKEN_OPEN_TAG_END_STYLE$1,
	    TOKEN_ATTRIBUTE_KEY$2,
	    TOKEN_ATTRIBUTE_ASSIGNMENT$2
	  ];

	  if (VALUE_END_TOKENS.indexOf(token.type) !== -1) {
	    return handleValueEnd(state)
	  }

	  if (token.type === TOKEN_ATTRIBUTE_VALUE) {
	    return handleAttributeValue$1(state, token)
	  }

	  if (token.type === TOKEN_ATTRIBUTE_VALUE_WRAPPER_START) {
	    return handleAttributeValueWrapperStart(state, token)
	  }

	  if (token.type === TOKEN_ATTRIBUTE_VALUE_WRAPPER_END) {
	    return handleAttributeValueWrapperEnd(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_COMMENT_START,
	  TOKEN_COMMENT_END,
	  TOKEN_COMMENT_CONTENT
	} = tokenTypes$1;

	function handleCommentStart (state, token) {
	  state.currentNode.content.start = token;
	  state.caretPosition++;

	  return state
	}

	function handleCommentContent (state, token) {
	  state.currentNode.content.value = token;
	  state.caretPosition++;

	  return state
	}

	function handleCommentEnd (state, token) {
	  state.currentNode.content.end = token;
	  state.currentNode = state.currentNode.parentRef;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	var comment$5 = function comment (token, state) {
	  if (token.type === TOKEN_COMMENT_START) {
	    return handleCommentStart(state, token)
	  }

	  if (token.type === TOKEN_COMMENT_CONTENT) {
	    return handleCommentContent(state, token)
	  }

	  if (token.type === TOKEN_COMMENT_END) {
	    return handleCommentEnd(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_DOCTYPE_END: TOKEN_DOCTYPE_END$2,
	  TOKEN_DOCTYPE_ATTRIBUTE: TOKEN_DOCTYPE_ATTRIBUTE$2,
	  TOKEN_DOCTYPE_START,
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$2
	} = tokenTypes$1;
	const {
	  DOCTYPE_ATTRIBUTES_CONTEXT: DOCTYPE_ATTRIBUTES_CONTEXT$1
	} = treeConstructorContexts;

	function handleDoctypeStart (state, token) {
	  state.currentNode.content.start = token;
	  state.caretPosition++;

	  return state
	}

	function handleDoctypeEnd$2 (state, token) {
	  state.currentNode.content.end = token;
	  state.currentNode = state.currentNode.parentRef;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	function handleDoctypeAttributes (state) {
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: DOCTYPE_ATTRIBUTES_CONTEXT$1
	  };

	  return state
	}

	var doctype$1 = function doctype (token, state) {
	  if (token.type === TOKEN_DOCTYPE_START) {
	    return handleDoctypeStart(state, token)
	  }

	  if (token.type === TOKEN_DOCTYPE_END$2) {
	    return handleDoctypeEnd$2(state, token)
	  }

	  const ATTRIBUTES_START_TOKENS = [
	    TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$2,
	    TOKEN_DOCTYPE_ATTRIBUTE$2
	  ];

	  if (ATTRIBUTES_START_TOKENS.indexOf(token.type) !== -1) {
	    return handleDoctypeAttributes(state)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  DOCTYPE_ATTRIBUTE_CONTEXT: DOCTYPE_ATTRIBUTE_CONTEXT$1
	} = treeConstructorContexts;

	const {
	  TOKEN_DOCTYPE_END: TOKEN_DOCTYPE_END$1,
	  TOKEN_DOCTYPE_ATTRIBUTE: TOKEN_DOCTYPE_ATTRIBUTE$1,
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START: TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$1
	} = tokenTypes$1;

	function handleDoctypeEnd$1 (state) {
	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	function handleAttribute (state) {
	  if (state.currentNode.content.attributes === undefined) {
	    state.currentNode.content.attributes = [];
	  }

	  // new empty attribute
	  state.currentNode.content.attributes.push({});

	  state.currentContext = {
	    type: DOCTYPE_ATTRIBUTE_CONTEXT$1,
	    parentRef: state.currentContext
	  };

	  return state
	}

	var doctypeAttributes$1 = function doctypeAttributes (token, state) {
	  if (token.type === TOKEN_DOCTYPE_END$1) {
	    return handleDoctypeEnd$1(state)
	  }

	  const ATTRIBUTE_START_TOKENS = [
	    TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START$1,
	    TOKEN_DOCTYPE_ATTRIBUTE$1
	  ];

	  if (ATTRIBUTE_START_TOKENS.indexOf(token.type) !== -1) {
	    return handleAttribute(state)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_DOCTYPE_END,
	  TOKEN_DOCTYPE_ATTRIBUTE,
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START,
	  TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END
	} = tokenTypes$1;

	function getLastAttribute (state) {
	  const attributes = state.currentNode.content.attributes;

	  return attributes[attributes.length - 1]
	}

	function handleDoctypeEnd (state) {
	  state.currentContext = state.currentContext.parentRef;

	  return state
	}

	function handleAttributeValue (state, token) {
	  const attribute = getLastAttribute(state);

	  if (attribute.value !== undefined) {
	    state.currentContext = state.currentContext.parentRef;

	    return state
	  }

	  attribute.value = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeWrapperStart (state, token) {
	  const attribute = getLastAttribute(state);

	  if (attribute.start !== undefined || attribute.value !== undefined) {
	    state.currentContext = state.currentContext.parentRef;

	    return state
	  }

	  attribute.startWrapper = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeWrapperEnd (state, token) {
	  const attribute = getLastAttribute(state);

	  attribute.endWrapper = token;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	var doctypeAttribute$1 = function doctypeAttribute (token, state) {
	  if (token.type === TOKEN_DOCTYPE_END) {
	    return handleDoctypeEnd(state)
	  }

	  if (token.type === TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_START) {
	    return handleAttributeWrapperStart(state, token)
	  }

	  if (token.type === TOKEN_DOCTYPE_ATTRIBUTE_WRAPPER_END) {
	    return handleAttributeWrapperEnd(state, token)
	  }

	  if (token.type === TOKEN_DOCTYPE_ATTRIBUTE) {
	    return handleAttributeValue(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_OPEN_TAG_START_SCRIPT,
	  TOKEN_OPEN_TAG_END_SCRIPT,
	  TOKEN_CLOSE_TAG_SCRIPT,
	  TOKEN_ATTRIBUTE_KEY: TOKEN_ATTRIBUTE_KEY$1,
	  TOKEN_ATTRIBUTE_ASSIGNMENT: TOKEN_ATTRIBUTE_ASSIGNMENT$1,
	  TOKEN_SCRIPT_TAG_CONTENT
	} = tokenTypes$1;
	const { ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$2 } = treeConstructorContexts;

	function handleOpenTagStartScript (state, token) {
	  state.currentNode.content.openStart = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeStartScript (state) {
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: ATTRIBUTES_CONTEXT$2
	  };

	  return state
	}

	function handleOpenTagEndScript (state, token) {
	  state.currentNode.content.openEnd = token;
	  state.caretPosition++;

	  return state
	}

	function handleScriptContent (state, token) {
	  state.currentNode.content.value = token;
	  state.caretPosition++;

	  return state
	}

	function handleCloseTagScript (state, token) {
	  state.currentNode.content.close = token;
	  state.currentNode = state.currentNode.parentRef;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	var scriptTag$1 = function scriptTag (token, state) {
	  if (token.type === TOKEN_OPEN_TAG_START_SCRIPT) {
	    return handleOpenTagStartScript(state, token)
	  }

	  const ATTRIBUTE_START_TOKENS = [
	    TOKEN_ATTRIBUTE_KEY$1,
	    TOKEN_ATTRIBUTE_ASSIGNMENT$1
	  ];

	  if (ATTRIBUTE_START_TOKENS.indexOf(token.type) !== -1) {
	    return handleAttributeStartScript(state)
	  }


	  if (token.type === TOKEN_OPEN_TAG_END_SCRIPT) {
	    return handleOpenTagEndScript(state, token)
	  }

	  if (token.type === TOKEN_SCRIPT_TAG_CONTENT) {
	    return handleScriptContent(state, token)
	  }

	  if (token.type === TOKEN_CLOSE_TAG_SCRIPT) {
	    return handleCloseTagScript(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	const {
	  TOKEN_OPEN_TAG_START_STYLE,
	  TOKEN_OPEN_TAG_END_STYLE,
	  TOKEN_CLOSE_TAG_STYLE,
	  TOKEN_ATTRIBUTE_KEY,
	  TOKEN_ATTRIBUTE_ASSIGNMENT,
	  TOKEN_STYLE_TAG_CONTENT
	} = tokenTypes$1;
	const { ATTRIBUTES_CONTEXT: ATTRIBUTES_CONTEXT$1 } = treeConstructorContexts;

	function handleOpenTagStartStyle (state, token) {
	  state.currentNode.content.openStart = token;
	  state.caretPosition++;

	  return state
	}

	function handleAttributeStartStyle (state) {
	  state.currentContext = {
	    parentRef: state.currentContext,
	    type: ATTRIBUTES_CONTEXT$1
	  };

	  return state
	}

	function handleOpenTagEndStyle (state, token) {
	  state.currentNode.content.openEnd = token;
	  state.caretPosition++;

	  return state
	}

	function handleStyleContent (state, token) {
	  state.currentNode.content.value = token;
	  state.caretPosition++;

	  return state
	}

	function handleCloseTagStyle (state, token) {
	  state.currentNode.content.close = token;
	  state.currentNode = state.currentNode.parentRef;
	  state.currentContext = state.currentContext.parentRef;
	  state.caretPosition++;

	  return state
	}

	var styleTag$1 = function styleTag (token, state) {
	  if (token.type === TOKEN_OPEN_TAG_START_STYLE) {
	    return handleOpenTagStartStyle(state, token)
	  }

	  const ATTRIBUTE_START_TOKENS = [
	    TOKEN_ATTRIBUTE_KEY,
	    TOKEN_ATTRIBUTE_ASSIGNMENT
	  ];

	  if (ATTRIBUTE_START_TOKENS.indexOf(token.type) !== -1) {
	    return handleAttributeStartStyle(state)
	  }

	  if (token.type === TOKEN_OPEN_TAG_END_STYLE) {
	    return handleOpenTagEndStyle(state, token)
	  }

	  if (token.type === TOKEN_STYLE_TAG_CONTENT) {
	    return handleStyleContent(state, token)
	  }

	  if (token.type === TOKEN_CLOSE_TAG_STYLE) {
	    return handleCloseTagStyle(state, token)
	  }

	  state.caretPosition++;

	  return state
	};

	const tag$2 = tag$3;
	const tagContent = tagContent$1;
	const tagName = tagName$1;
	const attributes = attributes$1;
	const attribute$2 = attribute$3;
	const attributeValue = attributeValue$1;
	const comment$4 = comment$5;
	const doctype = doctype$1;
	const doctypeAttributes = doctypeAttributes$1;
	const doctypeAttribute = doctypeAttribute$1;
	const scriptTag = scriptTag$1;
	const styleTag = styleTag$1;

	const {
	  TAG_CONTENT_CONTEXT,
	  TAG_CONTEXT,
	  TAG_NAME_CONTEXT,
	  ATTRIBUTES_CONTEXT,
	  ATTRIBUTE_CONTEXT,
	  ATTRIBUTE_VALUE_CONTEXT,
	  COMMENT_CONTEXT,
	  DOCTYPE_CONTEXT,
	  DOCTYPE_ATTRIBUTES_CONTEXT,
	  DOCTYPE_ATTRIBUTE_CONTEXT,
	  SCRIPT_TAG_CONTEXT,
	  STYLE_TAG_CONTEXT
	} = treeConstructorContexts;
	const { NODE_DOCUMENT: NODE_DOCUMENT$1 } = astNodes;

	const contextsMap = {
	  [TAG_CONTENT_CONTEXT]: tagContent,
	  [TAG_CONTEXT]: tag$2,
	  [TAG_NAME_CONTEXT]: tagName,
	  [ATTRIBUTES_CONTEXT]: attributes,
	  [ATTRIBUTE_CONTEXT]: attribute$2,
	  [ATTRIBUTE_VALUE_CONTEXT]: attributeValue,
	  [COMMENT_CONTEXT]: comment$4,
	  [DOCTYPE_CONTEXT]: doctype,
	  [DOCTYPE_ATTRIBUTES_CONTEXT]: doctypeAttributes,
	  [DOCTYPE_ATTRIBUTE_CONTEXT]: doctypeAttribute,
	  [SCRIPT_TAG_CONTEXT]: scriptTag,
	  [STYLE_TAG_CONTEXT]: styleTag
	};

	function processTokens (tokens, state, positionOffset) {
	  let tokenIndex = state.caretPosition - positionOffset;

	  while (tokenIndex < tokens.length) {
	    const token = tokens[tokenIndex];
	    const contextHandler = contextsMap[state.currentContext.type];

	    state = contextHandler(token, state);
	    tokenIndex = state.caretPosition - positionOffset;
	  }

	  return state
	}

	var constructTree$3 = function constructTree (
	  tokens = [],
	  existingState,
	  parseOptions = {}
	) {
	  let state = existingState;

	  if (existingState === undefined) {
	    const rootContext = {
	      type: TAG_CONTENT_CONTEXT,
	      parentRef: undefined,
	      content: []
	    };
	    const rootNode = {
	      nodeType: NODE_DOCUMENT$1,
	      parentRef: undefined,
	      content: {}
	    };

	    state = {
	      caretPosition: 0,
	      currentContext: rootContext,
	      currentNode: rootNode,
	      rootNode,
	      parseOptions
	    };
	  }

	  const positionOffset = state.caretPosition;

	  processTokens(tokens, state, positionOffset);

	  return { state, ast: state.rootNode }
	};

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount$1.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount$1;
	function listenerCount$1(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer$1.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer$1.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer$1.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer$1(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$1.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$1(Duplex, Readable);

	var keys = Object.keys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$1(Transform$2, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform$2(options) {
	  if (!(this instanceof Transform$2)) return new Transform$2(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform$2.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform$2.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform$2.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform$2.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

	inherits$1(PassThrough, Transform$2);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform$2.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	inherits$1(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform$2;
	Stream.PassThrough = PassThrough;

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;

	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EventEmitter.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EventEmitter.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	var stream = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': Stream,
		Readable: Readable,
		Writable: Writable,
		Duplex: Duplex,
		Transform: Transform$2,
		PassThrough: PassThrough,
		Stream: Stream
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(stream);

	const { Transform: Transform$1 } = require$$0$3;

	const tokenize$4 = tokenize_1;

	class StreamTokenizer$1 extends Transform$1 {
	  constructor (options) {
	    super(Object.assign(
	      {},
	      options,
	      {
	        decodeStrings: false,
	        readableObjectMode: true
	      }
	    ));

	    this.currentTokenizerState = undefined;
	    this.setDefaultEncoding('utf8');
	  }

	  _transform (chunk, encoding, callback) {
	    let chunkString = chunk;

	    if (Buffer.isBuffer(chunk)) {
	      chunkString = chunk.toString();
	    }

	    const { state, tokens } = tokenize$4(
	      chunkString,
	      this.currentTokenizerState,
	      { isFinalChunk: false }
	    );

	    this.currentTokenizerState = state;

	    callback(null, tokens);
	  }

	  _flush (callback) {
	    const tokenizeResults = tokenize$4(
	      '',
	      this.currentTokenizerState,
	      { isFinalChunk: true }
	    );

	    this.push(tokenizeResults.tokens);

	    callback();
	  }
	}

	var streamTokenizer = StreamTokenizer$1;

	const { Transform } = require$$0$3;

	const constructTree$2 = constructTree$3;

	class StreamTreeConstructor$1 extends Transform {
	  constructor (options) {
	    super(Object.assign(
	      {},
	      options,
	      {
	        objectMode: true,
	        readableObjectMode: true
	      }
	    ));

	    this.currentState = undefined;
	  }

	  _transform (tokensChunk, encoding, callback) {
	    const { state, ast } = constructTree$2(
	      tokensChunk,
	      this.currentState
	    );

	    this.currentState = state;

	    callback(null, ast);
	  }
	}

	var streamTreeConstructor = StreamTreeConstructor$1;

	const tokenize$3 = tokenize_1;
	const constructTree$1 = constructTree$3;
	const StreamTokenizer = streamTokenizer;
	const StreamTreeConstructor = streamTreeConstructor;

	// Need to be separate exports
	// in order to be properly bundled
	// and recognised by Rollup as named
	// exports
	_hyntaxYx_1_0_3_hyntaxYx.tokenize = tokenize$3;
	_hyntaxYx_1_0_3_hyntaxYx.constructTree = constructTree$1;
	_hyntaxYx_1_0_3_hyntaxYx.StreamTokenizer = StreamTokenizer;
	_hyntaxYx_1_0_3_hyntaxYx.StreamTreeConstructor = StreamTreeConstructor;

	const { constructTree, tokenize: tokenize$2 } = _hyntaxYx_1_0_3_hyntaxYx;
	var parse$g = (code) => {
	    // const selfClosingTag = code.replace(/{{[^{^}]+}}/g, '').match(/(?<=\<)[a-z|\.|-]+(?=[^><]+\/>)/g)
	    const { tokens } = tokenize$2(code);
	    const { ast } = constructTree(tokens);
	    return ast
	};

	const { isObject: isObject$4 } = util$8;

	// 查找时 ast无用属性
	const Props = [
	    'startPosition',
	    'endPosition',
	    'parentRef',
	    'openStart',
	    'openEnd',
	    'startWrapper',
	    'endWrapper',
	    'close'
	];


	const filterProps$2 = function (node, structure) {
	    for (const key in node) {
	        // 过滤值为空的字段
	        if (Props.indexOf(key) == -1 && node[key]) {
	            if (isObject$4(node[key])) {
	                if (Array.isArray(node[key])) {
	                    structure[key] = [];
	                    node[key].forEach((n, i) => {
	                        structure[key][i] = {};
	                        filterProps$2(n, structure[key][i]);
	                    });
	                } else {
	                    structure[key] = {};
	                    filterProps$2(node[key], structure[key]);
	                }
	            } else {
	                structure[key] = node[key];
	            }
	        }
	    }
	};

	var filterProp$1 = filterProps$2;

	// 把简单的api转换成ast
	const parse$f = parse$g;
	const filterProps$1 = filterProp$1;

	function getSelector$1(selectorCode, parseOptions, expando = 'g123o456g789o') {
	    const selector = { nodeType: '', structure: {} };
	    if (typeof selectorCode != 'string') {
	        // 如果是通过builders造出来的ast结构，比如return语句
	        selector.nodeType = selectorCode.nodeType;
	        filterProps$1(selectorCode, selector.structure);
	        selector.type = selectorCode.nodeType; // 兼容只用type匹配的选择器
	        return selector;
	    } else {
	        selectorCode = selectorCode
	            .replace(/\$_\$/g, expando)
	            .replace(/\$\$\$/g, expando.slice(0, -1) + '$3');
	    }
	    let selectorAst = parse$f(selectorCode);
	    if (selectorAst.content && selectorAst.content.children && selectorAst.content.children[0]) {
	        filterProps$1(selectorAst.content.children[0], selector.structure);
	        selector.nodeType = selectorAst.content.children[0].nodeType;
	    }
	    return selector;
	}

	var getSelector_1 = getSelector$1;

	var htmlTraverse = (ast, transformMap = {}, filePath, deleteComment) => {
	    if (ast.nodeType) {
	        handleNode(ast);
	    } else if (ast.content && ast.content.children && ast.content.children.length > 0) {
	        traversChildnode(ast.content.children);
	    }
	    if (Array.isArray(ast)) {
	        ast.forEach(a => { 
	            handleNode(a);
	        });
	    }
	    function handleNode(node) {
	        const posIndex = node.parentRef && node.parentRef.content.children && Array.isArray(node.parentRef.content.children)
	            ? node.parentRef.content.children.indexOf(node)
	            : undefined;
	            
	        const extra = {
	            document: ast,
	            nodeRef: node,
	            posIndex,
	            parentRef: node.parentRef,
	            filePath
	        };
	        if (node.nodeType == 'tag') {  // 标签处理
	            // 属性处理
	            const attrs = node.content.attributes || [];
	            const attrMap = {};
	            
	            attrs.forEach(attr => {
	                // 处理属性值的引号
	                // let content = attr.value.content.trim();
	                // if (content[0] == content[content.length - 1]) {
	                //     if (content.match(content[0]))
	                // }
	                attrMap[attr.key.content] = attr;
	            });

	            const tagHandle = transformMap.tag || [];
	            tagHandle.forEach(h => {
	                if (h.value) {
	                    if (h.value == node.content.name) {
	                        h.handle(node.content, Object.assign({ attrs, attrMap }, extra));    
	                    }
	                } else {
	                    h.handle(node.content, Object.assign({ attrs, attrMap }, extra));
	                }
	            });

	            const attrHandle = transformMap.attr || [];
	            
	            attrHandle.forEach(h => {
	                const { key, value } = h;
	                if (value) { // 某个属性有确定的key和value)
	                    if (attrMap[key] && attrMap[key].value && (attrMap[key].value.content.replace(/\s/g, '') == value)) {
	                        h.handle(node.content, 
	                            Object.assign({ attrs, attrMap }, extra)
	                        );
	                    }
	                } else if (key) {
	                    if (attrMap[key]) { // 只要有某个属性
	                        h.handle(node.content, 
	                            Object.assign({ attrs, attrMap }, extra)
	                        );
	                    }
	                } else {
	                    h.handle(node.content, 
	                        Object.assign({ attrs, attrMap }, extra)
	                    );
	                }
	                
	            });

	            const eventHandle = transformMap.event || [];
	            const attrKeys = Object.keys(attrMap);
	            const eventAttr = attrKeys.filter(k => k.match('mx-'))[0];
	            if (eventAttr) {
	                eventHandle.forEach(h => {
	                    h.handle(node.content, 
	                        Object.assign({ }, extra)
	                    );
	                });
	            }

	            if (transformMap.abandonAttr) {
	                for (let i = 0; i< attrs.length; i++) {
	                    const attr = attrs[i];
	                    if (attr && transformMap.abandonAttr.indexOf(attr.key.content) > -1) {
	                        attrs.splice(i, 1);
	                        i--;
	                    }
	                }
	            }
	        } else if (node.nodeType == 'text') { // 字符串处理
	            const handle = transformMap.text || [];
	            handle.forEach(h => {
	                let isContain = false;
	                switch (h.type) {
	                case 'containOne':
	                    isContain = h.value.some(v => node.content.value.content.match(v));
	                    if (isContain) {
	                        h.handle(node, extra);
	                    }
	                    break;
	                case 'containAll':
	                    isContain = h.value.every(v => node.content.value.content.match(v));
	                    if (isContain) {
	                        h.handle(node, extra);
	                    }
	                    break;
	                case 'equal': 
	                    if (node.content.value.content == h.value) {
	                        h.handle(node, extra);
	                    }
	                    break;
	                default:
	                    h.handle(node, extra);
	                }
	            });
	        } else {
	            // 其他节点类型
	            const handle = transformMap[node.nodeType];
	            handle && handle.forEach(h => {
	                h.handle(node, extra);
	            });

	            if (deleteComment && node.nodeType == 'comment') {
	                // 删除所有注释
	                extra.parentRef.content.children.splice(extra.posIndex, 1);
	            }
	        }

	        if (node.content.children && node.content.children.length) {
	            traversChildnode(node.content.children);
	        }
	    }
	    function traversChildnode(list) {
	        let index = 0;
	        while(list[index]) {
	            const node = list[index];
	            node._index = index;
	            node.reached || handleNode(node);
	            node.reached = true;
	            index++;
	        }
	        list.forEach(item => item.reached = false);
	    }
	    return ast;
	};

	var NodePath_1 =  class NodePath {
	    constructor(node, parent, parentPath) {
	        this.node = node;
	        this.parent = parent || null;
	        this.parentPath = parentPath || null;
	        this.value = node;
	    }
	};

	const {
	    NODE_DOCUMENT,
	    NODE_DOCTYPE,
	    NODE_TAG,
	    NODE_TEXT,
	    NODE_COMMENT,
	    NODE_SCRIPT,
	    NODE_STYLE
	} = astNodes;
	  
	function serializeDoctypeNode (node) {
	    let attributes = serializeDoctypeAttributes(node.content.attributes);
	  
	    if (attributes !== '') {
	        attributes = ` ${ attributes }`;
	    }
	  
	    return `<!doctype${ attributes }>`
	}
	  
	function serializeCommentNode (node) {
	    return `<!--${ node.content.value.content }-->`
	}
	  
	function serializeTagNode (nodeName, attributes, serializedChildren, selfClosing, node) {
	    let serializedAttributes = serializeTagAttributes(attributes);
	  
	    if (serializedAttributes !== '') {
	        serializedAttributes = ` ${ serializedAttributes }`;
	    }
	    selfClosing = (selfClosing === false ? false : node.content.selfClosing);
	    if (selfClosing) {
	        return `<${ nodeName }${ serializedAttributes }/>`
	    }
	  
	    return (
	        `<${ nodeName }${ serializedAttributes }>` +
	      serializedChildren +
	      `</${ nodeName }>`
	    )
	}
	  
	function serializeTagAttributes (attributes = []) {
	    // if (node.content.openEnd.content.replace(/\s/g, '').match('/if')) {
	      
	    // }
	    return attributes.map((item) => {
	        let serialized = '';
	  
	        if (item.key !== undefined) {
	            serialized += item.key.content;
	        }
	  
	        if (item.value !== undefined) {
	        // 处理属性中的引号
	            let quota = '"';
	            if (item.value.content && item.value.content.match && item.value.content.match(quota)) {
	                quota = "'";
	            }
	            if (item.value.content && item.value.content.trim && item.value.content.trim()[0] == '=') {
	                // 处理属性中的if语句{{#if(xx == bb)}}xxx{{/if(xx == bb)}}
	                serialized += `=${ item.value.content }`;
	            } else if (item.value.content && item.value.content.match && item.value.content.match(/\(/) && item.value.content.match(/\)/) && item.key.content.match(/\{\{/)) {
	                // 处理属性中的function语句{{ = body_updateState(this,crowd) }}
	                serialized += `=${ item.value.content }`;
	            } else {
	                serialized += `=${quota}${ item.value.content }${quota}`;
	            }
	        }
	  
	        return serialized
	    }).join(' ')
	}
	  
	function serializeDoctypeAttributes (attributes = []) {
	    return attributes.map((item) => {
	        let wrapper = '';
	  
	        if (item.startWrapper !== undefined) {
	            wrapper = item.startWrapper;
	        }
	  
	        return `${ wrapper }${ item.value.content }${ wrapper }`
	    }).join(' ')
	}
	  
	function serializeTextNode (node) {
	    return node.content.value.content
	}
	  
	function serializeNode (node, serializedChildren = '') {
	    if (node.content && node.content.children && node.content.children.length > 0) {
	        serializedChildren = node.content.children.map(child => {
	            return serializeNode(child, '');
	        }).join('');
	    }
	    switch (node.nodeType) {
	    case NODE_DOCUMENT: {
	        return serializedChildren
	    }
	  
	    case NODE_DOCTYPE: {
	        return serializeDoctypeNode(node)
	    }
	  
	    case NODE_TAG: {
	        return serializeTagNode(
	            node.content.name,
	            node.content.attributes,
	            serializedChildren,
	            undefined,
	            node
	        )
	    }
	  
	    case NODE_TEXT: {
	        return serializeTextNode(node)
	    }
	  
	    case NODE_COMMENT: {
	        return serializeCommentNode(node)
	    }
	  
	    case NODE_SCRIPT: {
	        return serializeTagNode(
	            'script',
	            node.content.attributes,
	            node.content.value ? node.content.value.content : '',
	            false,
	            node
	        )
	    }
	  
	    case NODE_STYLE: {
	        return serializeTagNode(
	            'style',
	            node.content.attributes,
	            node.content.value ? node.content.value.content : '',
	            false,
	            node
	        )
	    }
	  
	    default: {
	        throw new Error(
	            `generate failed! Unexpected node type for serialization: ${ node.nodeType }`
	        )
	    }
	    }
	}
	  
	var serializeNode_1 = serializeNode;

	const { isObject: isObject$3, hasOwn: hasOwn$1 } = util$8;
	// 通过简单ast结构查找ast节点
	const filterProps = filterProp$1;
	const traverse = htmlTraverse;
	const NodePath$3 = NodePath_1;
	const generate$4 = serializeNode_1;

	let Expando = 'g123o456g789o';

	function checkIsMatch(full, partial, extraData, strictSequence) {
	    return Object.keys(partial).every(prop => {
	        if (prop == 'children') {
	            // 匹配一段代码
	            if (full.children && partial.children.length == 1
	                && partial.children[0].nodeType == 'text'
	                && (partial.children[0].content.value.content.match 
	                )) {
	                if (partial.children[0].content.value.content.match(Expando)) {
	                    const expandoKey = partial.children[0].content.value.content.replace(Expando, '') || '0';
	                    extraData[expandoKey] = extraData[expandoKey] || [];
	                    extraData[expandoKey].push({ node: full.children, value: full.children.map(c => generate$4(c)).join('\n') });
	                    return true;
	                } else if (partial.children[0].content.value.content.match(new RegExp(Expando.slice(0, -1) + '\\$3'))) {
	                    find$$$(partial[prop], full[prop], extraData, strictSequence);
	                    return true;
	                }
	            }
	        }
	        if (!full || !partial) {
	            return false;
	        } else if (isObject$3(partial[prop])) {
	            let res = false;
	            let has$$$ = false;
	            if (Array.isArray(partial[prop])) {
	                // 处理$$$这种情况
	                has$$$ = find$$$(partial[prop], full[prop], extraData, strictSequence);
	            }
	            if (Array.isArray(partial[prop]) && !strictSequence) {
	                if (hasOwn$1(full, prop)) {
	                    res = partial[prop].every(p => {
	                        let a = false;
	                        if (!full[prop].length && partial[prop].length == 1 && has$$$) {
	                            return true
	                        }
	                        full[prop] && full[prop].forEach(f => {
	                            if (checkIsMatch(f, p, extraData, strictSequence)) {
	                                a = true;
	                            }
	                        });
	                        return a;
	                    });
	                } else {
	                    if (partial[prop].length == 1 && has$$$) {
	                        return true
	                    }
	                    return false
	                }
	            } else {
	                // todo
	                try {
	                    if (partial[prop].type == 'token:attribute-value' && !full[prop]) {
	                        if (partial[prop].content.match && partial[prop].content.match(Expando)) {
	                            const expandoKey = partial[prop].content.replace(Expando, '') || '0';
	                            extraData[expandoKey] = extraData[expandoKey] || [];
	                            extraData[expandoKey].push({ node: null, value: null });
	                            return true;
	                        }
	                    }
	                    res = hasOwn$1(full, prop) && checkIsMatch(full[prop], partial[prop], extraData, strictSequence);
	                } catch (e) {
	                    console.log(e);
	                }

	            }
	            return res;
	        } else {
	            if (partial[prop].match && partial[prop].match(new RegExp(Expando.slice(0, -1) + '\\$3'))) {
	                return true;
	            }
	            if (partial[prop] == Expando || (partial[prop].match && partial[prop].match(Expando))) {
	                let extra = {
	                    node: full
	                };
	                const expandoKey = partial[prop].replace(Expando, '') || '0';
	                extraData[expandoKey] = extraData[expandoKey] || [];
	                if (!full) return;
	                if (full[prop]) {
	                    extra.value = full[prop];
	                } else {
	                    extra.value = {};
	                    filterProps(full, extra.value);
	                }
	                extraData[expandoKey].push(extra);
	                return true;
	            } else if (partial[prop]) ;
	            if (prop == 'content') {
	                if (partial[prop].trim().match(new RegExp(Expando))) {
	                    return true; 
	                } else {
	                    return full ? !!full[prop].match(partial[prop].trim()) : false;
	                }
	            } else {
	                return full ? full[prop] == partial[prop] : false;
	            }
	        }
	    });
	}

	function find$$$(partial, full, extraData, strictSequence) {
	    // 先考虑strctSequence = false的情况
	    let key$$$;
	    let index$$$ = -1;
	    partial.forEach((p, i) => {
	        for (const key in p) {
	            // 属性中包含$$$
	            let value = null;
	            if (p[key] && p[key].value && p[key].value.content) {
	                value = p[key].value.content;
	            } else if (p[key] && p[key].content) {
	                value = p[key].content;
	            }
	            if (value && value.match && value.match(new RegExp(Expando.slice(0, -1) + '\\$3'))) {
	                key$$$ = value.replace(new RegExp(Expando.slice(0, -1) + '\\$3'), '') || '$';
	                index$$$ = i;
	          
	                break;
	            }
	        }
	    });
	    if (!key$$$) {
	        return false;
	    }
	    const extraNodeList = full ? full.slice(0) : [];
	    partial.forEach((p, i) => {
	        if (i == index$$$) {
	            return;
	        }
	        let fi = 0;
	        while(extraNodeList[fi]) {
	            if (checkIsMatch(extraNodeList[fi], p, {}, strictSequence)) {
	                extraNodeList.splice(fi, 1);
	            } else {
	                fi++;
	            }
	        }
	    });
	    extraData[`$$$${key$$$}`] = (extraData[`$$$${key$$$}`] || []).concat(extraNodeList);
	    return true;
	}

	function find$1(nodeType, structure, strictSequence, deep, expando = 'g123o456g789o') {
	    const nodePathList = [];
	    const matchWildCardList = [];
	    let isMatch = false;
	    Expando = expando;
	    const traverseMap = {
	        tag: nodeType == 'tag' ? [{
	            value: (structure.content.name || '').match(Expando) ? '' : structure.content.name,
	            handle(tagContent, { attrMap, parentRef, nodeRef } = {}) {
	                const matchWildCard = {};
	                isMatch = checkIsMatch(nodeRef, structure, matchWildCard, strictSequence);
	                if (isMatch) {
	                    nodePathList.push(linkParentPath(nodeRef));
	                    matchWildCardList.push(matchWildCard);
	                }
	            }
	        }] : [],
	        attr: [],
	        text: nodeType == 'text' ? [{
	            value: [(structure.content.trim && structure.content.trim() == Expando || structure.content.value.content.trim() == Expando) ? '' : structure.content.value.content.trim()],
	            type: 'containOne',
	            handle(node) {
	                nodePathList.push(linkParentPath(node));
	                matchWildCardList.push(node.content.value.content);
	            }
	        }]: []
	    };
	    if (nodeType != 'tag' && nodeType != 'text') {
	        traverseMap[nodeType] = [{
	            handle(node) {
	                nodePathList.push(linkParentPath(node));
	                if (node.content.value) {
	                    matchWildCardList.push(node.content.value.content);
	                }
	                
	            }
	        }];
	    }
	    traverse(this, traverseMap);
	    return { nodePathList, matchWildCardList };
	}

	function linkParentPath(node) {
	    while(node) {
	        const pPath = node.parentRef ? linkParentPath(node.parentRef) : null;
	        const path = new NodePath$3(node, pPath, pPath);
	        return path;
	    }
	    return null
	}

	var find_1 = { find: find$1 };

	const getSelector = getSelector_1;
	const { find } = find_1;
	const parse$e = parse$g;
	const generate$3 = serializeNode_1;
	const core$2 = {
	    // 通过选择器获取，返回ast片段
	    getAstsBySelector(
	        ast,
	        selector,
	        { strictSequence, deep, parseOptions, expando = 'g123o456g789o' } = {}
	    ) {
	        //strictSequence作用：
	        // 有的时候数组不要求顺序，如{a:$_$}匹配{b:1, a:2}
	        // 有的时候需要，如function($_$, $_$)匹配function(a, b) {}

	        if (!Array.isArray(selector)) {
	            selector = [selector];
	        }
	        let nodePathList = [];
	        let matchWildCardList = [];
	        const selectorAst = selector.map((item) => {
	            const sel = getSelector(
	                item,
	                this.parseOptions || parseOptions,
	                expando
	            );
	            if (!sel.nodeType) {
	                throw new Error(
	                    '语句类型缺失，请在 https://github.com/thx/gogocode/issues 上提供您的代码样例'
	                );
	            }
	            return sel;
	        });
	        const posStrList = [];
	        selectorAst.forEach((item) => {
	            const res = find.call(
	                ast,
	                item.nodeType,
	                item.structure,
	                strictSequence,
	                deep,
	                expando
	            );
	            res.nodePathList.forEach((p, i) => {
	                let posStr = '';
	                if (p.node.content.openStart) {
	                    posStr = `${p.node.content.openStart.startPosition},${p.node.content.openEnd.endPosition}`;
	                } else if (p.node.content.value) {
	                    posStr = `${p.node.content.value.startPosition},${p.node.content.value.endPosition}`;
	                }
	                if (posStrList.indexOf(posStr) == -1) {
	                    // 去重
	                    nodePathList.push(p);
	                    matchWildCardList.push(res.matchWildCardList[i]);
	                    posStrList.push(posStr);
	                }
	            });
	        });
	        return {
	            nodePathList,
	            matchWildCardList,
	            pathList: nodePathList,
	            extraDataList: matchWildCardList
	        };
	    },
	    getParentListByAst(path) {
	        const list = [];
	        while (path && path.parentPath) {
	            list.push(path.parentPath);
	            path = path.parentPath;
	        }
	        return list;
	    },

	    buildAstByAstStr(
	        str,
	        astPatialMap = {},
	        { isProgram = false, parseOptions } = {}
	    ) {
	        try {
	            const ast = parse$e(str, parseOptions);
	            const program = core$2.replaceStrByAst(ast, astPatialMap);
	            if (program) {
	                if (isProgram) {
	                    return program;
	                } else {
	                    if (
	                        program.content.children &&
	                        program.content.children[0]
	                    ) {
	                        return program.content.children[0];
	                    }
	                }
	            } else {
	                return null;
	            }
	        } catch (e) {
	            console.log('buildAstByAstStr failed:' + e);
	        }
	    },
	    replaceStrByAst(ast, astPatialMap = {}) {
	        for (let key in astPatialMap) {
	            const valueAst = astPatialMap[key];
	            const { nodePathList } = core$2.getAstsBySelector(
	                ast,
	                `'$_$${key}$_$'`
	            );
	            if (nodePathList.length > 0) {
	                nodePathList[0].replace(valueAst);
	            }
	        }
	        return ast;
	    },
	    replaceAstByAst(oldAst, newAst) {
	        if (oldAst.parent && oldAst.parent.node && oldAst.parent.node.content) {
	            oldAst.parent.node.content.children.splice(
	                oldAst.node._index,
	                1,
	                newAst
	            );
	        } else if (oldAst.node.nodeType == 'document') {
	            oldAst.node.content.children = [newAst];
	        }
	    },
	    replaceSelBySel(
	        ast,
	        selector,
	        replacer,
	        strictSequence,
	        parseOptions,
	        expando = 'g123o456g789o'
	    ) {
	        // 用于结构不一致的，整体替换
	        if (ast.node) {
	            ast = ast.node;
	        }
	        const { nodePathList, matchWildCardList } = core$2.getAstsBySelector(
	            ast,
	            selector,
	            {
	                strictSequence,
	                deep: 'nn',
	                parseOptions: this.parseOptions || parseOptions,
	                expando
	            }
	        );
	        const originReplacer = replacer;
	        nodePathList.forEach((path, i) => {
	            const extra = matchWildCardList[i];
	            replacer = originReplacer;
	            if (typeof replacer == 'function') {
	                replacer = replacer(extra, path);
	            }
	            if (Object.keys(extra).length > 0 && typeof replacer == 'string') {
	                let newReplacer = replacer;
	                for (let key in extra) {
	                    if (key.match(/\$\$\$/)) {
	                        let key$$$ = key.replace(/\$\$\$/, '');
	                        key$$$ == '$' && (key$$$ = '');
	                        let join = '\n';

	                        let wildCardCode = extra[key]
	                            .map((item) => {
	                                let codeStr = '';
	                                if (item.key) {
	                                    if (item.value) {
	                                        codeStr = `${item.key.content}="${item.value.content}"`;
	                                    } else {
	                                        codeStr = item.key.content;
	                                    }
	                                } else if (item.nodeType == 'text') {
	                                    codeStr = item.content.value.content;
	                                } else if (item.nodeType == 'tag') {
	                                    codeStr = generate$3(item);
	                                }
	                                try {
	                                    // 嵌套replace
	                                    const childAst = core$2.buildAstByAstStr(
	                                        generate$3(item), {}, { isProgram: true }
	                                    );
	                                    core$2.replaceSelBySel(
	                                        childAst,
	                                        selector,
	                                        replacer,
	                                        strictSequence,
	                                        parseOptions,
	                                        expando
	                                    );
	                                    codeStr = generate$3(childAst);
	                                } catch (e) {
	                                    //
	                                }
	                                return codeStr;
	                            })
	                            .join(join);
	                        // 不能都用,连接，还是需要找到$_$
	                        newReplacer = newReplacer.replace(
	                            '$$$' + key$$$,
	                            wildCardCode
	                        );
	                    } else {
	                        let wildCardCode = extra[key][0].value;
	                        key == '0' && (key = '');
	                        newReplacer = newReplacer
	                            .replace('$_$' + key, wildCardCode);
	                        // 通过选择器替换ast，返回完整ast
	                    }
	                }
	                core$2.replace(path, newReplacer);
	            } else {
	                core$2.replace(path, replacer);
	            }
	        });
	    },
	    replace(oldPath, newReplacer) {
	        let parentContent, index, isDoc, newNodes;
	        if (oldPath.node.nodeType == 'document') {
	            isDoc = true;
	        } else {
	            parentContent = oldPath.parent.node.content.children || [];
	            index = parentContent.indexOf(oldPath.node);
	        }
	        if (!newReplacer) {
	            // 删除节点
	            if (index > -1) {
	                if (isDoc) {
	                    oldPath.node.content.children = [];
	                } else {
	                    parentContent.splice(index, 1);
	                }
	            }
	            return;
	        } else if (newReplacer.nodeType == 'document') {
	            newNodes = newReplacer.content.children || [];
	        } else if (typeof newReplacer == 'string') {
	            // 通过字符串解析为node
	            if (index > -1) {
	                newNodes = core$2.buildAstByAstStr(
	                    newReplacer,
	                    {},
	                    { isProgram: true }
	                ).content.children;
	            }
	        } else if (newReplacer[0] && newReplacer[0].nodePath) {
	            // AST实例
	            newNodes = [newReplacer.node];
	        } else if (newReplacer.type) {
	            // AST node
	            newNodes = [newReplacer];
	        }
	        if (isDoc) {
	            oldPath.node.content.children = newNodes;
	        } else {
	            newNodes.forEach(newNode => {
	                newNode.parentRef = oldPath.parent.node;
	                parentContent.splice(index, 1, newNode);
	            });
	        }
	    },
	    removeAst(ast, selector, { strictSequence, parseOptions, expando } = {}) {
	        if (!ast || typeof ast !== 'object') {
	            throw new Error('remove failed! first argument mast be object');
	        }
	        if (
	            !selector ||
	            (typeof selector !== 'object' &&
	                typeof selector !== 'string' &&
	                !Array.isArray(selector))
	        ) {
	            throw new Error(
	                'remove failed! first argument mast be object、string or string array'
	            );
	        }
	        // const selectorAst = getSelector(selector, this.parseOptions);
	        // console.log(selectorAst)
	        const { nodePathList } = core$2.getAstsBySelector(ast, selector, {
	            strictSequence,
	            parseOptions,
	            expando
	        });
	        // const { nodePathList } = find.call(ast, selectorAst.nodeType, selectorAst.structure, true, 'nn');
	        // console.log(nodePathList)
	        nodePathList.forEach((path) => {
	            // 多条语句逗号分割的话，只删除一个；一条语句的话，删除父节点
	            const parentChildList = path.parent.node.content.children;
	            const index = parentChildList.indexOf(path.node);
	            parentChildList.splice(index, 1);
	        });
	    },
	    remove(ast) {
	        try {
	            ast.node.parentRef.content.children.forEach((item, index) => {
	                if (item == ast.node) {
	                    ast.node.parentRef.content.children.splice(index, 1);
	                }
	            });
	        } catch (e) {
	            throw `remove failed! ${e}`;
	        }
	    }
	};

	var core_1$1 = core$2;

	var compilerSfc_cjs = {};

	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 * IMPORTANT: all calls of this function must be prefixed with
	 * \/\*#\_\_PURE\_\_\*\/
	 * So that rollup can tree-shake them if necessary.
	 */
	function makeMap(str, expectsLowerCase) {
	    const map = Object.create(null);
	    const list = str.split(',');
	    for (let i = 0; i < list.length; i++) {
	        map[list[i]] = true;
	    }
	    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];
	}

	/**
	 * dev only flag -> name mapping
	 */
	const PatchFlagNames = {
	    [1 /* TEXT */]: `TEXT`,
	    [2 /* CLASS */]: `CLASS`,
	    [4 /* STYLE */]: `STYLE`,
	    [8 /* PROPS */]: `PROPS`,
	    [16 /* FULL_PROPS */]: `FULL_PROPS`,
	    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,
	    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,
	    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,
	    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,
	    [512 /* NEED_PATCH */]: `NEED_PATCH`,
	    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,
	    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,
	    [-1 /* HOISTED */]: `HOISTED`,
	    [-2 /* BAIL */]: `BAIL`
	};

	/**
	 * Dev only
	 */
	const slotFlagsText = {
	    [1 /* STABLE */]: 'STABLE',
	    [2 /* DYNAMIC */]: 'DYNAMIC',
	    [3 /* FORWARDED */]: 'FORWARDED'
	};

	const GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +
	    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +
	    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';
	const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);

	const range = 2;
	function generateCodeFrame(source, start = 0, end = source.length) {
	    const lines = source.split(/\r?\n/);
	    let count = 0;
	    const res = [];
	    for (let i = 0; i < lines.length; i++) {
	        count += lines[i].length + 1;
	        if (count >= start) {
	            for (let j = i - range; j <= i + range || end > count; j++) {
	                if (j < 0 || j >= lines.length)
	                    continue;
	                const line = j + 1;
	                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
	                const lineLength = lines[j].length;
	                if (j === i) {
	                    // push underline
	                    const pad = start - (count - lineLength) + 1;
	                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
	                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
	                }
	                else if (j > i) {
	                    if (end > count) {
	                        const length = Math.max(Math.min(end - count, lineLength), 1);
	                        res.push(`   |  ` + '^'.repeat(length));
	                    }
	                    count += lineLength + 1;
	                }
	            }
	            break;
	        }
	    }
	    return res.join('\n');
	}

	/**
	 * On the client we only need to offer special cases for boolean attributes that
	 * have different names from their corresponding dom properties:
	 * - itemscope -> N/A
	 * - allowfullscreen -> allowFullscreen
	 * - formnovalidate -> formNoValidate
	 * - ismap -> isMap
	 * - nomodule -> noModule
	 * - novalidate -> noValidate
	 * - readonly -> readOnly
	 */
	const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
	const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
	/**
	 * The full list is needed during SSR to produce the correct initial markup.
	 */
	const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +
	    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +
	    `loop,open,required,reversed,scoped,seamless,` +
	    `checked,muted,multiple,selected`);
	const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
	const attrValidationCache = {};
	function isSSRSafeAttrName(name) {
	    if (attrValidationCache.hasOwnProperty(name)) {
	        return attrValidationCache[name];
	    }
	    const isUnsafe = unsafeAttrCharRE.test(name);
	    if (isUnsafe) {
	        console.error(`unsafe attribute name: ${name}`);
	    }
	    return (attrValidationCache[name] = !isUnsafe);
	}
	const propsToAttrMap = {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	};
	/**
	 * CSS properties that accept plain numbers
	 */
	const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +
	    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +
	    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +
	    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +
	    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +
	    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +
	    // SVG
	    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +
	    `stroke-miterlimit,stroke-opacity,stroke-width`);
	/**
	 * Known attributes, this is used for stringification of runtime static nodes
	 * so that we don't stringify bindings that cannot be set from HTML.
	 * Don't also forget to allow `data-*` and `aria-*`!
	 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
	 */
	const isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +
	    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +
	    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +
	    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +
	    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +
	    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +
	    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +
	    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +
	    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +
	    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +
	    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +
	    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +
	    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +
	    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +
	    `value,width,wrap`);

	function normalizeStyle(value) {
	    if (isArray$1(value)) {
	        const res = {};
	        for (let i = 0; i < value.length; i++) {
	            const item = value[i];
	            const normalized = normalizeStyle(isString$1(item) ? parseStringStyle(item) : item);
	            if (normalized) {
	                for (const key in normalized) {
	                    res[key] = normalized[key];
	                }
	            }
	        }
	        return res;
	    }
	    else if (isObject$2(value)) {
	        return value;
	    }
	}
	const listDelimiterRE = /;(?![^(]*\))/g;
	const propertyDelimiterRE = /:(.+)/;
	function parseStringStyle(cssText) {
	    const ret = {};
	    cssText.split(listDelimiterRE).forEach(item => {
	        if (item) {
	            const tmp = item.split(propertyDelimiterRE);
	            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
	        }
	    });
	    return ret;
	}
	function stringifyStyle(styles) {
	    let ret = '';
	    if (!styles) {
	        return ret;
	    }
	    for (const key in styles) {
	        const value = styles[key];
	        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
	        if (isString$1(value) ||
	            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {
	            // only render valid values
	            ret += `${normalizedKey}:${value};`;
	        }
	    }
	    return ret;
	}
	function normalizeClass(value) {
	    let res = '';
	    if (isString$1(value)) {
	        res = value;
	    }
	    else if (isArray$1(value)) {
	        for (let i = 0; i < value.length; i++) {
	            const normalized = normalizeClass(value[i]);
	            if (normalized) {
	                res += normalized + ' ';
	            }
	        }
	    }
	    else if (isObject$2(value)) {
	        for (const name in value) {
	            if (value[name]) {
	                res += name + ' ';
	            }
	        }
	    }
	    return res.trim();
	}

	// These tag configs are shared between compiler-dom and runtime-dom, so they
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
	const HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +
	    'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' +
	    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +
	    'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' +
	    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +
	    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +
	    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +
	    'option,output,progress,select,textarea,details,dialog,menu,' +
	    'summary,template,blockquote,iframe,tfoot';
	// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
	const SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +
	    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +
	    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +
	    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +
	    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +
	    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +
	    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +
	    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +
	    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +
	    'text,textPath,title,tspan,unknown,use,view';
	const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
	const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
	const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
	const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);

	const escapeRE = /["'&<>]/;
	function escapeHtml(string) {
	    const str = '' + string;
	    const match = escapeRE.exec(str);
	    if (!match) {
	        return str;
	    }
	    let html = '';
	    let escaped;
	    let index;
	    let lastIndex = 0;
	    for (index = match.index; index < str.length; index++) {
	        switch (str.charCodeAt(index)) {
	            case 34: // "
	                escaped = '&quot;';
	                break;
	            case 38: // &
	                escaped = '&amp;';
	                break;
	            case 39: // '
	                escaped = '&#39;';
	                break;
	            case 60: // <
	                escaped = '&lt;';
	                break;
	            case 62: // >
	                escaped = '&gt;';
	                break;
	            default:
	                continue;
	        }
	        if (lastIndex !== index) {
	            html += str.substring(lastIndex, index);
	        }
	        lastIndex = index + 1;
	        html += escaped;
	    }
	    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// https://www.w3.org/TR/html52/syntax.html#comments
	const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
	function escapeHtmlComment(src) {
	    return src.replace(commentStripRE, '');
	}

	function looseCompareArrays(a, b) {
	    if (a.length !== b.length)
	        return false;
	    let equal = true;
	    for (let i = 0; equal && i < a.length; i++) {
	        equal = looseEqual(a[i], b[i]);
	    }
	    return equal;
	}
	function looseEqual(a, b) {
	    if (a === b)
	        return true;
	    let aValidType = isDate(a);
	    let bValidType = isDate(b);
	    if (aValidType || bValidType) {
	        return aValidType && bValidType ? a.getTime() === b.getTime() : false;
	    }
	    aValidType = isArray$1(a);
	    bValidType = isArray$1(b);
	    if (aValidType || bValidType) {
	        return aValidType && bValidType ? looseCompareArrays(a, b) : false;
	    }
	    aValidType = isObject$2(a);
	    bValidType = isObject$2(b);
	    if (aValidType || bValidType) {
	        /* istanbul ignore if: this if will probably never be called */
	        if (!aValidType || !bValidType) {
	            return false;
	        }
	        const aKeysCount = Object.keys(a).length;
	        const bKeysCount = Object.keys(b).length;
	        if (aKeysCount !== bKeysCount) {
	            return false;
	        }
	        for (const key in a) {
	            const aHasKey = a.hasOwnProperty(key);
	            const bHasKey = b.hasOwnProperty(key);
	            if ((aHasKey && !bHasKey) ||
	                (!aHasKey && bHasKey) ||
	                !looseEqual(a[key], b[key])) {
	                return false;
	            }
	        }
	    }
	    return String(a) === String(b);
	}
	function looseIndexOf(arr, val) {
	    return arr.findIndex(item => looseEqual(item, val));
	}

	/**
	 * For converting {{ interpolation }} values to displayed strings.
	 * @private
	 */
	const toDisplayString = (val) => {
	    return val == null
	        ? ''
	        : isObject$2(val)
	            ? JSON.stringify(val, replacer, 2)
	            : String(val);
	};
	const replacer = (_key, val) => {
	    if (isMap(val)) {
	        return {
	            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {
	                entries[`${key} =>`] = val;
	                return entries;
	            }, {})
	        };
	    }
	    else if (isSet(val)) {
	        return {
	            [`Set(${val.size})`]: [...val.values()]
	        };
	    }
	    else if (isObject$2(val) && !isArray$1(val) && !isPlainObject(val)) {
	        return String(val);
	    }
	    return val;
	};

	/**
	 * List of @babel/parser plugins that are used for template expression
	 * transforms and SFC script transforms. By default we enable proposals slated
	 * for ES2020. This will need to be updated as the spec moves forward.
	 * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
	 */
	const babelParserDefaultPlugins = [
	    'bigInt',
	    'optionalChaining',
	    'nullishCoalescingOperator'
	];
	const EMPTY_OBJ = {};
	const EMPTY_ARR = [];
	const NOOP = () => { };
	/**
	 * Always return false.
	 */
	const NO = () => false;
	const onRE = /^on[^a-z]/;
	const isOn = (key) => onRE.test(key);
	const isModelListener = (key) => key.startsWith('onUpdate:');
	const extend = Object.assign;
	const remove = (arr, el) => {
	    const i = arr.indexOf(el);
	    if (i > -1) {
	        arr.splice(i, 1);
	    }
	};
	const hasOwnProperty$3 = Object.prototype.hasOwnProperty;
	const hasOwn = (val, key) => hasOwnProperty$3.call(val, key);
	const isArray$1 = Array.isArray;
	const isMap = (val) => toTypeString(val) === '[object Map]';
	const isSet = (val) => toTypeString(val) === '[object Set]';
	const isDate = (val) => val instanceof Date;
	const isFunction$1 = (val) => typeof val === 'function';
	const isString$1 = (val) => typeof val === 'string';
	const isSymbol$1 = (val) => typeof val === 'symbol';
	const isObject$2 = (val) => val !== null && typeof val === 'object';
	const isPromise$1 = (val) => {
	    return isObject$2(val) && isFunction$1(val.then) && isFunction$1(val.catch);
	};
	const objectToString$1 = Object.prototype.toString;
	const toTypeString = (value) => objectToString$1.call(value);
	const toRawType = (value) => {
	    // extract "RawType" from strings like "[object RawType]"
	    return toTypeString(value).slice(8, -1);
	};
	const isPlainObject = (val) => toTypeString(val) === '[object Object]';
	const isIntegerKey = (key) => isString$1(key) &&
	    key !== 'NaN' &&
	    key[0] !== '-' &&
	    '' + parseInt(key, 10) === key;
	const isReservedProp = /*#__PURE__*/ makeMap(
	// the leading comma is intentional so empty string "" is also included
	',key,ref,' +
	    'onVnodeBeforeMount,onVnodeMounted,' +
	    'onVnodeBeforeUpdate,onVnodeUpdated,' +
	    'onVnodeBeforeUnmount,onVnodeUnmounted');
	const cacheStringFunction$1 = (fn) => {
	    const cache = Object.create(null);
	    return ((str) => {
	        const hit = cache[str];
	        return hit || (cache[str] = fn(str));
	    });
	};
	const camelizeRE$1 = /-(\w)/g;
	/**
	 * @private
	 */
	const camelize$1 = cacheStringFunction$1((str) => {
	    return str.replace(camelizeRE$1, (_, c) => (c ? c.toUpperCase() : ''));
	});
	const hyphenateRE = /\B([A-Z])/g;
	/**
	 * @private
	 */
	const hyphenate = cacheStringFunction$1((str) => str.replace(hyphenateRE, '-$1').toLowerCase());
	/**
	 * @private
	 */
	const capitalize$2 = cacheStringFunction$1((str) => str.charAt(0).toUpperCase() + str.slice(1));
	/**
	 * @private
	 */
	const toHandlerKey = cacheStringFunction$1((str) => (str ? `on${capitalize$2(str)}` : ``));
	// compare whether a value has changed, accounting for NaN.
	const hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
	const invokeArrayFns = (fns, arg) => {
	    for (let i = 0; i < fns.length; i++) {
	        fns[i](arg);
	    }
	};
	const def = (obj, key, value) => {
	    Object.defineProperty(obj, key, {
	        configurable: true,
	        enumerable: false,
	        value
	    });
	};
	const toNumber = (val) => {
	    const n = parseFloat(val);
	    return isNaN(n) ? val : n;
	};
	let _globalThis;
	const getGlobalThis = () => {
	    return (_globalThis ||
	        (_globalThis =
	            typeof globalThis !== 'undefined'
	                ? globalThis
	                : typeof self !== 'undefined'
	                    ? self
	                    : typeof window !== 'undefined'
	                        ? window
	                        : typeof global !== 'undefined'
	                            ? global
	                            : {}));
	};

	var shared_esmBundler = /*#__PURE__*/Object.freeze({
		__proto__: null,
		EMPTY_ARR: EMPTY_ARR,
		EMPTY_OBJ: EMPTY_OBJ,
		NO: NO,
		NOOP: NOOP,
		PatchFlagNames: PatchFlagNames,
		babelParserDefaultPlugins: babelParserDefaultPlugins,
		camelize: camelize$1,
		capitalize: capitalize$2,
		def: def,
		escapeHtml: escapeHtml,
		escapeHtmlComment: escapeHtmlComment,
		extend: extend,
		generateCodeFrame: generateCodeFrame,
		getGlobalThis: getGlobalThis,
		hasChanged: hasChanged,
		hasOwn: hasOwn,
		hyphenate: hyphenate,
		invokeArrayFns: invokeArrayFns,
		isArray: isArray$1,
		isBooleanAttr: isBooleanAttr,
		isDate: isDate,
		isFunction: isFunction$1,
		isGloballyWhitelisted: isGloballyWhitelisted,
		isHTMLTag: isHTMLTag,
		isIntegerKey: isIntegerKey,
		isKnownAttr: isKnownAttr,
		isMap: isMap,
		isModelListener: isModelListener,
		isNoUnitNumericStyleProp: isNoUnitNumericStyleProp,
		isObject: isObject$2,
		isOn: isOn,
		isPlainObject: isPlainObject,
		isPromise: isPromise$1,
		isReservedProp: isReservedProp,
		isSSRSafeAttrName: isSSRSafeAttrName,
		isSVGTag: isSVGTag,
		isSet: isSet,
		isSpecialBooleanAttr: isSpecialBooleanAttr,
		isString: isString$1,
		isSymbol: isSymbol$1,
		isVoidTag: isVoidTag,
		looseEqual: looseEqual,
		looseIndexOf: looseIndexOf,
		makeMap: makeMap,
		normalizeClass: normalizeClass,
		normalizeStyle: normalizeStyle,
		objectToString: objectToString$1,
		parseStringStyle: parseStringStyle,
		propsToAttrMap: propsToAttrMap,
		remove: remove,
		slotFlagsText: slotFlagsText,
		stringifyStyle: stringifyStyle,
		toDisplayString: toDisplayString,
		toHandlerKey: toHandlerKey,
		toNumber: toNumber,
		toRawType: toRawType,
		toTypeString: toTypeString
	});

	function defaultOnError(error) {
	    throw error;
	}
	function createCompilerError(code, loc, messages, additionalMessage) {
	    const msg = code;
	    const error = new SyntaxError(String(msg));
	    error.code = code;
	    error.loc = loc;
	    return error;
	}

	const FRAGMENT = Symbol(``);
	const TELEPORT = Symbol(``);
	const SUSPENSE = Symbol(``);
	const KEEP_ALIVE = Symbol(``);
	const BASE_TRANSITION = Symbol(``);
	const OPEN_BLOCK = Symbol(``);
	const CREATE_BLOCK = Symbol(``);
	const CREATE_VNODE = Symbol(``);
	const CREATE_COMMENT = Symbol(``);
	const CREATE_TEXT = Symbol(``);
	const CREATE_STATIC = Symbol(``);
	const RESOLVE_COMPONENT = Symbol(``);
	const RESOLVE_DYNAMIC_COMPONENT = Symbol(``);
	const RESOLVE_DIRECTIVE = Symbol(``);
	const WITH_DIRECTIVES = Symbol(``);
	const RENDER_LIST = Symbol(``);
	const RENDER_SLOT = Symbol(``);
	const CREATE_SLOTS = Symbol(``);
	const TO_DISPLAY_STRING = Symbol(``);
	const MERGE_PROPS = Symbol(``);
	const TO_HANDLERS = Symbol(``);
	const CAMELIZE = Symbol(``);
	const CAPITALIZE = Symbol(``);
	const TO_HANDLER_KEY = Symbol(``);
	const SET_BLOCK_TRACKING = Symbol(``);
	const PUSH_SCOPE_ID = Symbol(``);
	const POP_SCOPE_ID = Symbol(``);
	const WITH_SCOPE_ID = Symbol(``);
	const WITH_CTX = Symbol(``);
	const UNREF = Symbol(``);
	const IS_REF = Symbol(``);
	// Name mapping for runtime helpers that need to be imported from 'vue' in
	// generated code. Make sure these are correctly exported in the runtime!
	// Using `any` here because TS doesn't allow symbols as index type.
	const helperNameMap = {
	    [FRAGMENT]: `Fragment`,
	    [TELEPORT]: `Teleport`,
	    [SUSPENSE]: `Suspense`,
	    [KEEP_ALIVE]: `KeepAlive`,
	    [BASE_TRANSITION]: `BaseTransition`,
	    [OPEN_BLOCK]: `openBlock`,
	    [CREATE_BLOCK]: `createBlock`,
	    [CREATE_VNODE]: `createVNode`,
	    [CREATE_COMMENT]: `createCommentVNode`,
	    [CREATE_TEXT]: `createTextVNode`,
	    [CREATE_STATIC]: `createStaticVNode`,
	    [RESOLVE_COMPONENT]: `resolveComponent`,
	    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
	    [RESOLVE_DIRECTIVE]: `resolveDirective`,
	    [WITH_DIRECTIVES]: `withDirectives`,
	    [RENDER_LIST]: `renderList`,
	    [RENDER_SLOT]: `renderSlot`,
	    [CREATE_SLOTS]: `createSlots`,
	    [TO_DISPLAY_STRING]: `toDisplayString`,
	    [MERGE_PROPS]: `mergeProps`,
	    [TO_HANDLERS]: `toHandlers`,
	    [CAMELIZE]: `camelize`,
	    [CAPITALIZE]: `capitalize`,
	    [TO_HANDLER_KEY]: `toHandlerKey`,
	    [SET_BLOCK_TRACKING]: `setBlockTracking`,
	    [PUSH_SCOPE_ID]: `pushScopeId`,
	    [POP_SCOPE_ID]: `popScopeId`,
	    [WITH_SCOPE_ID]: `withScopeId`,
	    [WITH_CTX]: `withCtx`,
	    [UNREF]: `unref`,
	    [IS_REF]: `isRef`
	};
	function registerRuntimeHelpers(helpers) {
	    Object.getOwnPropertySymbols(helpers).forEach(s => {
	        helperNameMap[s] = helpers[s];
	    });
	}

	// AST Utilities ---------------------------------------------------------------
	// Some expressions, e.g. sequence and conditional expressions, are never
	// associated with template nodes, so their source locations are just a stub.
	// Container types like CompoundExpression also don't need a real location.
	const locStub = {
	    source: '',
	    start: { line: 1, column: 1, offset: 0 },
	    end: { line: 1, column: 1, offset: 0 }
	};
	function createRoot(children, loc = locStub) {
	    return {
	        type: 0 /* ROOT */,
	        children,
	        helpers: [],
	        components: [],
	        directives: [],
	        hoists: [],
	        imports: [],
	        cached: 0,
	        temps: 0,
	        codegenNode: undefined,
	        loc
	    };
	}
	function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, loc = locStub) {
	    if (context) {
	        if (isBlock) {
	            context.helper(OPEN_BLOCK);
	            context.helper(CREATE_BLOCK);
	        }
	        else {
	            context.helper(CREATE_VNODE);
	        }
	        if (directives) {
	            context.helper(WITH_DIRECTIVES);
	        }
	    }
	    return {
	        type: 13 /* VNODE_CALL */,
	        tag,
	        props,
	        children,
	        patchFlag,
	        dynamicProps,
	        directives,
	        isBlock,
	        disableTracking,
	        loc
	    };
	}
	function createArrayExpression(elements, loc = locStub) {
	    return {
	        type: 17 /* JS_ARRAY_EXPRESSION */,
	        loc,
	        elements
	    };
	}
	function createObjectExpression(properties, loc = locStub) {
	    return {
	        type: 15 /* JS_OBJECT_EXPRESSION */,
	        loc,
	        properties
	    };
	}
	function createObjectProperty(key, value) {
	    return {
	        type: 16 /* JS_PROPERTY */,
	        loc: locStub,
	        key: isString$1(key) ? createSimpleExpression(key, true) : key,
	        value
	    };
	}
	function createSimpleExpression(content, isStatic, loc = locStub, constType = 0 /* NOT_CONSTANT */) {
	    return {
	        type: 4 /* SIMPLE_EXPRESSION */,
	        loc,
	        content,
	        isStatic,
	        constType: isStatic ? 3 /* CAN_STRINGIFY */ : constType
	    };
	}
	function createInterpolation(content, loc) {
	    return {
	        type: 5 /* INTERPOLATION */,
	        loc,
	        content: isString$1(content)
	            ? createSimpleExpression(content, false, loc)
	            : content
	    };
	}
	function createCompoundExpression(children, loc = locStub) {
	    return {
	        type: 8 /* COMPOUND_EXPRESSION */,
	        loc,
	        children
	    };
	}
	function createCallExpression(callee, args = [], loc = locStub) {
	    return {
	        type: 14 /* JS_CALL_EXPRESSION */,
	        loc,
	        callee,
	        arguments: args
	    };
	}
	function createFunctionExpression(params, returns = undefined, newline = false, isSlot = false, loc = locStub) {
	    return {
	        type: 18 /* JS_FUNCTION_EXPRESSION */,
	        params,
	        returns,
	        newline,
	        isSlot,
	        loc
	    };
	}
	function createConditionalExpression(test, consequent, alternate, newline = true) {
	    return {
	        type: 19 /* JS_CONDITIONAL_EXPRESSION */,
	        test,
	        consequent,
	        alternate,
	        newline,
	        loc: locStub
	    };
	}
	function createCacheExpression(index, value, isVNode = false) {
	    return {
	        type: 20 /* JS_CACHE_EXPRESSION */,
	        index,
	        value,
	        isVNode,
	        loc: locStub
	    };
	}
	function createBlockStatement(body) {
	    return {
	        type: 21 /* JS_BLOCK_STATEMENT */,
	        body,
	        loc: locStub
	    };
	}
	function createTemplateLiteral(elements) {
	    return {
	        type: 22 /* JS_TEMPLATE_LITERAL */,
	        elements,
	        loc: locStub
	    };
	}
	function createIfStatement(test, consequent, alternate) {
	    return {
	        type: 23 /* JS_IF_STATEMENT */,
	        test,
	        consequent,
	        alternate,
	        loc: locStub
	    };
	}
	function createAssignmentExpression(left, right) {
	    return {
	        type: 24 /* JS_ASSIGNMENT_EXPRESSION */,
	        left,
	        right,
	        loc: locStub
	    };
	}
	function createSequenceExpression(expressions) {
	    return {
	        type: 25 /* JS_SEQUENCE_EXPRESSION */,
	        expressions,
	        loc: locStub
	    };
	}
	function createReturnStatement(returns) {
	    return {
	        type: 26 /* JS_RETURN_STATEMENT */,
	        returns,
	        loc: locStub
	    };
	}

	const isStaticExp = (p) => p.type === 4 /* SIMPLE_EXPRESSION */ && p.isStatic;
	const isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
	function isCoreComponent(tag) {
	    if (isBuiltInType(tag, 'Teleport')) {
	        return TELEPORT;
	    }
	    else if (isBuiltInType(tag, 'Suspense')) {
	        return SUSPENSE;
	    }
	    else if (isBuiltInType(tag, 'KeepAlive')) {
	        return KEEP_ALIVE;
	    }
	    else if (isBuiltInType(tag, 'BaseTransition')) {
	        return BASE_TRANSITION;
	    }
	}
	const nonIdentifierRE = /^\d|[^\$\w]/;
	const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
	const memberExpRE = /^[A-Za-z_$\xA0-\uFFFF][\w$\xA0-\uFFFF]*(?:\s*\.\s*[A-Za-z_$\xA0-\uFFFF][\w$\xA0-\uFFFF]*|\[[^\]]+\])*$/;
	const isMemberExpression = (path) => {
	    if (!path)
	        return false;
	    return memberExpRE.test(path.trim());
	};
	function getInnerRange(loc, offset, length) {
	    const source = loc.source.substr(offset, length);
	    const newLoc = {
	        source,
	        start: advancePositionWithClone(loc.start, loc.source, offset),
	        end: loc.end
	    };
	    if (length != null) {
	        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
	    }
	    return newLoc;
	}
	function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
	    return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);
	}
	// advance by mutation without cloning (for performance reasons), since this
	// gets called a lot in the parser
	function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
	    let linesCount = 0;
	    let lastNewLinePos = -1;
	    for (let i = 0; i < numberOfCharacters; i++) {
	        if (source.charCodeAt(i) === 10 /* newline char code */) {
	            linesCount++;
	            lastNewLinePos = i;
	        }
	    }
	    pos.offset += numberOfCharacters;
	    pos.line += linesCount;
	    pos.column =
	        lastNewLinePos === -1
	            ? pos.column + numberOfCharacters
	            : numberOfCharacters - lastNewLinePos;
	    return pos;
	}
	function assert(condition, msg) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error(msg || `unexpected compiler condition`);
	    }
	}
	function findDir(node, name, allowEmpty = false) {
	    for (let i = 0; i < node.props.length; i++) {
	        const p = node.props[i];
	        if (p.type === 7 /* DIRECTIVE */ &&
	            (allowEmpty || p.exp) &&
	            (isString$1(name) ? p.name === name : name.test(p.name))) {
	            return p;
	        }
	    }
	}
	function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
	    for (let i = 0; i < node.props.length; i++) {
	        const p = node.props[i];
	        if (p.type === 6 /* ATTRIBUTE */) {
	            if (dynamicOnly)
	                continue;
	            if (p.name === name && (p.value || allowEmpty)) {
	                return p;
	            }
	        }
	        else if (p.name === 'bind' &&
	            (p.exp || allowEmpty) &&
	            isBindKey(p.arg, name)) {
	            return p;
	        }
	    }
	}
	function isBindKey(arg, name) {
	    return !!(arg && isStaticExp(arg) && arg.content === name);
	}
	function hasDynamicKeyVBind(node) {
	    return node.props.some(p => p.type === 7 /* DIRECTIVE */ &&
	        p.name === 'bind' &&
	        (!p.arg || // v-bind="obj"
	            p.arg.type !== 4 /* SIMPLE_EXPRESSION */ || // v-bind:[_ctx.foo]
	            !p.arg.isStatic) // v-bind:[foo]
	    );
	}
	function isText(node) {
	    return node.type === 5 /* INTERPOLATION */ || node.type === 2 /* TEXT */;
	}
	function isVSlot(p) {
	    return p.type === 7 /* DIRECTIVE */ && p.name === 'slot';
	}
	function isTemplateNode(node) {
	    return (node.type === 1 /* ELEMENT */ && node.tagType === 3 /* TEMPLATE */);
	}
	function isSlotOutlet(node) {
	    return node.type === 1 /* ELEMENT */ && node.tagType === 2 /* SLOT */;
	}
	function injectProp(node, prop, context) {
	    let propsWithInjection;
	    const props = node.type === 13 /* VNODE_CALL */ ? node.props : node.arguments[2];
	    if (props == null || isString$1(props)) {
	        propsWithInjection = createObjectExpression([prop]);
	    }
	    else if (props.type === 14 /* JS_CALL_EXPRESSION */) {
	        // merged props... add ours
	        // only inject key to object literal if it's the first argument so that
	        // if doesn't override user provided keys
	        const first = props.arguments[0];
	        if (!isString$1(first) && first.type === 15 /* JS_OBJECT_EXPRESSION */) {
	            first.properties.unshift(prop);
	        }
	        else {
	            if (props.callee === TO_HANDLERS) {
	                // #2366
	                propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
	                    createObjectExpression([prop]),
	                    props
	                ]);
	            }
	            else {
	                props.arguments.unshift(createObjectExpression([prop]));
	            }
	        }
	        !propsWithInjection && (propsWithInjection = props);
	    }
	    else if (props.type === 15 /* JS_OBJECT_EXPRESSION */) {
	        let alreadyExists = false;
	        // check existing key to avoid overriding user provided keys
	        if (prop.key.type === 4 /* SIMPLE_EXPRESSION */) {
	            const propKeyName = prop.key.content;
	            alreadyExists = props.properties.some(p => p.key.type === 4 /* SIMPLE_EXPRESSION */ &&
	                p.key.content === propKeyName);
	        }
	        if (!alreadyExists) {
	            props.properties.unshift(prop);
	        }
	        propsWithInjection = props;
	    }
	    else {
	        // single v-bind with expression, return a merged replacement
	        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
	            createObjectExpression([prop]),
	            props
	        ]);
	    }
	    if (node.type === 13 /* VNODE_CALL */) {
	        node.props = propsWithInjection;
	    }
	    else {
	        node.arguments[2] = propsWithInjection;
	    }
	}
	function toValidAssetId(name, type) {
	    return `_${type}_${name.replace(/[^\w]/g, '_')}`;
	}
	// Check if a node contains expressions that reference current context scope ids
	function hasScopeRef(node, ids) {
	    if (!node || Object.keys(ids).length === 0) {
	        return false;
	    }
	    switch (node.type) {
	        case 1 /* ELEMENT */:
	            for (let i = 0; i < node.props.length; i++) {
	                const p = node.props[i];
	                if (p.type === 7 /* DIRECTIVE */ &&
	                    (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {
	                    return true;
	                }
	            }
	            return node.children.some(c => hasScopeRef(c, ids));
	        case 11 /* FOR */:
	            if (hasScopeRef(node.source, ids)) {
	                return true;
	            }
	            return node.children.some(c => hasScopeRef(c, ids));
	        case 9 /* IF */:
	            return node.branches.some(b => hasScopeRef(b, ids));
	        case 10 /* IF_BRANCH */:
	            if (hasScopeRef(node.condition, ids)) {
	                return true;
	            }
	            return node.children.some(c => hasScopeRef(c, ids));
	        case 4 /* SIMPLE_EXPRESSION */:
	            return (!node.isStatic &&
	                isSimpleIdentifier(node.content) &&
	                !!ids[node.content]);
	        case 8 /* COMPOUND_EXPRESSION */:
	            return node.children.some(c => isObject$2(c) && hasScopeRef(c, ids));
	        case 5 /* INTERPOLATION */:
	        case 12 /* TEXT_CALL */:
	            return hasScopeRef(node.content, ids);
	        case 2 /* TEXT */:
	        case 3 /* COMMENT */:
	            return false;
	        default:
	            return false;
	    }
	}

	// The default decoder only provides escapes for characters reserved as part of
	// the template syntax, and is only used if the custom renderer did not provide
	// a platform-specific decoder.
	const decodeRE = /&(gt|lt|amp|apos|quot);/g;
	const decodeMap = {
	    gt: '>',
	    lt: '<',
	    amp: '&',
	    apos: "'",
	    quot: '"'
	};
	const defaultParserOptions = {
	    delimiters: [`{{`, `}}`],
	    getNamespace: () => 0 /* HTML */,
	    getTextMode: () => 0 /* DATA */,
	    isVoidTag: NO,
	    isPreTag: NO,
	    isCustomElement: NO,
	    decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
	    onError: defaultOnError,
	    comments: false
	};
	function baseParse(content, options = {}) {
	    const context = createParserContext(content, options);
	    const start = getCursor(context);
	    return createRoot(parseChildren(context, 0 /* DATA */, []), getSelection(context, start));
	}
	function createParserContext(content, rawOptions) {
	    const options = extend({}, defaultParserOptions);
	    for (const key in rawOptions) {
	        // @ts-ignore
	        options[key] = rawOptions[key] || defaultParserOptions[key];
	    }
	    return {
	        options,
	        column: 1,
	        line: 1,
	        offset: 0,
	        originalSource: content,
	        source: content,
	        inPre: false,
	        inVPre: false
	    };
	}
	function parseChildren(context, mode, ancestors) {
	    const parent = last(ancestors);
	    const ns = parent ? parent.ns : 0 /* HTML */;
	    const nodes = [];
	    while (!isEnd(context, mode, ancestors)) {
	        const s = context.source;
	        let node = undefined;
	        if (mode === 0 /* DATA */ || mode === 1 /* RCDATA */) {
	            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
	                // '{{'
	                node = parseInterpolation(context, mode);
	            }
	            else if (mode === 0 /* DATA */ && s[0] === '<') {
	                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
	                if (s.length === 1) {
	                    emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 1);
	                }
	                else if (s[1] === '!') {
	                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
	                    if (startsWith(s, '<!--')) {
	                        node = parseComment(context);
	                    }
	                    else if (startsWith(s, '<!DOCTYPE')) {
	                        // Ignore DOCTYPE by a limitation.
	                        node = parseBogusComment(context);
	                    }
	                    else if (startsWith(s, '<![CDATA[')) {
	                        if (ns !== 0 /* HTML */) {
	                            node = parseCDATA(context, ancestors);
	                        }
	                        else {
	                            emitError(context, 1 /* CDATA_IN_HTML_CONTENT */);
	                            node = parseBogusComment(context);
	                        }
	                    }
	                    else {
	                        emitError(context, 11 /* INCORRECTLY_OPENED_COMMENT */);
	                        node = parseBogusComment(context);
	                    }
	                }
	                else if (s[1] === '/') {
	                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state
	                    if (s.length === 2) {
	                        emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 2);
	                    }
	                    else if (s[2] === '>') {
	                        emitError(context, 14 /* MISSING_END_TAG_NAME */, 2);
	                        advanceBy(context, 3);
	                        continue;
	                    }
	                    else if (/[a-z]/i.test(s[2])) {
	                        emitError(context, 23 /* X_INVALID_END_TAG */);
	                        parseTag(context, 1 /* End */, parent);
	                        continue;
	                    }
	                    else {
	                        emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 2);
	                        node = parseBogusComment(context);
	                    }
	                }
	                else if (/[a-z]/i.test(s[1])) {
	                    node = parseElement(context, ancestors);
	                }
	                else if (s[1] === '?') {
	                    emitError(context, 21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */, 1);
	                    node = parseBogusComment(context);
	                }
	                else {
	                    emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 1);
	                }
	            }
	        }
	        if (!node) {
	            node = parseText(context, mode);
	        }
	        if (isArray$1(node)) {
	            for (let i = 0; i < node.length; i++) {
	                pushNode(nodes, node[i]);
	            }
	        }
	        else {
	            pushNode(nodes, node);
	        }
	    }
	    // Whitespace management for more efficient output
	    // (same as v2 whitespace: 'condense')
	    let removedWhitespace = false;
	    if (mode !== 2 /* RAWTEXT */ && mode !== 1 /* RCDATA */) {
	        for (let i = 0; i < nodes.length; i++) {
	            const node = nodes[i];
	            if (!context.inPre && node.type === 2 /* TEXT */) {
	                if (!/[^\t\r\n\f ]/.test(node.content)) {
	                    const prev = nodes[i - 1];
	                    const next = nodes[i + 1];
	                    // If:
	                    // - the whitespace is the first or last node, or:
	                    // - the whitespace is adjacent to a comment, or:
	                    // - the whitespace is between two elements AND contains newline
	                    // Then the whitespace is ignored.
	                    if (!prev ||
	                        !next ||
	                        prev.type === 3 /* COMMENT */ ||
	                        next.type === 3 /* COMMENT */ ||
	                        (prev.type === 1 /* ELEMENT */ &&
	                            next.type === 1 /* ELEMENT */ &&
	                            /[\r\n]/.test(node.content))) {
	                        removedWhitespace = true;
	                        nodes[i] = null;
	                    }
	                    else {
	                        // Otherwise, condensed consecutive whitespace inside the text
	                        // down to a single space
	                        node.content = ' ';
	                    }
	                }
	                else {
	                    node.content = node.content.replace(/[\t\r\n\f ]+/g, ' ');
	                }
	            }
	            // also remove comment nodes in prod by default
	            if (node.type === 3 /* COMMENT */ &&
	                !context.options.comments) {
	                removedWhitespace = true;
	                nodes[i] = null;
	            }
	        }
	        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
	            // remove leading newline per html spec
	            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element
	            const first = nodes[0];
	            if (first && first.type === 2 /* TEXT */) {
	                first.content = first.content.replace(/^\r?\n/, '');
	            }
	        }
	    }
	    return removedWhitespace ? nodes.filter(Boolean) : nodes;
	}
	function pushNode(nodes, node) {
	    if (node.type === 2 /* TEXT */) {
	        const prev = last(nodes);
	        // Merge if both this and the previous node are text and those are
	        // consecutive. This happens for cases like "a < b".
	        if (prev &&
	            prev.type === 2 /* TEXT */ &&
	            prev.loc.end.offset === node.loc.start.offset) {
	            prev.content += node.content;
	            prev.loc.end = node.loc.end;
	            prev.loc.source += node.loc.source;
	            return;
	        }
	    }
	    nodes.push(node);
	}
	function parseCDATA(context, ancestors) {
	    advanceBy(context, 9);
	    const nodes = parseChildren(context, 3 /* CDATA */, ancestors);
	    if (context.source.length === 0) {
	        emitError(context, 6 /* EOF_IN_CDATA */);
	    }
	    else {
	        advanceBy(context, 3);
	    }
	    return nodes;
	}
	function parseComment(context) {
	    const start = getCursor(context);
	    let content;
	    // Regular comment.
	    const match = /--(\!)?>/.exec(context.source);
	    if (!match) {
	        content = context.source.slice(4);
	        advanceBy(context, context.source.length);
	        emitError(context, 7 /* EOF_IN_COMMENT */);
	    }
	    else {
	        if (match.index <= 3) {
	            emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */);
	        }
	        if (match[1]) {
	            emitError(context, 10 /* INCORRECTLY_CLOSED_COMMENT */);
	        }
	        content = context.source.slice(4, match.index);
	        // Advancing with reporting nested comments.
	        const s = context.source.slice(0, match.index);
	        let prevIndex = 1, nestedIndex = 0;
	        while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {
	            advanceBy(context, nestedIndex - prevIndex + 1);
	            if (nestedIndex + 4 < s.length) {
	                emitError(context, 16 /* NESTED_COMMENT */);
	            }
	            prevIndex = nestedIndex + 1;
	        }
	        advanceBy(context, match.index + match[0].length - prevIndex + 1);
	    }
	    return {
	        type: 3 /* COMMENT */,
	        content,
	        loc: getSelection(context, start)
	    };
	}
	function parseBogusComment(context) {
	    const start = getCursor(context);
	    const contentStart = context.source[1] === '?' ? 1 : 2;
	    let content;
	    const closeIndex = context.source.indexOf('>');
	    if (closeIndex === -1) {
	        content = context.source.slice(contentStart);
	        advanceBy(context, context.source.length);
	    }
	    else {
	        content = context.source.slice(contentStart, closeIndex);
	        advanceBy(context, closeIndex + 1);
	    }
	    return {
	        type: 3 /* COMMENT */,
	        content,
	        loc: getSelection(context, start)
	    };
	}
	function parseElement(context, ancestors) {
	    // Start tag.
	    const wasInPre = context.inPre;
	    const wasInVPre = context.inVPre;
	    const parent = last(ancestors);
	    const element = parseTag(context, 0 /* Start */, parent);
	    const isPreBoundary = context.inPre && !wasInPre;
	    const isVPreBoundary = context.inVPre && !wasInVPre;
	    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
	        return element;
	    }
	    // Children.
	    ancestors.push(element);
	    const mode = context.options.getTextMode(element, parent);
	    const children = parseChildren(context, mode, ancestors);
	    ancestors.pop();
	    element.children = children;
	    // End tag.
	    if (startsWithEndTagOpen(context.source, element.tag)) {
	        parseTag(context, 1 /* End */, parent);
	    }
	    else {
	        emitError(context, 24 /* X_MISSING_END_TAG */, 0, element.loc.start);
	        if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {
	            const first = children[0];
	            if (first && startsWith(first.loc.source, '<!--')) {
	                emitError(context, 8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */);
	            }
	        }
	    }
	    element.loc = getSelection(context, element.loc.start);
	    if (isPreBoundary) {
	        context.inPre = false;
	    }
	    if (isVPreBoundary) {
	        context.inVPre = false;
	    }
	    return element;
	}
	const isSpecialTemplateDirective = /*#__PURE__*/ makeMap(`if,else,else-if,for,slot`);
	/**
	 * Parse a tag (E.g. `<div id=a>`) with that type (start tag or end tag).
	 */
	function parseTag(context, type, parent) {
	    // Tag open.
	    const start = getCursor(context);
	    const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
	    const tag = match[1];
	    const ns = context.options.getNamespace(tag, parent);
	    advanceBy(context, match[0].length);
	    advanceSpaces(context);
	    // save current state in case we need to re-parse attributes with v-pre
	    const cursor = getCursor(context);
	    const currentSource = context.source;
	    // Attributes.
	    let props = parseAttributes(context, type);
	    // check <pre> tag
	    if (context.options.isPreTag(tag)) {
	        context.inPre = true;
	    }
	    // check v-pre
	    if (!context.inVPre &&
	        props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'pre')) {
	        context.inVPre = true;
	        // reset context
	        extend(context, cursor);
	        context.source = currentSource;
	        // re-parse attrs and filter out v-pre itself
	        props = parseAttributes(context, type).filter(p => p.name !== 'v-pre');
	    }
	    // Tag close.
	    let isSelfClosing = false;
	    if (context.source.length === 0) {
	        emitError(context, 9 /* EOF_IN_TAG */);
	    }
	    else {
	        isSelfClosing = startsWith(context.source, '/>');
	        if (type === 1 /* End */ && isSelfClosing) {
	            emitError(context, 4 /* END_TAG_WITH_TRAILING_SOLIDUS */);
	        }
	        advanceBy(context, isSelfClosing ? 2 : 1);
	    }
	    let tagType = 0 /* ELEMENT */;
	    const options = context.options;
	    if (!context.inVPre && !options.isCustomElement(tag)) {
	        const hasVIs = props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'is');
	        if (options.isNativeTag && !hasVIs) {
	            if (!options.isNativeTag(tag))
	                tagType = 1 /* COMPONENT */;
	        }
	        else if (hasVIs ||
	            isCoreComponent(tag) ||
	            (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||
	            /^[A-Z]/.test(tag) ||
	            tag === 'component') {
	            tagType = 1 /* COMPONENT */;
	        }
	        if (tag === 'slot') {
	            tagType = 2 /* SLOT */;
	        }
	        else if (tag === 'template' &&
	            props.some(p => {
	                return (p.type === 7 /* DIRECTIVE */ && isSpecialTemplateDirective(p.name));
	            })) {
	            tagType = 3 /* TEMPLATE */;
	        }
	    }
	    return {
	        type: 1 /* ELEMENT */,
	        ns,
	        tag,
	        tagType,
	        props,
	        isSelfClosing,
	        children: [],
	        loc: getSelection(context, start),
	        codegenNode: undefined // to be created during transform phase
	    };
	}
	function parseAttributes(context, type) {
	    const props = [];
	    const attributeNames = new Set();
	    while (context.source.length > 0 &&
	        !startsWith(context.source, '>') &&
	        !startsWith(context.source, '/>')) {
	        if (startsWith(context.source, '/')) {
	            emitError(context, 22 /* UNEXPECTED_SOLIDUS_IN_TAG */);
	            advanceBy(context, 1);
	            advanceSpaces(context);
	            continue;
	        }
	        if (type === 1 /* End */) {
	            emitError(context, 3 /* END_TAG_WITH_ATTRIBUTES */);
	        }
	        const attr = parseAttribute(context, attributeNames);
	        if (type === 0 /* Start */) {
	            props.push(attr);
	        }
	        if (/^[^\t\r\n\f />]/.test(context.source)) {
	            emitError(context, 15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */);
	        }
	        advanceSpaces(context);
	    }
	    return props;
	}
	function parseAttribute(context, nameSet) {
	    // Name.
	    const start = getCursor(context);
	    const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
	    const name = match[0];
	    if (nameSet.has(name)) {
	        emitError(context, 2 /* DUPLICATE_ATTRIBUTE */);
	    }
	    nameSet.add(name);
	    if (name[0] === '=') {
	        emitError(context, 19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */);
	    }
	    {
	        const pattern = /["'<]/g;
	        let m;
	        while ((m = pattern.exec(name))) {
	            emitError(context, 17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */, m.index);
	        }
	    }
	    advanceBy(context, name.length);
	    // Value
	    let value = undefined;
	    if (/^[\t\r\n\f ]*=/.test(context.source)) {
	        advanceSpaces(context);
	        advanceBy(context, 1);
	        advanceSpaces(context);
	        value = parseAttributeValue(context);
	        if (!value) {
	            emitError(context, 13 /* MISSING_ATTRIBUTE_VALUE */);
	        }
	    }
	    const loc = getSelection(context, start);
	    if (!context.inVPre && /^(v-|:|@|#)/.test(name)) {
	        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
	        const dirName = match[1] ||
	            (startsWith(name, ':') ? 'bind' : startsWith(name, '@') ? 'on' : 'slot');
	        let arg;
	        if (match[2]) {
	            const isSlot = dirName === 'slot';
	            const startOffset = name.lastIndexOf(match[2]);
	            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length + ((isSlot && match[3]) || '').length));
	            let content = match[2];
	            let isStatic = true;
	            if (content.startsWith('[')) {
	                isStatic = false;
	                if (!content.endsWith(']')) {
	                    emitError(context, 26 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */);
	                }
	                content = content.substr(1, content.length - 2);
	            }
	            else if (isSlot) {
	                // #1241 special case for v-slot: vuetify relies extensively on slot
	                // names containing dots. v-slot doesn't have any modifiers and Vue 2.x
	                // supports such usage so we are keeping it consistent with 2.x.
	                content += match[3] || '';
	            }
	            arg = {
	                type: 4 /* SIMPLE_EXPRESSION */,
	                content,
	                isStatic,
	                constType: isStatic
	                    ? 3 /* CAN_STRINGIFY */
	                    : 0 /* NOT_CONSTANT */,
	                loc
	            };
	        }
	        if (value && value.isQuoted) {
	            const valueLoc = value.loc;
	            valueLoc.start.offset++;
	            valueLoc.start.column++;
	            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
	            valueLoc.source = valueLoc.source.slice(1, -1);
	        }
	        return {
	            type: 7 /* DIRECTIVE */,
	            name: dirName,
	            exp: value && {
	                type: 4 /* SIMPLE_EXPRESSION */,
	                content: value.content,
	                isStatic: false,
	                // Treat as non-constant by default. This can be potentially set to
	                // other values by `transformExpression` to make it eligible for hoisting.
	                constType: 0 /* NOT_CONSTANT */,
	                loc: value.loc
	            },
	            arg,
	            modifiers: match[3] ? match[3].substr(1).split('.') : [],
	            loc
	        };
	    }
	    return {
	        type: 6 /* ATTRIBUTE */,
	        name,
	        value: value && {
	            type: 2 /* TEXT */,
	            content: value.content,
	            loc: value.loc
	        },
	        loc
	    };
	}
	function parseAttributeValue(context) {
	    const start = getCursor(context);
	    let content;
	    const quote = context.source[0];
	    const isQuoted = quote === `"` || quote === `'`;
	    if (isQuoted) {
	        // Quoted value.
	        advanceBy(context, 1);
	        const endIndex = context.source.indexOf(quote);
	        if (endIndex === -1) {
	            content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */);
	        }
	        else {
	            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */);
	            advanceBy(context, 1);
	        }
	    }
	    else {
	        // Unquoted
	        const match = /^[^\t\r\n\f >]+/.exec(context.source);
	        if (!match) {
	            return undefined;
	        }
	        const unexpectedChars = /["'<=`]/g;
	        let m;
	        while ((m = unexpectedChars.exec(match[0]))) {
	            emitError(context, 18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */, m.index);
	        }
	        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */);
	    }
	    return { content, isQuoted, loc: getSelection(context, start) };
	}
	function parseInterpolation(context, mode) {
	    const [open, close] = context.options.delimiters;
	    const closeIndex = context.source.indexOf(close, open.length);
	    if (closeIndex === -1) {
	        emitError(context, 25 /* X_MISSING_INTERPOLATION_END */);
	        return undefined;
	    }
	    const start = getCursor(context);
	    advanceBy(context, open.length);
	    const innerStart = getCursor(context);
	    const innerEnd = getCursor(context);
	    const rawContentLength = closeIndex - open.length;
	    const rawContent = context.source.slice(0, rawContentLength);
	    const preTrimContent = parseTextData(context, rawContentLength, mode);
	    const content = preTrimContent.trim();
	    const startOffset = preTrimContent.indexOf(content);
	    if (startOffset > 0) {
	        advancePositionWithMutation(innerStart, rawContent, startOffset);
	    }
	    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
	    advancePositionWithMutation(innerEnd, rawContent, endOffset);
	    advanceBy(context, close.length);
	    return {
	        type: 5 /* INTERPOLATION */,
	        content: {
	            type: 4 /* SIMPLE_EXPRESSION */,
	            isStatic: false,
	            // Set `isConstant` to false by default and will decide in transformExpression
	            constType: 0 /* NOT_CONSTANT */,
	            content,
	            loc: getSelection(context, innerStart, innerEnd)
	        },
	        loc: getSelection(context, start)
	    };
	}
	function parseText(context, mode) {
	    const endTokens = ['<', context.options.delimiters[0]];
	    if (mode === 3 /* CDATA */) {
	        endTokens.push(']]>');
	    }
	    let endIndex = context.source.length;
	    for (let i = 0; i < endTokens.length; i++) {
	        const index = context.source.indexOf(endTokens[i], 1);
	        if (index !== -1 && endIndex > index) {
	            endIndex = index;
	        }
	    }
	    const start = getCursor(context);
	    const content = parseTextData(context, endIndex, mode);
	    return {
	        type: 2 /* TEXT */,
	        content,
	        loc: getSelection(context, start)
	    };
	}
	/**
	 * Get text data with a given length from the current location.
	 * This translates HTML entities in the text data.
	 */
	function parseTextData(context, length, mode) {
	    const rawText = context.source.slice(0, length);
	    advanceBy(context, length);
	    if (mode === 2 /* RAWTEXT */ ||
	        mode === 3 /* CDATA */ ||
	        rawText.indexOf('&') === -1) {
	        return rawText;
	    }
	    else {
	        // DATA or RCDATA containing "&"". Entity decoding required.
	        return context.options.decodeEntities(rawText, mode === 4 /* ATTRIBUTE_VALUE */);
	    }
	}
	function getCursor(context) {
	    const { column, line, offset } = context;
	    return { column, line, offset };
	}
	function getSelection(context, start, end) {
	    end = end || getCursor(context);
	    return {
	        start,
	        end,
	        source: context.originalSource.slice(start.offset, end.offset)
	    };
	}
	function last(xs) {
	    return xs[xs.length - 1];
	}
	function startsWith(source, searchString) {
	    return source.startsWith(searchString);
	}
	function advanceBy(context, numberOfCharacters) {
	    const { source } = context;
	    advancePositionWithMutation(context, source, numberOfCharacters);
	    context.source = source.slice(numberOfCharacters);
	}
	function advanceSpaces(context) {
	    const match = /^[\t\r\n\f ]+/.exec(context.source);
	    if (match) {
	        advanceBy(context, match[0].length);
	    }
	}
	function getNewPosition(context, start, numberOfCharacters) {
	    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
	}
	function emitError(context, code, offset, loc = getCursor(context)) {
	    if (offset) {
	        loc.offset += offset;
	        loc.column += offset;
	    }
	    context.options.onError(createCompilerError(code, {
	        start: loc,
	        end: loc,
	        source: ''
	    }));
	}
	function isEnd(context, mode, ancestors) {
	    const s = context.source;
	    switch (mode) {
	        case 0 /* DATA */:
	            if (startsWith(s, '</')) {
	                // TODO: probably bad performance
	                for (let i = ancestors.length - 1; i >= 0; --i) {
	                    if (startsWithEndTagOpen(s, ancestors[i].tag)) {
	                        return true;
	                    }
	                }
	            }
	            break;
	        case 1 /* RCDATA */:
	        case 2 /* RAWTEXT */: {
	            const parent = last(ancestors);
	            if (parent && startsWithEndTagOpen(s, parent.tag)) {
	                return true;
	            }
	            break;
	        }
	        case 3 /* CDATA */:
	            if (startsWith(s, ']]>')) {
	                return true;
	            }
	            break;
	    }
	    return !s;
	}
	function startsWithEndTagOpen(source, tag) {
	    return (startsWith(source, '</') &&
	        source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() &&
	        /[\t\r\n\f />]/.test(source[2 + tag.length] || '>'));
	}

	function hoistStatic(root, context) {
	    walk$2(root, context, 
	    // Root node is unfortunately non-hoistable due to potential parent
	    // fallthrough attributes.
	    isSingleElementRoot(root, root.children[0]));
	}
	function isSingleElementRoot(root, child) {
	    const { children } = root;
	    return (children.length === 1 &&
	        child.type === 1 /* ELEMENT */ &&
	        !isSlotOutlet(child));
	}
	function walk$2(node, context, doNotHoistNode = false) {
	    let hasHoistedNode = false;
	    // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces
	    // static bindings with expressions. These expressions are guaranteed to be
	    // constant so they are still eligible for hoisting, but they are only
	    // available at runtime and therefore cannot be evaluated ahead of time.
	    // This is only a concern for pre-stringification (via transformHoist by
	    // @vue/compiler-dom), but doing it here allows us to perform only one full
	    // walk of the AST and allow `stringifyStatic` to stop walking as soon as its
	    // stringficiation threshold is met.
	    let canStringify = true;
	    const { children } = node;
	    for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        // only plain elements & text calls are eligible for hoisting.
	        if (child.type === 1 /* ELEMENT */ &&
	            child.tagType === 0 /* ELEMENT */) {
	            const constantType = doNotHoistNode
	                ? 0 /* NOT_CONSTANT */
	                : getConstantType(child, context);
	            if (constantType > 0 /* NOT_CONSTANT */) {
	                if (constantType < 3 /* CAN_STRINGIFY */) {
	                    canStringify = false;
	                }
	                if (constantType >= 2 /* CAN_HOIST */) {
	                    child.codegenNode.patchFlag =
	                        -1 /* HOISTED */ + (``);
	                    child.codegenNode = context.hoist(child.codegenNode);
	                    hasHoistedNode = true;
	                    continue;
	                }
	            }
	            else {
	                // node may contain dynamic children, but its props may be eligible for
	                // hoisting.
	                const codegenNode = child.codegenNode;
	                if (codegenNode.type === 13 /* VNODE_CALL */) {
	                    const flag = getPatchFlag(codegenNode);
	                    if ((!flag ||
	                        flag === 512 /* NEED_PATCH */ ||
	                        flag === 1 /* TEXT */) &&
	                        getGeneratedPropsConstantType(child, context) >=
	                            2 /* CAN_HOIST */) {
	                        const props = getNodeProps(child);
	                        if (props) {
	                            codegenNode.props = context.hoist(props);
	                        }
	                    }
	                }
	            }
	        }
	        else if (child.type === 12 /* TEXT_CALL */) {
	            const contentType = getConstantType(child.content, context);
	            if (contentType > 0) {
	                if (contentType < 3 /* CAN_STRINGIFY */) {
	                    canStringify = false;
	                }
	                if (contentType >= 2 /* CAN_HOIST */) {
	                    child.codegenNode = context.hoist(child.codegenNode);
	                    hasHoistedNode = true;
	                }
	            }
	        }
	        // walk further
	        if (child.type === 1 /* ELEMENT */) {
	            const isComponent = child.tagType === 1 /* COMPONENT */;
	            if (isComponent) {
	                context.scopes.vSlot++;
	            }
	            walk$2(child, context);
	            if (isComponent) {
	                context.scopes.vSlot--;
	            }
	        }
	        else if (child.type === 11 /* FOR */) {
	            // Do not hoist v-for single child because it has to be a block
	            walk$2(child, context, child.children.length === 1);
	        }
	        else if (child.type === 9 /* IF */) {
	            for (let i = 0; i < child.branches.length; i++) {
	                // Do not hoist v-if single child because it has to be a block
	                walk$2(child.branches[i], context, child.branches[i].children.length === 1);
	            }
	        }
	    }
	    if (canStringify && hasHoistedNode && context.transformHoist) {
	        context.transformHoist(children, context, node);
	    }
	}
	function getConstantType(node, context) {
	    const { constantCache } = context;
	    switch (node.type) {
	        case 1 /* ELEMENT */:
	            if (node.tagType !== 0 /* ELEMENT */) {
	                return 0 /* NOT_CONSTANT */;
	            }
	            const cached = constantCache.get(node);
	            if (cached !== undefined) {
	                return cached;
	            }
	            const codegenNode = node.codegenNode;
	            if (codegenNode.type !== 13 /* VNODE_CALL */) {
	                return 0 /* NOT_CONSTANT */;
	            }
	            const flag = getPatchFlag(codegenNode);
	            if (!flag) {
	                let returnType = 3 /* CAN_STRINGIFY */;
	                // Element itself has no patch flag. However we still need to check:
	                // 1. Even for a node with no patch flag, it is possible for it to contain
	                // non-hoistable expressions that refers to scope variables, e.g. compiler
	                // injected keys or cached event handlers. Therefore we need to always
	                // check the codegenNode's props to be sure.
	                const generatedPropsType = getGeneratedPropsConstantType(node, context);
	                if (generatedPropsType === 0 /* NOT_CONSTANT */) {
	                    constantCache.set(node, 0 /* NOT_CONSTANT */);
	                    return 0 /* NOT_CONSTANT */;
	                }
	                if (generatedPropsType < returnType) {
	                    returnType = generatedPropsType;
	                }
	                // 2. its children.
	                for (let i = 0; i < node.children.length; i++) {
	                    const childType = getConstantType(node.children[i], context);
	                    if (childType === 0 /* NOT_CONSTANT */) {
	                        constantCache.set(node, 0 /* NOT_CONSTANT */);
	                        return 0 /* NOT_CONSTANT */;
	                    }
	                    if (childType < returnType) {
	                        returnType = childType;
	                    }
	                }
	                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0
	                // type, check if any of the props can cause the type to be lowered
	                // we can skip can_patch because it's guaranteed by the absence of a
	                // patchFlag.
	                if (returnType > 1 /* CAN_SKIP_PATCH */) {
	                    for (let i = 0; i < node.props.length; i++) {
	                        const p = node.props[i];
	                        if (p.type === 7 /* DIRECTIVE */ && p.name === 'bind' && p.exp) {
	                            const expType = getConstantType(p.exp, context);
	                            if (expType === 0 /* NOT_CONSTANT */) {
	                                constantCache.set(node, 0 /* NOT_CONSTANT */);
	                                return 0 /* NOT_CONSTANT */;
	                            }
	                            if (expType < returnType) {
	                                returnType = expType;
	                            }
	                        }
	                    }
	                }
	                // only svg/foreignObject could be block here, however if they are
	                // static then they don't need to be blocks since there will be no
	                // nested updates.
	                if (codegenNode.isBlock) {
	                    context.removeHelper(OPEN_BLOCK);
	                    context.removeHelper(CREATE_BLOCK);
	                    codegenNode.isBlock = false;
	                    context.helper(CREATE_VNODE);
	                }
	                constantCache.set(node, returnType);
	                return returnType;
	            }
	            else {
	                constantCache.set(node, 0 /* NOT_CONSTANT */);
	                return 0 /* NOT_CONSTANT */;
	            }
	        case 2 /* TEXT */:
	        case 3 /* COMMENT */:
	            return 3 /* CAN_STRINGIFY */;
	        case 9 /* IF */:
	        case 11 /* FOR */:
	        case 10 /* IF_BRANCH */:
	            return 0 /* NOT_CONSTANT */;
	        case 5 /* INTERPOLATION */:
	        case 12 /* TEXT_CALL */:
	            return getConstantType(node.content, context);
	        case 4 /* SIMPLE_EXPRESSION */:
	            return node.constType;
	        case 8 /* COMPOUND_EXPRESSION */:
	            let returnType = 3 /* CAN_STRINGIFY */;
	            for (let i = 0; i < node.children.length; i++) {
	                const child = node.children[i];
	                if (isString$1(child) || isSymbol$1(child)) {
	                    continue;
	                }
	                const childType = getConstantType(child, context);
	                if (childType === 0 /* NOT_CONSTANT */) {
	                    return 0 /* NOT_CONSTANT */;
	                }
	                else if (childType < returnType) {
	                    returnType = childType;
	                }
	            }
	            return returnType;
	        default:
	            return 0 /* NOT_CONSTANT */;
	    }
	}
	function getGeneratedPropsConstantType(node, context) {
	    let returnType = 3 /* CAN_STRINGIFY */;
	    const props = getNodeProps(node);
	    if (props && props.type === 15 /* JS_OBJECT_EXPRESSION */) {
	        const { properties } = props;
	        for (let i = 0; i < properties.length; i++) {
	            const { key, value } = properties[i];
	            const keyType = getConstantType(key, context);
	            if (keyType === 0 /* NOT_CONSTANT */) {
	                return keyType;
	            }
	            if (keyType < returnType) {
	                returnType = keyType;
	            }
	            if (value.type !== 4 /* SIMPLE_EXPRESSION */) {
	                return 0 /* NOT_CONSTANT */;
	            }
	            const valueType = getConstantType(value, context);
	            if (valueType === 0 /* NOT_CONSTANT */) {
	                return valueType;
	            }
	            if (valueType < returnType) {
	                returnType = valueType;
	            }
	        }
	    }
	    return returnType;
	}
	function getNodeProps(node) {
	    const codegenNode = node.codegenNode;
	    if (codegenNode.type === 13 /* VNODE_CALL */) {
	        return codegenNode.props;
	    }
	}
	function getPatchFlag(node) {
	    const flag = node.patchFlag;
	    return flag ? parseInt(flag, 10) : undefined;
	}

	function createTransformContext(root, { filename = '', prefixIdentifiers = false, hoistStatic = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError }) {
	    const nameMatch = filename.replace(/\?.*$/, '').match(/([^/\\]+)\.\w+$/);
	    const context = {
	        // options
	        selfName: nameMatch && capitalize$2(camelize$1(nameMatch[1])),
	        prefixIdentifiers,
	        hoistStatic,
	        cacheHandlers,
	        nodeTransforms,
	        directiveTransforms,
	        transformHoist,
	        isBuiltInComponent,
	        isCustomElement,
	        expressionPlugins,
	        scopeId,
	        slotted,
	        ssr,
	        ssrCssVars,
	        bindingMetadata,
	        inline,
	        isTS,
	        onError,
	        // state
	        root,
	        helpers: new Map(),
	        components: new Set(),
	        directives: new Set(),
	        hoists: [],
	        imports: [],
	        constantCache: new Map(),
	        temps: 0,
	        cached: 0,
	        identifiers: Object.create(null),
	        scopes: {
	            vFor: 0,
	            vSlot: 0,
	            vPre: 0,
	            vOnce: 0
	        },
	        parent: null,
	        currentNode: root,
	        childIndex: 0,
	        // methods
	        helper(name) {
	            const count = context.helpers.get(name) || 0;
	            context.helpers.set(name, count + 1);
	            return name;
	        },
	        removeHelper(name) {
	            const count = context.helpers.get(name);
	            if (count) {
	                const currentCount = count - 1;
	                if (!currentCount) {
	                    context.helpers.delete(name);
	                }
	                else {
	                    context.helpers.set(name, currentCount);
	                }
	            }
	        },
	        helperString(name) {
	            return `_${helperNameMap[context.helper(name)]}`;
	        },
	        replaceNode(node) {
	            context.parent.children[context.childIndex] = context.currentNode = node;
	        },
	        removeNode(node) {
	            const list = context.parent.children;
	            const removalIndex = node
	                ? list.indexOf(node)
	                : context.currentNode
	                    ? context.childIndex
	                    : -1;
	            if (!node || node === context.currentNode) {
	                // current node removed
	                context.currentNode = null;
	                context.onNodeRemoved();
	            }
	            else {
	                // sibling node removed
	                if (context.childIndex > removalIndex) {
	                    context.childIndex--;
	                    context.onNodeRemoved();
	                }
	            }
	            context.parent.children.splice(removalIndex, 1);
	        },
	        onNodeRemoved: () => { },
	        addIdentifiers(exp) {
	        },
	        removeIdentifiers(exp) {
	        },
	        hoist(exp) {
	            context.hoists.push(exp);
	            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2 /* CAN_HOIST */);
	            identifier.hoisted = exp;
	            return identifier;
	        },
	        cache(exp, isVNode = false) {
	            return createCacheExpression(++context.cached, exp, isVNode);
	        }
	    };
	    return context;
	}
	function transform(root, options) {
	    const context = createTransformContext(root, options);
	    traverseNode(root, context);
	    if (options.hoistStatic) {
	        hoistStatic(root, context);
	    }
	    if (!options.ssr) {
	        createRootCodegen(root, context);
	    }
	    // finalize meta information
	    root.helpers = [...context.helpers.keys()];
	    root.components = [...context.components];
	    root.directives = [...context.directives];
	    root.imports = context.imports;
	    root.hoists = context.hoists;
	    root.temps = context.temps;
	    root.cached = context.cached;
	}
	function createRootCodegen(root, context) {
	    const { helper, removeHelper } = context;
	    const { children } = root;
	    if (children.length === 1) {
	        const child = children[0];
	        // if the single child is an element, turn it into a block.
	        if (isSingleElementRoot(root, child) && child.codegenNode) {
	            // single element root is never hoisted so codegenNode will never be
	            // SimpleExpressionNode
	            const codegenNode = child.codegenNode;
	            if (codegenNode.type === 13 /* VNODE_CALL */) {
	                if (!codegenNode.isBlock) {
	                    removeHelper(CREATE_VNODE);
	                    codegenNode.isBlock = true;
	                    helper(OPEN_BLOCK);
	                    helper(CREATE_BLOCK);
	                }
	            }
	            root.codegenNode = codegenNode;
	        }
	        else {
	            // - single <slot/>, IfNode, ForNode: already blocks.
	            // - single text node: always patched.
	            // root codegen falls through via genNode()
	            root.codegenNode = child;
	        }
	    }
	    else if (children.length > 1) {
	        // root has multiple nodes - return a fragment block.
	        let patchFlag = 64 /* STABLE_FRAGMENT */;
	        PatchFlagNames[64 /* STABLE_FRAGMENT */];
	        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + (``), undefined, undefined, true);
	    }
	    else ;
	}
	function traverseChildren(parent, context) {
	    let i = 0;
	    const nodeRemoved = () => {
	        i--;
	    };
	    for (; i < parent.children.length; i++) {
	        const child = parent.children[i];
	        if (isString$1(child))
	            continue;
	        context.parent = parent;
	        context.childIndex = i;
	        context.onNodeRemoved = nodeRemoved;
	        traverseNode(child, context);
	    }
	}
	function traverseNode(node, context) {
	    context.currentNode = node;
	    // apply transform plugins
	    const { nodeTransforms } = context;
	    const exitFns = [];
	    for (let i = 0; i < nodeTransforms.length; i++) {
	        const onExit = nodeTransforms[i](node, context);
	        if (onExit) {
	            if (isArray$1(onExit)) {
	                exitFns.push(...onExit);
	            }
	            else {
	                exitFns.push(onExit);
	            }
	        }
	        if (!context.currentNode) {
	            // node was removed
	            return;
	        }
	        else {
	            // node may have been replaced
	            node = context.currentNode;
	        }
	    }
	    switch (node.type) {
	        case 3 /* COMMENT */:
	            if (!context.ssr) {
	                // inject import for the Comment symbol, which is needed for creating
	                // comment nodes with `createVNode`
	                context.helper(CREATE_COMMENT);
	            }
	            break;
	        case 5 /* INTERPOLATION */:
	            // no need to traverse, but we need to inject toString helper
	            if (!context.ssr) {
	                context.helper(TO_DISPLAY_STRING);
	            }
	            break;
	        // for container types, further traverse downwards
	        case 9 /* IF */:
	            for (let i = 0; i < node.branches.length; i++) {
	                traverseNode(node.branches[i], context);
	            }
	            break;
	        case 10 /* IF_BRANCH */:
	        case 11 /* FOR */:
	        case 1 /* ELEMENT */:
	        case 0 /* ROOT */:
	            traverseChildren(node, context);
	            break;
	    }
	    // exit transforms
	    context.currentNode = node;
	    let i = exitFns.length;
	    while (i--) {
	        exitFns[i]();
	    }
	}
	function createStructuralDirectiveTransform(name, fn) {
	    const matches = isString$1(name)
	        ? (n) => n === name
	        : (n) => name.test(n);
	    return (node, context) => {
	        if (node.type === 1 /* ELEMENT */) {
	            const { props } = node;
	            // structural directive transforms are not concerned with slots
	            // as they are handled separately in vSlot.ts
	            if (node.tagType === 3 /* TEMPLATE */ && props.some(isVSlot)) {
	                return;
	            }
	            const exitFns = [];
	            for (let i = 0; i < props.length; i++) {
	                const prop = props[i];
	                if (prop.type === 7 /* DIRECTIVE */ && matches(prop.name)) {
	                    // structural directives are removed to avoid infinite recursion
	                    // also we remove them *before* applying so that it can further
	                    // traverse itself in case it moves the node around
	                    props.splice(i, 1);
	                    i--;
	                    const onExit = fn(node, prop, context);
	                    if (onExit)
	                        exitFns.push(onExit);
	                }
	            }
	            return exitFns;
	        }
	    };
	}

	const PURE_ANNOTATION = `/*#__PURE__*/`;
	function createCodegenContext(ast, { mode = 'function', prefixIdentifiers = mode === 'module', sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssr = false }) {
	    const context = {
	        mode,
	        prefixIdentifiers,
	        sourceMap,
	        filename,
	        scopeId,
	        optimizeImports,
	        runtimeGlobalName,
	        runtimeModuleName,
	        ssr,
	        source: ast.loc.source,
	        code: ``,
	        column: 1,
	        line: 1,
	        offset: 0,
	        indentLevel: 0,
	        pure: false,
	        map: undefined,
	        helper(key) {
	            return `_${helperNameMap[key]}`;
	        },
	        push(code, node) {
	            context.code += code;
	        },
	        indent() {
	            newline(++context.indentLevel);
	        },
	        deindent(withoutNewLine = false) {
	            if (withoutNewLine) {
	                --context.indentLevel;
	            }
	            else {
	                newline(--context.indentLevel);
	            }
	        },
	        newline() {
	            newline(context.indentLevel);
	        }
	    };
	    function newline(n) {
	        context.push('\n' + `  `.repeat(n));
	    }
	    return context;
	}
	function generate$2(ast, options = {}) {
	    const context = createCodegenContext(ast, options);
	    if (options.onContextCreated)
	        options.onContextCreated(context);
	    const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;
	    const hasHelpers = ast.helpers.length > 0;
	    const useWithBlock = !prefixIdentifiers && mode !== 'module';
	    // preambles
	    // in setup() inline mode, the preamble is generated in a sub context
	    // and returned separately.
	    const preambleContext = context;
	    {
	        genFunctionPreamble(ast, preambleContext);
	    }
	    // enter render function
	    const functionName = ssr ? `ssrRender` : `render`;
	    const args = ssr ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache'];
	    const signature = args.join(', ');
	    {
	        push(`function ${functionName}(${signature}) {`);
	    }
	    indent();
	    if (useWithBlock) {
	        push(`with (_ctx) {`);
	        indent();
	        // function mode const declarations should be inside with block
	        // also they should be renamed to avoid collision with user properties
	        if (hasHelpers) {
	            push(`const { ${ast.helpers
                .map(s => `${helperNameMap[s]}: _${helperNameMap[s]}`)
                .join(', ')} } = _Vue`);
	            push(`\n`);
	            newline();
	        }
	    }
	    // generate asset resolution statements
	    if (ast.components.length) {
	        genAssets(ast.components, 'component', context);
	        if (ast.directives.length || ast.temps > 0) {
	            newline();
	        }
	    }
	    if (ast.directives.length) {
	        genAssets(ast.directives, 'directive', context);
	        if (ast.temps > 0) {
	            newline();
	        }
	    }
	    if (ast.temps > 0) {
	        push(`let `);
	        for (let i = 0; i < ast.temps; i++) {
	            push(`${i > 0 ? `, ` : ``}_temp${i}`);
	        }
	    }
	    if (ast.components.length || ast.directives.length || ast.temps) {
	        push(`\n`);
	        newline();
	    }
	    // generate the VNode tree expression
	    if (!ssr) {
	        push(`return `);
	    }
	    if (ast.codegenNode) {
	        genNode(ast.codegenNode, context);
	    }
	    else {
	        push(`null`);
	    }
	    if (useWithBlock) {
	        deindent();
	        push(`}`);
	    }
	    deindent();
	    push(`}`);
	    return {
	        ast,
	        code: context.code,
	        preamble: ``,
	        // SourceMapGenerator does have toJSON() method but it's not in the types
	        map: context.map ? context.map.toJSON() : undefined
	    };
	}
	function genFunctionPreamble(ast, context) {
	    const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName } = context;
	    const VueBinding = runtimeGlobalName;
	    const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
	    // Generate const declaration for helpers
	    // In prefix mode, we place the const declaration at top so it's done
	    // only once; But if we not prefixing, we place the declaration inside the
	    // with block so it doesn't incur the `in` check cost for every helper access.
	    if (ast.helpers.length > 0) {
	        {
	            // "with" mode.
	            // save Vue in a separate variable to avoid collision
	            push(`const _Vue = ${VueBinding}\n`);
	            // in "with" mode, helpers are declared inside the with block to avoid
	            // has check cost, but hoists are lifted out of the function - we need
	            // to provide the helper here.
	            if (ast.hoists.length) {
	                const staticHelpers = [
	                    CREATE_VNODE,
	                    CREATE_COMMENT,
	                    CREATE_TEXT,
	                    CREATE_STATIC
	                ]
	                    .filter(helper => ast.helpers.includes(helper))
	                    .map(aliasHelper)
	                    .join(', ');
	                push(`const { ${staticHelpers} } = _Vue\n`);
	            }
	        }
	    }
	    genHoists(ast.hoists, context);
	    newline();
	    push(`return `);
	}
	function genAssets(assets, type, { helper, push, newline }) {
	    const resolver = helper(type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
	    for (let i = 0; i < assets.length; i++) {
	        let id = assets[i];
	        // potential component implicit self-reference inferred from SFC filename
	        const maybeSelfReference = id.endsWith('__self');
	        if (maybeSelfReference) {
	            id = id.slice(0, -6);
	        }
	        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})`);
	        if (i < assets.length - 1) {
	            newline();
	        }
	    }
	}
	function genHoists(hoists, context) {
	    if (!hoists.length) {
	        return;
	    }
	    context.pure = true;
	    const { push, newline, helper, scopeId, mode } = context;
	    newline();
	    hoists.forEach((exp, i) => {
	        if (exp) {
	            push(`const _hoisted_${i + 1} = `);
	            genNode(exp, context);
	            newline();
	        }
	    });
	    context.pure = false;
	}
	function genNodeListAsArray(nodes, context) {
	    const multilines = nodes.length > 3 ||
	        ((("production" !== 'production')) );
	    context.push(`[`);
	    multilines && context.indent();
	    genNodeList(nodes, context, multilines);
	    multilines && context.deindent();
	    context.push(`]`);
	}
	function genNodeList(nodes, context, multilines = false, comma = true) {
	    const { push, newline } = context;
	    for (let i = 0; i < nodes.length; i++) {
	        const node = nodes[i];
	        if (isString$1(node)) {
	            push(node);
	        }
	        else if (isArray$1(node)) {
	            genNodeListAsArray(node, context);
	        }
	        else {
	            genNode(node, context);
	        }
	        if (i < nodes.length - 1) {
	            if (multilines) {
	                comma && push(',');
	                newline();
	            }
	            else {
	                comma && push(', ');
	            }
	        }
	    }
	}
	function genNode(node, context) {
	    if (isString$1(node)) {
	        context.push(node);
	        return;
	    }
	    if (isSymbol$1(node)) {
	        context.push(context.helper(node));
	        return;
	    }
	    switch (node.type) {
	        case 1 /* ELEMENT */:
	        case 9 /* IF */:
	        case 11 /* FOR */:
	            genNode(node.codegenNode, context);
	            break;
	        case 2 /* TEXT */:
	            genText(node, context);
	            break;
	        case 4 /* SIMPLE_EXPRESSION */:
	            genExpression(node, context);
	            break;
	        case 5 /* INTERPOLATION */:
	            genInterpolation(node, context);
	            break;
	        case 12 /* TEXT_CALL */:
	            genNode(node.codegenNode, context);
	            break;
	        case 8 /* COMPOUND_EXPRESSION */:
	            genCompoundExpression(node, context);
	            break;
	        case 3 /* COMMENT */:
	            break;
	        case 13 /* VNODE_CALL */:
	            genVNodeCall(node, context);
	            break;
	        case 14 /* JS_CALL_EXPRESSION */:
	            genCallExpression(node, context);
	            break;
	        case 15 /* JS_OBJECT_EXPRESSION */:
	            genObjectExpression(node, context);
	            break;
	        case 17 /* JS_ARRAY_EXPRESSION */:
	            genArrayExpression(node, context);
	            break;
	        case 18 /* JS_FUNCTION_EXPRESSION */:
	            genFunctionExpression(node, context);
	            break;
	        case 19 /* JS_CONDITIONAL_EXPRESSION */:
	            genConditionalExpression(node, context);
	            break;
	        case 20 /* JS_CACHE_EXPRESSION */:
	            genCacheExpression(node, context);
	            break;
	    }
	}
	function genText(node, context) {
	    context.push(JSON.stringify(node.content), node);
	}
	function genExpression(node, context) {
	    const { content, isStatic } = node;
	    context.push(isStatic ? JSON.stringify(content) : content, node);
	}
	function genInterpolation(node, context) {
	    const { push, helper, pure } = context;
	    if (pure)
	        push(PURE_ANNOTATION);
	    push(`${helper(TO_DISPLAY_STRING)}(`);
	    genNode(node.content, context);
	    push(`)`);
	}
	function genCompoundExpression(node, context) {
	    for (let i = 0; i < node.children.length; i++) {
	        const child = node.children[i];
	        if (isString$1(child)) {
	            context.push(child);
	        }
	        else {
	            genNode(child, context);
	        }
	    }
	}
	function genExpressionAsPropertyKey(node, context) {
	    const { push } = context;
	    if (node.type === 8 /* COMPOUND_EXPRESSION */) {
	        push(`[`);
	        genCompoundExpression(node, context);
	        push(`]`);
	    }
	    else if (node.isStatic) {
	        // only quote keys if necessary
	        const text = isSimpleIdentifier(node.content)
	            ? node.content
	            : JSON.stringify(node.content);
	        push(text, node);
	    }
	    else {
	        push(`[${node.content}]`, node);
	    }
	}
	function genVNodeCall(node, context) {
	    const { push, helper, pure } = context;
	    const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking } = node;
	    if (directives) {
	        push(helper(WITH_DIRECTIVES) + `(`);
	    }
	    if (isBlock) {
	        push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
	    }
	    if (pure) {
	        push(PURE_ANNOTATION);
	    }
	    push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + `(`, node);
	    genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);
	    push(`)`);
	    if (isBlock) {
	        push(`)`);
	    }
	    if (directives) {
	        push(`, `);
	        genNode(directives, context);
	        push(`)`);
	    }
	}
	function genNullableArgs(args) {
	    let i = args.length;
	    while (i--) {
	        if (args[i] != null)
	            break;
	    }
	    return args.slice(0, i + 1).map(arg => arg || `null`);
	}
	// JavaScript
	function genCallExpression(node, context) {
	    const { push, helper, pure } = context;
	    const callee = isString$1(node.callee) ? node.callee : helper(node.callee);
	    if (pure) {
	        push(PURE_ANNOTATION);
	    }
	    push(callee + `(`, node);
	    genNodeList(node.arguments, context);
	    push(`)`);
	}
	function genObjectExpression(node, context) {
	    const { push, indent, deindent, newline } = context;
	    const { properties } = node;
	    if (!properties.length) {
	        push(`{}`, node);
	        return;
	    }
	    const multilines = properties.length > 1 ||
	        ((("production" !== 'production')) );
	    push(multilines ? `{` : `{ `);
	    multilines && indent();
	    for (let i = 0; i < properties.length; i++) {
	        const { key, value } = properties[i];
	        // key
	        genExpressionAsPropertyKey(key, context);
	        push(`: `);
	        // value
	        genNode(value, context);
	        if (i < properties.length - 1) {
	            // will only reach this if it's multilines
	            push(`,`);
	            newline();
	        }
	    }
	    multilines && deindent();
	    push(multilines ? `}` : ` }`);
	}
	function genArrayExpression(node, context) {
	    genNodeListAsArray(node.elements, context);
	}
	function genFunctionExpression(node, context) {
	    const { push, indent, deindent, scopeId, mode } = context;
	    const { params, returns, body, newline, isSlot } = node;
	    if (isSlot) {
	        // wrap slot functions with owner context
	        push(`_${helperNameMap[WITH_CTX]}(`);
	    }
	    push(`(`, node);
	    if (isArray$1(params)) {
	        genNodeList(params, context);
	    }
	    else if (params) {
	        genNode(params, context);
	    }
	    push(`) => `);
	    if (newline || body) {
	        push(`{`);
	        indent();
	    }
	    if (returns) {
	        if (newline) {
	            push(`return `);
	        }
	        if (isArray$1(returns)) {
	            genNodeListAsArray(returns, context);
	        }
	        else {
	            genNode(returns, context);
	        }
	    }
	    else if (body) {
	        genNode(body, context);
	    }
	    if (newline || body) {
	        deindent();
	        push(`}`);
	    }
	    if (isSlot) {
	        push(`)`);
	    }
	}
	function genConditionalExpression(node, context) {
	    const { test, consequent, alternate, newline: needNewline } = node;
	    const { push, indent, deindent, newline } = context;
	    if (test.type === 4 /* SIMPLE_EXPRESSION */) {
	        const needsParens = !isSimpleIdentifier(test.content);
	        needsParens && push(`(`);
	        genExpression(test, context);
	        needsParens && push(`)`);
	    }
	    else {
	        push(`(`);
	        genNode(test, context);
	        push(`)`);
	    }
	    needNewline && indent();
	    context.indentLevel++;
	    needNewline || push(` `);
	    push(`? `);
	    genNode(consequent, context);
	    context.indentLevel--;
	    needNewline && newline();
	    needNewline || push(` `);
	    push(`: `);
	    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */;
	    if (!isNested) {
	        context.indentLevel++;
	    }
	    genNode(alternate, context);
	    if (!isNested) {
	        context.indentLevel--;
	    }
	    needNewline && deindent(true /* without newline */);
	}
	function genCacheExpression(node, context) {
	    const { push, helper, indent, deindent, newline } = context;
	    push(`_cache[${node.index}] || (`);
	    if (node.isVNode) {
	        indent();
	        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
	        newline();
	    }
	    push(`_cache[${node.index}] = `);
	    genNode(node.value, context);
	    if (node.isVNode) {
	        push(`,`);
	        newline();
	        push(`${helper(SET_BLOCK_TRACKING)}(1),`);
	        newline();
	        push(`_cache[${node.index}]`);
	        deindent();
	    }
	    push(`)`);
	}

	// these keywords should not appear inside expressions, but operators like
	// typeof, instanceof and in are allowed
	new RegExp('\\b' +
	    ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
	        'super,throw,while,yield,delete,export,import,return,switch,default,' +
	        'extends,finally,continue,debugger,function,arguments,typeof,void')
	        .split(',')
	        .join('\\b|\\b') +
	    '\\b');

	const transformExpression = (node, context) => {
	    if (node.type === 5 /* INTERPOLATION */) {
	        node.content = processExpression(node.content);
	    }
	    else if (node.type === 1 /* ELEMENT */) {
	        // handle directives on element
	        for (let i = 0; i < node.props.length; i++) {
	            const dir = node.props[i];
	            // do not process for v-on & v-for since they are special handled
	            if (dir.type === 7 /* DIRECTIVE */ && dir.name !== 'for') {
	                const exp = dir.exp;
	                const arg = dir.arg;
	                // do not process exp if this is v-on:arg - we need special handling
	                // for wrapping inline statements.
	                if (exp &&
	                    exp.type === 4 /* SIMPLE_EXPRESSION */ &&
	                    !(dir.name === 'on' && arg)) {
	                    dir.exp = processExpression(exp, context, 
	                    // slot args must be processed as function params
	                    dir.name === 'slot');
	                }
	                if (arg && arg.type === 4 /* SIMPLE_EXPRESSION */ && !arg.isStatic) {
	                    dir.arg = processExpression(arg);
	                }
	            }
	        }
	    }
	};
	// Important: since this function uses Node.js only dependencies, it should
	// always be used with a leading !true check so that it can be
	// tree-shaken from the browser build.
	function processExpression(node, context, 
	// some expressions like v-slot props & v-for aliases should be parsed as
	// function params
	asParams = false, 
	// v-on handler values may contain multiple statements
	asRawStatements = false) {
	    {
	        return node;
	    }
	}

	const transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {
	    return processIf(node, dir, context, (ifNode, branch, isRoot) => {
	        // #1587: We need to dynamically increment the key based on the current
	        // node's sibling nodes, since chained v-if/else branches are
	        // rendered at the same depth
	        const siblings = context.parent.children;
	        let i = siblings.indexOf(ifNode);
	        let key = 0;
	        while (i-- >= 0) {
	            const sibling = siblings[i];
	            if (sibling && sibling.type === 9 /* IF */) {
	                key += sibling.branches.length;
	            }
	        }
	        // Exit callback. Complete the codegenNode when all children have been
	        // transformed.
	        return () => {
	            if (isRoot) {
	                ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
	            }
	            else {
	                // attach this branch's codegen node to the v-if root.
	                const parentCondition = getParentCondition(ifNode.codegenNode);
	                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
	            }
	        };
	    });
	});
	// target-agnostic transform used for both Client and SSR
	function processIf(node, dir, context, processCodegen) {
	    if (dir.name !== 'else' &&
	        (!dir.exp || !dir.exp.content.trim())) {
	        const loc = dir.exp ? dir.exp.loc : node.loc;
	        context.onError(createCompilerError(27 /* X_V_IF_NO_EXPRESSION */, dir.loc));
	        dir.exp = createSimpleExpression(`true`, false, loc);
	    }
	    if (dir.name === 'if') {
	        const branch = createIfBranch(node, dir);
	        const ifNode = {
	            type: 9 /* IF */,
	            loc: node.loc,
	            branches: [branch]
	        };
	        context.replaceNode(ifNode);
	        if (processCodegen) {
	            return processCodegen(ifNode, branch, true);
	        }
	    }
	    else {
	        // locate the adjacent v-if
	        const siblings = context.parent.children;
	        let i = siblings.indexOf(node);
	        while (i-- >= -1) {
	            const sibling = siblings[i];
	            if (sibling &&
	                sibling.type === 2 /* TEXT */ &&
	                !sibling.content.trim().length) {
	                context.removeNode(sibling);
	                continue;
	            }
	            if (sibling && sibling.type === 9 /* IF */) {
	                // move the node to the if node's branches
	                context.removeNode();
	                const branch = createIfBranch(node, dir);
	                sibling.branches.push(branch);
	                const onExit = processCodegen && processCodegen(sibling, branch, false);
	                // since the branch was removed, it will not be traversed.
	                // make sure to traverse here.
	                traverseNode(branch, context);
	                // call on exit
	                if (onExit)
	                    onExit();
	                // make sure to reset currentNode after traversal to indicate this
	                // node has been removed.
	                context.currentNode = null;
	            }
	            else {
	                context.onError(createCompilerError(29 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));
	            }
	            break;
	        }
	    }
	}
	function createIfBranch(node, dir) {
	    return {
	        type: 10 /* IF_BRANCH */,
	        loc: node.loc,
	        condition: dir.name === 'else' ? undefined : dir.exp,
	        children: node.tagType === 3 /* TEMPLATE */ && !findDir(node, 'for')
	            ? node.children
	            : [node],
	        userKey: findProp(node, `key`)
	    };
	}
	function createCodegenNodeForBranch(branch, keyIndex, context) {
	    if (branch.condition) {
	        return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), 
	        // make sure to pass in asBlock: true so that the comment node call
	        // closes the current block.
	        createCallExpression(context.helper(CREATE_COMMENT), [
	            '""',
	            'true'
	        ]));
	    }
	    else {
	        return createChildrenCodegenNode(branch, keyIndex, context);
	    }
	}
	function createChildrenCodegenNode(branch, keyIndex, context) {
	    const { helper, removeHelper } = context;
	    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2 /* CAN_HOIST */));
	    const { children } = branch;
	    const firstChild = children[0];
	    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1 /* ELEMENT */;
	    if (needFragmentWrapper) {
	        if (children.length === 1 && firstChild.type === 11 /* FOR */) {
	            // optimize away nested fragments when child is a ForNode
	            const vnodeCall = firstChild.codegenNode;
	            injectProp(vnodeCall, keyProperty, context);
	            return vnodeCall;
	        }
	        else {
	            let patchFlag = 64 /* STABLE_FRAGMENT */;
	            PatchFlagNames[64 /* STABLE_FRAGMENT */];
	            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + (``), undefined, undefined, true, false, branch.loc);
	        }
	    }
	    else {
	        const vnodeCall = firstChild
	            .codegenNode;
	        // Change createVNode to createBlock.
	        if (vnodeCall.type === 13 /* VNODE_CALL */ && !vnodeCall.isBlock) {
	            removeHelper(CREATE_VNODE);
	            vnodeCall.isBlock = true;
	            helper(OPEN_BLOCK);
	            helper(CREATE_BLOCK);
	        }
	        // inject branch key
	        injectProp(vnodeCall, keyProperty, context);
	        return vnodeCall;
	    }
	}
	function getParentCondition(node) {
	    while (true) {
	        if (node.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {
	            if (node.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {
	                node = node.alternate;
	            }
	            else {
	                return node;
	            }
	        }
	        else if (node.type === 20 /* JS_CACHE_EXPRESSION */) {
	            node = node.value;
	        }
	    }
	}

	const transformFor = createStructuralDirectiveTransform('for', (node, dir, context) => {
	    const { helper, removeHelper } = context;
	    return processFor(node, dir, context, forNode => {
	        // create the loop render function expression now, and add the
	        // iterator on exit after all children have been traversed
	        const renderExp = createCallExpression(helper(RENDER_LIST), [
	            forNode.source
	        ]);
	        const keyProp = findProp(node, `key`);
	        const keyProperty = keyProp
	            ? createObjectProperty(`key`, keyProp.type === 6 /* ATTRIBUTE */
	                ? createSimpleExpression(keyProp.value.content, true)
	                : keyProp.exp)
	            : null;
	        const isStableFragment = forNode.source.type === 4 /* SIMPLE_EXPRESSION */ &&
	            forNode.source.constType > 0 /* NOT_CONSTANT */;
	        const fragmentFlag = isStableFragment
	            ? 64 /* STABLE_FRAGMENT */
	            : keyProp
	                ? 128 /* KEYED_FRAGMENT */
	                : 256 /* UNKEYED_FRAGMENT */;
	        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag +
	            (``), undefined, undefined, true /* isBlock */, !isStableFragment /* disableTracking */, node.loc);
	        return () => {
	            // finish the codegen now that all children have been traversed
	            let childBlock;
	            const isTemplate = isTemplateNode(node);
	            const { children } = forNode;
	            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1 /* ELEMENT */;
	            const slotOutlet = isSlotOutlet(node)
	                ? node
	                : isTemplate &&
	                    node.children.length === 1 &&
	                    isSlotOutlet(node.children[0])
	                    ? node.children[0] // api-extractor somehow fails to infer this
	                    : null;
	            if (slotOutlet) {
	                // <slot v-for="..."> or <template v-for="..."><slot/></template>
	                childBlock = slotOutlet.codegenNode;
	                if (isTemplate && keyProperty) {
	                    // <template v-for="..." :key="..."><slot/></template>
	                    // we need to inject the key to the renderSlot() call.
	                    // the props for renderSlot is passed as the 3rd argument.
	                    injectProp(childBlock, keyProperty, context);
	                }
	            }
	            else if (needFragmentWrapper) {
	                // <template v-for="..."> with text or multi-elements
	                // should generate a fragment block for each loop
	                childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : undefined, node.children, 64 /* STABLE_FRAGMENT */ +
	                    (``), undefined, undefined, true);
	            }
	            else {
	                // Normal element v-for. Directly use the child's codegenNode
	                // but mark it as a block.
	                childBlock = children[0]
	                    .codegenNode;
	                if (isTemplate && keyProperty) {
	                    injectProp(childBlock, keyProperty, context);
	                }
	                if (childBlock.isBlock !== !isStableFragment) {
	                    if (childBlock.isBlock) {
	                        // switch from block to vnode
	                        removeHelper(OPEN_BLOCK);
	                        removeHelper(CREATE_BLOCK);
	                    }
	                    else {
	                        // switch from vnode to block
	                        removeHelper(CREATE_VNODE);
	                    }
	                }
	                childBlock.isBlock = !isStableFragment;
	                if (childBlock.isBlock) {
	                    helper(OPEN_BLOCK);
	                    helper(CREATE_BLOCK);
	                }
	                else {
	                    helper(CREATE_VNODE);
	                }
	            }
	            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true /* force newline */));
	        };
	    });
	});
	// target-agnostic transform used for both Client and SSR
	function processFor(node, dir, context, processCodegen) {
	    if (!dir.exp) {
	        context.onError(createCompilerError(30 /* X_V_FOR_NO_EXPRESSION */, dir.loc));
	        return;
	    }
	    const parseResult = parseForExpression(
	    // can only be simple expression because vFor transform is applied
	    // before expression transform.
	    dir.exp);
	    if (!parseResult) {
	        context.onError(createCompilerError(31 /* X_V_FOR_MALFORMED_EXPRESSION */, dir.loc));
	        return;
	    }
	    const { addIdentifiers, removeIdentifiers, scopes } = context;
	    const { source, value, key, index } = parseResult;
	    const forNode = {
	        type: 11 /* FOR */,
	        loc: dir.loc,
	        source,
	        valueAlias: value,
	        keyAlias: key,
	        objectIndexAlias: index,
	        parseResult,
	        children: isTemplateNode(node) ? node.children : [node]
	    };
	    context.replaceNode(forNode);
	    // bookkeeping
	    scopes.vFor++;
	    const onExit = processCodegen && processCodegen(forNode);
	    return () => {
	        scopes.vFor--;
	        if (onExit)
	            onExit();
	    };
	}
	const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
	// This regex doesn't cover the case if key or index aliases have destructuring,
	// but those do not make sense in the first place, so this works in practice.
	const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
	const stripParensRE = /^\(|\)$/g;
	function parseForExpression(input, context) {
	    const loc = input.loc;
	    const exp = input.content;
	    const inMatch = exp.match(forAliasRE);
	    if (!inMatch)
	        return;
	    const [, LHS, RHS] = inMatch;
	    const result = {
	        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
	        value: undefined,
	        key: undefined,
	        index: undefined
	    };
	    let valueContent = LHS.trim()
	        .replace(stripParensRE, '')
	        .trim();
	    const trimmedOffset = LHS.indexOf(valueContent);
	    const iteratorMatch = valueContent.match(forIteratorRE);
	    if (iteratorMatch) {
	        valueContent = valueContent.replace(forIteratorRE, '').trim();
	        const keyContent = iteratorMatch[1].trim();
	        let keyOffset;
	        if (keyContent) {
	            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
	            result.key = createAliasExpression(loc, keyContent, keyOffset);
	        }
	        if (iteratorMatch[2]) {
	            const indexContent = iteratorMatch[2].trim();
	            if (indexContent) {
	                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key
	                    ? keyOffset + keyContent.length
	                    : trimmedOffset + valueContent.length));
	            }
	        }
	    }
	    if (valueContent) {
	        result.value = createAliasExpression(loc, valueContent, trimmedOffset);
	    }
	    return result;
	}
	function createAliasExpression(range, content, offset) {
	    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));
	}
	function createForLoopParams({ value, key, index }) {
	    const params = [];
	    if (value) {
	        params.push(value);
	    }
	    if (key) {
	        if (!value) {
	            params.push(createSimpleExpression(`_`, false));
	        }
	        params.push(key);
	    }
	    if (index) {
	        if (!key) {
	            if (!value) {
	                params.push(createSimpleExpression(`_`, false));
	            }
	            params.push(createSimpleExpression(`__`, false));
	        }
	        params.push(index);
	    }
	    return params;
	}

	const defaultFallback = createSimpleExpression(`undefined`, false);
	// A NodeTransform that:
	// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed
	//    by transformExpression. This is only applied in non-browser builds with
	//    { prefixIdentifiers: true }.
	// 2. Track v-slot depths so that we know a slot is inside another slot.
	//    Note the exit callback is executed before buildSlots() on the same node,
	//    so only nested slots see positive numbers.
	const trackSlotScopes = (node, context) => {
	    if (node.type === 1 /* ELEMENT */ &&
	        (node.tagType === 1 /* COMPONENT */ ||
	            node.tagType === 3 /* TEMPLATE */)) {
	        // We are only checking non-empty v-slot here
	        // since we only care about slots that introduce scope variables.
	        const vSlot = findDir(node, 'slot');
	        if (vSlot) {
	            vSlot.exp;
	            context.scopes.vSlot++;
	            return () => {
	                context.scopes.vSlot--;
	            };
	        }
	    }
	};
	// A NodeTransform that tracks scope identifiers for scoped slots with v-for.
	// This transform is only applied in non-browser builds with { prefixIdentifiers: true }
	const trackVForSlotScopes = (node, context) => {
	    let vFor;
	    if (isTemplateNode(node) &&
	        node.props.some(isVSlot) &&
	        (vFor = findDir(node, 'for'))) {
	        const result = (vFor.parseResult = parseForExpression(vFor.exp));
	        if (result) {
	            const { value, key, index } = result;
	            const { addIdentifiers, removeIdentifiers } = context;
	            value && addIdentifiers(value);
	            key && addIdentifiers(key);
	            index && addIdentifiers(index);
	            return () => {
	                value && removeIdentifiers(value);
	                key && removeIdentifiers(key);
	                index && removeIdentifiers(index);
	            };
	        }
	    }
	};
	const buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false /* newline */, true /* isSlot */, children.length ? children[0].loc : loc);
	// Instead of being a DirectiveTransform, v-slot processing is called during
	// transformElement to build the slots object for a component.
	function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
	    context.helper(WITH_CTX);
	    const { children, loc } = node;
	    const slotsProperties = [];
	    const dynamicSlots = [];
	    const buildDefaultSlotProperty = (props, children) => createObjectProperty(`default`, buildSlotFn(props, children, loc));
	    // If the slot is inside a v-for or another v-slot, force it to be dynamic
	    // since it likely uses a scope variable.
	    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
	    // 1. Check for slot with slotProps on component itself.
	    //    <Comp v-slot="{ prop }"/>
	    const onComponentSlot = findDir(node, 'slot', true);
	    if (onComponentSlot) {
	        const { arg, exp } = onComponentSlot;
	        if (arg && !isStaticExp(arg)) {
	            hasDynamicSlots = true;
	        }
	        slotsProperties.push(createObjectProperty(arg || createSimpleExpression('default', true), buildSlotFn(exp, children, loc)));
	    }
	    // 2. Iterate through children and check for template slots
	    //    <template v-slot:foo="{ prop }">
	    let hasTemplateSlots = false;
	    let hasNamedDefaultSlot = false;
	    const implicitDefaultChildren = [];
	    const seenSlotNames = new Set();
	    for (let i = 0; i < children.length; i++) {
	        const slotElement = children[i];
	        let slotDir;
	        if (!isTemplateNode(slotElement) ||
	            !(slotDir = findDir(slotElement, 'slot', true))) {
	            // not a <template v-slot>, skip.
	            if (slotElement.type !== 3 /* COMMENT */) {
	                implicitDefaultChildren.push(slotElement);
	            }
	            continue;
	        }
	        if (onComponentSlot) {
	            // already has on-component slot - this is incorrect usage.
	            context.onError(createCompilerError(36 /* X_V_SLOT_MIXED_SLOT_USAGE */, slotDir.loc));
	            break;
	        }
	        hasTemplateSlots = true;
	        const { children: slotChildren, loc: slotLoc } = slotElement;
	        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
	        // check if name is dynamic.
	        let staticSlotName;
	        if (isStaticExp(slotName)) {
	            staticSlotName = slotName ? slotName.content : `default`;
	        }
	        else {
	            hasDynamicSlots = true;
	        }
	        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
	        // check if this slot is conditional (v-if/v-for)
	        let vIf;
	        let vElse;
	        let vFor;
	        if ((vIf = findDir(slotElement, 'if'))) {
	            hasDynamicSlots = true;
	            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
	        }
	        else if ((vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))) {
	            // find adjacent v-if
	            let j = i;
	            let prev;
	            while (j--) {
	                prev = children[j];
	                if (prev.type !== 3 /* COMMENT */) {
	                    break;
	                }
	            }
	            if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {
	                // remove node
	                children.splice(i, 1);
	                i--;
	                // attach this slot to previous conditional
	                let conditional = dynamicSlots[dynamicSlots.length - 1];
	                while (conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {
	                    conditional = conditional.alternate;
	                }
	                conditional.alternate = vElse.exp
	                    ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback)
	                    : buildDynamicSlot(slotName, slotFunction);
	            }
	            else {
	                context.onError(createCompilerError(29 /* X_V_ELSE_NO_ADJACENT_IF */, vElse.loc));
	            }
	        }
	        else if ((vFor = findDir(slotElement, 'for'))) {
	            hasDynamicSlots = true;
	            const parseResult = vFor.parseResult ||
	                parseForExpression(vFor.exp);
	            if (parseResult) {
	                // Render the dynamic slots as an array and add it to the createSlot()
	                // args. The runtime knows how to handle it appropriately.
	                dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
	                    parseResult.source,
	                    createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true /* force newline */)
	                ]));
	            }
	            else {
	                context.onError(createCompilerError(31 /* X_V_FOR_MALFORMED_EXPRESSION */, vFor.loc));
	            }
	        }
	        else {
	            // check duplicate static names
	            if (staticSlotName) {
	                if (seenSlotNames.has(staticSlotName)) {
	                    context.onError(createCompilerError(37 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */, dirLoc));
	                    continue;
	                }
	                seenSlotNames.add(staticSlotName);
	                if (staticSlotName === 'default') {
	                    hasNamedDefaultSlot = true;
	                }
	            }
	            slotsProperties.push(createObjectProperty(slotName, slotFunction));
	        }
	    }
	    if (!onComponentSlot) {
	        if (!hasTemplateSlots) {
	            // implicit default slot (on component)
	            slotsProperties.push(buildDefaultSlotProperty(undefined, children));
	        }
	        else if (implicitDefaultChildren.length) {
	            // implicit default slot (mixed with named slots)
	            if (hasNamedDefaultSlot) {
	                context.onError(createCompilerError(38 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */, implicitDefaultChildren[0].loc));
	            }
	            else {
	                slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));
	            }
	        }
	    }
	    const slotFlag = hasDynamicSlots
	        ? 2 /* DYNAMIC */
	        : hasForwardedSlots(node.children)
	            ? 3 /* FORWARDED */
	            : 1 /* STABLE */;
	    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, 
	    // 2 = compiled but dynamic = can skip normalization, but must run diff
	    // 1 = compiled and static = can skip normalization AND diff as optimized
	    createSimpleExpression(slotFlag + (``), false))), loc);
	    if (dynamicSlots.length) {
	        slots = createCallExpression(context.helper(CREATE_SLOTS), [
	            slots,
	            createArrayExpression(dynamicSlots)
	        ]);
	    }
	    return {
	        slots,
	        hasDynamicSlots
	    };
	}
	function buildDynamicSlot(name, fn) {
	    return createObjectExpression([
	        createObjectProperty(`name`, name),
	        createObjectProperty(`fn`, fn)
	    ]);
	}
	function hasForwardedSlots(children) {
	    for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        switch (child.type) {
	            case 1 /* ELEMENT */:
	                if (child.tagType === 2 /* SLOT */ ||
	                    (child.tagType === 0 /* ELEMENT */ &&
	                        hasForwardedSlots(child.children))) {
	                    return true;
	                }
	                break;
	            case 9 /* IF */:
	                if (hasForwardedSlots(child.branches))
	                    return true;
	                break;
	            case 10 /* IF_BRANCH */:
	            case 11 /* FOR */:
	                if (hasForwardedSlots(child.children))
	                    return true;
	                break;
	        }
	    }
	    return false;
	}

	// some directive transforms (e.g. v-model) may return a symbol for runtime
	// import, which should be used instead of a resolveDirective call.
	const directiveImportMap = new WeakMap();
	// generate a JavaScript AST for this element's codegen
	const transformElement = (node, context) => {
	    // perform the work on exit, after all child expressions have been
	    // processed and merged.
	    return function postTransformElement() {
	        node = context.currentNode;
	        if (!(node.type === 1 /* ELEMENT */ &&
	            (node.tagType === 0 /* ELEMENT */ ||
	                node.tagType === 1 /* COMPONENT */))) {
	            return;
	        }
	        const { tag, props } = node;
	        const isComponent = node.tagType === 1 /* COMPONENT */;
	        // The goal of the transform is to create a codegenNode implementing the
	        // VNodeCall interface.
	        const vnodeTag = isComponent
	            ? resolveComponentType(node, context)
	            : `"${tag}"`;
	        const isDynamicComponent = isObject$2(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
	        let vnodeProps;
	        let vnodeChildren;
	        let vnodePatchFlag;
	        let patchFlag = 0;
	        let vnodeDynamicProps;
	        let dynamicPropNames;
	        let vnodeDirectives;
	        let shouldUseBlock = 
	        // dynamic component may resolve to plain elements
	        isDynamicComponent ||
	            vnodeTag === TELEPORT ||
	            vnodeTag === SUSPENSE ||
	            (!isComponent &&
	                // <svg> and <foreignObject> must be forced into blocks so that block
	                // updates inside get proper isSVG flag at runtime. (#639, #643)
	                // This is technically web-specific, but splitting the logic out of core
	                // leads to too much unnecessary complexity.
	                (tag === 'svg' ||
	                    tag === 'foreignObject' ||
	                    // #938: elements with dynamic keys should be forced into blocks
	                    findProp(node, 'key', true)));
	        // props
	        if (props.length > 0) {
	            const propsBuildResult = buildProps(node, context);
	            vnodeProps = propsBuildResult.props;
	            patchFlag = propsBuildResult.patchFlag;
	            dynamicPropNames = propsBuildResult.dynamicPropNames;
	            const directives = propsBuildResult.directives;
	            vnodeDirectives =
	                directives && directives.length
	                    ? createArrayExpression(directives.map(dir => buildDirectiveArgs(dir, context)))
	                    : undefined;
	        }
	        // children
	        if (node.children.length > 0) {
	            if (vnodeTag === KEEP_ALIVE) {
	                // Although a built-in component, we compile KeepAlive with raw children
	                // instead of slot functions so that it can be used inside Transition
	                // or other Transition-wrapping HOCs.
	                // To ensure correct updates with block optimizations, we need to:
	                // 1. Force keep-alive into a block. This avoids its children being
	                //    collected by a parent block.
	                shouldUseBlock = true;
	                // 2. Force keep-alive to always be updated, since it uses raw children.
	                patchFlag |= 1024 /* DYNAMIC_SLOTS */;
	            }
	            const shouldBuildAsSlots = isComponent &&
	                // Teleport is not a real component and has dedicated runtime handling
	                vnodeTag !== TELEPORT &&
	                // explained above.
	                vnodeTag !== KEEP_ALIVE;
	            if (shouldBuildAsSlots) {
	                const { slots, hasDynamicSlots } = buildSlots(node, context);
	                vnodeChildren = slots;
	                if (hasDynamicSlots) {
	                    patchFlag |= 1024 /* DYNAMIC_SLOTS */;
	                }
	            }
	            else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
	                const child = node.children[0];
	                const type = child.type;
	                // check for dynamic text children
	                const hasDynamicTextChild = type === 5 /* INTERPOLATION */ ||
	                    type === 8 /* COMPOUND_EXPRESSION */;
	                if (hasDynamicTextChild &&
	                    getConstantType(child, context) === 0 /* NOT_CONSTANT */) {
	                    patchFlag |= 1 /* TEXT */;
	                }
	                // pass directly if the only child is a text node
	                // (plain / interpolation / expression)
	                if (hasDynamicTextChild || type === 2 /* TEXT */) {
	                    vnodeChildren = child;
	                }
	                else {
	                    vnodeChildren = node.children;
	                }
	            }
	            else {
	                vnodeChildren = node.children;
	            }
	        }
	        // patchFlag & dynamicPropNames
	        if (patchFlag !== 0) {
	            {
	                vnodePatchFlag = String(patchFlag);
	            }
	            if (dynamicPropNames && dynamicPropNames.length) {
	                vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
	            }
	        }
	        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false /* disableTracking */, node.loc);
	    };
	};
	function resolveComponentType(node, context, ssr = false) {
	    const { tag } = node;
	    // 1. dynamic component
	    const isProp = isComponentTag(tag)
	        ? findProp(node, 'is')
	        : findDir(node, 'is');
	    if (isProp) {
	        const exp = isProp.type === 6 /* ATTRIBUTE */
	            ? isProp.value && createSimpleExpression(isProp.value.content, true)
	            : isProp.exp;
	        if (exp) {
	            return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
	                exp
	            ]);
	        }
	    }
	    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)
	    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
	    if (builtIn) {
	        // built-ins are simply fallthroughs / have special handling during ssr
	        // so we don't need to import their runtime equivalents
	        if (!ssr)
	            context.helper(builtIn);
	        return builtIn;
	    }
	    // 5. user component (resolve)
	    context.helper(RESOLVE_COMPONENT);
	    context.components.add(tag);
	    return toValidAssetId(tag, `component`);
	}
	function buildProps(node, context, props = node.props, ssr = false) {
	    const { tag, loc: elementLoc } = node;
	    const isComponent = node.tagType === 1 /* COMPONENT */;
	    let properties = [];
	    const mergeArgs = [];
	    const runtimeDirectives = [];
	    // patchFlag analysis
	    let patchFlag = 0;
	    let hasRef = false;
	    let hasClassBinding = false;
	    let hasStyleBinding = false;
	    let hasHydrationEventBinding = false;
	    let hasDynamicKeys = false;
	    let hasVnodeHook = false;
	    const dynamicPropNames = [];
	    const analyzePatchFlag = ({ key, value }) => {
	        if (isStaticExp(key)) {
	            const name = key.content;
	            const isEventHandler = isOn(name);
	            if (!isComponent &&
	                isEventHandler &&
	                // omit the flag for click handlers because hydration gives click
	                // dedicated fast path.
	                name.toLowerCase() !== 'onclick' &&
	                // omit v-model handlers
	                name !== 'onUpdate:modelValue' &&
	                // omit onVnodeXXX hooks
	                !isReservedProp(name)) {
	                hasHydrationEventBinding = true;
	            }
	            if (isEventHandler && isReservedProp(name)) {
	                hasVnodeHook = true;
	            }
	            if (value.type === 20 /* JS_CACHE_EXPRESSION */ ||
	                ((value.type === 4 /* SIMPLE_EXPRESSION */ ||
	                    value.type === 8 /* COMPOUND_EXPRESSION */) &&
	                    getConstantType(value, context) > 0)) {
	                // skip if the prop is a cached handler or has constant value
	                return;
	            }
	            if (name === 'ref') {
	                hasRef = true;
	            }
	            else if (name === 'class' && !isComponent) {
	                hasClassBinding = true;
	            }
	            else if (name === 'style' && !isComponent) {
	                hasStyleBinding = true;
	            }
	            else if (name !== 'key' && !dynamicPropNames.includes(name)) {
	                dynamicPropNames.push(name);
	            }
	        }
	        else {
	            hasDynamicKeys = true;
	        }
	    };
	    for (let i = 0; i < props.length; i++) {
	        // static attribute
	        const prop = props[i];
	        if (prop.type === 6 /* ATTRIBUTE */) {
	            const { loc, name, value } = prop;
	            let isStatic = true;
	            if (name === 'ref') {
	                hasRef = true;
	            }
	            // skip :is on <component>
	            if (name === 'is' && isComponentTag(tag)) {
	                continue;
	            }
	            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : '', isStatic, value ? value.loc : loc)));
	        }
	        else {
	            // directives
	            const { name, arg, exp, loc } = prop;
	            const isBind = name === 'bind';
	            const isOn = name === 'on';
	            // skip v-slot - it is handled by its dedicated transform.
	            if (name === 'slot') {
	                if (!isComponent) {
	                    context.onError(createCompilerError(39 /* X_V_SLOT_MISPLACED */, loc));
	                }
	                continue;
	            }
	            // skip v-once - it is handled by its dedicated transform.
	            if (name === 'once') {
	                continue;
	            }
	            // skip v-is and :is on <component>
	            if (name === 'is' ||
	                (isBind && isComponentTag(tag) && isBindKey(arg, 'is'))) {
	                continue;
	            }
	            // skip v-on in SSR compilation
	            if (isOn && ssr) {
	                continue;
	            }
	            // special case for v-bind and v-on with no argument
	            if (!arg && (isBind || isOn)) {
	                hasDynamicKeys = true;
	                if (exp) {
	                    if (properties.length) {
	                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
	                        properties = [];
	                    }
	                    if (isBind) {
	                        mergeArgs.push(exp);
	                    }
	                    else {
	                        // v-on="obj" -> toHandlers(obj)
	                        mergeArgs.push({
	                            type: 14 /* JS_CALL_EXPRESSION */,
	                            loc,
	                            callee: context.helper(TO_HANDLERS),
	                            arguments: [exp]
	                        });
	                    }
	                }
	                else {
	                    context.onError(createCompilerError(isBind
	                        ? 33 /* X_V_BIND_NO_EXPRESSION */
	                        : 34 /* X_V_ON_NO_EXPRESSION */, loc));
	                }
	                continue;
	            }
	            const directiveTransform = context.directiveTransforms[name];
	            if (directiveTransform) {
	                // has built-in directive transform.
	                const { props, needRuntime } = directiveTransform(prop, node, context);
	                !ssr && props.forEach(analyzePatchFlag);
	                properties.push(...props);
	                if (needRuntime) {
	                    runtimeDirectives.push(prop);
	                    if (isSymbol$1(needRuntime)) {
	                        directiveImportMap.set(prop, needRuntime);
	                    }
	                }
	            }
	            else {
	                // no built-in transform, this is a user custom directive.
	                runtimeDirectives.push(prop);
	            }
	        }
	    }
	    let propsExpression = undefined;
	    // has v-bind="object" or v-on="object", wrap with mergeProps
	    if (mergeArgs.length) {
	        if (properties.length) {
	            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
	        }
	        if (mergeArgs.length > 1) {
	            propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
	        }
	        else {
	            // single v-bind with nothing else - no need for a mergeProps call
	            propsExpression = mergeArgs[0];
	        }
	    }
	    else if (properties.length) {
	        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
	    }
	    // patchFlag analysis
	    if (hasDynamicKeys) {
	        patchFlag |= 16 /* FULL_PROPS */;
	    }
	    else {
	        if (hasClassBinding) {
	            patchFlag |= 2 /* CLASS */;
	        }
	        if (hasStyleBinding) {
	            patchFlag |= 4 /* STYLE */;
	        }
	        if (dynamicPropNames.length) {
	            patchFlag |= 8 /* PROPS */;
	        }
	        if (hasHydrationEventBinding) {
	            patchFlag |= 32 /* HYDRATE_EVENTS */;
	        }
	    }
	    if ((patchFlag === 0 || patchFlag === 32 /* HYDRATE_EVENTS */) &&
	        (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
	        patchFlag |= 512 /* NEED_PATCH */;
	    }
	    return {
	        props: propsExpression,
	        directives: runtimeDirectives,
	        patchFlag,
	        dynamicPropNames
	    };
	}
	// Dedupe props in an object literal.
	// Literal duplicated attributes would have been warned during the parse phase,
	// however, it's possible to encounter duplicated `onXXX` handlers with different
	// modifiers. We also need to merge static and dynamic class / style attributes.
	// - onXXX handlers / style: merge into array
	// - class: merge into single expression with concatenation
	function dedupeProperties(properties) {
	    const knownProps = new Map();
	    const deduped = [];
	    for (let i = 0; i < properties.length; i++) {
	        const prop = properties[i];
	        // dynamic keys are always allowed
	        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */ || !prop.key.isStatic) {
	            deduped.push(prop);
	            continue;
	        }
	        const name = prop.key.content;
	        const existing = knownProps.get(name);
	        if (existing) {
	            if (name === 'style' || name === 'class' || name.startsWith('on')) {
	                mergeAsArray(existing, prop);
	            }
	            // unexpected duplicate, should have emitted error during parse
	        }
	        else {
	            knownProps.set(name, prop);
	            deduped.push(prop);
	        }
	    }
	    return deduped;
	}
	function mergeAsArray(existing, incoming) {
	    if (existing.value.type === 17 /* JS_ARRAY_EXPRESSION */) {
	        existing.value.elements.push(incoming.value);
	    }
	    else {
	        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);
	    }
	}
	function buildDirectiveArgs(dir, context) {
	    const dirArgs = [];
	    const runtime = directiveImportMap.get(dir);
	    if (runtime) {
	        // built-in directive with runtime
	        dirArgs.push(context.helperString(runtime));
	    }
	    else {
	        {
	            // inject statement for resolving directive
	            context.helper(RESOLVE_DIRECTIVE);
	            context.directives.add(dir.name);
	            dirArgs.push(toValidAssetId(dir.name, `directive`));
	        }
	    }
	    const { loc } = dir;
	    if (dir.exp)
	        dirArgs.push(dir.exp);
	    if (dir.arg) {
	        if (!dir.exp) {
	            dirArgs.push(`void 0`);
	        }
	        dirArgs.push(dir.arg);
	    }
	    if (Object.keys(dir.modifiers).length) {
	        if (!dir.arg) {
	            if (!dir.exp) {
	                dirArgs.push(`void 0`);
	            }
	            dirArgs.push(`void 0`);
	        }
	        const trueExpression = createSimpleExpression(`true`, false, loc);
	        dirArgs.push(createObjectExpression(dir.modifiers.map(modifier => createObjectProperty(modifier, trueExpression)), loc));
	    }
	    return createArrayExpression(dirArgs, dir.loc);
	}
	function stringifyDynamicPropNames(props) {
	    let propsNamesString = `[`;
	    for (let i = 0, l = props.length; i < l; i++) {
	        propsNamesString += JSON.stringify(props[i]);
	        if (i < l - 1)
	            propsNamesString += ', ';
	    }
	    return propsNamesString + `]`;
	}
	function isComponentTag(tag) {
	    return tag[0].toLowerCase() + tag.slice(1) === 'component';
	}
	const cacheStringFunction = (fn) => {
	    const cache = Object.create(null);
	    return ((str) => {
	        const hit = cache[str];
	        return hit || (cache[str] = fn(str));
	    });
	};
	const camelizeRE = /-(\w)/g;
	/**
	 * @private
	 */
	const camelize = cacheStringFunction((str) => {
	    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));
	});

	const transformSlotOutlet = (node, context) => {
	    if (isSlotOutlet(node)) {
	        const { children, loc } = node;
	        const { slotName, slotProps } = processSlotOutlet(node, context);
	        const slotArgs = [
	            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
	            slotName
	        ];
	        if (slotProps) {
	            slotArgs.push(slotProps);
	        }
	        if (children.length) {
	            if (!slotProps) {
	                slotArgs.push(`{}`);
	            }
	            slotArgs.push(createFunctionExpression([], children, false, false, loc));
	        }
	        if (context.scopeId && !context.slotted) {
	            if (!slotProps) {
	                slotArgs.push(`{}`);
	            }
	            if (!children.length) {
	                slotArgs.push(`undefined`);
	            }
	            slotArgs.push(`true`);
	        }
	        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
	    }
	};
	function processSlotOutlet(node, context) {
	    let slotName = `"default"`;
	    let slotProps = undefined;
	    const nonNameProps = [];
	    for (let i = 0; i < node.props.length; i++) {
	        const p = node.props[i];
	        if (p.type === 6 /* ATTRIBUTE */) {
	            if (p.value) {
	                if (p.name === 'name') {
	                    slotName = JSON.stringify(p.value.content);
	                }
	                else {
	                    p.name = camelize(p.name);
	                    nonNameProps.push(p);
	                }
	            }
	        }
	        else {
	            if (p.name === 'bind' && isBindKey(p.arg, 'name')) {
	                if (p.exp)
	                    slotName = p.exp;
	            }
	            else {
	                if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) {
	                    p.arg.content = camelize(p.arg.content);
	                }
	                nonNameProps.push(p);
	            }
	        }
	    }
	    if (nonNameProps.length > 0) {
	        const { props, directives } = buildProps(node, context, nonNameProps);
	        slotProps = props;
	        if (directives.length) {
	            context.onError(createCompilerError(35 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));
	        }
	    }
	    return {
	        slotName,
	        slotProps
	    };
	}

	const fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^\s*function(?:\s+[\w$]+)?\s*\(/;
	const transformOn$1 = (dir, node, context, augmentor) => {
	    const { loc, modifiers, arg } = dir;
	    if (!dir.exp && !modifiers.length) {
	        context.onError(createCompilerError(34 /* X_V_ON_NO_EXPRESSION */, loc));
	    }
	    let eventName;
	    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {
	        if (arg.isStatic) {
	            const rawName = arg.content;
	            // for all event listeners, auto convert it to camelCase. See issue #2249
	            eventName = createSimpleExpression(toHandlerKey(camelize$1(rawName)), true, arg.loc);
	        }
	        else {
	            // #2388
	            eventName = createCompoundExpression([
	                `${context.helperString(TO_HANDLER_KEY)}(`,
	                arg,
	                `)`
	            ]);
	        }
	    }
	    else {
	        // already a compound expression.
	        eventName = arg;
	        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
	        eventName.children.push(`)`);
	    }
	    // handler processing
	    let exp = dir.exp;
	    if (exp && !exp.content.trim()) {
	        exp = undefined;
	    }
	    let shouldCache = context.cacheHandlers && !exp;
	    if (exp) {
	        const isMemberExp = isMemberExpression(exp.content);
	        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
	        const hasMultipleStatements = exp.content.includes(`;`);
	        if (isInlineStatement || (shouldCache && isMemberExp)) {
	            // wrap inline statement in a function expression
	            exp = createCompoundExpression([
	                `${isInlineStatement
                    ? `$event`
                    : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
	                exp,
	                hasMultipleStatements ? `}` : `)`
	            ]);
	        }
	    }
	    let ret = {
	        props: [
	            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
	        ]
	    };
	    // apply extended compiler augmentor
	    if (augmentor) {
	        ret = augmentor(ret);
	    }
	    if (shouldCache) {
	        // cache handlers so that it's always the same handler being passed down.
	        // this avoids unnecessary re-renders when users use inline handlers on
	        // components.
	        ret.props[0].value = context.cache(ret.props[0].value);
	    }
	    return ret;
	};

	// v-bind without arg is handled directly in ./transformElements.ts due to it affecting
	// codegen for the entire props object. This transform here is only for v-bind
	// *with* args.
	const transformBind = (dir, node, context) => {
	    const { exp, modifiers, loc } = dir;
	    const arg = dir.arg;
	    if (arg.type !== 4 /* SIMPLE_EXPRESSION */) {
	        arg.children.unshift(`(`);
	        arg.children.push(`) || ""`);
	    }
	    else if (!arg.isStatic) {
	        arg.content = `${arg.content} || ""`;
	    }
	    // .prop is no longer necessary due to new patch behavior
	    // .sync is replaced by v-model:arg
	    if (modifiers.includes('camel')) {
	        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {
	            if (arg.isStatic) {
	                arg.content = camelize$1(arg.content);
	            }
	            else {
	                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
	            }
	        }
	        else {
	            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
	            arg.children.push(`)`);
	        }
	    }
	    if (!exp ||
	        (exp.type === 4 /* SIMPLE_EXPRESSION */ && !exp.content.trim())) {
	        context.onError(createCompilerError(33 /* X_V_BIND_NO_EXPRESSION */, loc));
	        return {
	            props: [createObjectProperty(arg, createSimpleExpression('', true, loc))]
	        };
	    }
	    return {
	        props: [createObjectProperty(arg, exp)]
	    };
	};

	// Merge adjacent text nodes and expressions into a single expression
	// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.
	const transformText = (node, context) => {
	    if (node.type === 0 /* ROOT */ ||
	        node.type === 1 /* ELEMENT */ ||
	        node.type === 11 /* FOR */ ||
	        node.type === 10 /* IF_BRANCH */) {
	        // perform the transform on node exit so that all expressions have already
	        // been processed.
	        return () => {
	            const children = node.children;
	            let currentContainer = undefined;
	            let hasText = false;
	            for (let i = 0; i < children.length; i++) {
	                const child = children[i];
	                if (isText(child)) {
	                    hasText = true;
	                    for (let j = i + 1; j < children.length; j++) {
	                        const next = children[j];
	                        if (isText(next)) {
	                            if (!currentContainer) {
	                                currentContainer = children[i] = {
	                                    type: 8 /* COMPOUND_EXPRESSION */,
	                                    loc: child.loc,
	                                    children: [child]
	                                };
	                            }
	                            // merge adjacent text node into current
	                            currentContainer.children.push(` + `, next);
	                            children.splice(j, 1);
	                            j--;
	                        }
	                        else {
	                            currentContainer = undefined;
	                            break;
	                        }
	                    }
	                }
	            }
	            if (!hasText ||
	                // if this is a plain element with a single text child, leave it
	                // as-is since the runtime has dedicated fast path for this by directly
	                // setting textContent of the element.
	                // for component root it's always normalized anyway.
	                (children.length === 1 &&
	                    (node.type === 0 /* ROOT */ ||
	                        (node.type === 1 /* ELEMENT */ &&
	                            node.tagType === 0 /* ELEMENT */)))) {
	                return;
	            }
	            // pre-convert text nodes into createTextVNode(text) calls to avoid
	            // runtime normalization.
	            for (let i = 0; i < children.length; i++) {
	                const child = children[i];
	                if (isText(child) || child.type === 8 /* COMPOUND_EXPRESSION */) {
	                    const callArgs = [];
	                    // createTextVNode defaults to single whitespace, so if it is a
	                    // single space the code could be an empty call to save bytes.
	                    if (child.type !== 2 /* TEXT */ || child.content !== ' ') {
	                        callArgs.push(child);
	                    }
	                    // mark dynamic text with flag so it gets patched inside a block
	                    if (!context.ssr &&
	                        getConstantType(child, context) === 0 /* NOT_CONSTANT */) {
	                        callArgs.push(1 /* TEXT */ +
	                            (``));
	                    }
	                    children[i] = {
	                        type: 12 /* TEXT_CALL */,
	                        content: child,
	                        loc: child.loc,
	                        codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
	                    };
	                }
	            }
	        };
	    }
	};

	const seen = new WeakSet();
	const transformOnce = (node, context) => {
	    if (node.type === 1 /* ELEMENT */ && findDir(node, 'once', true)) {
	        if (seen.has(node)) {
	            return;
	        }
	        seen.add(node);
	        context.helper(SET_BLOCK_TRACKING);
	        return () => {
	            const cur = context.currentNode;
	            if (cur.codegenNode) {
	                cur.codegenNode = context.cache(cur.codegenNode, true /* isVNode */);
	            }
	        };
	    }
	};

	const transformModel$1 = (dir, node, context) => {
	    const { exp, arg } = dir;
	    if (!exp) {
	        context.onError(createCompilerError(40 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));
	        return createTransformProps();
	    }
	    const rawExp = exp.loc.source;
	    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : rawExp;
	    // im SFC <script setup> inline mode, the exp may have been transformed into
	    // _unref(exp)
	    context.bindingMetadata[rawExp];
	    const maybeRef = !true    /* SETUP_CONST */;
	    if (!isMemberExpression(expString) && !maybeRef) {
	        context.onError(createCompilerError(41 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));
	        return createTransformProps();
	    }
	    const propName = arg ? arg : createSimpleExpression('modelValue', true);
	    const eventName = arg
	        ? isStaticExp(arg)
	            ? `onUpdate:${arg.content}`
	            : createCompoundExpression(['"onUpdate:" + ', arg])
	        : `onUpdate:modelValue`;
	    let assignmentExp;
	    const eventArg = context.isTS ? `($event: any)` : `$event`;
	    {
	        assignmentExp = createCompoundExpression([
	            `${eventArg} => (`,
	            exp,
	            ` = $event)`
	        ]);
	    }
	    const props = [
	        // modelValue: foo
	        createObjectProperty(propName, dir.exp),
	        // "onUpdate:modelValue": $event => (foo = $event)
	        createObjectProperty(eventName, assignmentExp)
	    ];
	    // modelModifiers: { foo: true, "bar-baz": true }
	    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {
	        const modifiers = dir.modifiers
	            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)
	            .join(`, `);
	        const modifiersKey = arg
	            ? isStaticExp(arg)
	                ? `${arg.content}Modifiers`
	                : createCompoundExpression([arg, ' + "Modifiers"'])
	            : `modelModifiers`;
	        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */)));
	    }
	    return createTransformProps(props);
	};
	function createTransformProps(props = []) {
	    return { props };
	}

	function getBaseTransformPreset(prefixIdentifiers) {
	    return [
	        [
	            transformOnce,
	            transformIf,
	            transformFor,
	            ...([]),
	            transformSlotOutlet,
	            transformElement,
	            trackSlotScopes,
	            transformText
	        ],
	        {
	            on: transformOn$1,
	            bind: transformBind,
	            model: transformModel$1
	        }
	    ];
	}
	// we name it `baseCompile` so that higher order compilers like
	// @vue/compiler-dom can export `compile` while re-exporting everything else.
	function baseCompile(template, options = {}) {
	    const onError = options.onError || defaultOnError;
	    const isModuleMode = options.mode === 'module';
	    /* istanbul ignore if */
	    {
	        if (options.prefixIdentifiers === true) {
	            onError(createCompilerError(45 /* X_PREFIX_ID_NOT_SUPPORTED */));
	        }
	        else if (isModuleMode) {
	            onError(createCompilerError(46 /* X_MODULE_MODE_NOT_SUPPORTED */));
	        }
	    }
	    const prefixIdentifiers = !true ;
	    if (options.cacheHandlers) {
	        onError(createCompilerError(47 /* X_CACHE_HANDLER_NOT_SUPPORTED */));
	    }
	    if (options.scopeId && !isModuleMode) {
	        onError(createCompilerError(48 /* X_SCOPE_ID_NOT_SUPPORTED */));
	    }
	    const ast = isString$1(template) ? baseParse(template, options) : template;
	    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
	    transform(ast, extend({}, options, {
	        prefixIdentifiers,
	        nodeTransforms: [
	            ...nodeTransforms,
	            ...(options.nodeTransforms || []) // user transforms
	        ],
	        directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} // user transforms
	        )
	    }));
	    return generate$2(ast, extend({}, options, {
	        prefixIdentifiers
	    }));
	}

	const noopDirectiveTransform = () => ({ props: [] });

	var compilerCore_esmBundler = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BASE_TRANSITION: BASE_TRANSITION,
		CAMELIZE: CAMELIZE,
		CAPITALIZE: CAPITALIZE,
		CREATE_BLOCK: CREATE_BLOCK,
		CREATE_COMMENT: CREATE_COMMENT,
		CREATE_SLOTS: CREATE_SLOTS,
		CREATE_STATIC: CREATE_STATIC,
		CREATE_TEXT: CREATE_TEXT,
		CREATE_VNODE: CREATE_VNODE,
		FRAGMENT: FRAGMENT,
		IS_REF: IS_REF,
		KEEP_ALIVE: KEEP_ALIVE,
		MERGE_PROPS: MERGE_PROPS,
		OPEN_BLOCK: OPEN_BLOCK,
		POP_SCOPE_ID: POP_SCOPE_ID,
		PUSH_SCOPE_ID: PUSH_SCOPE_ID,
		RENDER_LIST: RENDER_LIST,
		RENDER_SLOT: RENDER_SLOT,
		RESOLVE_COMPONENT: RESOLVE_COMPONENT,
		RESOLVE_DIRECTIVE: RESOLVE_DIRECTIVE,
		RESOLVE_DYNAMIC_COMPONENT: RESOLVE_DYNAMIC_COMPONENT,
		SET_BLOCK_TRACKING: SET_BLOCK_TRACKING,
		SUSPENSE: SUSPENSE,
		TELEPORT: TELEPORT,
		TO_DISPLAY_STRING: TO_DISPLAY_STRING,
		TO_HANDLERS: TO_HANDLERS,
		TO_HANDLER_KEY: TO_HANDLER_KEY,
		UNREF: UNREF,
		WITH_CTX: WITH_CTX,
		WITH_DIRECTIVES: WITH_DIRECTIVES,
		WITH_SCOPE_ID: WITH_SCOPE_ID,
		advancePositionWithClone: advancePositionWithClone,
		advancePositionWithMutation: advancePositionWithMutation,
		assert: assert,
		baseCompile: baseCompile,
		baseParse: baseParse,
		buildProps: buildProps,
		buildSlots: buildSlots,
		createArrayExpression: createArrayExpression,
		createAssignmentExpression: createAssignmentExpression,
		createBlockStatement: createBlockStatement,
		createCacheExpression: createCacheExpression,
		createCallExpression: createCallExpression,
		createCompilerError: createCompilerError,
		createCompoundExpression: createCompoundExpression,
		createConditionalExpression: createConditionalExpression,
		createForLoopParams: createForLoopParams,
		createFunctionExpression: createFunctionExpression,
		createIfStatement: createIfStatement,
		createInterpolation: createInterpolation,
		createObjectExpression: createObjectExpression,
		createObjectProperty: createObjectProperty,
		createReturnStatement: createReturnStatement,
		createRoot: createRoot,
		createSequenceExpression: createSequenceExpression,
		createSimpleExpression: createSimpleExpression,
		createStructuralDirectiveTransform: createStructuralDirectiveTransform,
		createTemplateLiteral: createTemplateLiteral,
		createTransformContext: createTransformContext,
		createVNodeCall: createVNodeCall,
		findDir: findDir,
		findProp: findProp,
		generate: generate$2,
		getBaseTransformPreset: getBaseTransformPreset,
		getInnerRange: getInnerRange,
		hasDynamicKeyVBind: hasDynamicKeyVBind,
		hasScopeRef: hasScopeRef,
		helperNameMap: helperNameMap,
		injectProp: injectProp,
		isBindKey: isBindKey,
		isBuiltInType: isBuiltInType,
		isCoreComponent: isCoreComponent,
		isMemberExpression: isMemberExpression,
		isSimpleIdentifier: isSimpleIdentifier,
		isSlotOutlet: isSlotOutlet,
		isStaticExp: isStaticExp,
		isTemplateNode: isTemplateNode,
		isText: isText,
		isVSlot: isVSlot,
		locStub: locStub,
		noopDirectiveTransform: noopDirectiveTransform,
		processExpression: processExpression,
		processFor: processFor,
		processIf: processIf,
		processSlotOutlet: processSlotOutlet,
		registerRuntimeHelpers: registerRuntimeHelpers,
		resolveComponentType: resolveComponentType,
		toValidAssetId: toValidAssetId,
		trackSlotScopes: trackSlotScopes,
		trackVForSlotScopes: trackVForSlotScopes,
		transform: transform,
		transformBind: transformBind,
		transformElement: transformElement,
		transformExpression: transformExpression,
		transformModel: transformModel$1,
		transformOn: transformOn$1,
		traverseNode: traverseNode,
		generateCodeFrame: generateCodeFrame
	});

	const V_MODEL_RADIO = Symbol(``);
	const V_MODEL_CHECKBOX = Symbol(``);
	const V_MODEL_TEXT = Symbol(``);
	const V_MODEL_SELECT = Symbol(``);
	const V_MODEL_DYNAMIC = Symbol(``);
	const V_ON_WITH_MODIFIERS = Symbol(``);
	const V_ON_WITH_KEYS = Symbol(``);
	const V_SHOW = Symbol(``);
	const TRANSITION = Symbol(``);
	const TRANSITION_GROUP = Symbol(``);
	registerRuntimeHelpers({
	    [V_MODEL_RADIO]: `vModelRadio`,
	    [V_MODEL_CHECKBOX]: `vModelCheckbox`,
	    [V_MODEL_TEXT]: `vModelText`,
	    [V_MODEL_SELECT]: `vModelSelect`,
	    [V_MODEL_DYNAMIC]: `vModelDynamic`,
	    [V_ON_WITH_MODIFIERS]: `withModifiers`,
	    [V_ON_WITH_KEYS]: `withKeys`,
	    [V_SHOW]: `vShow`,
	    [TRANSITION]: `Transition`,
	    [TRANSITION_GROUP]: `TransitionGroup`
	});

	/* eslint-disable no-restricted-globals */
	let decoder;
	function decodeHtmlBrowser(raw) {
	    (decoder || (decoder = document.createElement('div'))).innerHTML = raw;
	    return decoder.textContent;
	}

	const isRawTextContainer = /*#__PURE__*/ makeMap('style,iframe,script,noscript', true);
	const parserOptions = {
	    isVoidTag,
	    isNativeTag: tag => isHTMLTag(tag) || isSVGTag(tag),
	    isPreTag: tag => tag === 'pre',
	    decodeEntities: decodeHtmlBrowser ,
	    isBuiltInComponent: (tag) => {
	        if (isBuiltInType(tag, `Transition`)) {
	            return TRANSITION;
	        }
	        else if (isBuiltInType(tag, `TransitionGroup`)) {
	            return TRANSITION_GROUP;
	        }
	    },
	    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
	    getNamespace(tag, parent) {
	        let ns = parent ? parent.ns : 0 /* HTML */;
	        if (parent && ns === 2 /* MATH_ML */) {
	            if (parent.tag === 'annotation-xml') {
	                if (tag === 'svg') {
	                    return 1 /* SVG */;
	                }
	                if (parent.props.some(a => a.type === 6 /* ATTRIBUTE */ &&
	                    a.name === 'encoding' &&
	                    a.value != null &&
	                    (a.value.content === 'text/html' ||
	                        a.value.content === 'application/xhtml+xml'))) {
	                    ns = 0 /* HTML */;
	                }
	            }
	            else if (/^m(?:[ions]|text)$/.test(parent.tag) &&
	                tag !== 'mglyph' &&
	                tag !== 'malignmark') {
	                ns = 0 /* HTML */;
	            }
	        }
	        else if (parent && ns === 1 /* SVG */) {
	            if (parent.tag === 'foreignObject' ||
	                parent.tag === 'desc' ||
	                parent.tag === 'title') {
	                ns = 0 /* HTML */;
	            }
	        }
	        if (ns === 0 /* HTML */) {
	            if (tag === 'svg') {
	                return 1 /* SVG */;
	            }
	            if (tag === 'math') {
	                return 2 /* MATH_ML */;
	            }
	        }
	        return ns;
	    },
	    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
	    getTextMode({ tag, ns }) {
	        if (ns === 0 /* HTML */) {
	            if (tag === 'textarea' || tag === 'title') {
	                return 1 /* RCDATA */;
	            }
	            if (isRawTextContainer(tag)) {
	                return 2 /* RAWTEXT */;
	            }
	        }
	        return 0 /* DATA */;
	    }
	};

	// Parse inline CSS strings for static style attributes into an object.
	// This is a NodeTransform since it works on the static `style` attribute and
	// converts it into a dynamic equivalent:
	// style="color: red" -> :style='{ "color": "red" }'
	// It is then processed by `transformElement` and included in the generated
	// props.
	const transformStyle = node => {
	    if (node.type === 1 /* ELEMENT */) {
	        node.props.forEach((p, i) => {
	            if (p.type === 6 /* ATTRIBUTE */ && p.name === 'style' && p.value) {
	                // replace p with an expression node
	                node.props[i] = {
	                    type: 7 /* DIRECTIVE */,
	                    name: `bind`,
	                    arg: createSimpleExpression(`style`, true, p.loc),
	                    exp: parseInlineCSS(p.value.content, p.loc),
	                    modifiers: [],
	                    loc: p.loc
	                };
	            }
	        });
	    }
	};
	const parseInlineCSS = (cssText, loc) => {
	    const normalized = parseStringStyle(cssText);
	    return createSimpleExpression(JSON.stringify(normalized), false, loc, 3 /* CAN_STRINGIFY */);
	};

	function createDOMCompilerError(code, loc) {
	    return createCompilerError(code, loc);
	}

	const transformVHtml = (dir, node, context) => {
	    const { exp, loc } = dir;
	    if (!exp) {
	        context.onError(createDOMCompilerError(49 /* X_V_HTML_NO_EXPRESSION */, loc));
	    }
	    if (node.children.length) {
	        context.onError(createDOMCompilerError(50 /* X_V_HTML_WITH_CHILDREN */, loc));
	        node.children.length = 0;
	    }
	    return {
	        props: [
	            createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression('', true))
	        ]
	    };
	};

	const transformVText = (dir, node, context) => {
	    const { exp, loc } = dir;
	    if (!exp) {
	        context.onError(createDOMCompilerError(51 /* X_V_TEXT_NO_EXPRESSION */, loc));
	    }
	    if (node.children.length) {
	        context.onError(createDOMCompilerError(52 /* X_V_TEXT_WITH_CHILDREN */, loc));
	        node.children.length = 0;
	    }
	    return {
	        props: [
	            createObjectProperty(createSimpleExpression(`textContent`, true), exp
	                ? createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc)
	                : createSimpleExpression('', true))
	        ]
	    };
	};

	const transformModel = (dir, node, context) => {
	    const baseResult = transformModel$1(dir, node, context);
	    // base transform has errors OR component v-model (only need props)
	    if (!baseResult.props.length || node.tagType === 1 /* COMPONENT */) {
	        return baseResult;
	    }
	    if (dir.arg) {
	        context.onError(createDOMCompilerError(54 /* X_V_MODEL_ARG_ON_ELEMENT */, dir.arg.loc));
	    }
	    const { tag } = node;
	    const isCustomElement = context.isCustomElement(tag);
	    if (tag === 'input' ||
	        tag === 'textarea' ||
	        tag === 'select' ||
	        isCustomElement) {
	        let directiveToUse = V_MODEL_TEXT;
	        let isInvalidType = false;
	        if (tag === 'input' || isCustomElement) {
	            const type = findProp(node, `type`);
	            if (type) {
	                if (type.type === 7 /* DIRECTIVE */) {
	                    // :type="foo"
	                    directiveToUse = V_MODEL_DYNAMIC;
	                }
	                else if (type.value) {
	                    switch (type.value.content) {
	                        case 'radio':
	                            directiveToUse = V_MODEL_RADIO;
	                            break;
	                        case 'checkbox':
	                            directiveToUse = V_MODEL_CHECKBOX;
	                            break;
	                        case 'file':
	                            isInvalidType = true;
	                            context.onError(createDOMCompilerError(55 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));
	                            break;
	                    }
	                }
	            }
	            else if (hasDynamicKeyVBind(node)) {
	                // element has bindings with dynamic keys, which can possibly contain
	                // "type".
	                directiveToUse = V_MODEL_DYNAMIC;
	            }
	            else ;
	        }
	        else if (tag === 'select') {
	            directiveToUse = V_MODEL_SELECT;
	        }
	        else ;
	        // inject runtime directive
	        // by returning the helper symbol via needRuntime
	        // the import will replaced a resolveDirective call.
	        if (!isInvalidType) {
	            baseResult.needRuntime = context.helper(directiveToUse);
	        }
	    }
	    else {
	        context.onError(createDOMCompilerError(53 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));
	    }
	    // native vmodel doesn't need the `modelValue` props since they are also
	    // passed to the runtime as `binding.value`. removing it reduces code size.
	    baseResult.props = baseResult.props.filter(p => !(p.key.type === 4 /* SIMPLE_EXPRESSION */ &&
	        p.key.content === 'modelValue'));
	    return baseResult;
	};

	const isEventOptionModifier = /*#__PURE__*/ makeMap(`passive,once,capture`);
	const isNonKeyModifier = /*#__PURE__*/ makeMap(
	// event propagation management
`stop,prevent,self,`	 +
	    // system modifiers + exact
	    `ctrl,shift,alt,meta,exact,` +
	    // mouse
	    `middle`);
	// left & right could be mouse or key modifiers based on event type
	const maybeKeyModifier = /*#__PURE__*/ makeMap('left,right');
	const isKeyboardEvent = /*#__PURE__*/ makeMap(`onkeyup,onkeydown,onkeypress`, true);
	const resolveModifiers = (key, modifiers) => {
	    const keyModifiers = [];
	    const nonKeyModifiers = [];
	    const eventOptionModifiers = [];
	    for (let i = 0; i < modifiers.length; i++) {
	        const modifier = modifiers[i];
	        if (isEventOptionModifier(modifier)) {
	            // eventOptionModifiers: modifiers for addEventListener() options,
	            // e.g. .passive & .capture
	            eventOptionModifiers.push(modifier);
	        }
	        else {
	            // runtimeModifiers: modifiers that needs runtime guards
	            if (maybeKeyModifier(modifier)) {
	                if (isStaticExp(key)) {
	                    if (isKeyboardEvent(key.content)) {
	                        keyModifiers.push(modifier);
	                    }
	                    else {
	                        nonKeyModifiers.push(modifier);
	                    }
	                }
	                else {
	                    keyModifiers.push(modifier);
	                    nonKeyModifiers.push(modifier);
	                }
	            }
	            else {
	                if (isNonKeyModifier(modifier)) {
	                    nonKeyModifiers.push(modifier);
	                }
	                else {
	                    keyModifiers.push(modifier);
	                }
	            }
	        }
	    }
	    return {
	        keyModifiers,
	        nonKeyModifiers,
	        eventOptionModifiers
	    };
	};
	const transformClick = (key, event) => {
	    const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === 'onclick';
	    return isStaticClick
	        ? createSimpleExpression(event, true)
	        : key.type !== 4 /* SIMPLE_EXPRESSION */
	            ? createCompoundExpression([
	                `(`,
	                key,
	                `) === "onClick" ? "${event}" : (`,
	                key,
	                `)`
	            ])
	            : key;
	};
	const transformOn = (dir, node, context) => {
	    return transformOn$1(dir, node, context, baseResult => {
	        const { modifiers } = dir;
	        if (!modifiers.length)
	            return baseResult;
	        let { key, value: handlerExp } = baseResult.props[0];
	        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers);
	        // normalize click.right and click.middle since they don't actually fire
	        if (nonKeyModifiers.includes('right')) {
	            key = transformClick(key, `onContextmenu`);
	        }
	        if (nonKeyModifiers.includes('middle')) {
	            key = transformClick(key, `onMouseup`);
	        }
	        if (nonKeyModifiers.length) {
	            handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
	                handlerExp,
	                JSON.stringify(nonKeyModifiers)
	            ]);
	        }
	        if (keyModifiers.length &&
	            // if event name is dynamic, always wrap with keys guard
	            (!isStaticExp(key) || isKeyboardEvent(key.content))) {
	            handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
	                handlerExp,
	                JSON.stringify(keyModifiers)
	            ]);
	        }
	        if (eventOptionModifiers.length) {
	            const modifierPostfix = eventOptionModifiers.map(capitalize$2).join('');
	            key = isStaticExp(key)
	                ? createSimpleExpression(`${key.content}${modifierPostfix}`, true)
	                : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
	        }
	        return {
	            props: [createObjectProperty(key, handlerExp)]
	        };
	    });
	};

	const transformShow = (dir, node, context) => {
	    const { exp, loc } = dir;
	    if (!exp) {
	        context.onError(createDOMCompilerError(57 /* X_V_SHOW_NO_EXPRESSION */, loc));
	    }
	    return {
	        props: [],
	        needRuntime: context.helper(V_SHOW)
	    };
	};

	const ignoreSideEffectTags = (node, context) => {
	    if (node.type === 1 /* ELEMENT */ &&
	        node.tagType === 0 /* ELEMENT */ &&
	        (node.tag === 'script' || node.tag === 'style')) {
	        context.onError(createDOMCompilerError(59 /* X_IGNORED_SIDE_EFFECT_TAG */, node.loc));
	        context.removeNode();
	    }
	};

	const DOMNodeTransforms = [
	    transformStyle,
	    ...([])
	];
	const DOMDirectiveTransforms = {
	    cloak: noopDirectiveTransform,
	    html: transformVHtml,
	    text: transformVText,
	    model: transformModel,
	    on: transformOn,
	    show: transformShow
	};
	function compile$1(template, options = {}) {
	    return baseCompile(template, extend({}, parserOptions, options, {
	        nodeTransforms: [
	            // ignore <script> and <tag>
	            // this is not put inside DOMNodeTransforms because that list is used
	            // by compiler-ssr to generate vnode fallback branches
	            ignoreSideEffectTags,
	            ...DOMNodeTransforms,
	            ...(options.nodeTransforms || [])
	        ],
	        directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
	        transformHoist: null 
	    }));
	}
	function parse$d(template, options = {}) {
	    return baseParse(template, extend({}, parserOptions, options));
	}

	var compilerDom_esmBundler = /*#__PURE__*/Object.freeze({
		__proto__: null,
		DOMDirectiveTransforms: DOMDirectiveTransforms,
		DOMNodeTransforms: DOMNodeTransforms,
		TRANSITION: TRANSITION,
		TRANSITION_GROUP: TRANSITION_GROUP,
		V_MODEL_CHECKBOX: V_MODEL_CHECKBOX,
		V_MODEL_DYNAMIC: V_MODEL_DYNAMIC,
		V_MODEL_RADIO: V_MODEL_RADIO,
		V_MODEL_SELECT: V_MODEL_SELECT,
		V_MODEL_TEXT: V_MODEL_TEXT,
		V_ON_WITH_KEYS: V_ON_WITH_KEYS,
		V_ON_WITH_MODIFIERS: V_ON_WITH_MODIFIERS,
		V_SHOW: V_SHOW,
		compile: compile$1,
		createDOMCompilerError: createDOMCompilerError,
		parse: parse$d,
		parserOptions: parserOptions,
		transformStyle: transformStyle,
		generateCodeFrame: generateCodeFrame,
		BASE_TRANSITION: BASE_TRANSITION,
		CAMELIZE: CAMELIZE,
		CAPITALIZE: CAPITALIZE,
		CREATE_BLOCK: CREATE_BLOCK,
		CREATE_COMMENT: CREATE_COMMENT,
		CREATE_SLOTS: CREATE_SLOTS,
		CREATE_STATIC: CREATE_STATIC,
		CREATE_TEXT: CREATE_TEXT,
		CREATE_VNODE: CREATE_VNODE,
		FRAGMENT: FRAGMENT,
		IS_REF: IS_REF,
		KEEP_ALIVE: KEEP_ALIVE,
		MERGE_PROPS: MERGE_PROPS,
		OPEN_BLOCK: OPEN_BLOCK,
		POP_SCOPE_ID: POP_SCOPE_ID,
		PUSH_SCOPE_ID: PUSH_SCOPE_ID,
		RENDER_LIST: RENDER_LIST,
		RENDER_SLOT: RENDER_SLOT,
		RESOLVE_COMPONENT: RESOLVE_COMPONENT,
		RESOLVE_DIRECTIVE: RESOLVE_DIRECTIVE,
		RESOLVE_DYNAMIC_COMPONENT: RESOLVE_DYNAMIC_COMPONENT,
		SET_BLOCK_TRACKING: SET_BLOCK_TRACKING,
		SUSPENSE: SUSPENSE,
		TELEPORT: TELEPORT,
		TO_DISPLAY_STRING: TO_DISPLAY_STRING,
		TO_HANDLERS: TO_HANDLERS,
		TO_HANDLER_KEY: TO_HANDLER_KEY,
		UNREF: UNREF,
		WITH_CTX: WITH_CTX,
		WITH_DIRECTIVES: WITH_DIRECTIVES,
		WITH_SCOPE_ID: WITH_SCOPE_ID,
		advancePositionWithClone: advancePositionWithClone,
		advancePositionWithMutation: advancePositionWithMutation,
		assert: assert,
		baseCompile: baseCompile,
		baseParse: baseParse,
		buildProps: buildProps,
		buildSlots: buildSlots,
		createArrayExpression: createArrayExpression,
		createAssignmentExpression: createAssignmentExpression,
		createBlockStatement: createBlockStatement,
		createCacheExpression: createCacheExpression,
		createCallExpression: createCallExpression,
		createCompilerError: createCompilerError,
		createCompoundExpression: createCompoundExpression,
		createConditionalExpression: createConditionalExpression,
		createForLoopParams: createForLoopParams,
		createFunctionExpression: createFunctionExpression,
		createIfStatement: createIfStatement,
		createInterpolation: createInterpolation,
		createObjectExpression: createObjectExpression,
		createObjectProperty: createObjectProperty,
		createReturnStatement: createReturnStatement,
		createRoot: createRoot,
		createSequenceExpression: createSequenceExpression,
		createSimpleExpression: createSimpleExpression,
		createStructuralDirectiveTransform: createStructuralDirectiveTransform,
		createTemplateLiteral: createTemplateLiteral,
		createTransformContext: createTransformContext,
		createVNodeCall: createVNodeCall,
		findDir: findDir,
		findProp: findProp,
		generate: generate$2,
		getBaseTransformPreset: getBaseTransformPreset,
		getInnerRange: getInnerRange,
		hasDynamicKeyVBind: hasDynamicKeyVBind,
		hasScopeRef: hasScopeRef,
		helperNameMap: helperNameMap,
		injectProp: injectProp,
		isBindKey: isBindKey,
		isBuiltInType: isBuiltInType,
		isCoreComponent: isCoreComponent,
		isMemberExpression: isMemberExpression,
		isSimpleIdentifier: isSimpleIdentifier,
		isSlotOutlet: isSlotOutlet,
		isStaticExp: isStaticExp,
		isTemplateNode: isTemplateNode,
		isText: isText,
		isVSlot: isVSlot,
		locStub: locStub,
		noopDirectiveTransform: noopDirectiveTransform,
		processExpression: processExpression,
		processFor: processFor,
		processIf: processIf,
		processSlotOutlet: processSlotOutlet,
		registerRuntimeHelpers: registerRuntimeHelpers,
		resolveComponentType: resolveComponentType,
		toValidAssetId: toValidAssetId,
		trackSlotScopes: trackSlotScopes,
		trackVForSlotScopes: trackVForSlotScopes,
		transform: transform,
		transformBind: transformBind,
		transformElement: transformElement,
		transformExpression: transformExpression,
		transformModel: transformModel$1,
		transformOn: transformOn$1,
		traverseNode: traverseNode
	});

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(compilerDom_esmBundler);

	function pad (hash, len) {
	  while (hash.length < len) {
	    hash = '0' + hash;
	  }
	  return hash;
	}

	function fold (hash, text) {
	  var i;
	  var chr;
	  var len;
	  if (text.length === 0) {
	    return hash;
	  }
	  for (i = 0, len = text.length; i < len; i++) {
	    chr = text.charCodeAt(i);
	    hash = ((hash << 5) - hash) + chr;
	    hash |= 0;
	  }
	  return hash < 0 ? hash * -2 : hash;
	}

	function foldObject (hash, o, seen) {
	  return Object.keys(o).sort().reduce(foldKey, hash);
	  function foldKey (hash, key) {
	    return foldValue(hash, o[key], key, seen);
	  }
	}

	function foldValue (input, value, key, seen) {
	  var hash = fold(fold(fold(input, key), toString$2(value)), typeof value);
	  if (value === null) {
	    return fold(hash, 'null');
	  }
	  if (value === undefined) {
	    return fold(hash, 'undefined');
	  }
	  if (typeof value === 'object' || typeof value === 'function') {
	    if (seen.indexOf(value) !== -1) {
	      return fold(hash, '[Circular]' + key);
	    }
	    seen.push(value);

	    var objHash = foldObject(hash, value, seen);

	    if (!('valueOf' in value) || typeof value.valueOf !== 'function') {
	      return objHash;
	    }

	    try {
	      return fold(objHash, String(value.valueOf()))
	    } catch (err) {
	      return fold(objHash, '[valueOf exception]' + (err.stack || err.message))
	    }
	  }
	  return fold(hash, value.toString());
	}

	function toString$2 (o) {
	  return Object.prototype.toString.call(o);
	}

	function sum (o) {
	  return pad(foldValue(0, o, '', []).toString(16), 8);
	}

	var hashSum = sum;

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	function resolve$2() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : '/';

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	}
	// path.normalize(path)
	// posix version
	function normalize(path) {
	  var isPathAbsolute = isAbsolute$1(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isPathAbsolute).join('/');

	  if (!path && !isPathAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isPathAbsolute ? '/' : '') + path;
	}
	// posix version
	function isAbsolute$1(path) {
	  return path.charAt(0) === '/';
	}

	// posix version
	function join$1() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	}


	// path.relative(from, to)
	// posix version
	function relative$1(from, to) {
	  from = resolve$2(from).substr(1);
	  to = resolve$2(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	}

	var sep$1 = '/';
	var delimiter$1 = ':';

	function dirname$2(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	}

	function basename(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	}


	function extname(path) {
	  return splitPath(path)[3];
	}
	var path$5 = {
	  extname: extname,
	  basename: basename,
	  dirname: dirname$2,
	  sep: sep$1,
	  delimiter: delimiter$1,
	  relative: relative$1,
	  join: join$1,
	  isAbsolute: isAbsolute$1,
	  normalize: normalize,
	  resolve: resolve$2
	};
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b' ?
	    function (str, start, len) { return str.substr(start, len) } :
	    function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	var path$6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		resolve: resolve$2,
		normalize: normalize,
		isAbsolute: isAbsolute$1,
		join: join$1,
		relative: relative$1,
		sep: sep$1,
		delimiter: delimiter$1,
		dirname: dirname$2,
		basename: basename,
		extname: extname,
		'default': path$5
	});

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(path$6);

	var require$$4 = /*@__PURE__*/getAugmentedNamespace(compilerCore_esmBundler);

	/*! https://mths.be/punycode v1.4.1 by @mathias */


	/** Highest positive signed 32-bit float value */
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
	var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	/** Error messages */
	var errors = {
	  'overflow': 'Overflow: input needs wider integers to process',
	  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	  'invalid-input': 'Invalid input'
	};

	/** Convenience shortcuts */
	var baseMinusTMin = base - tMin;
	var floor = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
	  throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map$1(array, fn) {
	  var length = array.length;
	  var result = [];
	  while (length--) {
	    result[length] = fn(array[length]);
	  }
	  return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
	  var parts = string.split('@');
	  var result = '';
	  if (parts.length > 1) {
	    // In email addresses, only the domain name should be punycoded. Leave
	    // the local part (i.e. everything up to `@`) intact.
	    result = parts[0] + '@';
	    string = parts[1];
	  }
	  // Avoid `split(regex)` for IE8 compatibility. See #17.
	  string = string.replace(regexSeparators, '\x2E');
	  var labels = string.split('.');
	  var encoded = map$1(labels, fn).join('.');
	  return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
	  var output = [],
	    counter = 0,
	    length = string.length,
	    value,
	    extra;
	  while (counter < length) {
	    value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // high surrogate, and there is a next character
	      extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // low surrogate
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // unmatched surrogate; only append this code unit, in case the next
	        // code unit is the high surrogate of a surrogate pair
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor(delta / damp) : delta >> 1;
	  delta += floor(delta / numPoints);
	  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor(delta / baseMinusTMin);
	  }
	  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode$1(input) {
	  var n,
	    delta,
	    handledCPCount,
	    basicLength,
	    bias,
	    j,
	    m,
	    q,
	    k,
	    t,
	    currentValue,
	    output = [],
	    /** `inputLength` will hold the number of code points in `input`. */
	    inputLength,
	    /** Cached calculation results */
	    handledCPCountPlusOne,
	    baseMinusT,
	    qMinusT;

	  // Convert the input in UCS-2 to Unicode
	  input = ucs2decode(input);

	  // Cache the length
	  inputLength = input.length;

	  // Initialize the state
	  n = initialN;
	  delta = 0;
	  bias = initialBias;

	  // Handle the basic code points
	  for (j = 0; j < inputLength; ++j) {
	    currentValue = input[j];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  handledCPCount = basicLength = output.length;

	  // `handledCPCount` is the number of code points that have been handled;
	  // `basicLength` is the number of basic code points.

	  // Finish the basic string - if it is not empty - with a delimiter
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {

	    // All non-basic code points < n have been handled already. Find the next
	    // larger one:
	    for (m = maxInt, j = 0; j < inputLength; ++j) {
	      currentValue = input[j];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
	    // but guard against overflow
	    handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
	      error('overflow');
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (j = 0; j < inputLength; ++j) {
	      currentValue = input[j];

	      if (currentValue < n && ++delta > maxInt) {
	        error('overflow');
	      }

	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer
	        for (q = delta, k = base; /* no condition */ ; k += base) {
	          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) {
	            break;
	          }
	          qMinusT = q - t;
	          baseMinusT = base - t;
	          output.push(
	            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
	          );
	          q = floor(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q, 0)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;

	  }
	  return output.join('');
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
	  return mapDomain(input, function(string) {
	    return regexNonASCII.test(string) ?
	      'xn--' + encode$1(string) :
	      string;
	  });
	}

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty$2(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	function stringifyPrimitive(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	}

	function stringify$8 (obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	}
	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};

	function parse$c(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty$2(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	}

	// Copyright Joyent, Inc. and other Node contributors.
	var url$1 = {
	  parse: urlParse,
	  resolve: urlResolve,
	  resolveObject: urlResolveObject,
	  format: urlFormat,
	  Url: Url
	};
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	  portPattern = /:[0-9]*$/,

	  // Special case for a simple path URL
	  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	  // RFC 2396: characters reserved for delimiting URLs.
	  // We actually just auto-escape these.
	  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	  // RFC 2396: characters not allowed for various reasons.
	  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	  autoEscape = ['\''].concat(unwise),
	  // Characters that are never ever allowed in a hostname.
	  // Note that any invalid chars are also handled, but these
	  // are the ones that are *expected* to be seen, so we fast-path
	  // them.
	  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	  hostEndingChars = ['/', '?', '#'],
	  hostnameMaxLen = 255,
	  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	  // protocols that can allow "unsafe" and "unwise" chars.
	  unsafeProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that never have a hostname.
	  hostlessProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that always contain a // bit.
	  slashedProtocol = {
	    'http': true,
	    'https': true,
	    'ftp': true,
	    'gopher': true,
	    'file': true,
	    'http:': true,
	    'https:': true,
	    'ftp:': true,
	    'gopher:': true,
	    'file:': true
	  };

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject$c(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  return parse$b(this, url, parseQueryString, slashesDenoteHost);
	};

	function parse$b(self, url, parseQueryString, slashesDenoteHost) {
	  if (!isString$4(url)) {
	    throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	    splitter =
	    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	    uSplit = url.split(splitter),
	    slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      self.path = rest;
	      self.href = rest;
	      self.pathname = simplePath[1];
	      if (simplePath[2]) {
	        self.search = simplePath[2];
	        if (parseQueryString) {
	          self.query = parse$c(self.search.substr(1));
	        } else {
	          self.query = self.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        self.search = '';
	        self.query = {};
	      }
	      return self;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    self.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      self.slashes = true;
	    }
	  }
	  var i, hec, l, p;
	  if (!hostlessProtocol[proto] &&
	    (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (i = 0; i < hostEndingChars.length; i++) {
	      hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      self.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (i = 0; i < nonHostChars.length; i++) {
	      hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    self.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    parseHost(self);

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    self.hostname = self.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = self.hostname[0] === '[' &&
	      self.hostname[self.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = self.hostname.split(/\./);
	      for (i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            self.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (self.hostname.length > hostnameMaxLen) {
	      self.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      self.hostname = self.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      self.hostname = toASCII(self.hostname);
	    }

	    p = self.port ? ':' + self.port : '';
	    var h = self.hostname || '';
	    self.host = h + p;
	    self.href += self.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      self.hostname = self.hostname.substr(1, self.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    self.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    self.search = rest.substr(qm);
	    self.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      self.query = parse$c(self.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    self.search = '';
	    self.query = {};
	  }
	  if (rest) self.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	    self.hostname && !self.pathname) {
	    self.pathname = '/';
	  }

	  //to support http.request
	  if (self.pathname || self.search) {
	    p = self.pathname || '';
	    var s = self.search || '';
	    self.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  self.href = format(self);
	  return self;
	}

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString$4(obj)) obj = parse$b({}, obj);
	  return format(obj);
	}

	function format(self) {
	  var auth = self.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = self.protocol || '',
	    pathname = self.pathname || '',
	    hash = self.hash || '',
	    host = false,
	    query = '';

	  if (self.host) {
	    host = auth + self.host;
	  } else if (self.hostname) {
	    host = auth + (self.hostname.indexOf(':') === -1 ?
	      self.hostname :
	      '[' + this.hostname + ']');
	    if (self.port) {
	      host += ':' + self.port;
	    }
	  }

	  if (self.query &&
	    isObject$c(self.query) &&
	    Object.keys(self.query).length) {
	    query = stringify$8(self.query);
	  }

	  var search = self.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (self.slashes ||
	    (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	}

	Url.prototype.format = function() {
	  return format(this);
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString$4(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	      result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }
	  var relPath;
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	    isRelAbs = (
	      relative.host ||
	      relative.pathname && relative.pathname.charAt(0) === '/'
	    ),
	    mustEndAbs = (isRelAbs || isSourceAbs ||
	      (result.host && relative.pathname)),
	    removeAllDots = mustEndAbs,
	    srcPath = result.pathname && result.pathname.split('/') || [],
	    psychotic = result.protocol && !slashedProtocol[result.protocol];
	  relPath = relative.pathname && relative.pathname.split('/') || [];
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	  var authInHost;
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	      relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      authInHost = result.host && result.host.indexOf('@') > 0 ?
	        result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	        (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	    (result.host || relative.host || srcPath.length > 1) &&
	    (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	    (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	    (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	      srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    authInHost = result.host && result.host.indexOf('@') > 0 ?
	      result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	      (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  return parseHost(this);
	};

	function parseHost(self) {
	  var host = self.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      self.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) self.hostname = host;
	}

	var url$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		parse: urlParse,
		resolve: urlResolve,
		resolveObject: urlResolveObject,
		format: urlFormat,
		'default': url$1,
		Url: Url
	});

	var require$$5 = /*@__PURE__*/getAugmentedNamespace(url$2);

	var require$$6 = /*@__PURE__*/getAugmentedNamespace(shared_esmBundler);

	var compilerSsr_cjs = {};

	Object.defineProperty(compilerSsr_cjs, '__esModule', { value: true });

	var compilerDom = require$$0$2;
	var shared$1 = require$$6;

	const SSR_INTERPOLATE = Symbol(`ssrInterpolate`);
	const SSR_RENDER_VNODE = Symbol(`ssrRenderVNode`);
	const SSR_RENDER_COMPONENT = Symbol(`ssrRenderComponent`);
	const SSR_RENDER_SLOT = Symbol(`ssrRenderSlot`);
	const SSR_RENDER_CLASS = Symbol(`ssrRenderClass`);
	const SSR_RENDER_STYLE = Symbol(`ssrRenderStyle`);
	const SSR_RENDER_ATTRS = Symbol(`ssrRenderAttrs`);
	const SSR_RENDER_ATTR = Symbol(`ssrRenderAttr`);
	const SSR_RENDER_DYNAMIC_ATTR = Symbol(`ssrRenderDynamicAttr`);
	const SSR_RENDER_LIST = Symbol(`ssrRenderList`);
	const SSR_LOOSE_EQUAL = Symbol(`ssrLooseEqual`);
	const SSR_LOOSE_CONTAIN = Symbol(`ssrLooseContain`);
	const SSR_RENDER_DYNAMIC_MODEL = Symbol(`ssrRenderDynamicModel`);
	const SSR_GET_DYNAMIC_MODEL_PROPS = Symbol(`ssrGetDynamicModelProps`);
	const SSR_RENDER_TELEPORT = Symbol(`ssrRenderTeleport`);
	const SSR_RENDER_SUSPENSE = Symbol(`ssrRenderSuspense`);
	const ssrHelpers = {
	    [SSR_INTERPOLATE]: `ssrInterpolate`,
	    [SSR_RENDER_VNODE]: `ssrRenderVNode`,
	    [SSR_RENDER_COMPONENT]: `ssrRenderComponent`,
	    [SSR_RENDER_SLOT]: `ssrRenderSlot`,
	    [SSR_RENDER_CLASS]: `ssrRenderClass`,
	    [SSR_RENDER_STYLE]: `ssrRenderStyle`,
	    [SSR_RENDER_ATTRS]: `ssrRenderAttrs`,
	    [SSR_RENDER_ATTR]: `ssrRenderAttr`,
	    [SSR_RENDER_DYNAMIC_ATTR]: `ssrRenderDynamicAttr`,
	    [SSR_RENDER_LIST]: `ssrRenderList`,
	    [SSR_LOOSE_EQUAL]: `ssrLooseEqual`,
	    [SSR_LOOSE_CONTAIN]: `ssrLooseContain`,
	    [SSR_RENDER_DYNAMIC_MODEL]: `ssrRenderDynamicModel`,
	    [SSR_GET_DYNAMIC_MODEL_PROPS]: `ssrGetDynamicModelProps`,
	    [SSR_RENDER_TELEPORT]: `ssrRenderTeleport`,
	    [SSR_RENDER_SUSPENSE]: `ssrRenderSuspense`
	};
	// Note: these are helpers imported from @vue/server-renderer
	// make sure the names match!
	compilerDom.registerRuntimeHelpers(ssrHelpers);

	// Plugin for the first transform pass, which simply constructs the AST node
	const ssrTransformIf = compilerDom.createStructuralDirectiveTransform(/^(if|else|else-if)$/, compilerDom.processIf);
	// This is called during the 2nd transform pass to construct the SSR-specific
	// codegen nodes.
	function ssrProcessIf(node, context, disableNestedFragments = false) {
	    const [rootBranch] = node.branches;
	    const ifStatement = compilerDom.createIfStatement(rootBranch.condition, processIfBranch(rootBranch, context, disableNestedFragments));
	    context.pushStatement(ifStatement);
	    let currentIf = ifStatement;
	    for (let i = 1; i < node.branches.length; i++) {
	        const branch = node.branches[i];
	        const branchBlockStatement = processIfBranch(branch, context, disableNestedFragments);
	        if (branch.condition) {
	            // else-if
	            currentIf = currentIf.alternate = compilerDom.createIfStatement(branch.condition, branchBlockStatement);
	        }
	        else {
	            // else
	            currentIf.alternate = branchBlockStatement;
	        }
	    }
	    if (!currentIf.alternate) {
	        currentIf.alternate = compilerDom.createBlockStatement([
	            compilerDom.createCallExpression(`_push`, ['`<!---->`'])
	        ]);
	    }
	}
	function processIfBranch(branch, context, disableNestedFragments = false) {
	    const { children } = branch;
	    const needFragmentWrapper = !disableNestedFragments &&
	        (children.length !== 1 || children[0].type !== 1 /* ELEMENT */) &&
	        // optimize away nested fragments when the only child is a ForNode
	        !(children.length === 1 && children[0].type === 11 /* FOR */);
	    return processChildrenAsStatement(children, context, needFragmentWrapper);
	}

	// Plugin for the first transform pass, which simply constructs the AST node
	const ssrTransformFor = compilerDom.createStructuralDirectiveTransform('for', compilerDom.processFor);
	// This is called during the 2nd transform pass to construct the SSR-specific
	// codegen nodes.
	function ssrProcessFor(node, context, disableNestedFragments = false) {
	    const needFragmentWrapper = !disableNestedFragments &&
	        (node.children.length !== 1 || node.children[0].type !== 1 /* ELEMENT */);
	    const renderLoop = compilerDom.createFunctionExpression(compilerDom.createForLoopParams(node.parseResult));
	    renderLoop.body = processChildrenAsStatement(node.children, context, needFragmentWrapper);
	    // v-for always renders a fragment unless explicitly disabled
	    if (!disableNestedFragments) {
	        context.pushStringPart(`<!--[-->`);
	    }
	    context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_LIST), [
	        node.source,
	        renderLoop
	    ]));
	    if (!disableNestedFragments) {
	        context.pushStringPart(`<!--]-->`);
	    }
	}

	const ssrTransformSlotOutlet = (node, context) => {
	    if (compilerDom.isSlotOutlet(node)) {
	        const { slotName, slotProps } = compilerDom.processSlotOutlet(node, context);
	        const args = [
	            `_ctx.$slots`,
	            slotName,
	            slotProps || `{}`,
	            // fallback content placeholder. will be replaced in the process phase
	            `null`,
	            `_push`,
	            `_parent`
	        ];
	        // inject slot scope id if current template uses :slotted
	        if (context.scopeId && context.slotted !== false) {
	            args.push(`"${context.scopeId}-s"`);
	        }
	        node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_SLOT), args);
	    }
	};
	function ssrProcessSlotOutlet(node, context) {
	    const renderCall = node.ssrCodegenNode;
	    // has fallback content
	    if (node.children.length) {
	        const fallbackRenderFn = compilerDom.createFunctionExpression([]);
	        fallbackRenderFn.body = processChildrenAsStatement(node.children, context);
	        // _renderSlot(slots, name, props, fallback, ...)
	        renderCall.arguments[3] = fallbackRenderFn;
	    }
	    // Forwarded <slot/>. Merge slot scope ids
	    if (context.withSlotScopeId) {
	        const slotScopeId = renderCall.arguments[6];
	        renderCall.arguments[6] = slotScopeId
	            ? `${slotScopeId} + _scopeId`
	            : `_scopeId`;
	    }
	    context.pushStatement(node.ssrCodegenNode);
	}

	function createSSRCompilerError(code, loc) {
	    return compilerDom.createCompilerError(code, loc, SSRErrorMessages);
	}
	const SSRErrorMessages = {
	    [60 /* X_SSR_CUSTOM_DIRECTIVE_NO_TRANSFORM */]: `Custom directive is missing corresponding SSR transform and will be ignored.`,
	    [61 /* X_SSR_UNSAFE_ATTR_NAME */]: `Unsafe attribute name for SSR.`,
	    [62 /* X_SSR_NO_TELEPORT_TARGET */]: `Missing the 'to' prop on teleport element.`,
	    [63 /* X_SSR_INVALID_AST_NODE */]: `Invalid AST node during SSR transform.`
	};

	// Note: this is a 2nd-pass codegen transform.
	function ssrProcessTeleport(node, context) {
	    const targetProp = compilerDom.findProp(node, 'to');
	    if (!targetProp) {
	        context.onError(createSSRCompilerError(62 /* X_SSR_NO_TELEPORT_TARGET */, node.loc));
	        return;
	    }
	    let target;
	    if (targetProp.type === 6 /* ATTRIBUTE */) {
	        target =
	            targetProp.value && compilerDom.createSimpleExpression(targetProp.value.content, true);
	    }
	    else {
	        target = targetProp.exp;
	    }
	    if (!target) {
	        context.onError(createSSRCompilerError(62 /* X_SSR_NO_TELEPORT_TARGET */, targetProp.loc));
	        return;
	    }
	    const disabledProp = compilerDom.findProp(node, 'disabled', false, true /* allow empty */);
	    const disabled = disabledProp
	        ? disabledProp.type === 6 /* ATTRIBUTE */
	            ? `true`
	            : disabledProp.exp || `false`
	        : `false`;
	    const contentRenderFn = compilerDom.createFunctionExpression([`_push`], undefined, // Body is added later
	    true, // newline
	    false, // isSlot
	    node.loc);
	    contentRenderFn.body = processChildrenAsStatement(node.children, context);
	    context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_TELEPORT), [
	        `_push`,
	        contentRenderFn,
	        target,
	        disabled,
	        `_parent`
	    ]));
	}

	const wipMap = new WeakMap();
	// phase 1
	function ssrTransformSuspense(node, context) {
	    return () => {
	        if (node.children.length) {
	            const wipEntry = {
	                slotsExp: null,
	                wipSlots: []
	            };
	            wipMap.set(node, wipEntry);
	            wipEntry.slotsExp = compilerDom.buildSlots(node, context, (_props, children, loc) => {
	                const fn = compilerDom.createFunctionExpression([], undefined, // no return, assign body later
	                true, // newline
	                false, // suspense slots are not treated as normal slots
	                loc);
	                wipEntry.wipSlots.push({
	                    fn,
	                    children
	                });
	                return fn;
	            }).slots;
	        }
	    };
	}
	// phase 2
	function ssrProcessSuspense(node, context) {
	    // complete wip slots with ssr code
	    const wipEntry = wipMap.get(node);
	    if (!wipEntry) {
	        return;
	    }
	    const { slotsExp, wipSlots } = wipEntry;
	    for (let i = 0; i < wipSlots.length; i++) {
	        const { fn, children } = wipSlots[i];
	        fn.body = processChildrenAsStatement(children, context);
	    }
	    // _push(ssrRenderSuspense(slots))
	    context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_SUSPENSE), [
	        `_push`,
	        slotsExp
	    ]));
	}

	function ssrProcessTransitionGroup(node, context) {
	    const tag = compilerDom.findProp(node, 'tag');
	    if (tag) {
	        if (tag.type === 7 /* DIRECTIVE */) {
	            // dynamic :tag
	            context.pushStringPart(`<`);
	            context.pushStringPart(tag.exp);
	            context.pushStringPart(`>`);
	            processChildren(node.children, context, false, 
	            /**
	             * TransitionGroup has the special runtime behavior of flattening and
	             * concatenating all children into a single fragment (in order for them to
	             * be pathced using the same key map) so we need to account for that here
	             * by disabling nested fragment wrappers from being generated.
	             */
	            true);
	            context.pushStringPart(`</`);
	            context.pushStringPart(tag.exp);
	            context.pushStringPart(`>`);
	        }
	        else {
	            // static tag
	            context.pushStringPart(`<${tag.value.content}>`);
	            processChildren(node.children, context, false, true);
	            context.pushStringPart(`</${tag.value.content}>`);
	        }
	    }
	    else {
	        // fragment
	        processChildren(node.children, context, true, true);
	    }
	}

	// We need to construct the slot functions in the 1st pass to ensure proper
	// scope tracking, but the children of each slot cannot be processed until
	// the 2nd pass, so we store the WIP slot functions in a weakmap during the 1st
	// pass and complete them in the 2nd pass.
	const wipMap$1 = new WeakMap();
	const componentTypeMap = new WeakMap();
	// ssr component transform is done in two phases:
	// In phase 1. we use `buildSlot` to analyze the children of the component into
	// WIP slot functions (it must be done in phase 1 because `buildSlot` relies on
	// the core transform context).
	// In phase 2. we convert the WIP slots from phase 1 into ssr-specific codegen
	// nodes.
	const ssrTransformComponent = (node, context) => {
	    if (node.type !== 1 /* ELEMENT */ ||
	        node.tagType !== 1 /* COMPONENT */) {
	        return;
	    }
	    const component = compilerDom.resolveComponentType(node, context, true /* ssr */);
	    componentTypeMap.set(node, component);
	    if (shared$1.isSymbol(component)) {
	        if (component === compilerDom.SUSPENSE) {
	            return ssrTransformSuspense(node, context);
	        }
	        return; // built-in component: fallthrough
	    }
	    // Build the fallback vnode-based branch for the component's slots.
	    // We need to clone the node into a fresh copy and use the buildSlots' logic
	    // to get access to the children of each slot. We then compile them with
	    // a child transform pipeline using vnode-based transforms (instead of ssr-
	    // based ones), and save the result branch (a ReturnStatement) in an array.
	    // The branch is retrieved when processing slots again in ssr mode.
	    const vnodeBranches = [];
	    const clonedNode = clone(node);
	    return function ssrPostTransformComponent() {
	        // Using the cloned node, build the normal VNode-based branches (for
	        // fallback in case the child is render-fn based). Store them in an array
	        // for later use.
	        if (clonedNode.children.length) {
	            compilerDom.buildSlots(clonedNode, context, (props, children) => {
	                vnodeBranches.push(createVNodeSlotBranch(props, children, context));
	                return compilerDom.createFunctionExpression(undefined);
	            });
	        }
	        const props = node.props.length > 0
	            ? // note we are not passing ssr: true here because for components, v-on
	                // handlers should still be passed
	                compilerDom.buildProps(node, context).props || `null`
	            : `null`;
	        const wipEntries = [];
	        wipMap$1.set(node, wipEntries);
	        const buildSSRSlotFn = (props, children, loc) => {
	            const fn = compilerDom.createFunctionExpression([props || `_`, `_push`, `_parent`, `_scopeId`], undefined, // no return, assign body later
	            true, // newline
	            true, // isSlot
	            loc);
	            wipEntries.push({
	                fn,
	                children,
	                // also collect the corresponding vnode branch built earlier
	                vnodeBranch: vnodeBranches[wipEntries.length]
	            });
	            return fn;
	        };
	        const slots = node.children.length
	            ? compilerDom.buildSlots(node, context, buildSSRSlotFn).slots
	            : `null`;
	        if (typeof component !== 'string') {
	            // dynamic component that resolved to a `resolveDynamicComponent` call
	            // expression - since the resolved result may be a plain element (string)
	            // or a VNode, handle it with `renderVNode`.
	            node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_VNODE), [
	                `_push`,
	                compilerDom.createCallExpression(context.helper(compilerDom.CREATE_VNODE), [
	                    component,
	                    props,
	                    slots
	                ]),
	                `_parent`
	            ]);
	        }
	        else {
	            node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_COMPONENT), [component, props, slots, `_parent`]);
	        }
	    };
	};
	function ssrProcessComponent(node, context) {
	    const component = componentTypeMap.get(node);
	    if (!node.ssrCodegenNode) {
	        // this is a built-in component that fell-through.
	        if (component === compilerDom.TELEPORT) {
	            return ssrProcessTeleport(node, context);
	        }
	        else if (component === compilerDom.SUSPENSE) {
	            return ssrProcessSuspense(node, context);
	        }
	        else if (component === compilerDom.TRANSITION_GROUP) {
	            return ssrProcessTransitionGroup(node, context);
	        }
	        else {
	            // real fall-through (e.g. KeepAlive): just render its children.
	            processChildren(node.children, context);
	        }
	    }
	    else {
	        // finish up slot function expressions from the 1st pass.
	        const wipEntries = wipMap$1.get(node) || [];
	        for (let i = 0; i < wipEntries.length; i++) {
	            const { fn, children, vnodeBranch } = wipEntries[i];
	            // For each slot, we generate two branches: one SSR-optimized branch and
	            // one normal vnode-based branch. The branches are taken based on the
	            // presence of the 2nd `_push` argument (which is only present if the slot
	            // is called by `_ssrRenderSlot`.
	            fn.body = compilerDom.createIfStatement(compilerDom.createSimpleExpression(`_push`, false), processChildrenAsStatement(children, context, false, true /* withSlotScopeId */), vnodeBranch);
	        }
	        // component is inside a slot, inherit slot scope Id
	        if (context.withSlotScopeId) {
	            node.ssrCodegenNode.arguments.push(`_scopeId`);
	        }
	        if (typeof component === 'string') {
	            // static component
	            context.pushStatement(compilerDom.createCallExpression(`_push`, [node.ssrCodegenNode]));
	        }
	        else {
	            // dynamic component (`resolveDynamicComponent` call)
	            // the codegen node is a `renderVNode` call
	            context.pushStatement(node.ssrCodegenNode);
	        }
	    }
	}
	const rawOptionsMap = new WeakMap();
	const [baseNodeTransforms, baseDirectiveTransforms] = compilerDom.getBaseTransformPreset(true);
	const vnodeNodeTransforms = [...baseNodeTransforms, ...compilerDom.DOMNodeTransforms];
	const vnodeDirectiveTransforms = {
	    ...baseDirectiveTransforms,
	    ...compilerDom.DOMDirectiveTransforms
	};
	function createVNodeSlotBranch(props, children, parentContext) {
	    // apply a sub-transform using vnode-based transforms.
	    const rawOptions = rawOptionsMap.get(parentContext.root);
	    const subOptions = {
	        ...rawOptions,
	        // overwrite with vnode-based transforms
	        nodeTransforms: [
	            ...vnodeNodeTransforms,
	            ...(rawOptions.nodeTransforms || [])
	        ],
	        directiveTransforms: {
	            ...vnodeDirectiveTransforms,
	            ...(rawOptions.directiveTransforms || {})
	        }
	    };
	    // wrap the children with a wrapper template for proper children treatment.
	    const wrapperNode = {
	        type: 1 /* ELEMENT */,
	        ns: 0 /* HTML */,
	        tag: 'template',
	        tagType: 3 /* TEMPLATE */,
	        isSelfClosing: false,
	        // important: provide v-slot="props" on the wrapper for proper
	        // scope analysis
	        props: [
	            {
	                type: 7 /* DIRECTIVE */,
	                name: 'slot',
	                exp: props,
	                arg: undefined,
	                modifiers: [],
	                loc: compilerDom.locStub
	            }
	        ],
	        children,
	        loc: compilerDom.locStub,
	        codegenNode: undefined
	    };
	    subTransform(wrapperNode, subOptions, parentContext);
	    return compilerDom.createReturnStatement(children);
	}
	function subTransform(node, options, parentContext) {
	    const childRoot = compilerDom.createRoot([node]);
	    const childContext = compilerDom.createTransformContext(childRoot, options);
	    // this sub transform is for vnode fallback branch so it should be handled
	    // like normal render functions
	    childContext.ssr = false;
	    // inherit parent scope analysis state
	    childContext.scopes = { ...parentContext.scopes };
	    childContext.identifiers = { ...parentContext.identifiers };
	    childContext.imports = parentContext.imports;
	    // traverse
	    compilerDom.traverseNode(childRoot, childContext);
	    ['helpers', 'components', 'directives'].forEach(key => {
	        childContext[key].forEach((value, helperKey) => {
	            if (key === 'helpers') {
	                const parentCount = parentContext.helpers.get(helperKey);
	                if (parentCount === undefined) {
	                    parentContext.helpers.set(helperKey, value);
	                }
	                else {
	                    parentContext.helpers.set(helperKey, value + parentCount);
	                }
	            }
	            else {
	                parentContext[key].add(value);
	            }
	        });
	    });
	    // imports/hoists are not merged because:
	    // - imports are only used for asset urls and should be consistent between
	    //   node/client branches
	    // - hoists are not enabled for the client branch here
	}
	function clone(v) {
	    if (shared$1.isArray(v)) {
	        return v.map(clone);
	    }
	    else if (shared$1.isObject(v)) {
	        const res = {};
	        for (const key in v) {
	            res[key] = clone(v[key]);
	        }
	        return res;
	    }
	    else {
	        return v;
	    }
	}

	// for directives with children overwrite (e.g. v-html & v-text), we need to
	// store the raw children so that they can be added in the 2nd pass.
	const rawChildrenMap = new WeakMap();
	const ssrTransformElement = (node, context) => {
	    if (node.type !== 1 /* ELEMENT */ ||
	        node.tagType !== 0 /* ELEMENT */) {
	        return;
	    }
	    return function ssrPostTransformElement() {
	        // element
	        // generate the template literal representing the open tag.
	        const openTag = [`<${node.tag}`];
	        // some tags need to be passed to runtime for special checks
	        const needTagForRuntime = node.tag === 'textarea' || node.tag.indexOf('-') > 0;
	        // v-bind="obj" or v-bind:[key] can potentially overwrite other static
	        // attrs and can affect final rendering result, so when they are present
	        // we need to bail out to full `renderAttrs`
	        const hasDynamicVBind = compilerDom.hasDynamicKeyVBind(node);
	        if (hasDynamicVBind) {
	            const { props } = compilerDom.buildProps(node, context, node.props, true /* ssr */);
	            if (props) {
	                const propsExp = compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTRS), [props]);
	                if (node.tag === 'textarea') {
	                    const existingText = node.children[0];
	                    // If interpolation, this is dynamic <textarea> content, potentially
	                    // injected by v-model and takes higher priority than v-bind value
	                    if (!existingText || existingText.type !== 5 /* INTERPOLATION */) {
	                        // <textarea> with dynamic v-bind. We don't know if the final props
	                        // will contain .value, so we will have to do something special:
	                        // assign the merged props to a temp variable, and check whether
	                        // it contains value (if yes, render is as children).
	                        const tempId = `_temp${context.temps++}`;
	                        propsExp.arguments = [
	                            compilerDom.createAssignmentExpression(compilerDom.createSimpleExpression(tempId, false), props)
	                        ];
	                        rawChildrenMap.set(node, compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [
	                            compilerDom.createConditionalExpression(compilerDom.createSimpleExpression(`"value" in ${tempId}`, false), compilerDom.createSimpleExpression(`${tempId}.value`, false), compilerDom.createSimpleExpression(existingText ? existingText.content : ``, true), false)
	                        ]));
	                    }
	                }
	                else if (node.tag === 'input') {
	                    // <input v-bind="obj" v-model>
	                    // we need to determine the props to render for the dynamic v-model
	                    // and merge it with the v-bind expression.
	                    const vModel = findVModel(node);
	                    if (vModel) {
	                        // 1. save the props (san v-model) in a temp variable
	                        const tempId = `_temp${context.temps++}`;
	                        const tempExp = compilerDom.createSimpleExpression(tempId, false);
	                        propsExp.arguments = [
	                            compilerDom.createSequenceExpression([
	                                compilerDom.createAssignmentExpression(tempExp, props),
	                                compilerDom.createCallExpression(context.helper(compilerDom.MERGE_PROPS), [
	                                    tempExp,
	                                    compilerDom.createCallExpression(context.helper(SSR_GET_DYNAMIC_MODEL_PROPS), [
	                                        tempExp,
	                                        vModel.exp // model
	                                    ])
	                                ])
	                            ])
	                        ];
	                    }
	                }
	                if (needTagForRuntime) {
	                    propsExp.arguments.push(`"${node.tag}"`);
	                }
	                openTag.push(propsExp);
	            }
	        }
	        // book keeping static/dynamic class merging.
	        let dynamicClassBinding = undefined;
	        let staticClassBinding = undefined;
	        // all style bindings are converted to dynamic by transformStyle.
	        // but we need to make sure to merge them.
	        let dynamicStyleBinding = undefined;
	        for (let i = 0; i < node.props.length; i++) {
	            const prop = node.props[i];
	            // ignore true-value/false-value on input
	            if (node.tag === 'input' && isTrueFalseValue(prop)) {
	                continue;
	            }
	            // special cases with children override
	            if (prop.type === 7 /* DIRECTIVE */) {
	                if (prop.name === 'html' && prop.exp) {
	                    rawChildrenMap.set(node, prop.exp);
	                }
	                else if (prop.name === 'text' && prop.exp) {
	                    node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
	                }
	                else if (prop.name === 'slot') {
	                    context.onError(compilerDom.createCompilerError(39 /* X_V_SLOT_MISPLACED */, prop.loc));
	                }
	                else if (isTextareaWithValue(node, prop) && prop.exp) {
	                    if (!hasDynamicVBind) {
	                        node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
	                    }
	                }
	                else {
	                    // Directive transforms.
	                    const directiveTransform = context.directiveTransforms[prop.name];
	                    if (!directiveTransform) {
	                        // no corresponding ssr directive transform found.
	                        context.onError(createSSRCompilerError(60 /* X_SSR_CUSTOM_DIRECTIVE_NO_TRANSFORM */, prop.loc));
	                    }
	                    else if (!hasDynamicVBind) {
	                        const { props, ssrTagParts } = directiveTransform(prop, node, context);
	                        if (ssrTagParts) {
	                            openTag.push(...ssrTagParts);
	                        }
	                        for (let j = 0; j < props.length; j++) {
	                            const { key, value } = props[j];
	                            if (compilerDom.isStaticExp(key)) {
	                                let attrName = key.content;
	                                // static key attr
	                                if (attrName === 'key' || attrName === 'ref') {
	                                    continue;
	                                }
	                                if (attrName === 'class') {
	                                    openTag.push(` class="`, (dynamicClassBinding = compilerDom.createCallExpression(context.helper(SSR_RENDER_CLASS), [value])), `"`);
	                                }
	                                else if (attrName === 'style') {
	                                    if (dynamicStyleBinding) {
	                                        // already has style binding, merge into it.
	                                        mergeCall(dynamicStyleBinding, value);
	                                    }
	                                    else {
	                                        openTag.push(` style="`, (dynamicStyleBinding = compilerDom.createCallExpression(context.helper(SSR_RENDER_STYLE), [value])), `"`);
	                                    }
	                                }
	                                else {
	                                    attrName =
	                                        node.tag.indexOf('-') > 0
	                                            ? attrName // preserve raw name on custom elements
	                                            : shared$1.propsToAttrMap[attrName] || attrName.toLowerCase();
	                                    if (shared$1.isBooleanAttr(attrName)) {
	                                        openTag.push(compilerDom.createConditionalExpression(value, compilerDom.createSimpleExpression(' ' + attrName, true), compilerDom.createSimpleExpression('', true), false /* no newline */));
	                                    }
	                                    else if (shared$1.isSSRSafeAttrName(attrName)) {
	                                        openTag.push(compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTR), [
	                                            key,
	                                            value
	                                        ]));
	                                    }
	                                    else {
	                                        context.onError(createSSRCompilerError(61 /* X_SSR_UNSAFE_ATTR_NAME */, key.loc));
	                                    }
	                                }
	                            }
	                            else {
	                                // dynamic key attr
	                                // this branch is only encountered for custom directive
	                                // transforms that returns properties with dynamic keys
	                                const args = [key, value];
	                                if (needTagForRuntime) {
	                                    args.push(`"${node.tag}"`);
	                                }
	                                openTag.push(compilerDom.createCallExpression(context.helper(SSR_RENDER_DYNAMIC_ATTR), args));
	                            }
	                        }
	                    }
	                }
	            }
	            else {
	                // special case: value on <textarea>
	                if (node.tag === 'textarea' && prop.name === 'value' && prop.value) {
	                    rawChildrenMap.set(node, shared$1.escapeHtml(prop.value.content));
	                }
	                else if (!hasDynamicVBind) {
	                    if (prop.name === 'key' || prop.name === 'ref') {
	                        continue;
	                    }
	                    // static prop
	                    if (prop.name === 'class' && prop.value) {
	                        staticClassBinding = JSON.stringify(prop.value.content);
	                    }
	                    openTag.push(` ${prop.name}` +
	                        (prop.value ? `="${shared$1.escapeHtml(prop.value.content)}"` : ``));
	                }
	            }
	        }
	        // handle co-existence of dynamic + static class bindings
	        if (dynamicClassBinding && staticClassBinding) {
	            mergeCall(dynamicClassBinding, staticClassBinding);
	            removeStaticBinding(openTag, 'class');
	        }
	        if (context.scopeId) {
	            openTag.push(` ${context.scopeId}`);
	        }
	        node.ssrCodegenNode = compilerDom.createTemplateLiteral(openTag);
	    };
	};
	function isTrueFalseValue(prop) {
	    if (prop.type === 7 /* DIRECTIVE */) {
	        return (prop.name === 'bind' &&
	            prop.arg &&
	            compilerDom.isStaticExp(prop.arg) &&
	            (prop.arg.content === 'true-value' || prop.arg.content === 'false-value'));
	    }
	    else {
	        return prop.name === 'true-value' || prop.name === 'false-value';
	    }
	}
	function isTextareaWithValue(node, prop) {
	    return !!(node.tag === 'textarea' &&
	        prop.name === 'bind' &&
	        compilerDom.isBindKey(prop.arg, 'value'));
	}
	function mergeCall(call, arg) {
	    const existing = call.arguments[0];
	    if (existing.type === 17 /* JS_ARRAY_EXPRESSION */) {
	        existing.elements.push(arg);
	    }
	    else {
	        call.arguments[0] = compilerDom.createArrayExpression([existing, arg]);
	    }
	}
	function removeStaticBinding(tag, binding) {
	    const regExp = new RegExp(`^ ${binding}=".+"$`);
	    const i = tag.findIndex(e => typeof e === 'string' && regExp.test(e));
	    if (i > -1) {
	        tag.splice(i, 1);
	    }
	}
	function findVModel(node) {
	    return node.props.find(p => p.type === 7 /* DIRECTIVE */ && p.name === 'model' && p.exp);
	}
	function ssrProcessElement(node, context) {
	    const isVoidTag = context.options.isVoidTag || shared$1.NO;
	    const elementsToAdd = node.ssrCodegenNode.elements;
	    for (let j = 0; j < elementsToAdd.length; j++) {
	        context.pushStringPart(elementsToAdd[j]);
	    }
	    // Handle slot scopeId
	    if (context.withSlotScopeId) {
	        context.pushStringPart(compilerDom.createSimpleExpression(`_scopeId`, false));
	    }
	    // close open tag
	    context.pushStringPart(`>`);
	    const rawChildren = rawChildrenMap.get(node);
	    if (rawChildren) {
	        context.pushStringPart(rawChildren);
	    }
	    else if (node.children.length) {
	        processChildren(node.children, context);
	    }
	    if (!isVoidTag(node.tag)) {
	        // push closing tag
	        context.pushStringPart(`</${node.tag}>`);
	    }
	}

	// Because SSR codegen output is completely different from client-side output
	// (e.g. multiple elements can be concatenated into a single template literal
	// instead of each getting a corresponding call), we need to apply an extra
	// transform pass to convert the template AST into a fresh JS AST before
	// passing it to codegen.
	function ssrCodegenTransform(ast, options) {
	    const context = createSSRTransformContext(ast, options);
	    // inject SFC <style> CSS variables
	    // we do this instead of inlining the expression to ensure the vars are
	    // only resolved once per render
	    if (options.ssrCssVars) {
	        const varsExp = compilerDom.processExpression(compilerDom.createSimpleExpression(options.ssrCssVars, false), compilerDom.createTransformContext(compilerDom.createRoot([]), options));
	        context.body.push(compilerDom.createCompoundExpression([`const _cssVars = { style: `, varsExp, `}`]));
	    }
	    const isFragment = ast.children.length > 1 && ast.children.some(c => !compilerDom.isText(c));
	    processChildren(ast.children, context, isFragment);
	    ast.codegenNode = compilerDom.createBlockStatement(context.body);
	    // Finalize helpers.
	    // We need to separate helpers imported from 'vue' vs. '@vue/server-renderer'
	    ast.ssrHelpers = Array.from(new Set([
	        ...ast.helpers.filter(h => h in ssrHelpers),
	        ...context.helpers
	    ]));
	    ast.helpers = ast.helpers.filter(h => !(h in ssrHelpers));
	}
	function createSSRTransformContext(root, options, helpers = new Set(), withSlotScopeId = false) {
	    const body = [];
	    let currentString = null;
	    return {
	        root,
	        options,
	        body,
	        helpers,
	        withSlotScopeId,
	        onError: options.onError ||
	            (e => {
	                throw e;
	            }),
	        helper(name) {
	            helpers.add(name);
	            return name;
	        },
	        pushStringPart(part) {
	            if (!currentString) {
	                const currentCall = compilerDom.createCallExpression(`_push`);
	                body.push(currentCall);
	                currentString = compilerDom.createTemplateLiteral([]);
	                currentCall.arguments.push(currentString);
	            }
	            const bufferedElements = currentString.elements;
	            const lastItem = bufferedElements[bufferedElements.length - 1];
	            if (shared$1.isString(part) && shared$1.isString(lastItem)) {
	                bufferedElements[bufferedElements.length - 1] += part;
	            }
	            else {
	                bufferedElements.push(part);
	            }
	        },
	        pushStatement(statement) {
	            // close current string
	            currentString = null;
	            body.push(statement);
	        }
	    };
	}
	function createChildContext(parent, withSlotScopeId = parent.withSlotScopeId) {
	    // ensure child inherits parent helpers
	    return createSSRTransformContext(parent.root, parent.options, parent.helpers, withSlotScopeId);
	}
	function processChildren(children, context, asFragment = false, disableNestedFragments = false) {
	    if (asFragment) {
	        context.pushStringPart(`<!--[-->`);
	    }
	    for (let i = 0; i < children.length; i++) {
	        const child = children[i];
	        switch (child.type) {
	            case 1 /* ELEMENT */:
	                switch (child.tagType) {
	                    case 0 /* ELEMENT */:
	                        ssrProcessElement(child, context);
	                        break;
	                    case 1 /* COMPONENT */:
	                        ssrProcessComponent(child, context);
	                        break;
	                    case 2 /* SLOT */:
	                        ssrProcessSlotOutlet(child, context);
	                        break;
	                    case 3 /* TEMPLATE */:
	                        // TODO
	                        break;
	                    default:
	                        context.onError(createSSRCompilerError(63 /* X_SSR_INVALID_AST_NODE */, child.loc));
	                        // make sure we exhaust all possible types
	                        const exhaustiveCheck = child;
	                        return exhaustiveCheck;
	                }
	                break;
	            case 2 /* TEXT */:
	                context.pushStringPart(shared$1.escapeHtml(child.content));
	                break;
	            case 3 /* COMMENT */:
	                // no need to escape comment here because the AST can only
	                // contain valid comments.
	                context.pushStringPart(`<!--${child.content}-->`);
	                break;
	            case 5 /* INTERPOLATION */:
	                context.pushStringPart(compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [child.content]));
	                break;
	            case 9 /* IF */:
	                ssrProcessIf(child, context, disableNestedFragments);
	                break;
	            case 11 /* FOR */:
	                ssrProcessFor(child, context, disableNestedFragments);
	                break;
	            case 10 /* IF_BRANCH */:
	                // no-op - handled by ssrProcessIf
	                break;
	            case 12 /* TEXT_CALL */:
	            case 8 /* COMPOUND_EXPRESSION */:
	                // no-op - these two types can never appear as template child node since
	                // `transformText` is not used during SSR compile.
	                break;
	            default:
	                context.onError(createSSRCompilerError(63 /* X_SSR_INVALID_AST_NODE */, child.loc));
	                // make sure we exhaust all possible types
	                const exhaustiveCheck = child;
	                return exhaustiveCheck;
	        }
	    }
	    if (asFragment) {
	        context.pushStringPart(`<!--]-->`);
	    }
	}
	function processChildrenAsStatement(children, parentContext, asFragment = false, withSlotScopeId = parentContext.withSlotScopeId) {
	    const childContext = createChildContext(parentContext, withSlotScopeId);
	    processChildren(children, childContext, asFragment);
	    return compilerDom.createBlockStatement(childContext.body);
	}

	const ssrTransformModel = (dir, node, context) => {
	    const model = dir.exp;
	    function checkDuplicatedValue() {
	        const value = compilerDom.findProp(node, 'value');
	        if (value) {
	            context.onError(compilerDom.createDOMCompilerError(56 /* X_V_MODEL_UNNECESSARY_VALUE */, value.loc));
	        }
	    }
	    if (node.tagType === 0 /* ELEMENT */) {
	        const res = { props: [] };
	        const defaultProps = [
	            // default value binding for text type inputs
	            compilerDom.createObjectProperty(`value`, model)
	        ];
	        if (node.tag === 'input') {
	            const type = compilerDom.findProp(node, 'type');
	            if (type) {
	                const value = findValueBinding(node);
	                if (type.type === 7 /* DIRECTIVE */) {
	                    // dynamic type
	                    res.ssrTagParts = [
	                        compilerDom.createCallExpression(context.helper(SSR_RENDER_DYNAMIC_MODEL), [
	                            type.exp,
	                            model,
	                            value
	                        ])
	                    ];
	                }
	                else if (type.value) {
	                    // static type
	                    switch (type.value.content) {
	                        case 'radio':
	                            res.props = [
	                                compilerDom.createObjectProperty(`checked`, compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
	                                    model,
	                                    value
	                                ]))
	                            ];
	                            break;
	                        case 'checkbox':
	                            const trueValueBinding = compilerDom.findProp(node, 'true-value');
	                            if (trueValueBinding) {
	                                const trueValue = trueValueBinding.type === 6 /* ATTRIBUTE */
	                                    ? JSON.stringify(trueValueBinding.value.content)
	                                    : trueValueBinding.exp;
	                                res.props = [
	                                    compilerDom.createObjectProperty(`checked`, compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [
	                                        model,
	                                        trueValue
	                                    ]))
	                                ];
	                            }
	                            else {
	                                res.props = [
	                                    compilerDom.createObjectProperty(`checked`, compilerDom.createConditionalExpression(compilerDom.createCallExpression(`Array.isArray`, [model]), compilerDom.createCallExpression(context.helper(SSR_LOOSE_CONTAIN), [
	                                        model,
	                                        value
	                                    ]), model))
	                                ];
	                            }
	                            break;
	                        case 'file':
	                            context.onError(compilerDom.createDOMCompilerError(55 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));
	                            break;
	                        default:
	                            checkDuplicatedValue();
	                            res.props = defaultProps;
	                            break;
	                    }
	                }
	            }
	            else if (compilerDom.hasDynamicKeyVBind(node)) ;
	            else {
	                // text type
	                checkDuplicatedValue();
	                res.props = defaultProps;
	            }
	        }
	        else if (node.tag === 'textarea') {
	            checkDuplicatedValue();
	            node.children = [compilerDom.createInterpolation(model, model.loc)];
	        }
	        else if (node.tag === 'select') ;
	        else {
	            context.onError(compilerDom.createDOMCompilerError(53 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));
	        }
	        return res;
	    }
	    else {
	        // component v-model
	        return compilerDom.transformModel(dir, node, context);
	    }
	};
	function findValueBinding(node) {
	    const valueBinding = compilerDom.findProp(node, 'value');
	    return valueBinding
	        ? valueBinding.type === 7 /* DIRECTIVE */
	            ? valueBinding.exp
	            : compilerDom.createSimpleExpression(valueBinding.value.content, true)
	        : compilerDom.createSimpleExpression(`null`, false);
	}

	const ssrTransformShow = (dir, node, context) => {
	    if (!dir.exp) {
	        context.onError(compilerDom.createDOMCompilerError(57 /* X_V_SHOW_NO_EXPRESSION */));
	    }
	    return {
	        props: [
	            compilerDom.createObjectProperty(`style`, compilerDom.createConditionalExpression(dir.exp, compilerDom.createSimpleExpression(`null`, false), compilerDom.createObjectExpression([
	                compilerDom.createObjectProperty(`display`, compilerDom.createSimpleExpression(`none`, true))
	            ]), false /* no newline */))
	        ]
	    };
	};

	const hasSingleChild = (node) => node.children.filter(n => n.type !== 3 /* COMMENT */).length === 1;
	const ssrInjectFallthroughAttrs = (node, context) => {
	    // _attrs is provided as a function argument.
	    // mark it as a known identifier so that it doesn't get prefixed by
	    // transformExpression.
	    if (node.type === 0 /* ROOT */) {
	        context.identifiers._attrs = 1;
	    }
	    const parent = context.parent;
	    if (!parent || parent.type !== 0 /* ROOT */) {
	        return;
	    }
	    if (node.type === 10 /* IF_BRANCH */ && hasSingleChild(node)) {
	        injectFallthroughAttrs(node.children[0]);
	    }
	    else if (hasSingleChild(parent)) {
	        injectFallthroughAttrs(node);
	    }
	};
	function injectFallthroughAttrs(node) {
	    if (node.type === 1 /* ELEMENT */ &&
	        (node.tagType === 0 /* ELEMENT */ ||
	            node.tagType === 1 /* COMPONENT */) &&
	        !compilerDom.findDir(node, 'for')) {
	        node.props.push({
	            type: 7 /* DIRECTIVE */,
	            name: 'bind',
	            arg: undefined,
	            exp: compilerDom.createSimpleExpression(`_attrs`, false),
	            modifiers: [],
	            loc: compilerDom.locStub
	        });
	    }
	}

	const ssrInjectCssVars = (node, context) => {
	    if (!context.ssrCssVars) {
	        return;
	    }
	    // _cssVars is initialized once per render function
	    // the code is injected in ssrCodegenTransform when creating the
	    // ssr transform context
	    if (node.type === 0 /* ROOT */) {
	        context.identifiers._cssVars = 1;
	    }
	    const parent = context.parent;
	    if (!parent || parent.type !== 0 /* ROOT */) {
	        return;
	    }
	    if (node.type === 10 /* IF_BRANCH */) {
	        for (const child of node.children) {
	            injectCssVars(child);
	        }
	    }
	    else {
	        injectCssVars(node);
	    }
	};
	function injectCssVars(node) {
	    if (node.type === 1 /* ELEMENT */ &&
	        (node.tagType === 0 /* ELEMENT */ ||
	            node.tagType === 1 /* COMPONENT */) &&
	        !compilerDom.findDir(node, 'for')) {
	        if (compilerDom.isBuiltInType(node.tag, 'Suspense')) {
	            for (const child of node.children) {
	                if (child.type === 1 /* ELEMENT */ &&
	                    child.tagType === 3 /* TEMPLATE */) {
	                    // suspense slot
	                    child.children.forEach(injectCssVars);
	                }
	                else {
	                    injectCssVars(child);
	                }
	            }
	        }
	        else {
	            node.props.push({
	                type: 7 /* DIRECTIVE */,
	                name: 'bind',
	                arg: undefined,
	                exp: compilerDom.createSimpleExpression(`_cssVars`, false),
	                modifiers: [],
	                loc: compilerDom.locStub
	            });
	        }
	    }
	}

	function compile(template, options = {}) {
	    options = {
	        ...options,
	        // apply DOM-specific parsing options
	        ...compilerDom.parserOptions,
	        ssr: true,
	        scopeId: options.mode === 'function' ? null : options.scopeId,
	        // always prefix since compiler-ssr doesn't have size concern
	        prefixIdentifiers: true,
	        // disable optimizations that are unnecessary for ssr
	        cacheHandlers: false,
	        hoistStatic: false
	    };
	    const ast = compilerDom.baseParse(template, options);
	    // Save raw options for AST. This is needed when performing sub-transforms
	    // on slot vnode branches.
	    rawOptionsMap.set(ast, options);
	    compilerDom.transform(ast, {
	        ...options,
	        nodeTransforms: [
	            ssrTransformIf,
	            ssrTransformFor,
	            compilerDom.trackVForSlotScopes,
	            compilerDom.transformExpression,
	            ssrTransformSlotOutlet,
	            ssrInjectFallthroughAttrs,
	            ssrInjectCssVars,
	            ssrTransformElement,
	            ssrTransformComponent,
	            compilerDom.trackSlotScopes,
	            compilerDom.transformStyle,
	            ...(options.nodeTransforms || []) // user transforms
	        ],
	        directiveTransforms: {
	            // reusing core v-bind
	            bind: compilerDom.transformBind,
	            // model and show has dedicated SSR handling
	            model: ssrTransformModel,
	            show: ssrTransformShow,
	            // the following are ignored during SSR
	            on: compilerDom.noopDirectiveTransform,
	            cloak: compilerDom.noopDirectiveTransform,
	            once: compilerDom.noopDirectiveTransform,
	            ...(options.directiveTransforms || {}) // user transforms
	        }
	    });
	    // traverse the template AST and convert into SSR codegen AST
	    // by replacing ast.codegenNode.
	    ssrCodegenTransform(ast, options);
	    return compilerDom.generate(ast, options);
	}

	compilerSsr_cjs.compile = compile;

	var _colorette_1_2_2_colorette = {};

	let enabled =
	  !("NO_COLOR" in {}) &&
	  ("FORCE_COLOR" in {} ||
	    "darwin" === "win32" ||
	    (null != null   ));

	const raw = (open, close, searchRegex, replaceValue) => (s) =>
	  enabled
	    ? open +
	      (~(s += "").indexOf(close, 4) // skip opening \x1b[
	        ? s.replace(searchRegex, replaceValue)
	        : s) +
	      close
	    : s;

	const init = (open, close) => {
	  return raw(
	    `\x1b[${open}m`,
	    `\x1b[${close}m`,
	    new RegExp(`\\x1b\\[${close}m`, "g"),
	    `\x1b[${open}m`
	  )
	};

	_colorette_1_2_2_colorette.options = Object.defineProperty({}, "enabled", {
	  get: () => enabled,
	  set: (value) => (enabled = value),
	});

	_colorette_1_2_2_colorette.reset = init(0, 0);
	_colorette_1_2_2_colorette.bold = raw("\x1b[1m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[1m");
	_colorette_1_2_2_colorette.dim = raw("\x1b[2m", "\x1b[22m", /\x1b\[22m/g, "\x1b[22m\x1b[2m");
	_colorette_1_2_2_colorette.italic = init(3, 23);
	_colorette_1_2_2_colorette.underline = init(4, 24);
	_colorette_1_2_2_colorette.inverse = init(7, 27);
	_colorette_1_2_2_colorette.hidden = init(8, 28);
	_colorette_1_2_2_colorette.strikethrough = init(9, 29);
	_colorette_1_2_2_colorette.black = init(30, 39);
	_colorette_1_2_2_colorette.red = init(31, 39);
	_colorette_1_2_2_colorette.green = init(32, 39);
	_colorette_1_2_2_colorette.yellow = init(33, 39);
	_colorette_1_2_2_colorette.blue = init(34, 39);
	_colorette_1_2_2_colorette.magenta = init(35, 39);
	_colorette_1_2_2_colorette.cyan = init(36, 39);
	_colorette_1_2_2_colorette.white = init(37, 39);
	_colorette_1_2_2_colorette.gray = init(90, 39);
	_colorette_1_2_2_colorette.bgBlack = init(40, 49);
	_colorette_1_2_2_colorette.bgRed = init(41, 49);
	_colorette_1_2_2_colorette.bgGreen = init(42, 49);
	_colorette_1_2_2_colorette.bgYellow = init(43, 49);
	_colorette_1_2_2_colorette.bgBlue = init(44, 49);
	_colorette_1_2_2_colorette.bgMagenta = init(45, 49);
	_colorette_1_2_2_colorette.bgCyan = init(46, 49);
	_colorette_1_2_2_colorette.bgWhite = init(47, 49);
	_colorette_1_2_2_colorette.blackBright = init(90, 39);
	_colorette_1_2_2_colorette.redBright = init(91, 39);
	_colorette_1_2_2_colorette.greenBright = init(92, 39);
	_colorette_1_2_2_colorette.yellowBright = init(93, 39);
	_colorette_1_2_2_colorette.blueBright = init(94, 39);
	_colorette_1_2_2_colorette.magentaBright = init(95, 39);
	_colorette_1_2_2_colorette.cyanBright = init(96, 39);
	_colorette_1_2_2_colorette.whiteBright = init(97, 39);
	_colorette_1_2_2_colorette.bgBlackBright = init(100, 49);
	_colorette_1_2_2_colorette.bgRedBright = init(101, 49);
	_colorette_1_2_2_colorette.bgGreenBright = init(102, 49);
	_colorette_1_2_2_colorette.bgYellowBright = init(103, 49);
	_colorette_1_2_2_colorette.bgBlueBright = init(104, 49);
	_colorette_1_2_2_colorette.bgMagentaBright = init(105, 49);
	_colorette_1_2_2_colorette.bgCyanBright = init(106, 49);
	_colorette_1_2_2_colorette.bgWhiteBright = init(107, 49);

	const SINGLE_QUOTE = "'".charCodeAt(0);
	const DOUBLE_QUOTE = '"'.charCodeAt(0);
	const BACKSLASH = '\\'.charCodeAt(0);
	const SLASH = '/'.charCodeAt(0);
	const NEWLINE = '\n'.charCodeAt(0);
	const SPACE = ' '.charCodeAt(0);
	const FEED = '\f'.charCodeAt(0);
	const TAB = '\t'.charCodeAt(0);
	const CR = '\r'.charCodeAt(0);
	const OPEN_SQUARE = '['.charCodeAt(0);
	const CLOSE_SQUARE = ']'.charCodeAt(0);
	const OPEN_PARENTHESES = '('.charCodeAt(0);
	const CLOSE_PARENTHESES = ')'.charCodeAt(0);
	const OPEN_CURLY = '{'.charCodeAt(0);
	const CLOSE_CURLY = '}'.charCodeAt(0);
	const SEMICOLON = ';'.charCodeAt(0);
	const ASTERISK = '*'.charCodeAt(0);
	const COLON = ':'.charCodeAt(0);
	const AT = '@'.charCodeAt(0);

	const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
	const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
	const RE_BAD_BRACKET = /.[\n"'(/\\]/;
	const RE_HEX_ESCAPE = /[\da-f]/i;

	var tokenize$1 = function tokenizer(input, options = {}) {
	  let css = input.css.valueOf();
	  let ignore = options.ignoreErrors;

	  let code, next, quote, content, escape;
	  let escaped, escapePos, prev, n, currentToken;

	  let length = css.length;
	  let pos = 0;
	  let buffer = [];
	  let returned = [];

	  function position() {
	    return pos
	  }

	  function unclosed(what) {
	    throw input.error('Unclosed ' + what, pos)
	  }

	  function endOfFile() {
	    return returned.length === 0 && pos >= length
	  }

	  function nextToken(opts) {
	    if (returned.length) return returned.pop()
	    if (pos >= length) return

	    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;

	    code = css.charCodeAt(pos);

	    switch (code) {
	      case NEWLINE:
	      case SPACE:
	      case TAB:
	      case CR:
	      case FEED: {
	        next = pos;
	        do {
	          next += 1;
	          code = css.charCodeAt(next);
	        } while (
	          code === SPACE ||
	          code === NEWLINE ||
	          code === TAB ||
	          code === CR ||
	          code === FEED
	        )

	        currentToken = ['space', css.slice(pos, next)];
	        pos = next - 1;
	        break
	      }

	      case OPEN_SQUARE:
	      case CLOSE_SQUARE:
	      case OPEN_CURLY:
	      case CLOSE_CURLY:
	      case COLON:
	      case SEMICOLON:
	      case CLOSE_PARENTHESES: {
	        let controlChar = String.fromCharCode(code);
	        currentToken = [controlChar, controlChar, pos];
	        break
	      }

	      case OPEN_PARENTHESES: {
	        prev = buffer.length ? buffer.pop()[1] : '';
	        n = css.charCodeAt(pos + 1);
	        if (
	          prev === 'url' &&
	          n !== SINGLE_QUOTE &&
	          n !== DOUBLE_QUOTE &&
	          n !== SPACE &&
	          n !== NEWLINE &&
	          n !== TAB &&
	          n !== FEED &&
	          n !== CR
	        ) {
	          next = pos;
	          do {
	            escaped = false;
	            next = css.indexOf(')', next + 1);
	            if (next === -1) {
	              if (ignore || ignoreUnclosed) {
	                next = pos;
	                break
	              } else {
	                unclosed('bracket');
	              }
	            }
	            escapePos = next;
	            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	              escapePos -= 1;
	              escaped = !escaped;
	            }
	          } while (escaped)

	          currentToken = ['brackets', css.slice(pos, next + 1), pos, next];

	          pos = next;
	        } else {
	          next = css.indexOf(')', pos + 1);
	          content = css.slice(pos, next + 1);

	          if (next === -1 || RE_BAD_BRACKET.test(content)) {
	            currentToken = ['(', '(', pos];
	          } else {
	            currentToken = ['brackets', content, pos, next];
	            pos = next;
	          }
	        }

	        break
	      }

	      case SINGLE_QUOTE:
	      case DOUBLE_QUOTE: {
	        quote = code === SINGLE_QUOTE ? "'" : '"';
	        next = pos;
	        do {
	          escaped = false;
	          next = css.indexOf(quote, next + 1);
	          if (next === -1) {
	            if (ignore || ignoreUnclosed) {
	              next = pos + 1;
	              break
	            } else {
	              unclosed('string');
	            }
	          }
	          escapePos = next;
	          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	            escapePos -= 1;
	            escaped = !escaped;
	          }
	        } while (escaped)

	        currentToken = ['string', css.slice(pos, next + 1), pos, next];
	        pos = next;
	        break
	      }

	      case AT: {
	        RE_AT_END.lastIndex = pos + 1;
	        RE_AT_END.test(css);
	        if (RE_AT_END.lastIndex === 0) {
	          next = css.length - 1;
	        } else {
	          next = RE_AT_END.lastIndex - 2;
	        }

	        currentToken = ['at-word', css.slice(pos, next + 1), pos, next];

	        pos = next;
	        break
	      }

	      case BACKSLASH: {
	        next = pos;
	        escape = true;
	        while (css.charCodeAt(next + 1) === BACKSLASH) {
	          next += 1;
	          escape = !escape;
	        }
	        code = css.charCodeAt(next + 1);
	        if (
	          escape &&
	          code !== SLASH &&
	          code !== SPACE &&
	          code !== NEWLINE &&
	          code !== TAB &&
	          code !== CR &&
	          code !== FEED
	        ) {
	          next += 1;
	          if (RE_HEX_ESCAPE.test(css.charAt(next))) {
	            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
	              next += 1;
	            }
	            if (css.charCodeAt(next + 1) === SPACE) {
	              next += 1;
	            }
	          }
	        }

	        currentToken = ['word', css.slice(pos, next + 1), pos, next];

	        pos = next;
	        break
	      }

	      default: {
	        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
	          next = css.indexOf('*/', pos + 2) + 1;
	          if (next === 0) {
	            if (ignore || ignoreUnclosed) {
	              next = css.length;
	            } else {
	              unclosed('comment');
	            }
	          }

	          currentToken = ['comment', css.slice(pos, next + 1), pos, next];
	          pos = next;
	        } else {
	          RE_WORD_END.lastIndex = pos + 1;
	          RE_WORD_END.test(css);
	          if (RE_WORD_END.lastIndex === 0) {
	            next = css.length - 1;
	          } else {
	            next = RE_WORD_END.lastIndex - 2;
	          }

	          currentToken = ['word', css.slice(pos, next + 1), pos, next];
	          buffer.push(currentToken);
	          pos = next;
	        }

	        break
	      }
	    }

	    pos++;
	    return currentToken
	  }

	  function back(token) {
	    returned.push(token);
	  }

	  return {
	    back,
	    nextToken,
	    endOfFile,
	    position
	  }
	};

	let { cyan, gray: gray$1, green, yellow, magenta } = _colorette_1_2_2_colorette;

	let tokenizer$1 = tokenize$1;

	let Input$4;

	function registerInput(dependant) {
	  Input$4 = dependant;
	}

	const HIGHLIGHT_THEME = {
	  'brackets': cyan,
	  'at-word': cyan,
	  'comment': gray$1,
	  'string': green,
	  'class': yellow,
	  'hash': magenta,
	  'call': cyan,
	  '(': cyan,
	  ')': cyan,
	  '{': yellow,
	  '}': yellow,
	  '[': yellow,
	  ']': yellow,
	  ':': yellow,
	  ';': yellow
	};

	function getTokenType([type, value], processor) {
	  if (type === 'word') {
	    if (value[0] === '.') {
	      return 'class'
	    }
	    if (value[0] === '#') {
	      return 'hash'
	    }
	  }

	  if (!processor.endOfFile()) {
	    let next = processor.nextToken();
	    processor.back(next);
	    if (next[0] === 'brackets' || next[0] === '(') return 'call'
	  }

	  return type
	}

	function terminalHighlight$2(css) {
	  let processor = tokenizer$1(new Input$4(css), { ignoreErrors: true });
	  let result = '';
	  while (!processor.endOfFile()) {
	    let token = processor.nextToken();
	    let color = HIGHLIGHT_THEME[getTokenType(token, processor)];
	    if (color) {
	      result += token[1]
	        .split(/\r?\n/)
	        .map(i => color(i))
	        .join('\n');
	    } else {
	      result += token[1];
	    }
	  }
	  return result
	}

	terminalHighlight$2.registerInput = registerInput;

	var terminalHighlight_1 = terminalHighlight$2;

	let { red, bold, gray, options: colorette } = _colorette_1_2_2_colorette;

	let terminalHighlight$1 = terminalHighlight_1;

	class CssSyntaxError$3 extends Error {
	  constructor(message, line, column, source, file, plugin) {
	    super(message);
	    this.name = 'CssSyntaxError';
	    this.reason = message;

	    if (file) {
	      this.file = file;
	    }
	    if (source) {
	      this.source = source;
	    }
	    if (plugin) {
	      this.plugin = plugin;
	    }
	    if (typeof line !== 'undefined' && typeof column !== 'undefined') {
	      this.line = line;
	      this.column = column;
	    }

	    this.setMessage();

	    if (Error.captureStackTrace) {
	      Error.captureStackTrace(this, CssSyntaxError$3);
	    }
	  }

	  setMessage() {
	    this.message = this.plugin ? this.plugin + ': ' : '';
	    this.message += this.file ? this.file : '<css input>';
	    if (typeof this.line !== 'undefined') {
	      this.message += ':' + this.line + ':' + this.column;
	    }
	    this.message += ': ' + this.reason;
	  }

	  showSourceCode(color) {
	    if (!this.source) return ''

	    let css = this.source;
	    if (color == null) color = colorette.enabled;
	    if (terminalHighlight$1) {
	      if (color) css = terminalHighlight$1(css);
	    }

	    let lines = css.split(/\r?\n/);
	    let start = Math.max(this.line - 3, 0);
	    let end = Math.min(this.line + 2, lines.length);

	    let maxWidth = String(end).length;

	    let mark, aside;
	    if (color) {
	      mark = text => bold(red(text));
	      aside = text => gray(text);
	    } else {
	      mark = aside = str => str;
	    }

	    return lines
	      .slice(start, end)
	      .map((line, index) => {
	        let number = start + 1 + index;
	        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
	        if (number === this.line) {
	          let spacing =
	            aside(gutter.replace(/\d/g, ' ')) +
	            line.slice(0, this.column - 1).replace(/[^\t]/g, ' ');
	          return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')
	        }
	        return ' ' + aside(gutter) + line
	      })
	      .join('\n')
	  }

	  toString() {
	    let code = this.showSourceCode();
	    if (code) {
	      code = '\n\n' + code + '\n';
	    }
	    return this.name + ': ' + this.message + code
	  }
	}

	var cssSyntaxError = CssSyntaxError$3;
	CssSyntaxError$3.default = CssSyntaxError$3;

	var symbols = {};

	symbols.isClean = Symbol('isClean');

	symbols.my = Symbol('my');

	const DEFAULT_RAW = {
	  colon: ': ',
	  indent: '    ',
	  beforeDecl: '\n',
	  beforeRule: '\n',
	  beforeOpen: ' ',
	  beforeClose: '\n',
	  beforeComment: '\n',
	  after: '\n',
	  emptyBody: '',
	  commentLeft: ' ',
	  commentRight: ' ',
	  semicolon: false
	};

	function capitalize$1(str) {
	  return str[0].toUpperCase() + str.slice(1)
	}

	class Stringifier$2 {
	  constructor(builder) {
	    this.builder = builder;
	  }

	  stringify(node, semicolon) {
	    /* istanbul ignore if */
	    if (!this[node.type]) {
	      throw new Error(
	        'Unknown AST node type ' +
	          node.type +
	          '. ' +
	          'Maybe you need to change PostCSS stringifier.'
	      )
	    }
	    this[node.type](node, semicolon);
	  }

	  document(node) {
	    this.body(node);
	  }

	  root(node) {
	    this.body(node);
	    if (node.raws.after) this.builder(node.raws.after);
	  }

	  comment(node) {
	    let left = this.raw(node, 'left', 'commentLeft');
	    let right = this.raw(node, 'right', 'commentRight');
	    this.builder('/*' + left + node.text + right + '*/', node);
	  }

	  decl(node, semicolon) {
	    let between = this.raw(node, 'between', 'colon');
	    let string = node.prop + between + this.rawValue(node, 'value');

	    if (node.important) {
	      string += node.raws.important || ' !important';
	    }

	    if (semicolon) string += ';';
	    this.builder(string, node);
	  }

	  rule(node) {
	    this.block(node, this.rawValue(node, 'selector'));
	    if (node.raws.ownSemicolon) {
	      this.builder(node.raws.ownSemicolon, node, 'end');
	    }
	  }

	  atrule(node, semicolon) {
	    let name = '@' + node.name;
	    let params = node.params ? this.rawValue(node, 'params') : '';

	    if (typeof node.raws.afterName !== 'undefined') {
	      name += node.raws.afterName;
	    } else if (params) {
	      name += ' ';
	    }

	    if (node.nodes) {
	      this.block(node, name + params);
	    } else {
	      let end = (node.raws.between || '') + (semicolon ? ';' : '');
	      this.builder(name + params + end, node);
	    }
	  }

	  body(node) {
	    let last = node.nodes.length - 1;
	    while (last > 0) {
	      if (node.nodes[last].type !== 'comment') break
	      last -= 1;
	    }

	    let semicolon = this.raw(node, 'semicolon');
	    for (let i = 0; i < node.nodes.length; i++) {
	      let child = node.nodes[i];
	      let before = this.raw(child, 'before');
	      if (before) this.builder(before);
	      this.stringify(child, last !== i || semicolon);
	    }
	  }

	  block(node, start) {
	    let between = this.raw(node, 'between', 'beforeOpen');
	    this.builder(start + between + '{', node, 'start');

	    let after;
	    if (node.nodes && node.nodes.length) {
	      this.body(node);
	      after = this.raw(node, 'after');
	    } else {
	      after = this.raw(node, 'after', 'emptyBody');
	    }

	    if (after) this.builder(after);
	    this.builder('}', node, 'end');
	  }

	  raw(node, own, detect) {
	    let value;
	    if (!detect) detect = own;

	    // Already had
	    if (own) {
	      value = node.raws[own];
	      if (typeof value !== 'undefined') return value
	    }

	    let parent = node.parent;

	    if (detect === 'before') {
	      // Hack for first rule in CSS
	      if (!parent || (parent.type === 'root' && parent.first === node)) {
	        return ''
	      }

	      // `root` nodes in `document` should use only their own raws
	      if (parent && parent.type === 'document') {
	        return ''
	      }
	    }

	    // Floating child without parent
	    if (!parent) return DEFAULT_RAW[detect]

	    // Detect style by other nodes
	    let root = node.root();
	    if (!root.rawCache) root.rawCache = {};
	    if (typeof root.rawCache[detect] !== 'undefined') {
	      return root.rawCache[detect]
	    }

	    if (detect === 'before' || detect === 'after') {
	      return this.beforeAfter(node, detect)
	    } else {
	      let method = 'raw' + capitalize$1(detect);
	      if (this[method]) {
	        value = this[method](root, node);
	      } else {
	        root.walk(i => {
	          value = i.raws[own];
	          if (typeof value !== 'undefined') return false
	        });
	      }
	    }

	    if (typeof value === 'undefined') value = DEFAULT_RAW[detect];

	    root.rawCache[detect] = value;
	    return value
	  }

	  rawSemicolon(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length && i.last.type === 'decl') {
	        value = i.raws.semicolon;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawEmptyBody(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length === 0) {
	        value = i.raws.after;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawIndent(root) {
	    if (root.raws.indent) return root.raws.indent
	    let value;
	    root.walk(i => {
	      let p = i.parent;
	      if (p && p !== root && p.parent && p.parent === root) {
	        if (typeof i.raws.before !== 'undefined') {
	          let parts = i.raws.before.split('\n');
	          value = parts[parts.length - 1];
	          value = value.replace(/\S/g, '');
	          return false
	        }
	      }
	    });
	    return value
	  }

	  rawBeforeComment(root, node) {
	    let value;
	    root.walkComments(i => {
	      if (typeof i.raws.before !== 'undefined') {
	        value = i.raws.before;
	        if (value.includes('\n')) {
	          value = value.replace(/[^\n]+$/, '');
	        }
	        return false
	      }
	    });
	    if (typeof value === 'undefined') {
	      value = this.raw(node, null, 'beforeDecl');
	    } else if (value) {
	      value = value.replace(/\S/g, '');
	    }
	    return value
	  }

	  rawBeforeDecl(root, node) {
	    let value;
	    root.walkDecls(i => {
	      if (typeof i.raws.before !== 'undefined') {
	        value = i.raws.before;
	        if (value.includes('\n')) {
	          value = value.replace(/[^\n]+$/, '');
	        }
	        return false
	      }
	    });
	    if (typeof value === 'undefined') {
	      value = this.raw(node, null, 'beforeRule');
	    } else if (value) {
	      value = value.replace(/\S/g, '');
	    }
	    return value
	  }

	  rawBeforeRule(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && (i.parent !== root || root.first !== i)) {
	        if (typeof i.raws.before !== 'undefined') {
	          value = i.raws.before;
	          if (value.includes('\n')) {
	            value = value.replace(/[^\n]+$/, '');
	          }
	          return false
	        }
	      }
	    });
	    if (value) value = value.replace(/\S/g, '');
	    return value
	  }

	  rawBeforeClose(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length > 0) {
	        if (typeof i.raws.after !== 'undefined') {
	          value = i.raws.after;
	          if (value.includes('\n')) {
	            value = value.replace(/[^\n]+$/, '');
	          }
	          return false
	        }
	      }
	    });
	    if (value) value = value.replace(/\S/g, '');
	    return value
	  }

	  rawBeforeOpen(root) {
	    let value;
	    root.walk(i => {
	      if (i.type !== 'decl') {
	        value = i.raws.between;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawColon(root) {
	    let value;
	    root.walkDecls(i => {
	      if (typeof i.raws.between !== 'undefined') {
	        value = i.raws.between.replace(/[^\s:]/g, '');
	        return false
	      }
	    });
	    return value
	  }

	  beforeAfter(node, detect) {
	    let value;
	    if (node.type === 'decl') {
	      value = this.raw(node, null, 'beforeDecl');
	    } else if (node.type === 'comment') {
	      value = this.raw(node, null, 'beforeComment');
	    } else if (detect === 'before') {
	      value = this.raw(node, null, 'beforeRule');
	    } else {
	      value = this.raw(node, null, 'beforeClose');
	    }

	    let buf = node.parent;
	    let depth = 0;
	    while (buf && buf.type !== 'root') {
	      depth += 1;
	      buf = buf.parent;
	    }

	    if (value.includes('\n')) {
	      let indent = this.raw(node, null, 'indent');
	      if (indent.length) {
	        for (let step = 0; step < depth; step++) value += indent;
	      }
	    }

	    return value
	  }

	  rawValue(node, prop) {
	    let value = node[prop];
	    let raw = node.raws[prop];
	    if (raw && raw.value === value) {
	      return raw.raw
	    }

	    return value
	  }
	}

	var stringifier = Stringifier$2;

	let Stringifier$1 = stringifier;

	function stringify$7(node, builder) {
	  let str = new Stringifier$1(builder);
	  str.stringify(node);
	}

	var stringify_1$1 = stringify$7;
	stringify$7.default = stringify$7;

	let { isClean: isClean$2, my: my$2 } = symbols;
	let CssSyntaxError$2 = cssSyntaxError;
	let Stringifier = stringifier;
	let stringify$6 = stringify_1$1;

	function cloneNode(obj, parent) {
	  let cloned = new obj.constructor();

	  for (let i in obj) {
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) {
	      // istanbul ignore next
	      continue
	    }
	    if (i === 'proxyCache') continue
	    let value = obj[i];
	    let type = typeof value;

	    if (i === 'parent' && type === 'object') {
	      if (parent) cloned[i] = parent;
	    } else if (i === 'source') {
	      cloned[i] = value;
	    } else if (Array.isArray(value)) {
	      cloned[i] = value.map(j => cloneNode(j, cloned));
	    } else {
	      if (type === 'object' && value !== null) value = cloneNode(value);
	      cloned[i] = value;
	    }
	  }

	  return cloned
	}

	class Node$5 {
	  constructor(defaults = {}) {
	    this.raws = {};
	    this[isClean$2] = false;
	    this[my$2] = true;

	    for (let name in defaults) {
	      if (name === 'nodes') {
	        this.nodes = [];
	        for (let node of defaults[name]) {
	          if (typeof node.clone === 'function') {
	            this.append(node.clone());
	          } else {
	            this.append(node);
	          }
	        }
	      } else {
	        this[name] = defaults[name];
	      }
	    }
	  }

	  error(message, opts = {}) {
	    if (this.source) {
	      let pos = this.positionBy(opts);
	      return this.source.input.error(message, pos.line, pos.column, opts)
	    }
	    return new CssSyntaxError$2(message)
	  }

	  warn(result, text, opts) {
	    let data = { node: this };
	    for (let i in opts) data[i] = opts[i];
	    return result.warn(text, data)
	  }

	  remove() {
	    if (this.parent) {
	      this.parent.removeChild(this);
	    }
	    this.parent = undefined;
	    return this
	  }

	  toString(stringifier = stringify$6) {
	    if (stringifier.stringify) stringifier = stringifier.stringify;
	    let result = '';
	    stringifier(this, i => {
	      result += i;
	    });
	    return result
	  }

	  assign(overrides = {}) {
	    for (let name in overrides) {
	      this[name] = overrides[name];
	    }
	    return this
	  }

	  clone(overrides = {}) {
	    let cloned = cloneNode(this);
	    for (let name in overrides) {
	      cloned[name] = overrides[name];
	    }
	    return cloned
	  }

	  cloneBefore(overrides = {}) {
	    let cloned = this.clone(overrides);
	    this.parent.insertBefore(this, cloned);
	    return cloned
	  }

	  cloneAfter(overrides = {}) {
	    let cloned = this.clone(overrides);
	    this.parent.insertAfter(this, cloned);
	    return cloned
	  }

	  replaceWith(...nodes) {
	    if (this.parent) {
	      let bookmark = this;
	      let foundSelf = false;
	      for (let node of nodes) {
	        if (node === this) {
	          foundSelf = true;
	        } else if (foundSelf) {
	          this.parent.insertAfter(bookmark, node);
	          bookmark = node;
	        } else {
	          this.parent.insertBefore(bookmark, node);
	        }
	      }

	      if (!foundSelf) {
	        this.remove();
	      }
	    }

	    return this
	  }

	  next() {
	    if (!this.parent) return undefined
	    let index = this.parent.index(this);
	    return this.parent.nodes[index + 1]
	  }

	  prev() {
	    if (!this.parent) return undefined
	    let index = this.parent.index(this);
	    return this.parent.nodes[index - 1]
	  }

	  before(add) {
	    this.parent.insertBefore(this, add);
	    return this
	  }

	  after(add) {
	    this.parent.insertAfter(this, add);
	    return this
	  }

	  root() {
	    let result = this;
	    while (result.parent && result.parent.type !== 'document') {
	      result = result.parent;
	    }
	    return result
	  }

	  raw(prop, defaultType) {
	    let str = new Stringifier();
	    return str.raw(this, prop, defaultType)
	  }

	  cleanRaws(keepBetween) {
	    delete this.raws.before;
	    delete this.raws.after;
	    if (!keepBetween) delete this.raws.between;
	  }

	  toJSON(_, inputs) {
	    let fixed = {};
	    let emitInputs = inputs == null;
	    inputs = inputs || new Map();
	    let inputsNextIndex = 0;

	    for (let name in this) {
	      if (!Object.prototype.hasOwnProperty.call(this, name)) {
	        // istanbul ignore next
	        continue
	      }
	      if (name === 'parent' || name === 'proxyCache') continue
	      let value = this[name];

	      if (Array.isArray(value)) {
	        fixed[name] = value.map(i => {
	          if (typeof i === 'object' && i.toJSON) {
	            return i.toJSON(null, inputs)
	          } else {
	            return i
	          }
	        });
	      } else if (typeof value === 'object' && value.toJSON) {
	        fixed[name] = value.toJSON(null, inputs);
	      } else if (name === 'source') {
	        let inputId = inputs.get(value.input);
	        if (inputId == null) {
	          inputId = inputsNextIndex;
	          inputs.set(value.input, inputsNextIndex);
	          inputsNextIndex++;
	        }
	        fixed[name] = {
	          inputId,
	          start: value.start,
	          end: value.end
	        };
	      } else {
	        fixed[name] = value;
	      }
	    }

	    if (emitInputs) {
	      fixed.inputs = [...inputs.keys()].map(input => input.toJSON());
	    }

	    return fixed
	  }

	  positionInside(index) {
	    let string = this.toString();
	    let column = this.source.start.column;
	    let line = this.source.start.line;

	    for (let i = 0; i < index; i++) {
	      if (string[i] === '\n') {
	        column = 1;
	        line += 1;
	      } else {
	        column += 1;
	      }
	    }

	    return { line, column }
	  }

	  positionBy(opts) {
	    let pos = this.source.start;
	    if (opts.index) {
	      pos = this.positionInside(opts.index);
	    } else if (opts.word) {
	      let index = this.toString().indexOf(opts.word);
	      if (index !== -1) pos = this.positionInside(index);
	    }
	    return pos
	  }

	  getProxyProcessor() {
	    return {
	      set(node, prop, value) {
	        if (node[prop] === value) return true
	        node[prop] = value;
	        if (
	          prop === 'prop' ||
	          prop === 'value' ||
	          prop === 'name' ||
	          prop === 'params' ||
	          prop === 'important' ||
	          prop === 'text'
	        ) {
	          node.markDirty();
	        }
	        return true
	      },

	      get(node, prop) {
	        if (prop === 'proxyOf') {
	          return node
	        } else if (prop === 'root') {
	          return () => node.root().toProxy()
	        } else {
	          return node[prop]
	        }
	      }
	    }
	  }

	  toProxy() {
	    if (!this.proxyCache) {
	      this.proxyCache = new Proxy(this, this.getProxyProcessor());
	    }
	    return this.proxyCache
	  }

	  addToError(error) {
	    error.postcssNode = this;
	    if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
	      let s = this.source;
	      error.stack = error.stack.replace(
	        /\n\s{4}at /,
	        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
	      );
	    }
	    return error
	  }

	  markDirty() {
	    if (this[isClean$2]) {
	      this[isClean$2] = false;
	      let next = this;
	      while ((next = next.parent)) {
	        next[isClean$2] = false;
	      }
	    }
	  }

	  get proxyOf() {
	    return this
	  }
	}

	var node_1 = Node$5;
	Node$5.default = Node$5;

	let Node$4 = node_1;

	class Declaration$4 extends Node$4 {
	  constructor(defaults) {
	    if (
	      defaults &&
	      typeof defaults.value !== 'undefined' &&
	      typeof defaults.value !== 'string'
	    ) {
	      defaults = { ...defaults, value: String(defaults.value) };
	    }
	    super(defaults);
	    this.type = 'decl';
	  }

	  get variable() {
	    return this.prop.startsWith('--') || this.prop[0] === '$'
	  }
	}

	var declaration = Declaration$4;
	Declaration$4.default = Declaration$4;

	var sourceMap$2 = {};

	var sourceMapGenerator = {};

	var base64Vlq = {};

	var base64$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64$1.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	base64$1.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64 = base64$1;

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT = 5;

	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	base64Vlq.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};

	var util$7 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port;
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	var MAX_CACHED_INPUTS = 32;

	/**
	 * Takes some function `f(input) -> result` and returns a memoized version of
	 * `f`.
	 *
	 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
	 * memoization is a dumb-simple, linear least-recently-used cache.
	 */
	function lruMemoize(f) {
	  var cache = [];

	  return function(input) {
	    for (var i = 0; i < cache.length; i++) {
	      if (cache[i].input === input) {
	        var temp = cache[0];
	        cache[0] = cache[i];
	        cache[i] = temp;
	        return cache[0].result;
	      }
	    }

	    var result = f(input);

	    cache.unshift({
	      input,
	      result,
	    });

	    if (cache.length > MAX_CACHED_INPUTS) {
	      cache.pop();
	    }

	    return result;
	  };
	}

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	var normalize = lruMemoize(function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);
	  // Split the path into parts between `/` characters. This is much faster than
	  // using `.split(/\/+/g)`.
	  var parts = [];
	  var start = 0;
	  var i = 0;
	  while (true) {
	    start = i;
	    i = path.indexOf("/", start);
	    if (i === -1) {
	      parts.push(path.slice(start));
	      break;
	    } else {
	      parts.push(path.slice(start, i));
	      while (i < path.length && path[i] === "/") {
	        i++;
	      }
	    }
	  }

	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	});
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp;

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 === null) {
	    return 1; // aStr2 !== null
	  }

	  if (aStr2 === null) {
	    return -1; // aStr1 !== null
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	/**
	 * Strip any JSON XSSI avoidance prefix from the string (as documented
	 * in the source maps specification), and then parse the string as
	 * JSON.
	 */
	function parseSourceMapInput(str) {
	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
	}
	exports.parseSourceMapInput = parseSourceMapInput;

	/**
	 * Compute the URL of a source given the the source root, the source's
	 * URL, and the source map's URL.
	 */
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
	  sourceURL = sourceURL || '';

	  if (sourceRoot) {
	    // This follows what Chrome does.
	    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
	      sourceRoot += '/';
	    }
	    // The spec says:
	    //   Line 4: An optional source root, useful for relocating source
	    //   files on a server or removing repeated values in the
	    //   “sources” entry.  This value is prepended to the individual
	    //   entries in the “source” field.
	    sourceURL = sourceRoot + sourceURL;
	  }

	  // Historically, SourceMapConsumer did not take the sourceMapURL as
	  // a parameter.  This mode is still somewhat supported, which is why
	  // this code block is conditional.  However, it's preferable to pass
	  // the source map URL to SourceMapConsumer, so that this function
	  // can implement the source URL resolution algorithm as outlined in
	  // the spec.  This block is basically the equivalent of:
	  //    new URL(sourceURL, sourceMapURL).toString()
	  // ... except it avoids using URL, which wasn't available in the
	  // older releases of node still supported by this library.
	  //
	  // The spec says:
	  //   If the sources are not absolute URLs after prepending of the
	  //   “sourceRoot”, the sources are resolved relative to the
	  //   SourceMap (like resolving script src in a html document).
	  if (sourceMapURL) {
	    var parsed = urlParse(sourceMapURL);
	    if (!parsed) {
	      throw new Error("sourceMapURL could not be parsed");
	    }
	    if (parsed.path) {
	      // Strip the last path component, but keep the "/".
	      var index = parsed.path.lastIndexOf('/');
	      if (index >= 0) {
	        parsed.path = parsed.path.substring(0, index + 1);
	      }
	    }
	    sourceURL = join(urlGenerate(parsed), sourceURL);
	  }

	  return normalize(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL;
	}(util$7));

	var arraySet = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$6 = util$7;
	var has = Object.prototype.hasOwnProperty;
	var hasNativeMap = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet$2() {
	  this._array = [];
	  this._set = hasNativeMap ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet$2();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet$2.prototype.size = function ArraySet_size() {
	  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap ? aStr : util$6.toSetString(aStr);
	  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util$6.toSetString(aStr);
	    return has.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util$6.toSetString(aStr);
	    if (has.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet$2.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	arraySet.ArraySet = ArraySet$2;

	var mappingList = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$5 = util$7;

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util$5.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList$1() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList$1.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList$1.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList$1.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util$5.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	mappingList.MappingList = MappingList$1;

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ$1 = base64Vlq;
	var util$4 = util$7;
	var ArraySet$1 = arraySet.ArraySet;
	var MappingList = mappingList.MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator$5(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util$4.getArg(aArgs, 'file', null);
	  this._sourceRoot = util$4.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util$4.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet$1();
	  this._names = new ArraySet$1();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}

	SourceMapGenerator$5.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator$5.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator$5({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util$4.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var sourceRelative = sourceFile;
	      if (sourceRoot !== null) {
	        sourceRelative = util$4.relative(sourceRoot, sourceFile);
	      }

	      if (!generator._sources.has(sourceRelative)) {
	        generator._sources.add(sourceRelative);
	      }

	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator$5.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util$4.getArg(aArgs, 'generated');
	    var original = util$4.getArg(aArgs, 'original', null);
	    var source = util$4.getArg(aArgs, 'source', null);
	    var name = util$4.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator$5.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util$4.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util$4.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util$4.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator$5.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util$4.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet$1();
	    var newNames = new ArraySet$1();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util$4.join(aSourceMapPath, mapping.source);
	          }
	          if (sourceRoot != null) {
	            mapping.source = util$4.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util$4.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util$4.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator$5.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator$5.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = '';

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util$4.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ$1.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ$1.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ$1.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ$1.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ$1.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator$5.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util$4.relative(aSourceRoot, source);
	      }
	      var key = util$4.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator$5.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator$5.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$5;

	var sourceMapConsumer = {};

	var binarySearch$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	(function (exports) {
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};
	}(binarySearch$1));

	var quickSort$1 = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	function SortTemplate(comparator) {

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;

	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot, false) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }

	    swap(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}

	  return doQuickSort;
	}

	function cloneSort(comparator) {
	  let template = SortTemplate.toString();
	  let templateFn = new Function(`return ${template}`)();
	  return templateFn(comparator);
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */

	let sortCache = new WeakMap();
	quickSort$1.quickSort = function (ary, comparator, start = 0) {
	  let doQuickSort = sortCache.get(comparator);
	  if (doQuickSort === void 0) {
	    doQuickSort = cloneSort(comparator);
	    sortCache.set(comparator, doQuickSort);
	  }
	  doQuickSort(ary, comparator, start, ary.length - 1);
	};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util$3 = util$7;
	var binarySearch = binarySearch$1;
	var ArraySet = arraySet.ArraySet;
	var base64VLQ = base64Vlq;
	var quickSort = quickSort$1.quickSort;

	function SourceMapConsumer$4(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$3.parseSourceMapInput(aSourceMap);
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
	    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
	}

	SourceMapConsumer$4.fromSourceMap = function(aSourceMap, aSourceMapURL) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
	};

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer$4.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer$4.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$4.prototype, '_generatedMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer$4.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$4.prototype, '_originalMappings', {
	  configurable: true,
	  enumerable: true,
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer$4.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer$4.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer$4.GENERATED_ORDER = 1;
	SourceMapConsumer$4.ORIGINAL_ORDER = 2;

	SourceMapConsumer$4.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$4.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer$4.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer$4.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer$4.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer$4.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      source = util$3.computeSourceURL(sourceRoot, source, this._sourceMapURL);
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number is 1-based.
	 *   - column: Optional. the column number in the original source.
	 *    The column number is 0-based.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *    line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *    The column number is 0-based.
	 */
	SourceMapConsumer$4.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util$3.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util$3.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util$3.getArg(aArgs, 'column', 0)
	    };

	    needle.source = this._findSourceIndex(needle.source);
	    if (needle.source < 0) {
	      return [];
	    }

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util$3.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util$3.getArg(mapping, 'generatedLine', null),
	            column: util$3.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$3.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util$3.getArg(mapping, 'generatedLine', null),
	            column: util$3.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util$3.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	sourceMapConsumer.SourceMapConsumer = SourceMapConsumer$4;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The first parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$3.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$3.getArg(sourceMap, 'version');
	  var sources = util$3.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util$3.getArg(sourceMap, 'names', []);
	  var sourceRoot = util$3.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util$3.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util$3.getArg(sourceMap, 'mappings');
	  var file = util$3.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  if (sourceRoot) {
	    sourceRoot = util$3.normalize(sourceRoot);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util$3.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util$3.isAbsolute(sourceRoot) && util$3.isAbsolute(source)
	        ? util$3.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);

	  this._absoluteSources = this._sources.toArray().map(function (s) {
	    return util$3.computeSourceURL(sourceRoot, s, aSourceMapURL);
	  });

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this._sourceMapURL = aSourceMapURL;
	  this.file = file;
	}

	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$4.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$4;

	/**
	 * Utility function to find the index of a source.  Returns -1 if not
	 * found.
	 */
	BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
	  var relativeSource = aSource;
	  if (this.sourceRoot != null) {
	    relativeSource = util$3.relative(this.sourceRoot, relativeSource);
	  }

	  if (this._sources.has(relativeSource)) {
	    return this._sources.indexOf(relativeSource);
	  }

	  // Maybe aSource is an absolute URL as returned by |sources|.  In
	  // this case we can't simply undo the transform.
	  var i;
	  for (i = 0; i < this._absoluteSources.length; ++i) {
	    if (this._absoluteSources[i] == aSource) {
	      return i;
	    }
	  }

	  return -1;
	};

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @param String aSourceMapURL
	 *        The URL at which the source map can be found (optional)
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);

	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	    smc._sourceMapURL = aSourceMapURL;
	    smc._absoluteSources = smc._sources.toArray().map(function (s) {
	      return util$3.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
	    });

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort(smc.__originalMappings, util$3.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._absoluteSources.slice();
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */

	const compareGenerated = util$3.compareByGeneratedPositionsDeflatedNoLine;
	function sortGenerated(array, start) {
	  let l = array.length;
	  let n = array.length - start;
	  if (n <= 1) {
	    return;
	  } else if (n == 2) {
	    let a = array[start];
	    let b = array[start + 1];
	    if (compareGenerated(a, b) > 0) {
	      array[start] = b;
	      array[start + 1] = a;
	    }
	  } else if (n < 20) {
	    for (let i = start; i < l; i++) {
	      for (let j = i; j > start; j--) {
	        let a = array[j - 1];
	        let b = array[j];
	        if (compareGenerated(a, b) <= 0) {
	          break;
	        }
	        array[j - 1] = b;
	        array[j] = a;
	      }
	    }
	  } else {
	    quickSort(array, compareGenerated, start);
	  }
	}
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, segment, end, value;

	    let subarrayStart = 0;
	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;

	        sortGenerated(generatedMappings, subarrayStart);
	        subarrayStart = generatedMappings.length;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;

	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        aStr.slice(index, end);

	        segment = [];
	        while (index < end) {
	          base64VLQ.decode(aStr, index, temp);
	          value = temp.value;
	          index = temp.rest;
	          segment.push(value);
	        }

	        if (segment.length === 2) {
	          throw new Error('Found a source, but no line and column');
	        }

	        if (segment.length === 3) {
	          throw new Error('Found a source and line, but no column');
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          let currentSource = mapping.source;
	          while (originalMappings.length <= currentSource) {
	            originalMappings.push(null);
	          }
	          if (originalMappings[currentSource] === null) {
	            originalMappings[currentSource] = [];
	          }
	          originalMappings[currentSource].push(mapping);
	        }
	      }
	    }

	    sortGenerated(generatedMappings, subarrayStart);
	    this.__generatedMappings = generatedMappings;

	    for (var i = 0; i < originalMappings.length; i++) {
	      if (originalMappings[i] != null) {
	        quickSort(originalMappings[i], util$3.compareByOriginalPositionsNoSource);
	      }
	    }
	    this.__originalMappings = [].concat(...originalMappings);
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$3.getArg(aArgs, 'line'),
	      generatedColumn: util$3.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util$3.compareByGeneratedPositionsDeflated,
	      util$3.getArg(aArgs, 'bias', SourceMapConsumer$4.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util$3.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          source = util$3.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
	        }
	        var name = util$3.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util$3.getArg(mapping, 'originalLine', null),
	          column: util$3.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    var index = this._findSourceIndex(aSource);
	    if (index >= 0) {
	      return this.sourcesContent[index];
	    }

	    var relativeSource = aSource;
	    if (this.sourceRoot != null) {
	      relativeSource = util$3.relative(this.sourceRoot, relativeSource);
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util$3.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + relativeSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util$3.getArg(aArgs, 'source');
	    source = this._findSourceIndex(source);
	    if (source < 0) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }

	    var needle = {
	      source: source,
	      originalLine: util$3.getArg(aArgs, 'line'),
	      originalColumn: util$3.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util$3.compareByOriginalPositions,
	      util$3.getArg(aArgs, 'bias', SourceMapConsumer$4.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util$3.getArg(mapping, 'generatedLine', null),
	          column: util$3.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util$3.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The first parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * The second parameter, if given, is a string whose value is the URL
	 * at which the source map was found.  This URL is used to compute the
	 * sources array.
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = util$3.parseSourceMapInput(aSourceMap);
	  }

	  var version = util$3.getArg(sourceMap, 'version');
	  var sections = util$3.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet();
	  this._names = new ArraySet();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util$3.getArg(s, 'offset');
	    var offsetLine = util$3.getArg(offset, 'line');
	    var offsetColumn = util$3.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer$4(util$3.getArg(s, 'map'), aSourceMapURL)
	    }
	  });
	}

	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$4.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$4;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the generated source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.  The
	 *     line number is 1-based.
	 *   - column: The column number in the original source, or null.  The
	 *     column number is 0-based.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util$3.getArg(aArgs, 'line'),
	      generatedColumn: util$3.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.  The line number
	 *     is 1-based.
	 *   - column: The column number in the original source.  The column
	 *     number is 0-based.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.  The
	 *     line number is 1-based. 
	 *   - column: The column number in the generated source, or null.
	 *     The column number is 0-based.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer._findSourceIndex(util$3.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        source = util$3.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = null;
	        if (mapping.name) {
	          name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	        }

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort(this.__generatedMappings, util$3.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util$3.compareByOriginalPositions);
	  };

	sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

	var sourceNode = {};

	/* -*- Mode: js; js-indent-level: 2; -*- */

	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator$4 = sourceMapGenerator.SourceMapGenerator;
	var util$2 = util$7;

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex] || '';
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex] || '';
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util$2.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util$2.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util$2.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util$2.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator$4(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	sourceNode.SourceNode = SourceNode;

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	sourceMap$2.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
	sourceMap$2.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
	sourceMap$2.SourceNode = sourceNode.SourceNode;

	let { SourceMapConsumer: SourceMapConsumer$3, SourceMapGenerator: SourceMapGenerator$3 } = sourceMap$2;
	let { dirname: dirname$1, resolve: resolve$1, relative, sep } = require$$3;
	let { pathToFileURL: pathToFileURL$1 } = require$$5;

	let sourceMapAvailable$1 = Boolean(SourceMapConsumer$3 && SourceMapGenerator$3);
	let pathAvailable$1 = Boolean(dirname$1 && resolve$1 && relative && sep);

	class MapGenerator$1 {
	  constructor(stringify, root, opts) {
	    this.stringify = stringify;
	    this.mapOpts = opts.map || {};
	    this.root = root;
	    this.opts = opts;
	  }

	  isMap() {
	    if (typeof this.opts.map !== 'undefined') {
	      return !!this.opts.map
	    }
	    return this.previous().length > 0
	  }

	  previous() {
	    if (!this.previousMaps) {
	      this.previousMaps = [];
	      this.root.walk(node => {
	        if (node.source && node.source.input.map) {
	          let map = node.source.input.map;
	          if (!this.previousMaps.includes(map)) {
	            this.previousMaps.push(map);
	          }
	        }
	      });
	    }

	    return this.previousMaps
	  }

	  isInline() {
	    if (typeof this.mapOpts.inline !== 'undefined') {
	      return this.mapOpts.inline
	    }

	    let annotation = this.mapOpts.annotation;
	    if (typeof annotation !== 'undefined' && annotation !== true) {
	      return false
	    }

	    if (this.previous().length) {
	      return this.previous().some(i => i.inline)
	    }
	    return true
	  }

	  isSourcesContent() {
	    if (typeof this.mapOpts.sourcesContent !== 'undefined') {
	      return this.mapOpts.sourcesContent
	    }
	    if (this.previous().length) {
	      return this.previous().some(i => i.withContent())
	    }
	    return true
	  }

	  clearAnnotation() {
	    if (this.mapOpts.annotation === false) return

	    let node;
	    for (let i = this.root.nodes.length - 1; i >= 0; i--) {
	      node = this.root.nodes[i];
	      if (node.type !== 'comment') continue
	      if (node.text.indexOf('# sourceMappingURL=') === 0) {
	        this.root.removeChild(i);
	      }
	    }
	  }

	  setSourcesContent() {
	    let already = {};
	    this.root.walk(node => {
	      if (node.source) {
	        let from = node.source.input.from;
	        if (from && !already[from]) {
	          already[from] = true;
	          this.map.setSourceContent(
	            this.toUrl(this.path(from)),
	            node.source.input.css
	          );
	        }
	      }
	    });
	  }

	  applyPrevMaps() {
	    for (let prev of this.previous()) {
	      let from = this.toUrl(this.path(prev.file));
	      let root = prev.root || dirname$1(prev.file);
	      let map;

	      if (this.mapOpts.sourcesContent === false) {
	        map = new SourceMapConsumer$3(prev.text);
	        if (map.sourcesContent) {
	          map.sourcesContent = map.sourcesContent.map(() => null);
	        }
	      } else {
	        map = prev.consumer();
	      }

	      this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
	    }
	  }

	  isAnnotation() {
	    if (this.isInline()) {
	      return true
	    }
	    if (typeof this.mapOpts.annotation !== 'undefined') {
	      return this.mapOpts.annotation
	    }
	    if (this.previous().length) {
	      return this.previous().some(i => i.annotation)
	    }
	    return true
	  }

	  toBase64(str) {
	    if (Buffer) {
	      return Buffer.from(str).toString('base64')
	    } else {
	      // istanbul ignore next
	      return window.btoa(unescape(encodeURIComponent(str)))
	    }
	  }

	  addAnnotation() {
	    let content;

	    if (this.isInline()) {
	      content =
	        'data:application/json;base64,' + this.toBase64(this.map.toString());
	    } else if (typeof this.mapOpts.annotation === 'string') {
	      content = this.mapOpts.annotation;
	    } else if (typeof this.mapOpts.annotation === 'function') {
	      content = this.mapOpts.annotation(this.opts.to, this.root);
	    } else {
	      content = this.outputFile() + '.map';
	    }

	    let eol = '\n';
	    if (this.css.includes('\r\n')) eol = '\r\n';

	    this.css += eol + '/*# sourceMappingURL=' + content + ' */';
	  }

	  outputFile() {
	    if (this.opts.to) {
	      return this.path(this.opts.to)
	    }
	    if (this.opts.from) {
	      return this.path(this.opts.from)
	    }
	    return 'to.css'
	  }

	  generateMap() {
	    this.generateString();
	    if (this.isSourcesContent()) this.setSourcesContent();
	    if (this.previous().length > 0) this.applyPrevMaps();
	    if (this.isAnnotation()) this.addAnnotation();

	    if (this.isInline()) {
	      return [this.css]
	    }
	    return [this.css, this.map]
	  }

	  path(file) {
	    if (file.indexOf('<') === 0) return file
	    if (/^\w+:\/\//.test(file)) return file
	    if (this.mapOpts.absolute) return file

	    let from = this.opts.to ? dirname$1(this.opts.to) : '.';

	    if (typeof this.mapOpts.annotation === 'string') {
	      from = dirname$1(resolve$1(from, this.mapOpts.annotation));
	    }

	    file = relative(from, file);
	    return file
	  }

	  toUrl(path) {
	    if (sep === '\\') {
	      // istanbul ignore next
	      path = path.replace(/\\/g, '/');
	    }
	    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)
	  }

	  sourcePath(node) {
	    if (this.mapOpts.from) {
	      return this.toUrl(this.mapOpts.from)
	    } else if (this.mapOpts.absolute) {
	      if (pathToFileURL$1) {
	        return pathToFileURL$1(node.source.input.from).toString()
	      } else {
	        // istanbul ignore next
	        throw new Error(
	          '`map.absolute` option is not available in this PostCSS build'
	        )
	      }
	    } else {
	      return this.toUrl(this.path(node.source.input.from))
	    }
	  }

	  generateString() {
	    this.css = '';
	    this.map = new SourceMapGenerator$3({ file: this.outputFile() });

	    let line = 1;
	    let column = 1;

	    let noSource = '<no source>';
	    let mapping = {
	      source: '',
	      generated: { line: 0, column: 0 },
	      original: { line: 0, column: 0 }
	    };

	    let lines, last;
	    this.stringify(this.root, (str, node, type) => {
	      this.css += str;

	      if (node && type !== 'end') {
	        mapping.generated.line = line;
	        mapping.generated.column = column - 1;
	        if (node.source && node.source.start) {
	          mapping.source = this.sourcePath(node);
	          mapping.original.line = node.source.start.line;
	          mapping.original.column = node.source.start.column - 1;
	          this.map.addMapping(mapping);
	        } else {
	          mapping.source = noSource;
	          mapping.original.line = 1;
	          mapping.original.column = 0;
	          this.map.addMapping(mapping);
	        }
	      }

	      lines = str.match(/\n/g);
	      if (lines) {
	        line += lines.length;
	        last = str.lastIndexOf('\n');
	        column = str.length - last;
	      } else {
	        column += str.length;
	      }

	      if (node && type !== 'start') {
	        let p = node.parent || { raws: {} };
	        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {
	          if (node.source && node.source.end) {
	            mapping.source = this.sourcePath(node);
	            mapping.original.line = node.source.end.line;
	            mapping.original.column = node.source.end.column - 1;
	            mapping.generated.line = line;
	            mapping.generated.column = column - 2;
	            this.map.addMapping(mapping);
	          } else {
	            mapping.source = noSource;
	            mapping.original.line = 1;
	            mapping.original.column = 0;
	            mapping.generated.line = line;
	            mapping.generated.column = column - 1;
	            this.map.addMapping(mapping);
	          }
	        }
	      }
	    });
	  }

	  generate() {
	    this.clearAnnotation();

	    if (pathAvailable$1 && sourceMapAvailable$1 && this.isMap()) {
	      return this.generateMap()
	    }

	    let result = '';
	    this.stringify(this.root, i => {
	      result += i;
	    });
	    return [result]
	  }
	}

	var mapGenerator = MapGenerator$1;

	let Node$3 = node_1;

	class Comment$4 extends Node$3 {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'comment';
	  }
	}

	var comment$3 = Comment$4;
	Comment$4.default = Comment$4;

	let { isClean: isClean$1, my: my$1 } = symbols;
	let Declaration$3 = declaration;
	let Comment$3 = comment$3;
	let Node$2 = node_1;

	let parse$a, Rule$4, AtRule$4;

	function cleanSource(nodes) {
	  return nodes.map(i => {
	    if (i.nodes) i.nodes = cleanSource(i.nodes);
	    delete i.source;
	    return i
	  })
	}

	function markDirtyUp(node) {
	  node[isClean$1] = false;
	  if (node.proxyOf.nodes) {
	    for (let i of node.proxyOf.nodes) {
	      markDirtyUp(i);
	    }
	  }
	}

	class Container$7 extends Node$2 {
	  push(child) {
	    child.parent = this;
	    this.proxyOf.nodes.push(child);
	    return this
	  }

	  each(callback) {
	    if (!this.proxyOf.nodes) return undefined
	    let iterator = this.getIterator();

	    let index, result;
	    while (this.indexes[iterator] < this.proxyOf.nodes.length) {
	      index = this.indexes[iterator];
	      result = callback(this.proxyOf.nodes[index], index);
	      if (result === false) break

	      this.indexes[iterator] += 1;
	    }

	    delete this.indexes[iterator];
	    return result
	  }

	  walk(callback) {
	    return this.each((child, i) => {
	      let result;
	      try {
	        result = callback(child, i);
	      } catch (e) {
	        throw child.addToError(e)
	      }
	      if (result !== false && child.walk) {
	        result = child.walk(callback);
	      }

	      return result
	    })
	  }

	  walkDecls(prop, callback) {
	    if (!callback) {
	      callback = prop;
	      return this.walk((child, i) => {
	        if (child.type === 'decl') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (prop instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'decl' && prop.test(child.prop)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'decl' && child.prop === prop) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkRules(selector, callback) {
	    if (!callback) {
	      callback = selector;

	      return this.walk((child, i) => {
	        if (child.type === 'rule') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (selector instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'rule' && selector.test(child.selector)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'rule' && child.selector === selector) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkAtRules(name, callback) {
	    if (!callback) {
	      callback = name;
	      return this.walk((child, i) => {
	        if (child.type === 'atrule') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (name instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'atrule' && name.test(child.name)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'atrule' && child.name === name) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkComments(callback) {
	    return this.walk((child, i) => {
	      if (child.type === 'comment') {
	        return callback(child, i)
	      }
	    })
	  }

	  append(...children) {
	    for (let child of children) {
	      let nodes = this.normalize(child, this.last);
	      for (let node of nodes) this.proxyOf.nodes.push(node);
	    }

	    this.markDirty();

	    return this
	  }

	  prepend(...children) {
	    children = children.reverse();
	    for (let child of children) {
	      let nodes = this.normalize(child, this.first, 'prepend').reverse();
	      for (let node of nodes) this.proxyOf.nodes.unshift(node);
	      for (let id in this.indexes) {
	        this.indexes[id] = this.indexes[id] + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  cleanRaws(keepBetween) {
	    super.cleanRaws(keepBetween);
	    if (this.nodes) {
	      for (let node of this.nodes) node.cleanRaws(keepBetween);
	    }
	  }

	  insertBefore(exist, add) {
	    exist = this.index(exist);

	    let type = exist === 0 ? 'prepend' : false;
	    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();
	    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (exist <= index) {
	        this.indexes[id] = index + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  insertAfter(exist, add) {
	    exist = this.index(exist);

	    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();
	    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (exist < index) {
	        this.indexes[id] = index + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  removeChild(child) {
	    child = this.index(child);
	    this.proxyOf.nodes[child].parent = undefined;
	    this.proxyOf.nodes.splice(child, 1);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (index >= child) {
	        this.indexes[id] = index - 1;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  removeAll() {
	    for (let node of this.proxyOf.nodes) node.parent = undefined;
	    this.proxyOf.nodes = [];

	    this.markDirty();

	    return this
	  }

	  replaceValues(pattern, opts, callback) {
	    if (!callback) {
	      callback = opts;
	      opts = {};
	    }

	    this.walkDecls(decl => {
	      if (opts.props && !opts.props.includes(decl.prop)) return
	      if (opts.fast && !decl.value.includes(opts.fast)) return

	      decl.value = decl.value.replace(pattern, callback);
	    });

	    this.markDirty();

	    return this
	  }

	  every(condition) {
	    return this.nodes.every(condition)
	  }

	  some(condition) {
	    return this.nodes.some(condition)
	  }

	  index(child) {
	    if (typeof child === 'number') return child
	    if (child.proxyOf) child = child.proxyOf;
	    return this.proxyOf.nodes.indexOf(child)
	  }

	  get first() {
	    if (!this.proxyOf.nodes) return undefined
	    return this.proxyOf.nodes[0]
	  }

	  get last() {
	    if (!this.proxyOf.nodes) return undefined
	    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]
	  }

	  normalize(nodes, sample) {
	    if (typeof nodes === 'string') {
	      nodes = cleanSource(parse$a(nodes).nodes);
	    } else if (Array.isArray(nodes)) {
	      nodes = nodes.slice(0);
	      for (let i of nodes) {
	        if (i.parent) i.parent.removeChild(i, 'ignore');
	      }
	    } else if (nodes.type === 'root' && this.type !== 'document') {
	      nodes = nodes.nodes.slice(0);
	      for (let i of nodes) {
	        if (i.parent) i.parent.removeChild(i, 'ignore');
	      }
	    } else if (nodes.type) {
	      nodes = [nodes];
	    } else if (nodes.prop) {
	      if (typeof nodes.value === 'undefined') {
	        throw new Error('Value field is missed in node creation')
	      } else if (typeof nodes.value !== 'string') {
	        nodes.value = String(nodes.value);
	      }
	      nodes = [new Declaration$3(nodes)];
	    } else if (nodes.selector) {
	      nodes = [new Rule$4(nodes)];
	    } else if (nodes.name) {
	      nodes = [new AtRule$4(nodes)];
	    } else if (nodes.text) {
	      nodes = [new Comment$3(nodes)];
	    } else {
	      throw new Error('Unknown node type in node creation')
	    }

	    let processed = nodes.map(i => {
	      // istanbul ignore next
	      if (!i[my$1]) Container$7.rebuild(i);
	      i = i.proxyOf;
	      if (i.parent) i.parent.removeChild(i);
	      if (i[isClean$1]) markDirtyUp(i);
	      if (typeof i.raws.before === 'undefined') {
	        if (sample && typeof sample.raws.before !== 'undefined') {
	          i.raws.before = sample.raws.before.replace(/\S/g, '');
	        }
	      }
	      i.parent = this;
	      return i
	    });

	    return processed
	  }

	  getProxyProcessor() {
	    return {
	      set(node, prop, value) {
	        if (node[prop] === value) return true
	        node[prop] = value;
	        if (prop === 'name' || prop === 'params' || prop === 'selector') {
	          node.markDirty();
	        }
	        return true
	      },

	      get(node, prop) {
	        if (prop === 'proxyOf') {
	          return node
	        } else if (!node[prop]) {
	          return node[prop]
	        } else if (
	          prop === 'each' ||
	          (typeof prop === 'string' && prop.startsWith('walk'))
	        ) {
	          return (...args) => {
	            return node[prop](
	              ...args.map(i => {
	                if (typeof i === 'function') {
	                  return (child, index) => i(child.toProxy(), index)
	                } else {
	                  return i
	                }
	              })
	            )
	          }
	        } else if (prop === 'every' || prop === 'some') {
	          return cb => {
	            return node[prop]((child, ...other) =>
	              cb(child.toProxy(), ...other)
	            )
	          }
	        } else if (prop === 'root') {
	          return () => node.root().toProxy()
	        } else if (prop === 'nodes') {
	          return node.nodes.map(i => i.toProxy())
	        } else if (prop === 'first' || prop === 'last') {
	          return node[prop].toProxy()
	        } else {
	          return node[prop]
	        }
	      }
	    }
	  }

	  getIterator() {
	    if (!this.lastEach) this.lastEach = 0;
	    if (!this.indexes) this.indexes = {};

	    this.lastEach += 1;
	    let iterator = this.lastEach;
	    this.indexes[iterator] = 0;

	    return iterator
	  }
	}

	Container$7.registerParse = dependant => {
	  parse$a = dependant;
	};

	Container$7.registerRule = dependant => {
	  Rule$4 = dependant;
	};

	Container$7.registerAtRule = dependant => {
	  AtRule$4 = dependant;
	};

	var container$1 = Container$7;
	Container$7.default = Container$7;

	// istanbul ignore next
	Container$7.rebuild = node => {
	  if (node.type === 'atrule') {
	    Object.setPrototypeOf(node, AtRule$4.prototype);
	  } else if (node.type === 'rule') {
	    Object.setPrototypeOf(node, Rule$4.prototype);
	  } else if (node.type === 'decl') {
	    Object.setPrototypeOf(node, Declaration$3.prototype);
	  } else if (node.type === 'comment') {
	    Object.setPrototypeOf(node, Comment$3.prototype);
	  }

	  node[my$1] = true;

	  if (node.nodes) {
	    node.nodes.forEach(child => {
	      Container$7.rebuild(child);
	    });
	  }
	};

	let Container$6 = container$1;

	let LazyResult$4, Processor$3;

	class Document$3 extends Container$6 {
	  constructor(defaults) {
	    // type needs to be passed to super, otherwise child roots won't be normalized correctly
	    super({ type: 'document', ...defaults });

	    if (!this.nodes) {
	      this.nodes = [];
	    }
	  }

	  toResult(opts = {}) {
	    let lazy = new LazyResult$4(new Processor$3(), this, opts);

	    return lazy.stringify()
	  }
	}

	Document$3.registerLazyResult = dependant => {
	  LazyResult$4 = dependant;
	};

	Document$3.registerProcessor = dependant => {
	  Processor$3 = dependant;
	};

	var document$1 = Document$3;
	Document$3.default = Document$3;

	class Warning$2 {
	  constructor(text, opts = {}) {
	    this.type = 'warning';
	    this.text = text;

	    if (opts.node && opts.node.source) {
	      let pos = opts.node.positionBy(opts);
	      this.line = pos.line;
	      this.column = pos.column;
	    }

	    for (let opt in opts) this[opt] = opts[opt];
	  }

	  toString() {
	    if (this.node) {
	      return this.node.error(this.text, {
	        plugin: this.plugin,
	        index: this.index,
	        word: this.word
	      }).message
	    }

	    if (this.plugin) {
	      return this.plugin + ': ' + this.text
	    }

	    return this.text
	  }
	}

	var warning = Warning$2;
	Warning$2.default = Warning$2;

	let Warning$1 = warning;

	class Result$2 {
	  constructor(processor, root, opts) {
	    this.processor = processor;
	    this.messages = [];
	    this.root = root;
	    this.opts = opts;
	    this.css = undefined;
	    this.map = undefined;
	  }

	  toString() {
	    return this.css
	  }

	  warn(text, opts = {}) {
	    if (!opts.plugin) {
	      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
	        opts.plugin = this.lastPlugin.postcssPlugin;
	      }
	    }

	    let warning = new Warning$1(text, opts);
	    this.messages.push(warning);

	    return warning
	  }

	  warnings() {
	    return this.messages.filter(i => i.type === 'warning')
	  }

	  get content() {
	    return this.css
	  }
	}

	var result = Result$2;
	Result$2.default = Result$2;

	let Container$5 = container$1;

	class AtRule$3 extends Container$5 {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'atrule';
	  }

	  append(...children) {
	    if (!this.proxyOf.nodes) this.nodes = [];
	    return super.append(...children)
	  }

	  prepend(...children) {
	    if (!this.proxyOf.nodes) this.nodes = [];
	    return super.prepend(...children)
	  }
	}

	var atRule = AtRule$3;
	AtRule$3.default = AtRule$3;

	Container$5.registerAtRule(AtRule$3);

	let Container$4 = container$1;

	let LazyResult$3, Processor$2;

	class Root$5 extends Container$4 {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'root';
	    if (!this.nodes) this.nodes = [];
	  }

	  removeChild(child, ignore) {
	    let index = this.index(child);

	    if (!ignore && index === 0 && this.nodes.length > 1) {
	      this.nodes[1].raws.before = this.nodes[index].raws.before;
	    }

	    return super.removeChild(child)
	  }

	  normalize(child, sample, type) {
	    let nodes = super.normalize(child);

	    if (sample) {
	      if (type === 'prepend') {
	        if (this.nodes.length > 1) {
	          sample.raws.before = this.nodes[1].raws.before;
	        } else {
	          delete sample.raws.before;
	        }
	      } else if (this.first !== sample) {
	        for (let node of nodes) {
	          node.raws.before = sample.raws.before;
	        }
	      }
	    }

	    return nodes
	  }

	  toResult(opts = {}) {
	    let lazy = new LazyResult$3(new Processor$2(), this, opts);
	    return lazy.stringify()
	  }
	}

	Root$5.registerLazyResult = dependant => {
	  LazyResult$3 = dependant;
	};

	Root$5.registerProcessor = dependant => {
	  Processor$2 = dependant;
	};

	var root$3 = Root$5;
	Root$5.default = Root$5;

	let list$2 = {
	  split(string, separators, last) {
	    let array = [];
	    let current = '';
	    let split = false;

	    let func = 0;
	    let quote = false;
	    let escape = false;

	    for (let letter of string) {
	      if (escape) {
	        escape = false;
	      } else if (letter === '\\') {
	        escape = true;
	      } else if (quote) {
	        if (letter === quote) {
	          quote = false;
	        }
	      } else if (letter === '"' || letter === "'") {
	        quote = letter;
	      } else if (letter === '(') {
	        func += 1;
	      } else if (letter === ')') {
	        if (func > 0) func -= 1;
	      } else if (func === 0) {
	        if (separators.includes(letter)) split = true;
	      }

	      if (split) {
	        if (current !== '') array.push(current.trim());
	        current = '';
	        split = false;
	      } else {
	        current += letter;
	      }
	    }

	    if (last || current !== '') array.push(current.trim());
	    return array
	  },

	  space(string) {
	    let spaces = [' ', '\n', '\t'];
	    return list$2.split(string, spaces)
	  },

	  comma(string) {
	    return list$2.split(string, [','], true)
	  }
	};

	var list_1 = list$2;
	list$2.default = list$2;

	let Container$3 = container$1;
	let list$1 = list_1;

	class Rule$3 extends Container$3 {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'rule';
	    if (!this.nodes) this.nodes = [];
	  }

	  get selectors() {
	    return list$1.comma(this.selector)
	  }

	  set selectors(values) {
	    let match = this.selector ? this.selector.match(/,\s*/) : null;
	    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
	    this.selector = values.join(sep);
	  }
	}

	var rule = Rule$3;
	Rule$3.default = Rule$3;

	Container$3.registerRule(Rule$3);

	let Declaration$2 = declaration;
	let tokenizer = tokenize$1;
	let Comment$2 = comment$3;
	let AtRule$2 = atRule;
	let Root$4 = root$3;
	let Rule$2 = rule;

	class Parser$2 {
	  constructor(input) {
	    this.input = input;

	    this.root = new Root$4();
	    this.current = this.root;
	    this.spaces = '';
	    this.semicolon = false;
	    this.customProperty = false;

	    this.createTokenizer();
	    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } };
	  }

	  createTokenizer() {
	    this.tokenizer = tokenizer(this.input);
	  }

	  parse() {
	    let token;
	    while (!this.tokenizer.endOfFile()) {
	      token = this.tokenizer.nextToken();

	      switch (token[0]) {
	        case 'space':
	          this.spaces += token[1];
	          break

	        case ';':
	          this.freeSemicolon(token);
	          break

	        case '}':
	          this.end(token);
	          break

	        case 'comment':
	          this.comment(token);
	          break

	        case 'at-word':
	          this.atrule(token);
	          break

	        case '{':
	          this.emptyRule(token);
	          break

	        default:
	          this.other(token);
	          break
	      }
	    }
	    this.endFile();
	  }

	  comment(token) {
	    let node = new Comment$2();
	    this.init(node, token[2]);
	    node.source.end = this.getPosition(token[3] || token[2]);

	    let text = token[1].slice(2, -2);
	    if (/^\s*$/.test(text)) {
	      node.text = '';
	      node.raws.left = text;
	      node.raws.right = '';
	    } else {
	      let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
	      node.text = match[2];
	      node.raws.left = match[1];
	      node.raws.right = match[3];
	    }
	  }

	  emptyRule(token) {
	    let node = new Rule$2();
	    this.init(node, token[2]);
	    node.selector = '';
	    node.raws.between = '';
	    this.current = node;
	  }

	  other(start) {
	    let end = false;
	    let type = null;
	    let colon = false;
	    let bracket = null;
	    let brackets = [];
	    let customProperty = start[1].startsWith('--');

	    let tokens = [];
	    let token = start;
	    while (token) {
	      type = token[0];
	      tokens.push(token);

	      if (type === '(' || type === '[') {
	        if (!bracket) bracket = token;
	        brackets.push(type === '(' ? ')' : ']');
	      } else if (customProperty && colon && type === '{') {
	        if (!bracket) bracket = token;
	        brackets.push('}');
	      } else if (brackets.length === 0) {
	        if (type === ';') {
	          if (colon) {
	            this.decl(tokens, customProperty);
	            return
	          } else {
	            break
	          }
	        } else if (type === '{') {
	          this.rule(tokens);
	          return
	        } else if (type === '}') {
	          this.tokenizer.back(tokens.pop());
	          end = true;
	          break
	        } else if (type === ':') {
	          colon = true;
	        }
	      } else if (type === brackets[brackets.length - 1]) {
	        brackets.pop();
	        if (brackets.length === 0) bracket = null;
	      }

	      token = this.tokenizer.nextToken();
	    }

	    if (this.tokenizer.endOfFile()) end = true;
	    if (brackets.length > 0) this.unclosedBracket(bracket);

	    if (end && colon) {
	      while (tokens.length) {
	        token = tokens[tokens.length - 1][0];
	        if (token !== 'space' && token !== 'comment') break
	        this.tokenizer.back(tokens.pop());
	      }
	      this.decl(tokens, customProperty);
	    } else {
	      this.unknownWord(tokens);
	    }
	  }

	  rule(tokens) {
	    tokens.pop();

	    let node = new Rule$2();
	    this.init(node, tokens[0][2]);

	    node.raws.between = this.spacesAndCommentsFromEnd(tokens);
	    this.raw(node, 'selector', tokens);
	    this.current = node;
	  }

	  decl(tokens, customProperty) {
	    let node = new Declaration$2();
	    this.init(node, tokens[0][2]);

	    let last = tokens[tokens.length - 1];
	    if (last[0] === ';') {
	      this.semicolon = true;
	      tokens.pop();
	    }
	    node.source.end = this.getPosition(last[3] || last[2]);

	    while (tokens[0][0] !== 'word') {
	      if (tokens.length === 1) this.unknownWord(tokens);
	      node.raws.before += tokens.shift()[1];
	    }
	    node.source.start = this.getPosition(tokens[0][2]);

	    node.prop = '';
	    while (tokens.length) {
	      let type = tokens[0][0];
	      if (type === ':' || type === 'space' || type === 'comment') {
	        break
	      }
	      node.prop += tokens.shift()[1];
	    }

	    node.raws.between = '';

	    let token;
	    while (tokens.length) {
	      token = tokens.shift();

	      if (token[0] === ':') {
	        node.raws.between += token[1];
	        break
	      } else {
	        if (token[0] === 'word' && /\w/.test(token[1])) {
	          this.unknownWord([token]);
	        }
	        node.raws.between += token[1];
	      }
	    }

	    if (node.prop[0] === '_' || node.prop[0] === '*') {
	      node.raws.before += node.prop[0];
	      node.prop = node.prop.slice(1);
	    }
	    let firstSpaces = this.spacesAndCommentsFromStart(tokens);
	    this.precheckMissedSemicolon(tokens);

	    for (let i = tokens.length - 1; i >= 0; i--) {
	      token = tokens[i];
	      if (token[1].toLowerCase() === '!important') {
	        node.important = true;
	        let string = this.stringFrom(tokens, i);
	        string = this.spacesFromEnd(tokens) + string;
	        if (string !== ' !important') node.raws.important = string;
	        break
	      } else if (token[1].toLowerCase() === 'important') {
	        let cache = tokens.slice(0);
	        let str = '';
	        for (let j = i; j > 0; j--) {
	          let type = cache[j][0];
	          if (str.trim().indexOf('!') === 0 && type !== 'space') {
	            break
	          }
	          str = cache.pop()[1] + str;
	        }
	        if (str.trim().indexOf('!') === 0) {
	          node.important = true;
	          node.raws.important = str;
	          tokens = cache;
	        }
	      }

	      if (token[0] !== 'space' && token[0] !== 'comment') {
	        break
	      }
	    }

	    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');
	    this.raw(node, 'value', tokens);
	    if (hasWord) {
	      node.raws.between += firstSpaces;
	    } else {
	      node.value = firstSpaces + node.value;
	    }

	    if (node.value.includes(':') && !customProperty) {
	      this.checkMissedSemicolon(tokens);
	    }
	  }

	  atrule(token) {
	    let node = new AtRule$2();
	    node.name = token[1].slice(1);
	    if (node.name === '') {
	      this.unnamedAtrule(node, token);
	    }
	    this.init(node, token[2]);

	    let type;
	    let prev;
	    let shift;
	    let last = false;
	    let open = false;
	    let params = [];
	    let brackets = [];

	    while (!this.tokenizer.endOfFile()) {
	      token = this.tokenizer.nextToken();
	      type = token[0];

	      if (type === '(' || type === '[') {
	        brackets.push(type === '(' ? ')' : ']');
	      } else if (type === '{' && brackets.length > 0) {
	        brackets.push('}');
	      } else if (type === brackets[brackets.length - 1]) {
	        brackets.pop();
	      }

	      if (brackets.length === 0) {
	        if (type === ';') {
	          node.source.end = this.getPosition(token[2]);
	          this.semicolon = true;
	          break
	        } else if (type === '{') {
	          open = true;
	          break
	        } else if (type === '}') {
	          if (params.length > 0) {
	            shift = params.length - 1;
	            prev = params[shift];
	            while (prev && prev[0] === 'space') {
	              prev = params[--shift];
	            }
	            if (prev) {
	              node.source.end = this.getPosition(prev[3] || prev[2]);
	            }
	          }
	          this.end(token);
	          break
	        } else {
	          params.push(token);
	        }
	      } else {
	        params.push(token);
	      }

	      if (this.tokenizer.endOfFile()) {
	        last = true;
	        break
	      }
	    }

	    node.raws.between = this.spacesAndCommentsFromEnd(params);
	    if (params.length) {
	      node.raws.afterName = this.spacesAndCommentsFromStart(params);
	      this.raw(node, 'params', params);
	      if (last) {
	        token = params[params.length - 1];
	        node.source.end = this.getPosition(token[3] || token[2]);
	        this.spaces = node.raws.between;
	        node.raws.between = '';
	      }
	    } else {
	      node.raws.afterName = '';
	      node.params = '';
	    }

	    if (open) {
	      node.nodes = [];
	      this.current = node;
	    }
	  }

	  end(token) {
	    if (this.current.nodes && this.current.nodes.length) {
	      this.current.raws.semicolon = this.semicolon;
	    }
	    this.semicolon = false;

	    this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	    this.spaces = '';

	    if (this.current.parent) {
	      this.current.source.end = this.getPosition(token[2]);
	      this.current = this.current.parent;
	    } else {
	      this.unexpectedClose(token);
	    }
	  }

	  endFile() {
	    if (this.current.parent) this.unclosedBlock();
	    if (this.current.nodes && this.current.nodes.length) {
	      this.current.raws.semicolon = this.semicolon;
	    }
	    this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	  }

	  freeSemicolon(token) {
	    this.spaces += token[1];
	    if (this.current.nodes) {
	      let prev = this.current.nodes[this.current.nodes.length - 1];
	      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
	        prev.raws.ownSemicolon = this.spaces;
	        this.spaces = '';
	      }
	    }
	  }

	  // Helpers

	  getPosition(offset) {
	    let pos = this.input.fromOffset(offset);
	    return {
	      offset,
	      line: pos.line,
	      column: pos.col
	    }
	  }

	  init(node, offset) {
	    this.current.push(node);
	    node.source = {
	      start: this.getPosition(offset),
	      input: this.input
	    };
	    node.raws.before = this.spaces;
	    this.spaces = '';
	    if (node.type !== 'comment') this.semicolon = false;
	  }

	  raw(node, prop, tokens) {
	    let token, type;
	    let length = tokens.length;
	    let value = '';
	    let clean = true;
	    let next, prev;
	    let pattern = /^([#.|])?(\w)+/i;

	    for (let i = 0; i < length; i += 1) {
	      token = tokens[i];
	      type = token[0];

	      if (type === 'comment' && node.type === 'rule') {
	        prev = tokens[i - 1];
	        next = tokens[i + 1];

	        if (
	          prev[0] !== 'space' &&
	          next[0] !== 'space' &&
	          pattern.test(prev[1]) &&
	          pattern.test(next[1])
	        ) {
	          value += token[1];
	        } else {
	          clean = false;
	        }

	        continue
	      }

	      if (type === 'comment' || (type === 'space' && i === length - 1)) {
	        clean = false;
	      } else {
	        value += token[1];
	      }
	    }
	    if (!clean) {
	      let raw = tokens.reduce((all, i) => all + i[1], '');
	      node.raws[prop] = { value, raw };
	    }
	    node[prop] = value;
	  }

	  spacesAndCommentsFromEnd(tokens) {
	    let lastTokenType;
	    let spaces = '';
	    while (tokens.length) {
	      lastTokenType = tokens[tokens.length - 1][0];
	      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break
	      spaces = tokens.pop()[1] + spaces;
	    }
	    return spaces
	  }

	  spacesAndCommentsFromStart(tokens) {
	    let next;
	    let spaces = '';
	    while (tokens.length) {
	      next = tokens[0][0];
	      if (next !== 'space' && next !== 'comment') break
	      spaces += tokens.shift()[1];
	    }
	    return spaces
	  }

	  spacesFromEnd(tokens) {
	    let lastTokenType;
	    let spaces = '';
	    while (tokens.length) {
	      lastTokenType = tokens[tokens.length - 1][0];
	      if (lastTokenType !== 'space') break
	      spaces = tokens.pop()[1] + spaces;
	    }
	    return spaces
	  }

	  stringFrom(tokens, from) {
	    let result = '';
	    for (let i = from; i < tokens.length; i++) {
	      result += tokens[i][1];
	    }
	    tokens.splice(from, tokens.length - from);
	    return result
	  }

	  colon(tokens) {
	    let brackets = 0;
	    let token, type, prev;
	    for (let [i, element] of tokens.entries()) {
	      token = element;
	      type = token[0];

	      if (type === '(') {
	        brackets += 1;
	      }
	      if (type === ')') {
	        brackets -= 1;
	      }
	      if (brackets === 0 && type === ':') {
	        if (!prev) {
	          this.doubleColon(token);
	        } else if (prev[0] === 'word' && prev[1] === 'progid') {
	          continue
	        } else {
	          return i
	        }
	      }

	      prev = token;
	    }
	    return false
	  }

	  // Errors

	  unclosedBracket(bracket) {
	    throw this.input.error('Unclosed bracket', bracket[2])
	  }

	  unknownWord(tokens) {
	    throw this.input.error('Unknown word', tokens[0][2])
	  }

	  unexpectedClose(token) {
	    throw this.input.error('Unexpected }', token[2])
	  }

	  unclosedBlock() {
	    let pos = this.current.source.start;
	    throw this.input.error('Unclosed block', pos.line, pos.column)
	  }

	  doubleColon(token) {
	    throw this.input.error('Double colon', token[2])
	  }

	  unnamedAtrule(node, token) {
	    throw this.input.error('At-rule without name', token[2])
	  }

	  precheckMissedSemicolon(/* tokens */) {
	    // Hook for Safe Parser
	  }

	  checkMissedSemicolon(tokens) {
	    let colon = this.colon(tokens);
	    if (colon === false) return

	    let founded = 0;
	    let token;
	    for (let j = colon - 1; j >= 0; j--) {
	      token = tokens[j];
	      if (token[0] !== 'space') {
	        founded += 1;
	        if (founded === 2) break
	      }
	    }
	    throw this.input.error('Missed semicolon', token[2])
	  }
	}

	var parser$3 = Parser$2;

	// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
	// optimize the gzip compression for this alphabet.
	let urlAlphabet =
	  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

	let customAlphabet = (alphabet, size) => {
	  return () => {
	    let id = '';
	    // A compact alternative for `for (var i = 0; i < step; i++)`.
	    let i = size;
	    while (i--) {
	      // `| 0` is more compact and faster than `Math.floor()`.
	      id += alphabet[(Math.random() * alphabet.length) | 0];
	    }
	    return id
	  }
	};

	let nanoid$1 = (size = 21) => {
	  let id = '';
	  // A compact alternative for `for (var i = 0; i < step; i++)`.
	  let i = size;
	  while (i--) {
	    // `| 0` is more compact and faster than `Math.floor()`.
	    id += urlAlphabet[(Math.random() * 64) | 0];
	  }
	  return id
	};

	var nonSecure = { nanoid: nanoid$1, customAlphabet };

	let { SourceMapConsumer: SourceMapConsumer$2, SourceMapGenerator: SourceMapGenerator$2 } = sourceMap$2;
	let { existsSync, readFileSync } = require$$0$5;
	let { dirname, join } = require$$3;

	function fromBase64(str) {
	  if (Buffer) {
	    return Buffer.from(str, 'base64').toString()
	  } else {
	    // istanbul ignore next
	    return window.atob(str)
	  }
	}

	class PreviousMap$2 {
	  constructor(css, opts) {
	    if (opts.map === false) return
	    this.loadAnnotation(css);
	    this.inline = this.startWith(this.annotation, 'data:');

	    let prev = opts.map ? opts.map.prev : undefined;
	    let text = this.loadMap(opts.from, prev);
	    if (!this.mapFile && opts.from) {
	      this.mapFile = opts.from;
	    }
	    if (this.mapFile) this.root = dirname(this.mapFile);
	    if (text) this.text = text;
	  }

	  consumer() {
	    if (!this.consumerCache) {
	      this.consumerCache = new SourceMapConsumer$2(this.text);
	    }
	    return this.consumerCache
	  }

	  withContent() {
	    return !!(
	      this.consumer().sourcesContent &&
	      this.consumer().sourcesContent.length > 0
	    )
	  }

	  startWith(string, start) {
	    if (!string) return false
	    return string.substr(0, start.length) === start
	  }

	  getAnnotationURL(sourceMapString) {
	    return sourceMapString
	      .match(/\/\*\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\*\//)[1]
	      .trim()
	  }

	  loadAnnotation(css) {
	    let annotations = css.match(
	      /\/\*\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\*\//gm
	    );

	    if (annotations && annotations.length > 0) {
	      // Locate the last sourceMappingURL to avoid picking up
	      // sourceMappingURLs from comments, strings, etc.
	      let lastAnnotation = annotations[annotations.length - 1];
	      if (lastAnnotation) {
	        this.annotation = this.getAnnotationURL(lastAnnotation);
	      }
	    }
	  }

	  decodeInline(text) {
	    let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
	    let baseUri = /^data:application\/json;base64,/;
	    let charsetUri = /^data:application\/json;charset=utf-?8,/;
	    let uri = /^data:application\/json,/;

	    if (charsetUri.test(text) || uri.test(text)) {
	      return decodeURIComponent(text.substr(RegExp.lastMatch.length))
	    }

	    if (baseCharsetUri.test(text) || baseUri.test(text)) {
	      return fromBase64(text.substr(RegExp.lastMatch.length))
	    }

	    let encoding = text.match(/data:application\/json;([^,]+),/)[1];
	    throw new Error('Unsupported source map encoding ' + encoding)
	  }

	  loadFile(path) {
	    this.root = dirname(path);
	    if (existsSync(path)) {
	      this.mapFile = path;
	      return readFileSync(path, 'utf-8').toString().trim()
	    }
	  }

	  loadMap(file, prev) {
	    if (prev === false) return false

	    if (prev) {
	      if (typeof prev === 'string') {
	        return prev
	      } else if (typeof prev === 'function') {
	        let prevPath = prev(file);
	        if (prevPath) {
	          let map = this.loadFile(prevPath);
	          if (!map) {
	            throw new Error(
	              'Unable to load previous source map: ' + prevPath.toString()
	            )
	          }
	          return map
	        }
	      } else if (prev instanceof SourceMapConsumer$2) {
	        return SourceMapGenerator$2.fromSourceMap(prev).toString()
	      } else if (prev instanceof SourceMapGenerator$2) {
	        return prev.toString()
	      } else if (this.isMap(prev)) {
	        return JSON.stringify(prev)
	      } else {
	        throw new Error(
	          'Unsupported previous source map format: ' + prev.toString()
	        )
	      }
	    } else if (this.inline) {
	      return this.decodeInline(this.annotation)
	    } else if (this.annotation) {
	      let map = this.annotation;
	      if (file) map = join(dirname(file), map);
	      return this.loadFile(map)
	    }
	  }

	  isMap(map) {
	    if (typeof map !== 'object') return false
	    return (
	      typeof map.mappings === 'string' ||
	      typeof map._mappings === 'string' ||
	      Array.isArray(map.sections)
	    )
	  }
	}

	var previousMap = PreviousMap$2;
	PreviousMap$2.default = PreviousMap$2;

	let { SourceMapConsumer: SourceMapConsumer$1, SourceMapGenerator: SourceMapGenerator$1 } = sourceMap$2;
	let { fileURLToPath, pathToFileURL } = require$$5;
	let { resolve, isAbsolute } = require$$3;
	let { nanoid } = nonSecure;

	let terminalHighlight = terminalHighlight_1;
	let CssSyntaxError$1 = cssSyntaxError;
	let PreviousMap$1 = previousMap;

	let fromOffsetCache = Symbol('fromOffsetCache');

	let sourceMapAvailable = Boolean(SourceMapConsumer$1 && SourceMapGenerator$1);
	let pathAvailable = Boolean(resolve && isAbsolute);

	class Input$3 {
	  constructor(css, opts = {}) {
	    if (
	      css === null ||
	      typeof css === 'undefined' ||
	      (typeof css === 'object' && !css.toString)
	    ) {
	      throw new Error(`PostCSS received ${css} instead of CSS string`)
	    }

	    this.css = css.toString();

	    if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
	      this.hasBOM = true;
	      this.css = this.css.slice(1);
	    } else {
	      this.hasBOM = false;
	    }

	    if (opts.from) {
	      if (
	        !pathAvailable ||
	        /^\w+:\/\//.test(opts.from) ||
	        isAbsolute(opts.from)
	      ) {
	        this.file = opts.from;
	      } else {
	        this.file = resolve(opts.from);
	      }
	    }

	    if (pathAvailable && sourceMapAvailable) {
	      let map = new PreviousMap$1(this.css, opts);
	      if (map.text) {
	        this.map = map;
	        let file = map.consumer().file;
	        if (!this.file && file) this.file = this.mapResolve(file);
	      }
	    }

	    if (!this.file) {
	      this.id = '<input css ' + nanoid(6) + '>';
	    }
	    if (this.map) this.map.file = this.from;
	  }

	  fromOffset(offset) {
	    let lastLine, lineToIndex;
	    if (!this[fromOffsetCache]) {
	      let lines = this.css.split('\n');
	      lineToIndex = new Array(lines.length);
	      let prevIndex = 0;

	      for (let i = 0, l = lines.length; i < l; i++) {
	        lineToIndex[i] = prevIndex;
	        prevIndex += lines[i].length + 1;
	      }

	      this[fromOffsetCache] = lineToIndex;
	    } else {
	      lineToIndex = this[fromOffsetCache];
	    }
	    lastLine = lineToIndex[lineToIndex.length - 1];

	    let min = 0;
	    if (offset >= lastLine) {
	      min = lineToIndex.length - 1;
	    } else {
	      let max = lineToIndex.length - 2;
	      let mid;
	      while (min < max) {
	        mid = min + ((max - min) >> 1);
	        if (offset < lineToIndex[mid]) {
	          max = mid - 1;
	        } else if (offset >= lineToIndex[mid + 1]) {
	          min = mid + 1;
	        } else {
	          min = mid;
	          break
	        }
	      }
	    }
	    return {
	      line: min + 1,
	      col: offset - lineToIndex[min] + 1
	    }
	  }

	  error(message, line, column, opts = {}) {
	    let result;
	    if (!column) {
	      let pos = this.fromOffset(line);
	      line = pos.line;
	      column = pos.col;
	    }
	    let origin = this.origin(line, column);
	    if (origin) {
	      result = new CssSyntaxError$1(
	        message,
	        origin.line,
	        origin.column,
	        origin.source,
	        origin.file,
	        opts.plugin
	      );
	    } else {
	      result = new CssSyntaxError$1(
	        message,
	        line,
	        column,
	        this.css,
	        this.file,
	        opts.plugin
	      );
	    }

	    result.input = { line, column, source: this.css };
	    if (this.file) {
	      if (pathToFileURL) {
	        result.input.url = pathToFileURL(this.file).toString();
	      }
	      result.input.file = this.file;
	    }

	    return result
	  }

	  origin(line, column) {
	    if (!this.map) return false
	    let consumer = this.map.consumer();

	    let from = consumer.originalPositionFor({ line, column });
	    if (!from.source) return false

	    let fromUrl;

	    if (isAbsolute(from.source)) {
	      fromUrl = pathToFileURL(from.source);
	    } else {
	      fromUrl = new URL(
	        from.source,
	        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
	      );
	    }

	    let result = {
	      url: fromUrl.toString(),
	      line: from.line,
	      column: from.column
	    };

	    if (fromUrl.protocol === 'file:') {
	      if (fileURLToPath) {
	        result.file = fileURLToPath(fromUrl);
	      } else {
	        // istanbul ignore next
	        throw new Error(`file: protocol is not available in this PostCSS build`)
	      }
	    }

	    let source = consumer.sourceContentFor(from.source);
	    if (source) result.source = source;

	    return result
	  }

	  mapResolve(file) {
	    if (/^\w+:\/\//.test(file)) {
	      return file
	    }
	    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)
	  }

	  get from() {
	    return this.file || this.id
	  }

	  toJSON() {
	    let json = {};
	    for (let name of ['hasBOM', 'css', 'file', 'id']) {
	      if (this[name] != null) {
	        json[name] = this[name];
	      }
	    }
	    if (this.map) {
	      json.map = { ...this.map };
	      if (json.map.consumerCache) {
	        json.map.consumerCache = undefined;
	      }
	    }
	    return json
	  }
	}

	var input = Input$3;
	Input$3.default = Input$3;

	if (terminalHighlight && terminalHighlight.registerInput) {
	  terminalHighlight.registerInput(Input$3);
	}

	let Container$2 = container$1;
	let Parser$1 = parser$3;
	let Input$2 = input;

	function parse$9(css, opts) {
	  let input = new Input$2(css, opts);
	  let parser = new Parser$1(input);
	  try {
	    parser.parse();
	  } catch (e) {
	    throw e
	  }

	  return parser.root
	}

	var parse_1$1 = parse$9;
	parse$9.default = parse$9;

	Container$2.registerParse(parse$9);

	let { isClean, my } = symbols;
	let MapGenerator = mapGenerator;
	let stringify$5 = stringify_1$1;
	let Container$1 = container$1;
	let Document$2 = document$1;
	let Result$1 = result;
	let parse$8 = parse_1$1;
	let Root$3 = root$3;

	const TYPE_TO_CLASS_NAME = {
	  document: 'Document',
	  root: 'Root',
	  atrule: 'AtRule',
	  rule: 'Rule',
	  decl: 'Declaration',
	  comment: 'Comment'
	};

	const PLUGIN_PROPS = {
	  postcssPlugin: true,
	  prepare: true,
	  Once: true,
	  Document: true,
	  Root: true,
	  Declaration: true,
	  Rule: true,
	  AtRule: true,
	  Comment: true,
	  DeclarationExit: true,
	  RuleExit: true,
	  AtRuleExit: true,
	  CommentExit: true,
	  RootExit: true,
	  DocumentExit: true,
	  OnceExit: true
	};

	const NOT_VISITORS = {
	  postcssPlugin: true,
	  prepare: true,
	  Once: true
	};

	const CHILDREN = 0;

	function isPromise(obj) {
	  return typeof obj === 'object' && typeof obj.then === 'function'
	}

	function getEvents(node) {
	  let key = false;
	  let type = TYPE_TO_CLASS_NAME[node.type];
	  if (node.type === 'decl') {
	    key = node.prop.toLowerCase();
	  } else if (node.type === 'atrule') {
	    key = node.name.toLowerCase();
	  }

	  if (key && node.append) {
	    return [
	      type,
	      type + '-' + key,
	      CHILDREN,
	      type + 'Exit',
	      type + 'Exit-' + key
	    ]
	  } else if (key) {
	    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]
	  } else if (node.append) {
	    return [type, CHILDREN, type + 'Exit']
	  } else {
	    return [type, type + 'Exit']
	  }
	}

	function toStack(node) {
	  let events;
	  if (node.type === 'document') {
	    events = ['Document', CHILDREN, 'DocumentExit'];
	  } else if (node.type === 'root') {
	    events = ['Root', CHILDREN, 'RootExit'];
	  } else {
	    events = getEvents(node);
	  }

	  return {
	    node,
	    events,
	    eventIndex: 0,
	    visitors: [],
	    visitorIndex: 0,
	    iterator: 0
	  }
	}

	function cleanMarks(node) {
	  node[isClean] = false;
	  if (node.nodes) node.nodes.forEach(i => cleanMarks(i));
	  return node
	}

	let postcss$2 = {};

	class LazyResult$2 {
	  constructor(processor, css, opts) {
	    this.stringified = false;
	    this.processed = false;

	    let root;
	    if (
	      typeof css === 'object' &&
	      css !== null &&
	      (css.type === 'root' || css.type === 'document')
	    ) {
	      root = cleanMarks(css);
	    } else if (css instanceof LazyResult$2 || css instanceof Result$1) {
	      root = cleanMarks(css.root);
	      if (css.map) {
	        if (typeof opts.map === 'undefined') opts.map = {};
	        if (!opts.map.inline) opts.map.inline = false;
	        opts.map.prev = css.map;
	      }
	    } else {
	      let parser = parse$8;
	      if (opts.syntax) parser = opts.syntax.parse;
	      if (opts.parser) parser = opts.parser;
	      if (parser.parse) parser = parser.parse;

	      try {
	        root = parser(css, opts);
	      } catch (error) {
	        this.processed = true;
	        this.error = error;
	      }

	      if (root && !root[my]) {
	        // istanbul ignore next
	        Container$1.rebuild(root);
	      }
	    }

	    this.result = new Result$1(processor, root, opts);
	    this.helpers = { ...postcss$2, result: this.result, postcss: postcss$2 };
	    this.plugins = this.processor.plugins.map(plugin => {
	      if (typeof plugin === 'object' && plugin.prepare) {
	        return { ...plugin, ...plugin.prepare(this.result) }
	      } else {
	        return plugin
	      }
	    });
	  }

	  get [Symbol.toStringTag]() {
	    return 'LazyResult'
	  }

	  get processor() {
	    return this.result.processor
	  }

	  get opts() {
	    return this.result.opts
	  }

	  get css() {
	    return this.stringify().css
	  }

	  get content() {
	    return this.stringify().content
	  }

	  get map() {
	    return this.stringify().map
	  }

	  get root() {
	    return this.sync().root
	  }

	  get messages() {
	    return this.sync().messages
	  }

	  warnings() {
	    return this.sync().warnings()
	  }

	  toString() {
	    return this.css
	  }

	  then(onFulfilled, onRejected) {
	    return this.async().then(onFulfilled, onRejected)
	  }

	  catch(onRejected) {
	    return this.async().catch(onRejected)
	  }

	  finally(onFinally) {
	    return this.async().then(onFinally, onFinally)
	  }

	  async() {
	    if (this.error) return Promise.reject(this.error)
	    if (this.processed) return Promise.resolve(this.result)
	    if (!this.processing) {
	      this.processing = this.runAsync();
	    }
	    return this.processing
	  }

	  sync() {
	    if (this.error) throw this.error
	    if (this.processed) return this.result
	    this.processed = true;

	    if (this.processing) {
	      throw this.getAsyncError()
	    }

	    for (let plugin of this.plugins) {
	      let promise = this.runOnRoot(plugin);
	      if (isPromise(promise)) {
	        throw this.getAsyncError()
	      }
	    }

	    this.prepareVisitors();
	    if (this.hasListener) {
	      let root = this.result.root;
	      while (!root[isClean]) {
	        root[isClean] = true;
	        this.walkSync(root);
	      }
	      if (this.listeners.OnceExit) {
	        if (root.type === 'document') {
	          for (let subRoot of root.nodes) {
	            this.visitSync(this.listeners.OnceExit, subRoot);
	          }
	        } else {
	          this.visitSync(this.listeners.OnceExit, root);
	        }
	      }
	    }

	    return this.result
	  }

	  stringify() {
	    if (this.error) throw this.error
	    if (this.stringified) return this.result
	    this.stringified = true;

	    this.sync();

	    let opts = this.result.opts;
	    let str = stringify$5;
	    if (opts.syntax) str = opts.syntax.stringify;
	    if (opts.stringifier) str = opts.stringifier;
	    if (str.stringify) str = str.stringify;

	    let map = new MapGenerator(str, this.result.root, this.result.opts);
	    let data = map.generate();
	    this.result.css = data[0];
	    this.result.map = data[1];

	    return this.result
	  }

	  walkSync(node) {
	    node[isClean] = true;
	    let events = getEvents(node);
	    for (let event of events) {
	      if (event === CHILDREN) {
	        if (node.nodes) {
	          node.each(child => {
	            if (!child[isClean]) this.walkSync(child);
	          });
	        }
	      } else {
	        let visitors = this.listeners[event];
	        if (visitors) {
	          if (this.visitSync(visitors, node.toProxy())) return
	        }
	      }
	    }
	  }

	  visitSync(visitors, node) {
	    for (let [plugin, visitor] of visitors) {
	      this.result.lastPlugin = plugin;
	      let promise;
	      try {
	        promise = visitor(node, this.helpers);
	      } catch (e) {
	        throw this.handleError(e, node.proxyOf)
	      }
	      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
	        return true
	      }
	      if (isPromise(promise)) {
	        throw this.getAsyncError()
	      }
	    }
	  }

	  runOnRoot(plugin) {
	    this.result.lastPlugin = plugin;
	    try {
	      if (typeof plugin === 'object' && plugin.Once) {
	        if (this.result.root.type === 'document') {
	          let roots = this.result.root.nodes.map(root =>
	            plugin.Once(root, this.helpers)
	          );

	          if (isPromise(roots[0])) {
	            return Promise.all(roots)
	          }

	          return roots
	        }

	        return plugin.Once(this.result.root, this.helpers)
	      } else if (typeof plugin === 'function') {
	        return plugin(this.result.root, this.result)
	      }
	    } catch (error) {
	      throw this.handleError(error)
	    }
	  }

	  getAsyncError() {
	    throw new Error('Use process(css).then(cb) to work with async plugins')
	  }

	  handleError(error, node) {
	    let plugin = this.result.lastPlugin;
	    try {
	      if (node) node.addToError(error);
	      this.error = error;
	      if (error.name === 'CssSyntaxError' && !error.plugin) {
	        error.plugin = plugin.postcssPlugin;
	        error.setMessage();
	      } else if (plugin.postcssVersion) {
	        if ("production" !== 'production') ;
	      }
	    } catch (err) {
	      // istanbul ignore next
	      if (console && console.error) console.error(err);
	    }
	    return error
	  }

	  async runAsync() {
	    this.plugin = 0;
	    for (let i = 0; i < this.plugins.length; i++) {
	      let plugin = this.plugins[i];
	      let promise = this.runOnRoot(plugin);
	      if (isPromise(promise)) {
	        try {
	          await promise;
	        } catch (error) {
	          throw this.handleError(error)
	        }
	      }
	    }

	    this.prepareVisitors();
	    if (this.hasListener) {
	      let root = this.result.root;
	      while (!root[isClean]) {
	        root[isClean] = true;
	        let stack = [toStack(root)];
	        while (stack.length > 0) {
	          let promise = this.visitTick(stack);
	          if (isPromise(promise)) {
	            try {
	              await promise;
	            } catch (e) {
	              let node = stack[stack.length - 1].node;
	              throw this.handleError(e, node)
	            }
	          }
	        }
	      }

	      if (this.listeners.OnceExit) {
	        for (let [plugin, visitor] of this.listeners.OnceExit) {
	          this.result.lastPlugin = plugin;
	          try {
	            if (root.type === 'document') {
	              let roots = root.nodes.map(subRoot =>
	                visitor(subRoot, this.helpers)
	              );

	              await Promise.all(roots);
	            } else {
	              await visitor(root, this.helpers);
	            }
	          } catch (e) {
	            throw this.handleError(e)
	          }
	        }
	      }
	    }

	    this.processed = true;
	    return this.stringify()
	  }

	  prepareVisitors() {
	    this.listeners = {};
	    let add = (plugin, type, cb) => {
	      if (!this.listeners[type]) this.listeners[type] = [];
	      this.listeners[type].push([plugin, cb]);
	    };
	    for (let plugin of this.plugins) {
	      if (typeof plugin === 'object') {
	        for (let event in plugin) {
	          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
	            throw new Error(
	              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +
	                `Try to update PostCSS (${this.processor.version} now).`
	            )
	          }
	          if (!NOT_VISITORS[event]) {
	            if (typeof plugin[event] === 'object') {
	              for (let filter in plugin[event]) {
	                if (filter === '*') {
	                  add(plugin, event, plugin[event][filter]);
	                } else {
	                  add(
	                    plugin,
	                    event + '-' + filter.toLowerCase(),
	                    plugin[event][filter]
	                  );
	                }
	              }
	            } else if (typeof plugin[event] === 'function') {
	              add(plugin, event, plugin[event]);
	            }
	          }
	        }
	      }
	    }
	    this.hasListener = Object.keys(this.listeners).length > 0;
	  }

	  visitTick(stack) {
	    let visit = stack[stack.length - 1];
	    let { node, visitors } = visit;

	    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
	      stack.pop();
	      return
	    }

	    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
	      let [plugin, visitor] = visitors[visit.visitorIndex];
	      visit.visitorIndex += 1;
	      if (visit.visitorIndex === visitors.length) {
	        visit.visitors = [];
	        visit.visitorIndex = 0;
	      }
	      this.result.lastPlugin = plugin;
	      try {
	        return visitor(node.toProxy(), this.helpers)
	      } catch (e) {
	        throw this.handleError(e, node)
	      }
	    }

	    if (visit.iterator !== 0) {
	      let iterator = visit.iterator;
	      let child;
	      while ((child = node.nodes[node.indexes[iterator]])) {
	        node.indexes[iterator] += 1;
	        if (!child[isClean]) {
	          child[isClean] = true;
	          stack.push(toStack(child));
	          return
	        }
	      }
	      visit.iterator = 0;
	      delete node.indexes[iterator];
	    }

	    let events = visit.events;
	    while (visit.eventIndex < events.length) {
	      let event = events[visit.eventIndex];
	      visit.eventIndex += 1;
	      if (event === CHILDREN) {
	        if (node.nodes && node.nodes.length) {
	          node[isClean] = true;
	          visit.iterator = node.getIterator();
	        }
	        return
	      } else if (this.listeners[event]) {
	        visit.visitors = this.listeners[event];
	        return
	      }
	    }
	    stack.pop();
	  }
	}

	LazyResult$2.registerPostcss = dependant => {
	  postcss$2 = dependant;
	};

	var lazyResult = LazyResult$2;
	LazyResult$2.default = LazyResult$2;

	Root$3.registerLazyResult(LazyResult$2);
	Document$2.registerLazyResult(LazyResult$2);

	let LazyResult$1 = lazyResult;
	let Document$1 = document$1;
	let Root$2 = root$3;

	class Processor$1 {
	  constructor(plugins = []) {
	    this.version = '8.3.5';
	    this.plugins = this.normalize(plugins);
	  }

	  use(plugin) {
	    this.plugins = this.plugins.concat(this.normalize([plugin]));
	    return this
	  }

	  process(css, opts = {}) {
	    if (
	      this.plugins.length === 0 &&
	      typeof opts.parser === 'undefined' &&
	      typeof opts.stringifier === 'undefined' &&
	      typeof opts.syntax === 'undefined' &&
	      !opts.hideNothingWarning
	    ) ;
	    return new LazyResult$1(this, css, opts)
	  }

	  normalize(plugins) {
	    let normalized = [];
	    for (let i of plugins) {
	      if (i.postcss === true) {
	        i = i();
	      } else if (i.postcss) {
	        i = i.postcss;
	      }

	      if (typeof i === 'object' && Array.isArray(i.plugins)) {
	        normalized = normalized.concat(i.plugins);
	      } else if (typeof i === 'object' && i.postcssPlugin) {
	        normalized.push(i);
	      } else if (typeof i === 'function') {
	        normalized.push(i);
	      } else if (typeof i === 'object' && (i.parse || i.stringify)) ; else {
	        throw new Error(i + ' is not a PostCSS plugin')
	      }
	    }
	    return normalized
	  }
	}

	var processor$1 = Processor$1;
	Processor$1.default = Processor$1;

	Root$2.registerProcessor(Processor$1);
	Document$1.registerProcessor(Processor$1);

	let Declaration$1 = declaration;
	let PreviousMap = previousMap;
	let Comment$1 = comment$3;
	let AtRule$1 = atRule;
	let Input$1 = input;
	let Root$1 = root$3;
	let Rule$1 = rule;

	function fromJSON$1(json, inputs) {
	  if (Array.isArray(json)) return json.map(n => fromJSON$1(n))

	  let { inputs: ownInputs, ...defaults } = json;
	  if (ownInputs) {
	    inputs = [];
	    for (let input of ownInputs) {
	      let inputHydrated = { ...input, __proto__: Input$1.prototype };
	      if (inputHydrated.map) {
	        inputHydrated.map = {
	          ...inputHydrated.map,
	          __proto__: PreviousMap.prototype
	        };
	      }
	      inputs.push(inputHydrated);
	    }
	  }
	  if (defaults.nodes) {
	    defaults.nodes = json.nodes.map(n => fromJSON$1(n, inputs));
	  }
	  if (defaults.source) {
	    let { inputId, ...source } = defaults.source;
	    defaults.source = source;
	    if (inputId != null) {
	      defaults.source.input = inputs[inputId];
	    }
	  }
	  if (defaults.type === 'root') {
	    return new Root$1(defaults)
	  } else if (defaults.type === 'decl') {
	    return new Declaration$1(defaults)
	  } else if (defaults.type === 'rule') {
	    return new Rule$1(defaults)
	  } else if (defaults.type === 'comment') {
	    return new Comment$1(defaults)
	  } else if (defaults.type === 'atrule') {
	    return new AtRule$1(defaults)
	  } else {
	    throw new Error('Unknown node type: ' + json.type)
	  }
	}

	var fromJSON_1 = fromJSON$1;
	fromJSON$1.default = fromJSON$1;

	let CssSyntaxError = cssSyntaxError;
	let Declaration = declaration;
	let LazyResult = lazyResult;
	let Container = container$1;
	let Processor = processor$1;
	let stringify$4 = stringify_1$1;
	let fromJSON = fromJSON_1;
	let Document = document$1;
	let Warning = warning;
	let Comment = comment$3;
	let AtRule = atRule;
	let Result = result;
	let Input = input;
	let parse$7 = parse_1$1;
	let list = list_1;
	let Rule = rule;
	let Root = root$3;
	let Node$1 = node_1;

	function postcss$1(...plugins) {
	  if (plugins.length === 1 && Array.isArray(plugins[0])) {
	    plugins = plugins[0];
	  }
	  return new Processor(plugins)
	}

	postcss$1.plugin = function plugin(name, initializer) {
	  if (console && console.warn) {
	    console.warn(
	      name +
	        ': postcss.plugin was deprecated. Migration guide:\n' +
	        'https://evilmartians.com/chronicles/postcss-8-plugin-migration'
	    );
	  }
	  function creator(...args) {
	    let transformer = initializer(...args);
	    transformer.postcssPlugin = name;
	    transformer.postcssVersion = new Processor().version;
	    return transformer
	  }

	  let cache;
	  Object.defineProperty(creator, 'postcss', {
	    get() {
	      if (!cache) cache = creator();
	      return cache
	    }
	  });

	  creator.process = function (css, processOpts, pluginOpts) {
	    return postcss$1([creator(pluginOpts)]).process(css, processOpts)
	  };

	  return creator
	};

	postcss$1.stringify = stringify$4;
	postcss$1.parse = parse$7;
	postcss$1.fromJSON = fromJSON;
	postcss$1.list = list;

	postcss$1.comment = defaults => new Comment(defaults);
	postcss$1.atRule = defaults => new AtRule(defaults);
	postcss$1.decl = defaults => new Declaration(defaults);
	postcss$1.rule = defaults => new Rule(defaults);
	postcss$1.root = defaults => new Root(defaults);
	postcss$1.document = defaults => new Document(defaults);

	postcss$1.CssSyntaxError = CssSyntaxError;
	postcss$1.Declaration = Declaration;
	postcss$1.Container = Container;
	postcss$1.Document = Document;
	postcss$1.Comment = Comment;
	postcss$1.Warning = Warning;
	postcss$1.AtRule = AtRule;
	postcss$1.Result = Result;
	postcss$1.Input = Input;
	postcss$1.Rule = Rule;
	postcss$1.Root = Root;
	postcss$1.Node = Node$1;

	LazyResult.registerPostcss(postcss$1);

	var postcss_1 = postcss$1;
	postcss$1.default = postcss$1;

	var dist = {exports: {}};

	var processor = {exports: {}};

	var parser$2 = {exports: {}};

	var root$2 = {exports: {}};

	var container = {exports: {}};

	var node$1 = {exports: {}};

	var util$1 = {};

	var unesc = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = unesc;

	// Many thanks for this post which made this migration much easier.
	// https://mathiasbynens.be/notes/css-escapes

	/**
	 * 
	 * @param {string} str 
	 * @returns {[string, number]|undefined}
	 */
	function gobbleHex(str) {
	  var lower = str.toLowerCase();
	  var hex = '';
	  var spaceTerminated = false;

	  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {
	    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]

	    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point

	    spaceTerminated = code === 32;

	    if (!valid) {
	      break;
	    }

	    hex += lower[i];
	  }

	  if (hex.length === 0) {
	    return undefined;
	  }

	  var codePoint = parseInt(hex, 16);
	  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for
	  // "If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point"
	  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point

	  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {
	    return ["\uFFFD", hex.length + (spaceTerminated ? 1 : 0)];
	  }

	  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];
	}

	var CONTAINS_ESCAPE = /\\/;

	function unesc(str) {
	  var needToProcess = CONTAINS_ESCAPE.test(str);

	  if (!needToProcess) {
	    return str;
	  }

	  var ret = "";

	  for (var i = 0; i < str.length; i++) {
	    if (str[i] === "\\") {
	      var gobbled = gobbleHex(str.slice(i + 1, i + 7));

	      if (gobbled !== undefined) {
	        ret += gobbled[0];
	        i += gobbled[1];
	        continue;
	      } // Retain a pair of \\ if double escaped `\\\\`
	      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e


	      if (str[i + 1] === "\\") {
	        ret += "\\";
	        i++;
	        continue;
	      } // if \\ is at the end of the string retain it
	      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb


	      if (str.length === i + 1) {
	        ret += str[i];
	      }

	      continue;
	    }

	    ret += str[i];
	  }

	  return ret;
	}

	module.exports = exports.default;
	}(unesc, unesc.exports));

	var getProp = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = getProp;

	function getProp(obj) {
	  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    props[_key - 1] = arguments[_key];
	  }

	  while (props.length > 0) {
	    var prop = props.shift();

	    if (!obj[prop]) {
	      return undefined;
	    }

	    obj = obj[prop];
	  }

	  return obj;
	}

	module.exports = exports.default;
	}(getProp, getProp.exports));

	var ensureObject = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = ensureObject;

	function ensureObject(obj) {
	  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    props[_key - 1] = arguments[_key];
	  }

	  while (props.length > 0) {
	    var prop = props.shift();

	    if (!obj[prop]) {
	      obj[prop] = {};
	    }

	    obj = obj[prop];
	  }
	}

	module.exports = exports.default;
	}(ensureObject, ensureObject.exports));

	var stripComments = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = stripComments;

	function stripComments(str) {
	  var s = "";
	  var commentStart = str.indexOf("/*");
	  var lastEnd = 0;

	  while (commentStart >= 0) {
	    s = s + str.slice(lastEnd, commentStart);
	    var commentEnd = str.indexOf("*/", commentStart + 2);

	    if (commentEnd < 0) {
	      return s;
	    }

	    lastEnd = commentEnd + 2;
	    commentStart = str.indexOf("/*", lastEnd);
	  }

	  s = s + str.slice(lastEnd);
	  return s;
	}

	module.exports = exports.default;
	}(stripComments, stripComments.exports));

	util$1.__esModule = true;
	util$1.stripComments = util$1.ensureObject = util$1.getProp = util$1.unesc = void 0;

	var _unesc = _interopRequireDefault$6(unesc.exports);

	util$1.unesc = _unesc["default"];

	var _getProp = _interopRequireDefault$6(getProp.exports);

	util$1.getProp = _getProp["default"];

	var _ensureObject = _interopRequireDefault$6(ensureObject.exports);

	util$1.ensureObject = _ensureObject["default"];

	var _stripComments = _interopRequireDefault$6(stripComments.exports);

	util$1.stripComments = _stripComments["default"];

	function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _util = util$1;

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	var cloneNode = function cloneNode(obj, parent) {
	  if (typeof obj !== 'object' || obj === null) {
	    return obj;
	  }

	  var cloned = new obj.constructor();

	  for (var i in obj) {
	    if (!obj.hasOwnProperty(i)) {
	      continue;
	    }

	    var value = obj[i];
	    var type = typeof value;

	    if (i === 'parent' && type === 'object') {
	      if (parent) {
	        cloned[i] = parent;
	      }
	    } else if (value instanceof Array) {
	      cloned[i] = value.map(function (j) {
	        return cloneNode(j, cloned);
	      });
	    } else {
	      cloned[i] = cloneNode(value, cloned);
	    }
	  }

	  return cloned;
	};

	var Node = /*#__PURE__*/function () {
	  function Node(opts) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    Object.assign(this, opts);
	    this.spaces = this.spaces || {};
	    this.spaces.before = this.spaces.before || '';
	    this.spaces.after = this.spaces.after || '';
	  }

	  var _proto = Node.prototype;

	  _proto.remove = function remove() {
	    if (this.parent) {
	      this.parent.removeChild(this);
	    }

	    this.parent = undefined;
	    return this;
	  };

	  _proto.replaceWith = function replaceWith() {
	    if (this.parent) {
	      for (var index in arguments) {
	        this.parent.insertBefore(this, arguments[index]);
	      }

	      this.remove();
	    }

	    return this;
	  };

	  _proto.next = function next() {
	    return this.parent.at(this.parent.index(this) + 1);
	  };

	  _proto.prev = function prev() {
	    return this.parent.at(this.parent.index(this) - 1);
	  };

	  _proto.clone = function clone(overrides) {
	    if (overrides === void 0) {
	      overrides = {};
	    }

	    var cloned = cloneNode(this);

	    for (var name in overrides) {
	      cloned[name] = overrides[name];
	    }

	    return cloned;
	  }
	  /**
	   * Some non-standard syntax doesn't follow normal escaping rules for css.
	   * This allows non standard syntax to be appended to an existing property
	   * by specifying the escaped value. By specifying the escaped value,
	   * illegal characters are allowed to be directly inserted into css output.
	   * @param {string} name the property to set
	   * @param {any} value the unescaped value of the property
	   * @param {string} valueEscaped optional. the escaped value of the property.
	   */
	  ;

	  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
	    if (!this.raws) {
	      this.raws = {};
	    }

	    var originalValue = this[name];
	    var originalEscaped = this.raws[name];
	    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.

	    if (originalEscaped || valueEscaped !== value) {
	      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
	    } else {
	      delete this.raws[name]; // delete any escaped value that was created by the setter.
	    }
	  }
	  /**
	   * Some non-standard syntax doesn't follow normal escaping rules for css.
	   * This allows the escaped value to be specified directly, allowing illegal
	   * characters to be directly inserted into css output.
	   * @param {string} name the property to set
	   * @param {any} value the unescaped value of the property
	   * @param {string} valueEscaped the escaped value of the property.
	   */
	  ;

	  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
	    if (!this.raws) {
	      this.raws = {};
	    }

	    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.

	    this.raws[name] = valueEscaped;
	  }
	  /**
	   * When you want a value to passed through to CSS directly. This method
	   * deletes the corresponding raw value causing the stringifier to fallback
	   * to the unescaped value.
	   * @param {string} name the property to set.
	   * @param {any} value The value that is both escaped and unescaped.
	   */
	  ;

	  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
	    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.

	    if (this.raws) {
	      delete this.raws[name];
	    }
	  }
	  /**
	   *
	   * @param {number} line The number (starting with 1)
	   * @param {number} column The column number (starting with 1)
	   */
	  ;

	  _proto.isAtPosition = function isAtPosition(line, column) {
	    if (this.source && this.source.start && this.source.end) {
	      if (this.source.start.line > line) {
	        return false;
	      }

	      if (this.source.end.line < line) {
	        return false;
	      }

	      if (this.source.start.line === line && this.source.start.column > column) {
	        return false;
	      }

	      if (this.source.end.line === line && this.source.end.column < column) {
	        return false;
	      }

	      return true;
	    }

	    return undefined;
	  };

	  _proto.stringifyProperty = function stringifyProperty(name) {
	    return this.raws && this.raws[name] || this[name];
	  };

	  _proto.valueToString = function valueToString() {
	    return String(this.stringifyProperty("value"));
	  };

	  _proto.toString = function toString() {
	    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');
	  };

	  _createClass(Node, [{
	    key: "rawSpaceBefore",
	    get: function get() {
	      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;

	      if (rawSpace === undefined) {
	        rawSpace = this.spaces && this.spaces.before;
	      }

	      return rawSpace || "";
	    },
	    set: function set(raw) {
	      (0, _util.ensureObject)(this, "raws", "spaces");
	      this.raws.spaces.before = raw;
	    }
	  }, {
	    key: "rawSpaceAfter",
	    get: function get() {
	      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;

	      if (rawSpace === undefined) {
	        rawSpace = this.spaces.after;
	      }

	      return rawSpace || "";
	    },
	    set: function set(raw) {
	      (0, _util.ensureObject)(this, "raws", "spaces");
	      this.raws.spaces.after = raw;
	    }
	  }]);

	  return Node;
	}();

	exports["default"] = Node;
	module.exports = exports.default;
	}(node$1, node$1.exports));

	var types$1 = {};

	types$1.__esModule = true;
	types$1.UNIVERSAL = types$1.ATTRIBUTE = types$1.CLASS = types$1.COMBINATOR = types$1.COMMENT = types$1.ID = types$1.NESTING = types$1.PSEUDO = types$1.ROOT = types$1.SELECTOR = types$1.STRING = types$1.TAG = void 0;
	var TAG = 'tag';
	types$1.TAG = TAG;
	var STRING = 'string';
	types$1.STRING = STRING;
	var SELECTOR = 'selector';
	types$1.SELECTOR = SELECTOR;
	var ROOT = 'root';
	types$1.ROOT = ROOT;
	var PSEUDO = 'pseudo';
	types$1.PSEUDO = PSEUDO;
	var NESTING = 'nesting';
	types$1.NESTING = NESTING;
	var ID = 'id';
	types$1.ID = ID;
	var COMMENT = 'comment';
	types$1.COMMENT = COMMENT;
	var COMBINATOR = 'combinator';
	types$1.COMBINATOR = COMBINATOR;
	var CLASS = 'class';
	types$1.CLASS = CLASS;
	var ATTRIBUTE = 'attribute';
	types$1.ATTRIBUTE = ATTRIBUTE;
	var UNIVERSAL = 'universal';
	types$1.UNIVERSAL = UNIVERSAL;

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var types = _interopRequireWildcard(types$1);

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Container = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(Container, _Node);

	  function Container(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;

	    if (!_this.nodes) {
	      _this.nodes = [];
	    }

	    return _this;
	  }

	  var _proto = Container.prototype;

	  _proto.append = function append(selector) {
	    selector.parent = this;
	    this.nodes.push(selector);
	    return this;
	  };

	  _proto.prepend = function prepend(selector) {
	    selector.parent = this;
	    this.nodes.unshift(selector);
	    return this;
	  };

	  _proto.at = function at(index) {
	    return this.nodes[index];
	  };

	  _proto.index = function index(child) {
	    if (typeof child === 'number') {
	      return child;
	    }

	    return this.nodes.indexOf(child);
	  };

	  _proto.removeChild = function removeChild(child) {
	    child = this.index(child);
	    this.at(child).parent = undefined;
	    this.nodes.splice(child, 1);
	    var index;

	    for (var id in this.indexes) {
	      index = this.indexes[id];

	      if (index >= child) {
	        this.indexes[id] = index - 1;
	      }
	    }

	    return this;
	  };

	  _proto.removeAll = function removeAll() {
	    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {
	      var node = _step.value;
	      node.parent = undefined;
	    }

	    this.nodes = [];
	    return this;
	  };

	  _proto.empty = function empty() {
	    return this.removeAll();
	  };

	  _proto.insertAfter = function insertAfter(oldNode, newNode) {
	    newNode.parent = this;
	    var oldIndex = this.index(oldNode);
	    this.nodes.splice(oldIndex + 1, 0, newNode);
	    newNode.parent = this;
	    var index;

	    for (var id in this.indexes) {
	      index = this.indexes[id];

	      if (oldIndex <= index) {
	        this.indexes[id] = index + 1;
	      }
	    }

	    return this;
	  };

	  _proto.insertBefore = function insertBefore(oldNode, newNode) {
	    newNode.parent = this;
	    var oldIndex = this.index(oldNode);
	    this.nodes.splice(oldIndex, 0, newNode);
	    newNode.parent = this;
	    var index;

	    for (var id in this.indexes) {
	      index = this.indexes[id];

	      if (index <= oldIndex) {
	        this.indexes[id] = index + 1;
	      }
	    }

	    return this;
	  };

	  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {
	    var found = undefined;
	    this.each(function (node) {
	      if (node.atPosition) {
	        var foundChild = node.atPosition(line, col);

	        if (foundChild) {
	          found = foundChild;
	          return false;
	        }
	      } else if (node.isAtPosition(line, col)) {
	        found = node;
	        return false;
	      }
	    });
	    return found;
	  }
	  /**
	   * Return the most specific node at the line and column number given.
	   * The source location is based on the original parsed location, locations aren't
	   * updated as selector nodes are mutated.
	   * 
	   * Note that this location is relative to the location of the first character
	   * of the selector, and not the location of the selector in the overall document
	   * when used in conjunction with postcss.
	   *
	   * If not found, returns undefined.
	   * @param {number} line The line number of the node to find. (1-based index)
	   * @param {number} col  The column number of the node to find. (1-based index)
	   */
	  ;

	  _proto.atPosition = function atPosition(line, col) {
	    if (this.isAtPosition(line, col)) {
	      return this._findChildAtPosition(line, col) || this;
	    } else {
	      return undefined;
	    }
	  };

	  _proto._inferEndPosition = function _inferEndPosition() {
	    if (this.last && this.last.source && this.last.source.end) {
	      this.source = this.source || {};
	      this.source.end = this.source.end || {};
	      Object.assign(this.source.end, this.last.source.end);
	    }
	  };

	  _proto.each = function each(callback) {
	    if (!this.lastEach) {
	      this.lastEach = 0;
	    }

	    if (!this.indexes) {
	      this.indexes = {};
	    }

	    this.lastEach++;
	    var id = this.lastEach;
	    this.indexes[id] = 0;

	    if (!this.length) {
	      return undefined;
	    }

	    var index, result;

	    while (this.indexes[id] < this.length) {
	      index = this.indexes[id];
	      result = callback(this.at(index), index);

	      if (result === false) {
	        break;
	      }

	      this.indexes[id] += 1;
	    }

	    delete this.indexes[id];

	    if (result === false) {
	      return false;
	    }
	  };

	  _proto.walk = function walk(callback) {
	    return this.each(function (node, i) {
	      var result = callback(node, i);

	      if (result !== false && node.length) {
	        result = node.walk(callback);
	      }

	      if (result === false) {
	        return false;
	      }
	    });
	  };

	  _proto.walkAttributes = function walkAttributes(callback) {
	    var _this2 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.ATTRIBUTE) {
	        return callback.call(_this2, selector);
	      }
	    });
	  };

	  _proto.walkClasses = function walkClasses(callback) {
	    var _this3 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.CLASS) {
	        return callback.call(_this3, selector);
	      }
	    });
	  };

	  _proto.walkCombinators = function walkCombinators(callback) {
	    var _this4 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.COMBINATOR) {
	        return callback.call(_this4, selector);
	      }
	    });
	  };

	  _proto.walkComments = function walkComments(callback) {
	    var _this5 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.COMMENT) {
	        return callback.call(_this5, selector);
	      }
	    });
	  };

	  _proto.walkIds = function walkIds(callback) {
	    var _this6 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.ID) {
	        return callback.call(_this6, selector);
	      }
	    });
	  };

	  _proto.walkNesting = function walkNesting(callback) {
	    var _this7 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.NESTING) {
	        return callback.call(_this7, selector);
	      }
	    });
	  };

	  _proto.walkPseudos = function walkPseudos(callback) {
	    var _this8 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.PSEUDO) {
	        return callback.call(_this8, selector);
	      }
	    });
	  };

	  _proto.walkTags = function walkTags(callback) {
	    var _this9 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.TAG) {
	        return callback.call(_this9, selector);
	      }
	    });
	  };

	  _proto.walkUniversals = function walkUniversals(callback) {
	    var _this10 = this;

	    return this.walk(function (selector) {
	      if (selector.type === types.UNIVERSAL) {
	        return callback.call(_this10, selector);
	      }
	    });
	  };

	  _proto.split = function split(callback) {
	    var _this11 = this;

	    var current = [];
	    return this.reduce(function (memo, node, index) {
	      var split = callback.call(_this11, node);
	      current.push(node);

	      if (split) {
	        memo.push(current);
	        current = [];
	      } else if (index === _this11.length - 1) {
	        memo.push(current);
	      }

	      return memo;
	    }, []);
	  };

	  _proto.map = function map(callback) {
	    return this.nodes.map(callback);
	  };

	  _proto.reduce = function reduce(callback, memo) {
	    return this.nodes.reduce(callback, memo);
	  };

	  _proto.every = function every(callback) {
	    return this.nodes.every(callback);
	  };

	  _proto.some = function some(callback) {
	    return this.nodes.some(callback);
	  };

	  _proto.filter = function filter(callback) {
	    return this.nodes.filter(callback);
	  };

	  _proto.sort = function sort(callback) {
	    return this.nodes.sort(callback);
	  };

	  _proto.toString = function toString() {
	    return this.map(String).join('');
	  };

	  _createClass(Container, [{
	    key: "first",
	    get: function get() {
	      return this.at(0);
	    }
	  }, {
	    key: "last",
	    get: function get() {
	      return this.at(this.length - 1);
	    }
	  }, {
	    key: "length",
	    get: function get() {
	      return this.nodes.length;
	    }
	  }]);

	  return Container;
	}(_node["default"]);

	exports["default"] = Container;
	module.exports = exports.default;
	}(container, container.exports));

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _container = _interopRequireDefault(container.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Root = /*#__PURE__*/function (_Container) {
	  _inheritsLoose(Root, _Container);

	  function Root(opts) {
	    var _this;

	    _this = _Container.call(this, opts) || this;
	    _this.type = _types.ROOT;
	    return _this;
	  }

	  var _proto = Root.prototype;

	  _proto.toString = function toString() {
	    var str = this.reduce(function (memo, selector) {
	      memo.push(String(selector));
	      return memo;
	    }, []).join(',');
	    return this.trailingComma ? str + ',' : str;
	  };

	  _proto.error = function error(message, options) {
	    if (this._error) {
	      return this._error(message, options);
	    } else {
	      return new Error(message);
	    }
	  };

	  _createClass(Root, [{
	    key: "errorGenerator",
	    set: function set(handler) {
	      this._error = handler;
	    }
	  }]);

	  return Root;
	}(_container["default"]);

	exports["default"] = Root;
	module.exports = exports.default;
	}(root$2, root$2.exports));

	var selector$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _container = _interopRequireDefault(container.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Selector = /*#__PURE__*/function (_Container) {
	  _inheritsLoose(Selector, _Container);

	  function Selector(opts) {
	    var _this;

	    _this = _Container.call(this, opts) || this;
	    _this.type = _types.SELECTOR;
	    return _this;
	  }

	  return Selector;
	}(_container["default"]);

	exports["default"] = Selector;
	module.exports = exports.default;
	}(selector$1, selector$1.exports));

	var className$1 = {exports: {}};

	/*! https://mths.be/cssesc v3.0.0 by @mathias */

	var object = {};
	var hasOwnProperty$1 = object.hasOwnProperty;
	var merge$2 = function merge(options, defaults) {
		if (!options) {
			return defaults;
		}
		var result = {};
		for (var key in defaults) {
			// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since
			// only recognized option names are used.
			result[key] = hasOwnProperty$1.call(options, key) ? options[key] : defaults[key];
		}
		return result;
	};

	var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
	var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
	var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;

	// https://mathiasbynens.be/notes/css-escapes#css
	var cssesc = function cssesc(string, options) {
		options = merge$2(options, cssesc.options);
		if (options.quotes != 'single' && options.quotes != 'double') {
			options.quotes = 'single';
		}
		var quote = options.quotes == 'double' ? '"' : '\'';
		var isIdentifier = options.isIdentifier;

		var firstChar = string.charAt(0);
		var output = '';
		var counter = 0;
		var length = string.length;
		while (counter < length) {
			var character = string.charAt(counter++);
			var codePoint = character.charCodeAt();
			var value = void 0;
			// If it’s not a printable ASCII character…
			if (codePoint < 0x20 || codePoint > 0x7E) {
				if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {
					// It’s a high surrogate, and there is a next character.
					var extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) {
						// next character is low surrogate
						codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
					} else {
						// It’s an unmatched surrogate; only append this code unit, in case
						// the next code unit is the high surrogate of a surrogate pair.
						counter--;
					}
				}
				value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
			} else {
				if (options.escapeEverything) {
					if (regexAnySingleEscape.test(character)) {
						value = '\\' + character;
					} else {
						value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
					}
				} else if (/[\t\n\f\r\x0B]/.test(character)) {
					value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
				} else if (character == '\\' || !isIdentifier && (character == '"' && quote == character || character == '\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
					value = '\\' + character;
				} else {
					value = character;
				}
			}
			output += value;
		}

		if (isIdentifier) {
			if (/^-[-\d]/.test(output)) {
				output = '\\-' + output.slice(1);
			} else if (/\d/.test(firstChar)) {
				output = '\\3' + firstChar + ' ' + output.slice(1);
			}
		}

		// Remove spaces after `\HEX` escapes that are not followed by a hex digit,
		// since they’re redundant. Note that this is only possible if the escape
		// sequence isn’t preceded by an odd number of backslashes.
		output = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {
			if ($1 && $1.length % 2) {
				// It’s not safe to remove the space, so don’t.
				return $0;
			}
			// Strip the space.
			return ($1 || '') + $2;
		});

		if (!isIdentifier && options.wrap) {
			return quote + output + quote;
		}
		return output;
	};

	// Expose default options (so they can be overridden globally).
	cssesc.options = {
		'escapeEverything': false,
		'isIdentifier': false,
		'quotes': 'single',
		'wrap': false
	};

	cssesc.version = '3.0.0';

	var cssesc_1 = cssesc;

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _cssesc = _interopRequireDefault(cssesc_1);

	var _util = util$1;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var ClassName = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(ClassName, _Node);

	  function ClassName(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.CLASS;
	    _this._constructed = true;
	    return _this;
	  }

	  var _proto = ClassName.prototype;

	  _proto.valueToString = function valueToString() {
	    return '.' + _Node.prototype.valueToString.call(this);
	  };

	  _createClass(ClassName, [{
	    key: "value",
	    get: function get() {
	      return this._value;
	    },
	    set: function set(v) {
	      if (this._constructed) {
	        var escaped = (0, _cssesc["default"])(v, {
	          isIdentifier: true
	        });

	        if (escaped !== v) {
	          (0, _util.ensureObject)(this, "raws");
	          this.raws.value = escaped;
	        } else if (this.raws) {
	          delete this.raws.value;
	        }
	      }

	      this._value = v;
	    }
	  }]);

	  return ClassName;
	}(_node["default"]);

	exports["default"] = ClassName;
	module.exports = exports.default;
	}(className$1, className$1.exports));

	var comment$2 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Comment = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(Comment, _Node);

	  function Comment(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.COMMENT;
	    return _this;
	  }

	  return Comment;
	}(_node["default"]);

	exports["default"] = Comment;
	module.exports = exports.default;
	}(comment$2, comment$2.exports));

	var id$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var ID = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(ID, _Node);

	  function ID(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.ID;
	    return _this;
	  }

	  var _proto = ID.prototype;

	  _proto.valueToString = function valueToString() {
	    return '#' + _Node.prototype.valueToString.call(this);
	  };

	  return ID;
	}(_node["default"]);

	exports["default"] = ID;
	module.exports = exports.default;
	}(id$1, id$1.exports));

	var tag$1 = {exports: {}};

	var namespace = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _cssesc = _interopRequireDefault(cssesc_1);

	var _util = util$1;

	var _node = _interopRequireDefault(node$1.exports);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Namespace = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(Namespace, _Node);

	  function Namespace() {
	    return _Node.apply(this, arguments) || this;
	  }

	  var _proto = Namespace.prototype;

	  _proto.qualifiedName = function qualifiedName(value) {
	    if (this.namespace) {
	      return this.namespaceString + "|" + value;
	    } else {
	      return value;
	    }
	  };

	  _proto.valueToString = function valueToString() {
	    return this.qualifiedName(_Node.prototype.valueToString.call(this));
	  };

	  _createClass(Namespace, [{
	    key: "namespace",
	    get: function get() {
	      return this._namespace;
	    },
	    set: function set(namespace) {
	      if (namespace === true || namespace === "*" || namespace === "&") {
	        this._namespace = namespace;

	        if (this.raws) {
	          delete this.raws.namespace;
	        }

	        return;
	      }

	      var escaped = (0, _cssesc["default"])(namespace, {
	        isIdentifier: true
	      });
	      this._namespace = namespace;

	      if (escaped !== namespace) {
	        (0, _util.ensureObject)(this, "raws");
	        this.raws.namespace = escaped;
	      } else if (this.raws) {
	        delete this.raws.namespace;
	      }
	    }
	  }, {
	    key: "ns",
	    get: function get() {
	      return this._namespace;
	    },
	    set: function set(namespace) {
	      this.namespace = namespace;
	    }
	  }, {
	    key: "namespaceString",
	    get: function get() {
	      if (this.namespace) {
	        var ns = this.stringifyProperty("namespace");

	        if (ns === true) {
	          return '';
	        } else {
	          return ns;
	        }
	      } else {
	        return '';
	      }
	    }
	  }]);

	  return Namespace;
	}(_node["default"]);

	exports["default"] = Namespace;
	module.exports = exports.default;
	}(namespace, namespace.exports));

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _namespace = _interopRequireDefault(namespace.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Tag = /*#__PURE__*/function (_Namespace) {
	  _inheritsLoose(Tag, _Namespace);

	  function Tag(opts) {
	    var _this;

	    _this = _Namespace.call(this, opts) || this;
	    _this.type = _types.TAG;
	    return _this;
	  }

	  return Tag;
	}(_namespace["default"]);

	exports["default"] = Tag;
	module.exports = exports.default;
	}(tag$1, tag$1.exports));

	var string$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var String = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(String, _Node);

	  function String(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.STRING;
	    return _this;
	  }

	  return String;
	}(_node["default"]);

	exports["default"] = String;
	module.exports = exports.default;
	}(string$1, string$1.exports));

	var pseudo$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _container = _interopRequireDefault(container.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Pseudo = /*#__PURE__*/function (_Container) {
	  _inheritsLoose(Pseudo, _Container);

	  function Pseudo(opts) {
	    var _this;

	    _this = _Container.call(this, opts) || this;
	    _this.type = _types.PSEUDO;
	    return _this;
	  }

	  var _proto = Pseudo.prototype;

	  _proto.toString = function toString() {
	    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';
	    return [this.rawSpaceBefore, this.stringifyProperty("value"), params, this.rawSpaceAfter].join('');
	  };

	  return Pseudo;
	}(_container["default"]);

	exports["default"] = Pseudo;
	module.exports = exports.default;
	}(pseudo$1, pseudo$1.exports));

	var attribute$1 = {};

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(util$k);

	/**
	 * For Node.js, simply re-export the core `util.deprecate` function.
	 */

	var node = require$$0$1.deprecate;

	(function (exports) {

	exports.__esModule = true;
	exports.unescapeValue = unescapeValue;
	exports["default"] = void 0;

	var _cssesc = _interopRequireDefault(cssesc_1);

	var _unesc = _interopRequireDefault(unesc.exports);

	var _namespace = _interopRequireDefault(namespace.exports);

	var _types = types$1;

	var _CSSESC_QUOTE_OPTIONS;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var deprecate = node;

	var WRAPPED_IN_QUOTES = /^('|")([^]*)\1$/;
	var warnOfDeprecatedValueAssignment = deprecate(function () {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. " + "Call attribute.setValue() instead.");
	var warnOfDeprecatedQuotedAssignment = deprecate(function () {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
	var warnOfDeprecatedConstructor = deprecate(function () {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");

	function unescapeValue(value) {
	  var deprecatedUsage = false;
	  var quoteMark = null;
	  var unescaped = value;
	  var m = unescaped.match(WRAPPED_IN_QUOTES);

	  if (m) {
	    quoteMark = m[1];
	    unescaped = m[2];
	  }

	  unescaped = (0, _unesc["default"])(unescaped);

	  if (unescaped !== value) {
	    deprecatedUsage = true;
	  }

	  return {
	    deprecatedUsage: deprecatedUsage,
	    unescaped: unescaped,
	    quoteMark: quoteMark
	  };
	}

	function handleDeprecatedContructorOpts(opts) {
	  if (opts.quoteMark !== undefined) {
	    return opts;
	  }

	  if (opts.value === undefined) {
	    return opts;
	  }

	  warnOfDeprecatedConstructor();

	  var _unescapeValue = unescapeValue(opts.value),
	      quoteMark = _unescapeValue.quoteMark,
	      unescaped = _unescapeValue.unescaped;

	  if (!opts.raws) {
	    opts.raws = {};
	  }

	  if (opts.raws.value === undefined) {
	    opts.raws.value = opts.value;
	  }

	  opts.value = unescaped;
	  opts.quoteMark = quoteMark;
	  return opts;
	}

	var Attribute = /*#__PURE__*/function (_Namespace) {
	  _inheritsLoose(Attribute, _Namespace);

	  function Attribute(opts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;
	    _this.type = _types.ATTRIBUTE;
	    _this.raws = _this.raws || {};
	    Object.defineProperty(_this.raws, 'unquoted', {
	      get: deprecate(function () {
	        return _this.value;
	      }, "attr.raws.unquoted is deprecated. Call attr.value instead."),
	      set: deprecate(function () {
	        return _this.value;
	      }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
	    });
	    _this._constructed = true;
	    return _this;
	  }
	  /**
	   * Returns the Attribute's value quoted such that it would be legal to use
	   * in the value of a css file. The original value's quotation setting
	   * used for stringification is left unchanged. See `setValue(value, options)`
	   * if you want to control the quote settings of a new value for the attribute.
	   *
	   * You can also change the quotation used for the current value by setting quoteMark.
	   *
	   * Options:
	   *   * quoteMark {'"' | "'" | null} - Use this value to quote the value. If this
	   *     option is not set, the original value for quoteMark will be used. If
	   *     indeterminate, a double quote is used. The legal values are:
	   *     * `null` - the value will be unquoted and characters will be escaped as necessary.
	   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.
	   *     * `"` - the value will be quoted with a double quote and double quotes are escaped.
	   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark
	   *     over the quoteMark option value.
	   *   * smart {boolean} - if true, will select a quote mark based on the value
	   *     and the other options specified here. See the `smartQuoteMark()`
	   *     method.
	   **/


	  var _proto = Attribute.prototype;

	  _proto.getQuotedValue = function getQuotedValue(options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var quoteMark = this._determineQuoteMark(options);

	    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];
	    var escaped = (0, _cssesc["default"])(this._value, cssescopts);
	    return escaped;
	  };

	  _proto._determineQuoteMark = function _determineQuoteMark(options) {
	    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
	  }
	  /**
	   * Set the unescaped value with the specified quotation options. The value
	   * provided must not include any wrapping quote marks -- those quotes will
	   * be interpreted as part of the value and escaped accordingly.
	   */
	  ;

	  _proto.setValue = function setValue(value, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    this._value = value;
	    this._quoteMark = this._determineQuoteMark(options);

	    this._syncRawValue();
	  }
	  /**
	   * Intelligently select a quoteMark value based on the value's contents. If
	   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote
	   * mark will be picked that minimizes the number of escapes.
	   *
	   * If there's no clear winner, the quote mark from these options is used,
	   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is
	   * true). If the quoteMark is unspecified, a double quote is used.
	   *
	   * @param options This takes the quoteMark and preferCurrentQuoteMark options
	   * from the quoteValue method.
	   */
	  ;

	  _proto.smartQuoteMark = function smartQuoteMark(options) {
	    var v = this.value;
	    var numSingleQuotes = v.replace(/[^']/g, '').length;
	    var numDoubleQuotes = v.replace(/[^"]/g, '').length;

	    if (numSingleQuotes + numDoubleQuotes === 0) {
	      var escaped = (0, _cssesc["default"])(v, {
	        isIdentifier: true
	      });

	      if (escaped === v) {
	        return Attribute.NO_QUOTE;
	      } else {
	        var pref = this.preferredQuoteMark(options);

	        if (pref === Attribute.NO_QUOTE) {
	          // pick a quote mark that isn't none and see if it's smaller
	          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;
	          var opts = CSSESC_QUOTE_OPTIONS[quote];
	          var quoteValue = (0, _cssesc["default"])(v, opts);

	          if (quoteValue.length < escaped.length) {
	            return quote;
	          }
	        }

	        return pref;
	      }
	    } else if (numDoubleQuotes === numSingleQuotes) {
	      return this.preferredQuoteMark(options);
	    } else if (numDoubleQuotes < numSingleQuotes) {
	      return Attribute.DOUBLE_QUOTE;
	    } else {
	      return Attribute.SINGLE_QUOTE;
	    }
	  }
	  /**
	   * Selects the preferred quote mark based on the options and the current quote mark value.
	   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`
	   * instead.
	   */
	  ;

	  _proto.preferredQuoteMark = function preferredQuoteMark(options) {
	    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;

	    if (quoteMark === undefined) {
	      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
	    }

	    if (quoteMark === undefined) {
	      quoteMark = Attribute.DOUBLE_QUOTE;
	    }

	    return quoteMark;
	  };

	  _proto._syncRawValue = function _syncRawValue() {
	    var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);

	    if (rawValue === this._value) {
	      if (this.raws) {
	        delete this.raws.value;
	      }
	    } else {
	      this.raws.value = rawValue;
	    }
	  };

	  _proto._handleEscapes = function _handleEscapes(prop, value) {
	    if (this._constructed) {
	      var escaped = (0, _cssesc["default"])(value, {
	        isIdentifier: true
	      });

	      if (escaped !== value) {
	        this.raws[prop] = escaped;
	      } else {
	        delete this.raws[prop];
	      }
	    }
	  };

	  _proto._spacesFor = function _spacesFor(name) {
	    var attrSpaces = {
	      before: '',
	      after: ''
	    };
	    var spaces = this.spaces[name] || {};
	    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
	    return Object.assign(attrSpaces, spaces, rawSpaces);
	  };

	  _proto._stringFor = function _stringFor(name, spaceName, concat) {
	    if (spaceName === void 0) {
	      spaceName = name;
	    }

	    if (concat === void 0) {
	      concat = defaultAttrConcat;
	    }

	    var attrSpaces = this._spacesFor(spaceName);

	    return concat(this.stringifyProperty(name), attrSpaces);
	  }
	  /**
	   * returns the offset of the attribute part specified relative to the
	   * start of the node of the output string.
	   *
	   * * "ns" - alias for "namespace"
	   * * "namespace" - the namespace if it exists.
	   * * "attribute" - the attribute name
	   * * "attributeNS" - the start of the attribute or its namespace
	   * * "operator" - the match operator of the attribute
	   * * "value" - The value (string or identifier)
	   * * "insensitive" - the case insensitivity flag;
	   * @param part One of the possible values inside an attribute.
	   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.
	   */
	  ;

	  _proto.offsetOf = function offsetOf(name) {
	    var count = 1;

	    var attributeSpaces = this._spacesFor("attribute");

	    count += attributeSpaces.before.length;

	    if (name === "namespace" || name === "ns") {
	      return this.namespace ? count : -1;
	    }

	    if (name === "attributeNS") {
	      return count;
	    }

	    count += this.namespaceString.length;

	    if (this.namespace) {
	      count += 1;
	    }

	    if (name === "attribute") {
	      return count;
	    }

	    count += this.stringifyProperty("attribute").length;
	    count += attributeSpaces.after.length;

	    var operatorSpaces = this._spacesFor("operator");

	    count += operatorSpaces.before.length;
	    var operator = this.stringifyProperty("operator");

	    if (name === "operator") {
	      return operator ? count : -1;
	    }

	    count += operator.length;
	    count += operatorSpaces.after.length;

	    var valueSpaces = this._spacesFor("value");

	    count += valueSpaces.before.length;
	    var value = this.stringifyProperty("value");

	    if (name === "value") {
	      return value ? count : -1;
	    }

	    count += value.length;
	    count += valueSpaces.after.length;

	    var insensitiveSpaces = this._spacesFor("insensitive");

	    count += insensitiveSpaces.before.length;

	    if (name === "insensitive") {
	      return this.insensitive ? count : -1;
	    }

	    return -1;
	  };

	  _proto.toString = function toString() {
	    var _this2 = this;

	    var selector = [this.rawSpaceBefore, '['];
	    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));

	    if (this.operator && (this.value || this.value === '')) {
	      selector.push(this._stringFor('operator'));
	      selector.push(this._stringFor('value'));
	      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {
	        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {
	          attrSpaces.before = " ";
	        }

	        return defaultAttrConcat(attrValue, attrSpaces);
	      }));
	    }

	    selector.push(']');
	    selector.push(this.rawSpaceAfter);
	    return selector.join('');
	  };

	  _createClass(Attribute, [{
	    key: "quoted",
	    get: function get() {
	      var qm = this.quoteMark;
	      return qm === "'" || qm === '"';
	    },
	    set: function set(value) {
	      warnOfDeprecatedQuotedAssignment();
	    }
	    /**
	     * returns a single (`'`) or double (`"`) quote character if the value is quoted.
	     * returns `null` if the value is not quoted.
	     * returns `undefined` if the quotation state is unknown (this can happen when
	     * the attribute is constructed without specifying a quote mark.)
	     */

	  }, {
	    key: "quoteMark",
	    get: function get() {
	      return this._quoteMark;
	    }
	    /**
	     * Set the quote mark to be used by this attribute's value.
	     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute
	     * value is updated accordingly.
	     *
	     * @param {"'" | '"' | null} quoteMark The quote mark or `null` if the value should be unquoted.
	     */
	    ,
	    set: function set(quoteMark) {
	      if (!this._constructed) {
	        this._quoteMark = quoteMark;
	        return;
	      }

	      if (this._quoteMark !== quoteMark) {
	        this._quoteMark = quoteMark;

	        this._syncRawValue();
	      }
	    }
	  }, {
	    key: "qualifiedAttribute",
	    get: function get() {
	      return this.qualifiedName(this.raws.attribute || this.attribute);
	    }
	  }, {
	    key: "insensitiveFlag",
	    get: function get() {
	      return this.insensitive ? 'i' : '';
	    }
	  }, {
	    key: "value",
	    get: function get() {
	      return this._value;
	    }
	    /**
	     * Before 3.0, the value had to be set to an escaped value including any wrapped
	     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value
	     * is unescaped during parsing and any quote marks are removed.
	     *
	     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,
	     * a deprecation warning is raised when the new value contains any characters that would
	     * require escaping (including if it contains wrapped quotes).
	     *
	     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe
	     * how the new value is quoted.
	     */
	    ,
	    set: function set(v) {
	      if (this._constructed) {
	        var _unescapeValue2 = unescapeValue(v),
	            deprecatedUsage = _unescapeValue2.deprecatedUsage,
	            unescaped = _unescapeValue2.unescaped,
	            quoteMark = _unescapeValue2.quoteMark;

	        if (deprecatedUsage) {
	          warnOfDeprecatedValueAssignment();
	        }

	        if (unescaped === this._value && quoteMark === this._quoteMark) {
	          return;
	        }

	        this._value = unescaped;
	        this._quoteMark = quoteMark;

	        this._syncRawValue();
	      } else {
	        this._value = v;
	      }
	    }
	  }, {
	    key: "attribute",
	    get: function get() {
	      return this._attribute;
	    },
	    set: function set(name) {
	      this._handleEscapes("attribute", name);

	      this._attribute = name;
	    }
	  }]);

	  return Attribute;
	}(_namespace["default"]);

	exports["default"] = Attribute;
	Attribute.NO_QUOTE = null;
	Attribute.SINGLE_QUOTE = "'";
	Attribute.DOUBLE_QUOTE = '"';
	var CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {
	  "'": {
	    quotes: 'single',
	    wrap: true
	  },
	  '"': {
	    quotes: 'double',
	    wrap: true
	  }
	}, _CSSESC_QUOTE_OPTIONS[null] = {
	  isIdentifier: true
	}, _CSSESC_QUOTE_OPTIONS);

	function defaultAttrConcat(attrValue, attrSpaces) {
	  return "" + attrSpaces.before + attrValue + attrSpaces.after;
	}
	}(attribute$1));

	var universal$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _namespace = _interopRequireDefault(namespace.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Universal = /*#__PURE__*/function (_Namespace) {
	  _inheritsLoose(Universal, _Namespace);

	  function Universal(opts) {
	    var _this;

	    _this = _Namespace.call(this, opts) || this;
	    _this.type = _types.UNIVERSAL;
	    _this.value = '*';
	    return _this;
	  }

	  return Universal;
	}(_namespace["default"]);

	exports["default"] = Universal;
	module.exports = exports.default;
	}(universal$1, universal$1.exports));

	var combinator$2 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Combinator = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(Combinator, _Node);

	  function Combinator(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.COMBINATOR;
	    return _this;
	  }

	  return Combinator;
	}(_node["default"]);

	exports["default"] = Combinator;
	module.exports = exports.default;
	}(combinator$2, combinator$2.exports));

	var nesting$1 = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _node = _interopRequireDefault(node$1.exports);

	var _types = types$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	var Nesting = /*#__PURE__*/function (_Node) {
	  _inheritsLoose(Nesting, _Node);

	  function Nesting(opts) {
	    var _this;

	    _this = _Node.call(this, opts) || this;
	    _this.type = _types.NESTING;
	    _this.value = '&';
	    return _this;
	  }

	  return Nesting;
	}(_node["default"]);

	exports["default"] = Nesting;
	module.exports = exports.default;
	}(nesting$1, nesting$1.exports));

	var sortAscending = {exports: {}};

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = sortAscending;

	function sortAscending(list) {
	  return list.sort(function (a, b) {
	    return a - b;
	  });
	}
	module.exports = exports.default;
	}(sortAscending, sortAscending.exports));

	var tokenize = {};

	var tokenTypes = {};

	tokenTypes.__esModule = true;
	tokenTypes.combinator = tokenTypes.word = tokenTypes.comment = tokenTypes.str = tokenTypes.tab = tokenTypes.newline = tokenTypes.feed = tokenTypes.cr = tokenTypes.backslash = tokenTypes.bang = tokenTypes.slash = tokenTypes.doubleQuote = tokenTypes.singleQuote = tokenTypes.space = tokenTypes.greaterThan = tokenTypes.pipe = tokenTypes.equals = tokenTypes.plus = tokenTypes.caret = tokenTypes.tilde = tokenTypes.dollar = tokenTypes.closeSquare = tokenTypes.openSquare = tokenTypes.closeParenthesis = tokenTypes.openParenthesis = tokenTypes.semicolon = tokenTypes.colon = tokenTypes.comma = tokenTypes.at = tokenTypes.asterisk = tokenTypes.ampersand = void 0;
	var ampersand = 38; // `&`.charCodeAt(0);

	tokenTypes.ampersand = ampersand;
	var asterisk = 42; // `*`.charCodeAt(0);

	tokenTypes.asterisk = asterisk;
	var at = 64; // `@`.charCodeAt(0);

	tokenTypes.at = at;
	var comma$1 = 44; // `,`.charCodeAt(0);

	tokenTypes.comma = comma$1;
	var colon$1 = 58; // `:`.charCodeAt(0);

	tokenTypes.colon = colon$1;
	var semicolon = 59; // `;`.charCodeAt(0);

	tokenTypes.semicolon = semicolon;
	var openParenthesis = 40; // `(`.charCodeAt(0);

	tokenTypes.openParenthesis = openParenthesis;
	var closeParenthesis = 41; // `)`.charCodeAt(0);

	tokenTypes.closeParenthesis = closeParenthesis;
	var openSquare = 91; // `[`.charCodeAt(0);

	tokenTypes.openSquare = openSquare;
	var closeSquare = 93; // `]`.charCodeAt(0);

	tokenTypes.closeSquare = closeSquare;
	var dollar = 36; // `$`.charCodeAt(0);

	tokenTypes.dollar = dollar;
	var tilde = 126; // `~`.charCodeAt(0);

	tokenTypes.tilde = tilde;
	var caret = 94; // `^`.charCodeAt(0);

	tokenTypes.caret = caret;
	var plus$2 = 43; // `+`.charCodeAt(0);

	tokenTypes.plus = plus$2;
	var equals = 61; // `=`.charCodeAt(0);

	tokenTypes.equals = equals;
	var pipe = 124; // `|`.charCodeAt(0);

	tokenTypes.pipe = pipe;
	var greaterThan = 62; // `>`.charCodeAt(0);

	tokenTypes.greaterThan = greaterThan;
	var space = 32; // ` `.charCodeAt(0);

	tokenTypes.space = space;
	var singleQuote$1 = 39; // `'`.charCodeAt(0);

	tokenTypes.singleQuote = singleQuote$1;
	var doubleQuote$1 = 34; // `"`.charCodeAt(0);

	tokenTypes.doubleQuote = doubleQuote$1;
	var slash$1 = 47; // `/`.charCodeAt(0);

	tokenTypes.slash = slash$1;
	var bang = 33; // `!`.charCodeAt(0);

	tokenTypes.bang = bang;
	var backslash$1 = 92; // '\\'.charCodeAt(0);

	tokenTypes.backslash = backslash$1;
	var cr = 13; // '\r'.charCodeAt(0);

	tokenTypes.cr = cr;
	var feed = 12; // '\f'.charCodeAt(0);

	tokenTypes.feed = feed;
	var newline = 10; // '\n'.charCodeAt(0);

	tokenTypes.newline = newline;
	var tab = 9; // '\t'.charCodeAt(0);
	// Expose aliases primarily for readability.

	tokenTypes.tab = tab;
	var str = singleQuote$1; // No good single character representation!

	tokenTypes.str = str;
	var comment$1 = -1;
	tokenTypes.comment = comment$1;
	var word = -2;
	tokenTypes.word = word;
	var combinator$1 = -3;
	tokenTypes.combinator = combinator$1;

	(function (exports) {

	exports.__esModule = true;
	exports["default"] = tokenize;
	exports.FIELDS = void 0;

	var t = _interopRequireWildcard(tokenTypes);

	var _unescapable, _wordDelimiters;

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	var unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);
	var wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);
	var hex = {};
	var hexChars = "0123456789abcdefABCDEF";

	for (var i = 0; i < hexChars.length; i++) {
	  hex[hexChars.charCodeAt(i)] = true;
	}
	/**
	 *  Returns the last index of the bar css word
	 * @param {string} css The string in which the word begins
	 * @param {number} start The index into the string where word's first letter occurs
	 */


	function consumeWord(css, start) {
	  var next = start;
	  var code;

	  do {
	    code = css.charCodeAt(next);

	    if (wordDelimiters[code]) {
	      return next - 1;
	    } else if (code === t.backslash) {
	      next = consumeEscape(css, next) + 1;
	    } else {
	      // All other characters are part of the word
	      next++;
	    }
	  } while (next < css.length);

	  return next - 1;
	}
	/**
	 *  Returns the last index of the escape sequence
	 * @param {string} css The string in which the sequence begins
	 * @param {number} start The index into the string where escape character (`\`) occurs.
	 */


	function consumeEscape(css, start) {
	  var next = start;
	  var code = css.charCodeAt(next + 1);

	  if (unescapable[code]) ; else if (hex[code]) {
	    var hexDigits = 0; // consume up to 6 hex chars

	    do {
	      next++;
	      hexDigits++;
	      code = css.charCodeAt(next + 1);
	    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape


	    if (hexDigits < 6 && code === t.space) {
	      next++;
	    }
	  } else {
	    // the next char is part of the current word
	    next++;
	  }

	  return next;
	}

	var FIELDS = {
	  TYPE: 0,
	  START_LINE: 1,
	  START_COL: 2,
	  END_LINE: 3,
	  END_COL: 4,
	  START_POS: 5,
	  END_POS: 6
	};
	exports.FIELDS = FIELDS;

	function tokenize(input) {
	  var tokens = [];
	  var css = input.css.valueOf();
	  var _css = css,
	      length = _css.length;
	  var offset = -1;
	  var line = 1;
	  var start = 0;
	  var end = 0;
	  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;

	  function unclosed(what, fix) {
	    if (input.safe) {
	      // fyi: this is never set to true.
	      css += fix;
	      next = css.length - 1;
	    } else {
	      throw input.error('Unclosed ' + what, line, start - offset, start);
	    }
	  }

	  while (start < length) {
	    code = css.charCodeAt(start);

	    if (code === t.newline) {
	      offset = start;
	      line += 1;
	    }

	    switch (code) {
	      case t.space:
	      case t.tab:
	      case t.newline:
	      case t.cr:
	      case t.feed:
	        next = start;

	        do {
	          next += 1;
	          code = css.charCodeAt(next);

	          if (code === t.newline) {
	            offset = next;
	            line += 1;
	          }
	        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);

	        tokenType = t.space;
	        endLine = line;
	        endColumn = next - offset - 1;
	        end = next;
	        break;

	      case t.plus:
	      case t.greaterThan:
	      case t.tilde:
	      case t.pipe:
	        next = start;

	        do {
	          next += 1;
	          code = css.charCodeAt(next);
	        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);

	        tokenType = t.combinator;
	        endLine = line;
	        endColumn = start - offset;
	        end = next;
	        break;
	      // Consume these characters as single tokens.

	      case t.asterisk:
	      case t.ampersand:
	      case t.bang:
	      case t.comma:
	      case t.equals:
	      case t.dollar:
	      case t.caret:
	      case t.openSquare:
	      case t.closeSquare:
	      case t.colon:
	      case t.semicolon:
	      case t.openParenthesis:
	      case t.closeParenthesis:
	        next = start;
	        tokenType = code;
	        endLine = line;
	        endColumn = start - offset;
	        end = next + 1;
	        break;

	      case t.singleQuote:
	      case t.doubleQuote:
	        quote = code === t.singleQuote ? "'" : '"';
	        next = start;

	        do {
	          escaped = false;
	          next = css.indexOf(quote, next + 1);

	          if (next === -1) {
	            unclosed('quote', quote);
	          }

	          escapePos = next;

	          while (css.charCodeAt(escapePos - 1) === t.backslash) {
	            escapePos -= 1;
	            escaped = !escaped;
	          }
	        } while (escaped);

	        tokenType = t.str;
	        endLine = line;
	        endColumn = start - offset;
	        end = next + 1;
	        break;

	      default:
	        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {
	          next = css.indexOf('*/', start + 2) + 1;

	          if (next === 0) {
	            unclosed('comment', '*/');
	          }

	          content = css.slice(start, next + 1);
	          lines = content.split('\n');
	          last = lines.length - 1;

	          if (last > 0) {
	            nextLine = line + last;
	            nextOffset = next - lines[last].length;
	          } else {
	            nextLine = line;
	            nextOffset = offset;
	          }

	          tokenType = t.comment;
	          line = nextLine;
	          endLine = nextLine;
	          endColumn = next - nextOffset;
	        } else if (code === t.slash) {
	          next = start;
	          tokenType = code;
	          endLine = line;
	          endColumn = start - offset;
	          end = next + 1;
	        } else {
	          next = consumeWord(css, start);
	          tokenType = t.word;
	          endLine = line;
	          endColumn = next - offset;
	        }

	        end = next + 1;
	        break;
	    } // Ensure that the token structure remains consistent


	    tokens.push([tokenType, // [0] Token type
	    line, // [1] Starting line
	    start - offset, // [2] Starting column
	    endLine, // [3] Ending line
	    endColumn, // [4] Ending column
	    start, // [5] Start position / Source index
	    end // [6] End position
	    ]); // Reset offset for the next token

	    if (nextOffset) {
	      offset = nextOffset;
	      nextOffset = null;
	    }

	    start = end;
	  }

	  return tokens;
	}
	}(tokenize));

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _root = _interopRequireDefault(root$2.exports);

	var _selector = _interopRequireDefault(selector$1.exports);

	var _className = _interopRequireDefault(className$1.exports);

	var _comment = _interopRequireDefault(comment$2.exports);

	var _id = _interopRequireDefault(id$1.exports);

	var _tag = _interopRequireDefault(tag$1.exports);

	var _string = _interopRequireDefault(string$1.exports);

	var _pseudo = _interopRequireDefault(pseudo$1.exports);

	var _attribute = _interopRequireWildcard(attribute$1);

	var _universal = _interopRequireDefault(universal$1.exports);

	var _combinator = _interopRequireDefault(combinator$2.exports);

	var _nesting = _interopRequireDefault(nesting$1.exports);

	var _sortAscending = _interopRequireDefault(sortAscending.exports);

	var _tokenize = _interopRequireWildcard(tokenize);

	var tokens = _interopRequireWildcard(tokenTypes);

	var types = _interopRequireWildcard(types$1);

	var _util = util$1;

	var _WHITESPACE_TOKENS, _Object$assign;

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	var WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);
	var WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));

	function tokenStart(token) {
	  return {
	    line: token[_tokenize.FIELDS.START_LINE],
	    column: token[_tokenize.FIELDS.START_COL]
	  };
	}

	function tokenEnd(token) {
	  return {
	    line: token[_tokenize.FIELDS.END_LINE],
	    column: token[_tokenize.FIELDS.END_COL]
	  };
	}

	function getSource(startLine, startColumn, endLine, endColumn) {
	  return {
	    start: {
	      line: startLine,
	      column: startColumn
	    },
	    end: {
	      line: endLine,
	      column: endColumn
	    }
	  };
	}

	function getTokenSource(token) {
	  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);
	}

	function getTokenSourceSpan(startToken, endToken) {
	  if (!startToken) {
	    return undefined;
	  }

	  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);
	}

	function unescapeProp(node, prop) {
	  var value = node[prop];

	  if (typeof value !== "string") {
	    return;
	  }

	  if (value.indexOf("\\") !== -1) {
	    (0, _util.ensureObject)(node, 'raws');
	    node[prop] = (0, _util.unesc)(value);

	    if (node.raws[prop] === undefined) {
	      node.raws[prop] = value;
	    }
	  }

	  return node;
	}

	function indexesOf(array, item) {
	  var i = -1;
	  var indexes = [];

	  while ((i = array.indexOf(item, i + 1)) !== -1) {
	    indexes.push(i);
	  }

	  return indexes;
	}

	function uniqs() {
	  var list = Array.prototype.concat.apply([], arguments);
	  return list.filter(function (item, i) {
	    return i === list.indexOf(item);
	  });
	}

	var Parser = /*#__PURE__*/function () {
	  function Parser(rule, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    this.rule = rule;
	    this.options = Object.assign({
	      lossy: false,
	      safe: false
	    }, options);
	    this.position = 0;
	    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;
	    this.tokens = (0, _tokenize["default"])({
	      css: this.css,
	      error: this._errorGenerator(),
	      safe: this.options.safe
	    });
	    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);
	    this.root = new _root["default"]({
	      source: rootSource
	    });
	    this.root.errorGenerator = this._errorGenerator();
	    var selector = new _selector["default"]({
	      source: {
	        start: {
	          line: 1,
	          column: 1
	        }
	      }
	    });
	    this.root.append(selector);
	    this.current = selector;
	    this.loop();
	  }

	  var _proto = Parser.prototype;

	  _proto._errorGenerator = function _errorGenerator() {
	    var _this = this;

	    return function (message, errorOptions) {
	      if (typeof _this.rule === 'string') {
	        return new Error(message);
	      }

	      return _this.rule.error(message, errorOptions);
	    };
	  };

	  _proto.attribute = function attribute() {
	    var attr = [];
	    var startingToken = this.currToken;
	    this.position++;

	    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
	      attr.push(this.currToken);
	      this.position++;
	    }

	    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
	      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);
	    }

	    var len = attr.length;
	    var node = {
	      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
	      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
	    };

	    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {
	      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);
	    }

	    var pos = 0;
	    var spaceBefore = '';
	    var commentBefore = '';
	    var lastAdded = null;
	    var spaceAfterMeaningfulToken = false;

	    while (pos < len) {
	      var token = attr[pos];
	      var content = this.content(token);
	      var next = attr[pos + 1];

	      switch (token[_tokenize.FIELDS.TYPE]) {
	        case tokens.space:
	          // if (
	          //     len === 1 ||
	          //     pos === 0 && this.content(next) === '|'
	          // ) {
	          //     return this.expected('attribute', token[TOKEN.START_POS], content);
	          // }
	          spaceAfterMeaningfulToken = true;

	          if (this.options.lossy) {
	            break;
	          }

	          if (lastAdded) {
	            (0, _util.ensureObject)(node, 'spaces', lastAdded);
	            var prevContent = node.spaces[lastAdded].after || '';
	            node.spaces[lastAdded].after = prevContent + content;
	            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;

	            if (existingComment) {
	              node.raws.spaces[lastAdded].after = existingComment + content;
	            }
	          } else {
	            spaceBefore = spaceBefore + content;
	            commentBefore = commentBefore + content;
	          }

	          break;

	        case tokens.asterisk:
	          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
	            node.operator = content;
	            lastAdded = 'operator';
	          } else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
	            if (spaceBefore) {
	              (0, _util.ensureObject)(node, 'spaces', 'attribute');
	              node.spaces.attribute.before = spaceBefore;
	              spaceBefore = '';
	            }

	            if (commentBefore) {
	              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');
	              node.raws.spaces.attribute.before = spaceBefore;
	              commentBefore = '';
	            }

	            node.namespace = (node.namespace || "") + content;
	            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;

	            if (rawValue) {
	              node.raws.namespace += content;
	            }

	            lastAdded = 'namespace';
	          }

	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.dollar:
	          if (lastAdded === "value") {
	            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');
	            node.value += "$";

	            if (oldRawValue) {
	              node.raws.value = oldRawValue + "$";
	            }

	            break;
	          }

	        // Falls through

	        case tokens.caret:
	          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
	            node.operator = content;
	            lastAdded = 'operator';
	          }

	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.combinator:
	          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {
	            node.operator = content;
	            lastAdded = 'operator';
	          }

	          if (content !== '|') {
	            spaceAfterMeaningfulToken = false;
	            break;
	          }

	          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
	            node.operator = content;
	            lastAdded = 'operator';
	          } else if (!node.namespace && !node.attribute) {
	            node.namespace = true;
	          }

	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.word:
	          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.
	          !node.operator && !node.namespace) {
	            node.namespace = content;
	            lastAdded = 'namespace';
	          } else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
	            if (spaceBefore) {
	              (0, _util.ensureObject)(node, 'spaces', 'attribute');
	              node.spaces.attribute.before = spaceBefore;
	              spaceBefore = '';
	            }

	            if (commentBefore) {
	              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');
	              node.raws.spaces.attribute.before = commentBefore;
	              commentBefore = '';
	            }

	            node.attribute = (node.attribute || "") + content;

	            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;

	            if (_rawValue) {
	              node.raws.attribute += content;
	            }

	            lastAdded = 'attribute';
	          } else if (!node.value && node.value !== "" || lastAdded === "value" && !spaceAfterMeaningfulToken) {
	            var _unescaped = (0, _util.unesc)(content);

	            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';

	            var oldValue = node.value || '';
	            node.value = oldValue + _unescaped;
	            node.quoteMark = null;

	            if (_unescaped !== content || _oldRawValue) {
	              (0, _util.ensureObject)(node, 'raws');
	              node.raws.value = (_oldRawValue || oldValue) + content;
	            }

	            lastAdded = 'value';
	          } else {
	            var insensitive = content === 'i' || content === "I";

	            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {
	              node.insensitive = insensitive;

	              if (!insensitive || content === "I") {
	                (0, _util.ensureObject)(node, 'raws');
	                node.raws.insensitiveFlag = content;
	              }

	              lastAdded = 'insensitive';

	              if (spaceBefore) {
	                (0, _util.ensureObject)(node, 'spaces', 'insensitive');
	                node.spaces.insensitive.before = spaceBefore;
	                spaceBefore = '';
	              }

	              if (commentBefore) {
	                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');
	                node.raws.spaces.insensitive.before = commentBefore;
	                commentBefore = '';
	              }
	            } else if (node.value || node.value === '') {
	              lastAdded = 'value';
	              node.value += content;

	              if (node.raws.value) {
	                node.raws.value += content;
	              }
	            }
	          }

	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.str:
	          if (!node.attribute || !node.operator) {
	            return this.error("Expected an attribute followed by an operator preceding the string.", {
	              index: token[_tokenize.FIELDS.START_POS]
	            });
	          }

	          var _unescapeValue = (0, _attribute.unescapeValue)(content),
	              unescaped = _unescapeValue.unescaped,
	              quoteMark = _unescapeValue.quoteMark;

	          node.value = unescaped;
	          node.quoteMark = quoteMark;
	          lastAdded = 'value';
	          (0, _util.ensureObject)(node, 'raws');
	          node.raws.value = content;
	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.equals:
	          if (!node.attribute) {
	            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);
	          }

	          if (node.value) {
	            return this.error('Unexpected "=" found; an operator was already defined.', {
	              index: token[_tokenize.FIELDS.START_POS]
	            });
	          }

	          node.operator = node.operator ? node.operator + content : content;
	          lastAdded = 'operator';
	          spaceAfterMeaningfulToken = false;
	          break;

	        case tokens.comment:
	          if (lastAdded) {
	            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {
	              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';
	              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;
	              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);
	              node.raws.spaces[lastAdded].after = rawLastComment + content;
	            } else {
	              var lastValue = node[lastAdded] || '';
	              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;
	              (0, _util.ensureObject)(node, 'raws');
	              node.raws[lastAdded] = rawLastValue + content;
	            }
	          } else {
	            commentBefore = commentBefore + content;
	          }

	          break;

	        default:
	          return this.error("Unexpected \"" + content + "\" found.", {
	            index: token[_tokenize.FIELDS.START_POS]
	          });
	      }

	      pos++;
	    }

	    unescapeProp(node, "attribute");
	    unescapeProp(node, "namespace");
	    this.newNode(new _attribute["default"](node));
	    this.position++;
	  }
	  /**
	   * return a node containing meaningless garbage up to (but not including) the specified token position.
	   * if the token position is negative, all remaining tokens are consumed.
	   *
	   * This returns an array containing a single string node if all whitespace,
	   * otherwise an array of comment nodes with space before and after.
	   *
	   * These tokens are not added to the current selector, the caller can add them or use them to amend
	   * a previous node's space metadata.
	   *
	   * In lossy mode, this returns only comments.
	   */
	  ;

	  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
	    if (stopPosition < 0) {
	      stopPosition = this.tokens.length;
	    }

	    var startPosition = this.position;
	    var nodes = [];
	    var space = "";
	    var lastComment = undefined;

	    do {
	      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {
	        if (!this.options.lossy) {
	          space += this.content();
	        }
	      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {
	        var spaces = {};

	        if (space) {
	          spaces.before = space;
	          space = "";
	        }

	        lastComment = new _comment["default"]({
	          value: this.content(),
	          source: getTokenSource(this.currToken),
	          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
	          spaces: spaces
	        });
	        nodes.push(lastComment);
	      }
	    } while (++this.position < stopPosition);

	    if (space) {
	      if (lastComment) {
	        lastComment.spaces.after = space;
	      } else if (!this.options.lossy) {
	        var firstToken = this.tokens[startPosition];
	        var lastToken = this.tokens[this.position - 1];
	        nodes.push(new _string["default"]({
	          value: '',
	          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),
	          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
	          spaces: {
	            before: space,
	            after: ''
	          }
	        }));
	      }
	    }

	    return nodes;
	  }
	  /**
	   * 
	   * @param {*} nodes 
	   */
	  ;

	  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {
	    var _this2 = this;

	    if (requiredSpace === void 0) {
	      requiredSpace = false;
	    }

	    var space = "";
	    var rawSpace = "";
	    nodes.forEach(function (n) {
	      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);

	      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);

	      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);
	      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
	    });

	    if (rawSpace === space) {
	      rawSpace = undefined;
	    }

	    var result = {
	      space: space,
	      rawSpace: rawSpace
	    };
	    return result;
	  };

	  _proto.isNamedCombinator = function isNamedCombinator(position) {
	    if (position === void 0) {
	      position = this.position;
	    }

	    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;
	  };

	  _proto.namedCombinator = function namedCombinator() {
	    if (this.isNamedCombinator()) {
	      var nameRaw = this.content(this.tokens[this.position + 1]);
	      var name = (0, _util.unesc)(nameRaw).toLowerCase();
	      var raws = {};

	      if (name !== nameRaw) {
	        raws.value = "/" + nameRaw + "/";
	      }

	      var node = new _combinator["default"]({
	        value: "/" + name + "/",
	        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),
	        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
	        raws: raws
	      });
	      this.position = this.position + 3;
	      return node;
	    } else {
	      this.unexpected();
	    }
	  };

	  _proto.combinator = function combinator() {
	    var _this3 = this;

	    if (this.content() === '|') {
	      return this.namespace();
	    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.


	    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);

	    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {
	      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);

	      if (nodes.length > 0) {
	        var last = this.current.last;

	        if (last) {
	          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),
	              space = _this$convertWhitespa.space,
	              rawSpace = _this$convertWhitespa.rawSpace;

	          if (rawSpace !== undefined) {
	            last.rawSpaceAfter += rawSpace;
	          }

	          last.spaces.after += space;
	        } else {
	          nodes.forEach(function (n) {
	            return _this3.newNode(n);
	          });
	        }
	      }

	      return;
	    }

	    var firstToken = this.currToken;
	    var spaceOrDescendantSelectorNodes = undefined;

	    if (nextSigTokenPos > this.position) {
	      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
	    }

	    var node;

	    if (this.isNamedCombinator()) {
	      node = this.namedCombinator();
	    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {
	      node = new _combinator["default"]({
	        value: this.content(),
	        source: getTokenSource(this.currToken),
	        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]
	      });
	      this.position++;
	    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) ; else if (!spaceOrDescendantSelectorNodes) {
	      this.unexpected();
	    }

	    if (node) {
	      if (spaceOrDescendantSelectorNodes) {
	        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),
	            _space = _this$convertWhitespa2.space,
	            _rawSpace = _this$convertWhitespa2.rawSpace;

	        node.spaces.before = _space;
	        node.rawSpaceBefore = _rawSpace;
	      }
	    } else {
	      // descendant combinator
	      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),
	          _space2 = _this$convertWhitespa3.space,
	          _rawSpace2 = _this$convertWhitespa3.rawSpace;

	      if (!_rawSpace2) {
	        _rawSpace2 = _space2;
	      }

	      var spaces = {};
	      var raws = {
	        spaces: {}
	      };

	      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {
	        spaces.before = _space2.slice(0, _space2.length - 1);
	        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
	      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {
	        spaces.after = _space2.slice(1);
	        raws.spaces.after = _rawSpace2.slice(1);
	      } else {
	        raws.value = _rawSpace2;
	      }

	      node = new _combinator["default"]({
	        value: ' ',
	        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),
	        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
	        spaces: spaces,
	        raws: raws
	      });
	    }

	    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {
	      node.spaces.after = this.optionalSpace(this.content());
	      this.position++;
	    }

	    return this.newNode(node);
	  };

	  _proto.comma = function comma() {
	    if (this.position === this.tokens.length - 1) {
	      this.root.trailingComma = true;
	      this.position++;
	      return;
	    }

	    this.current._inferEndPosition();

	    var selector = new _selector["default"]({
	      source: {
	        start: tokenStart(this.tokens[this.position + 1])
	      }
	    });
	    this.current.parent.append(selector);
	    this.current = selector;
	    this.position++;
	  };

	  _proto.comment = function comment() {
	    var current = this.currToken;
	    this.newNode(new _comment["default"]({
	      value: this.content(),
	      source: getTokenSource(current),
	      sourceIndex: current[_tokenize.FIELDS.START_POS]
	    }));
	    this.position++;
	  };

	  _proto.error = function error(message, opts) {
	    throw this.root.error(message, opts);
	  };

	  _proto.missingBackslash = function missingBackslash() {
	    return this.error('Expected a backslash preceding the semicolon.', {
	      index: this.currToken[_tokenize.FIELDS.START_POS]
	    });
	  };

	  _proto.missingParenthesis = function missingParenthesis() {
	    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);
	  };

	  _proto.missingSquareBracket = function missingSquareBracket() {
	    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);
	  };

	  _proto.unexpected = function unexpected() {
	    return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize.FIELDS.START_POS]);
	  };

	  _proto.namespace = function namespace() {
	    var before = this.prevToken && this.content(this.prevToken) || true;

	    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {
	      this.position++;
	      return this.word(before);
	    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {
	      this.position++;
	      return this.universal(before);
	    }
	  };

	  _proto.nesting = function nesting() {
	    if (this.nextToken) {
	      var nextContent = this.content(this.nextToken);

	      if (nextContent === "|") {
	        this.position++;
	        return;
	      }
	    }

	    var current = this.currToken;
	    this.newNode(new _nesting["default"]({
	      value: this.content(),
	      source: getTokenSource(current),
	      sourceIndex: current[_tokenize.FIELDS.START_POS]
	    }));
	    this.position++;
	  };

	  _proto.parentheses = function parentheses() {
	    var last = this.current.last;
	    var unbalanced = 1;
	    this.position++;

	    if (last && last.type === types.PSEUDO) {
	      var selector = new _selector["default"]({
	        source: {
	          start: tokenStart(this.tokens[this.position - 1])
	        }
	      });
	      var cache = this.current;
	      last.append(selector);
	      this.current = selector;

	      while (this.position < this.tokens.length && unbalanced) {
	        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
	          unbalanced++;
	        }

	        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
	          unbalanced--;
	        }

	        if (unbalanced) {
	          this.parse();
	        } else {
	          this.current.source.end = tokenEnd(this.currToken);
	          this.current.parent.source.end = tokenEnd(this.currToken);
	          this.position++;
	        }
	      }

	      this.current = cache;
	    } else {
	      // I think this case should be an error. It's used to implement a basic parse of media queries
	      // but I don't think it's a good idea.
	      var parenStart = this.currToken;
	      var parenValue = "(";
	      var parenEnd;

	      while (this.position < this.tokens.length && unbalanced) {
	        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
	          unbalanced++;
	        }

	        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
	          unbalanced--;
	        }

	        parenEnd = this.currToken;
	        parenValue += this.parseParenthesisToken(this.currToken);
	        this.position++;
	      }

	      if (last) {
	        last.appendToPropertyAndEscape("value", parenValue, parenValue);
	      } else {
	        this.newNode(new _string["default"]({
	          value: parenValue,
	          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),
	          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]
	        }));
	      }
	    }

	    if (unbalanced) {
	      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);
	    }
	  };

	  _proto.pseudo = function pseudo() {
	    var _this4 = this;

	    var pseudoStr = '';
	    var startingToken = this.currToken;

	    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {
	      pseudoStr += this.content();
	      this.position++;
	    }

	    if (!this.currToken) {
	      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);
	    }

	    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {
	      this.splitWord(false, function (first, length) {
	        pseudoStr += first;

	        _this4.newNode(new _pseudo["default"]({
	          value: pseudoStr,
	          source: getTokenSourceSpan(startingToken, _this4.currToken),
	          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
	        }));

	        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
	          _this4.error('Misplaced parenthesis.', {
	            index: _this4.nextToken[_tokenize.FIELDS.START_POS]
	          });
	        }
	      });
	    } else {
	      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);
	    }
	  };

	  _proto.space = function space() {
	    var content = this.content(); // Handle space before and after the selector

	    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {
	      return node.type === 'comment';
	    })) {
	      this.spaces = this.optionalSpace(content);
	      this.position++;
	    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
	      this.current.last.spaces.after = this.optionalSpace(content);
	      this.position++;
	    } else {
	      this.combinator();
	    }
	  };

	  _proto.string = function string() {
	    var current = this.currToken;
	    this.newNode(new _string["default"]({
	      value: this.content(),
	      source: getTokenSource(current),
	      sourceIndex: current[_tokenize.FIELDS.START_POS]
	    }));
	    this.position++;
	  };

	  _proto.universal = function universal(namespace) {
	    var nextToken = this.nextToken;

	    if (nextToken && this.content(nextToken) === '|') {
	      this.position++;
	      return this.namespace();
	    }

	    var current = this.currToken;
	    this.newNode(new _universal["default"]({
	      value: this.content(),
	      source: getTokenSource(current),
	      sourceIndex: current[_tokenize.FIELDS.START_POS]
	    }), namespace);
	    this.position++;
	  };

	  _proto.splitWord = function splitWord(namespace, firstCallback) {
	    var _this5 = this;

	    var nextToken = this.nextToken;
	    var word = this.content();

	    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {
	      this.position++;
	      var current = this.content();
	      word += current;

	      if (current.lastIndexOf('\\') === current.length - 1) {
	        var next = this.nextToken;

	        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {
	          word += this.requiredSpace(this.content(next));
	          this.position++;
	        }
	      }

	      nextToken = this.nextToken;
	    }

	    var hasClass = indexesOf(word, '.').filter(function (i) {
	      return word[i - 1] !== '\\';
	    });
	    var hasId = indexesOf(word, '#').filter(function (i) {
	      return word[i - 1] !== '\\';
	    }); // Eliminate Sass interpolations from the list of id indexes

	    var interpolations = indexesOf(word, '#{');

	    if (interpolations.length) {
	      hasId = hasId.filter(function (hashIndex) {
	        return !~interpolations.indexOf(hashIndex);
	      });
	    }

	    var indices = (0, _sortAscending["default"])(uniqs([0].concat(hasClass, hasId)));
	    indices.forEach(function (ind, i) {
	      var index = indices[i + 1] || word.length;
	      var value = word.slice(ind, index);

	      if (i === 0 && firstCallback) {
	        return firstCallback.call(_this5, value, indices.length);
	      }

	      var node;
	      var current = _this5.currToken;
	      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];
	      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));

	      if (~hasClass.indexOf(ind)) {
	        var classNameOpts = {
	          value: value.slice(1),
	          source: source,
	          sourceIndex: sourceIndex
	        };
	        node = new _className["default"](unescapeProp(classNameOpts, "value"));
	      } else if (~hasId.indexOf(ind)) {
	        var idOpts = {
	          value: value.slice(1),
	          source: source,
	          sourceIndex: sourceIndex
	        };
	        node = new _id["default"](unescapeProp(idOpts, "value"));
	      } else {
	        var tagOpts = {
	          value: value,
	          source: source,
	          sourceIndex: sourceIndex
	        };
	        unescapeProp(tagOpts, "value");
	        node = new _tag["default"](tagOpts);
	      }

	      _this5.newNode(node, namespace); // Ensure that the namespace is used only once


	      namespace = null;
	    });
	    this.position++;
	  };

	  _proto.word = function word(namespace) {
	    var nextToken = this.nextToken;

	    if (nextToken && this.content(nextToken) === '|') {
	      this.position++;
	      return this.namespace();
	    }

	    return this.splitWord(namespace);
	  };

	  _proto.loop = function loop() {
	    while (this.position < this.tokens.length) {
	      this.parse(true);
	    }

	    this.current._inferEndPosition();

	    return this.root;
	  };

	  _proto.parse = function parse(throwOnParenthesis) {
	    switch (this.currToken[_tokenize.FIELDS.TYPE]) {
	      case tokens.space:
	        this.space();
	        break;

	      case tokens.comment:
	        this.comment();
	        break;

	      case tokens.openParenthesis:
	        this.parentheses();
	        break;

	      case tokens.closeParenthesis:
	        if (throwOnParenthesis) {
	          this.missingParenthesis();
	        }

	        break;

	      case tokens.openSquare:
	        this.attribute();
	        break;

	      case tokens.dollar:
	      case tokens.caret:
	      case tokens.equals:
	      case tokens.word:
	        this.word();
	        break;

	      case tokens.colon:
	        this.pseudo();
	        break;

	      case tokens.comma:
	        this.comma();
	        break;

	      case tokens.asterisk:
	        this.universal();
	        break;

	      case tokens.ampersand:
	        this.nesting();
	        break;

	      case tokens.slash:
	      case tokens.combinator:
	        this.combinator();
	        break;

	      case tokens.str:
	        this.string();
	        break;
	      // These cases throw; no break needed.

	      case tokens.closeSquare:
	        this.missingSquareBracket();

	      case tokens.semicolon:
	        this.missingBackslash();

	      default:
	        this.unexpected();
	    }
	  }
	  /**
	   * Helpers
	   */
	  ;

	  _proto.expected = function expected(description, index, found) {
	    if (Array.isArray(description)) {
	      var last = description.pop();
	      description = description.join(', ') + " or " + last;
	    }

	    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';

	    if (!found) {
	      return this.error("Expected " + an + " " + description + ".", {
	        index: index
	      });
	    }

	    return this.error("Expected " + an + " " + description + ", found \"" + found + "\" instead.", {
	      index: index
	    });
	  };

	  _proto.requiredSpace = function requiredSpace(space) {
	    return this.options.lossy ? ' ' : space;
	  };

	  _proto.optionalSpace = function optionalSpace(space) {
	    return this.options.lossy ? '' : space;
	  };

	  _proto.lossySpace = function lossySpace(space, required) {
	    if (this.options.lossy) {
	      return required ? ' ' : '';
	    } else {
	      return space;
	    }
	  };

	  _proto.parseParenthesisToken = function parseParenthesisToken(token) {
	    var content = this.content(token);

	    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {
	      return this.requiredSpace(content);
	    } else {
	      return content;
	    }
	  };

	  _proto.newNode = function newNode(node, namespace) {
	    if (namespace) {
	      if (/^ +$/.test(namespace)) {
	        if (!this.options.lossy) {
	          this.spaces = (this.spaces || '') + namespace;
	        }

	        namespace = true;
	      }

	      node.namespace = namespace;
	      unescapeProp(node, "namespace");
	    }

	    if (this.spaces) {
	      node.spaces.before = this.spaces;
	      this.spaces = '';
	    }

	    return this.current.append(node);
	  };

	  _proto.content = function content(token) {
	    if (token === void 0) {
	      token = this.currToken;
	    }

	    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);
	  };

	  /**
	   * returns the index of the next non-whitespace, non-comment token.
	   * returns -1 if no meaningful token is found.
	   */
	  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
	    if (startPosition === void 0) {
	      startPosition = this.position + 1;
	    }

	    var searchPosition = startPosition;

	    while (searchPosition < this.tokens.length) {
	      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {
	        searchPosition++;
	        continue;
	      } else {
	        return searchPosition;
	      }
	    }

	    return -1;
	  };

	  _createClass(Parser, [{
	    key: "currToken",
	    get: function get() {
	      return this.tokens[this.position];
	    }
	  }, {
	    key: "nextToken",
	    get: function get() {
	      return this.tokens[this.position + 1];
	    }
	  }, {
	    key: "prevToken",
	    get: function get() {
	      return this.tokens[this.position - 1];
	    }
	  }]);

	  return Parser;
	}();

	exports["default"] = Parser;
	module.exports = exports.default;
	}(parser$2, parser$2.exports));

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _parser = _interopRequireDefault(parser$2.exports);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Processor = /*#__PURE__*/function () {
	  function Processor(func, options) {
	    this.func = func || function noop() {};

	    this.funcRes = null;
	    this.options = options;
	  }

	  var _proto = Processor.prototype;

	  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var merged = Object.assign({}, this.options, options);

	    if (merged.updateSelector === false) {
	      return false;
	    } else {
	      return typeof rule !== "string";
	    }
	  };

	  _proto._isLossy = function _isLossy(options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var merged = Object.assign({}, this.options, options);

	    if (merged.lossless === false) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  _proto._root = function _root(rule, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var parser = new _parser["default"](rule, this._parseOptions(options));
	    return parser.root;
	  };

	  _proto._parseOptions = function _parseOptions(options) {
	    return {
	      lossy: this._isLossy(options)
	    };
	  };

	  _proto._run = function _run(rule, options) {
	    var _this = this;

	    if (options === void 0) {
	      options = {};
	    }

	    return new Promise(function (resolve, reject) {
	      try {
	        var root = _this._root(rule, options);

	        Promise.resolve(_this.func(root)).then(function (transform) {
	          var string = undefined;

	          if (_this._shouldUpdateSelector(rule, options)) {
	            string = root.toString();
	            rule.selector = string;
	          }

	          return {
	            transform: transform,
	            root: root,
	            string: string
	          };
	        }).then(resolve, reject);
	      } catch (e) {
	        reject(e);
	        return;
	      }
	    });
	  };

	  _proto._runSync = function _runSync(rule, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var root = this._root(rule, options);

	    var transform = this.func(root);

	    if (transform && typeof transform.then === "function") {
	      throw new Error("Selector processor returned a promise to a synchronous call.");
	    }

	    var string = undefined;

	    if (options.updateSelector && typeof rule !== "string") {
	      string = root.toString();
	      rule.selector = string;
	    }

	    return {
	      transform: transform,
	      root: root,
	      string: string
	    };
	  }
	  /**
	   * Process rule into a selector AST.
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {Promise<parser.Root>} The AST of the selector after processing it.
	   */
	  ;

	  _proto.ast = function ast(rule, options) {
	    return this._run(rule, options).then(function (result) {
	      return result.root;
	    });
	  }
	  /**
	   * Process rule into a selector AST synchronously.
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {parser.Root} The AST of the selector after processing it.
	   */
	  ;

	  _proto.astSync = function astSync(rule, options) {
	    return this._runSync(rule, options).root;
	  }
	  /**
	   * Process a selector into a transformed value asynchronously
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {Promise<any>} The value returned by the processor.
	   */
	  ;

	  _proto.transform = function transform(rule, options) {
	    return this._run(rule, options).then(function (result) {
	      return result.transform;
	    });
	  }
	  /**
	   * Process a selector into a transformed value synchronously.
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {any} The value returned by the processor.
	   */
	  ;

	  _proto.transformSync = function transformSync(rule, options) {
	    return this._runSync(rule, options).transform;
	  }
	  /**
	   * Process a selector into a new selector string asynchronously.
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {string} the selector after processing.
	   */
	  ;

	  _proto.process = function process(rule, options) {
	    return this._run(rule, options).then(function (result) {
	      return result.string || result.root.toString();
	    });
	  }
	  /**
	   * Process a selector into a new selector string synchronously.
	   *
	   * @param rule {postcss.Rule | string} The css selector to be processed
	   * @param options The options for processing
	   * @returns {string} the selector after processing.
	   */
	  ;

	  _proto.processSync = function processSync(rule, options) {
	    var result = this._runSync(rule, options);

	    return result.string || result.root.toString();
	  };

	  return Processor;
	}();

	exports["default"] = Processor;
	module.exports = exports.default;
	}(processor, processor.exports));

	var selectors = {};

	var constructors = {};

	constructors.__esModule = true;
	constructors.universal = constructors.tag = constructors.string = constructors.selector = constructors.root = constructors.pseudo = constructors.nesting = constructors.id = constructors.comment = constructors.combinator = constructors.className = constructors.attribute = void 0;

	var _attribute = _interopRequireDefault$5(attribute$1);

	var _className = _interopRequireDefault$5(className$1.exports);

	var _combinator = _interopRequireDefault$5(combinator$2.exports);

	var _comment = _interopRequireDefault$5(comment$2.exports);

	var _id = _interopRequireDefault$5(id$1.exports);

	var _nesting = _interopRequireDefault$5(nesting$1.exports);

	var _pseudo = _interopRequireDefault$5(pseudo$1.exports);

	var _root = _interopRequireDefault$5(root$2.exports);

	var _selector = _interopRequireDefault$5(selector$1.exports);

	var _string = _interopRequireDefault$5(string$1.exports);

	var _tag = _interopRequireDefault$5(tag$1.exports);

	var _universal = _interopRequireDefault$5(universal$1.exports);

	function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var attribute = function attribute(opts) {
	  return new _attribute["default"](opts);
	};

	constructors.attribute = attribute;

	var className = function className(opts) {
	  return new _className["default"](opts);
	};

	constructors.className = className;

	var combinator = function combinator(opts) {
	  return new _combinator["default"](opts);
	};

	constructors.combinator = combinator;

	var comment = function comment(opts) {
	  return new _comment["default"](opts);
	};

	constructors.comment = comment;

	var id = function id(opts) {
	  return new _id["default"](opts);
	};

	constructors.id = id;

	var nesting = function nesting(opts) {
	  return new _nesting["default"](opts);
	};

	constructors.nesting = nesting;

	var pseudo = function pseudo(opts) {
	  return new _pseudo["default"](opts);
	};

	constructors.pseudo = pseudo;

	var root$1 = function root(opts) {
	  return new _root["default"](opts);
	};

	constructors.root = root$1;

	var selector = function selector(opts) {
	  return new _selector["default"](opts);
	};

	constructors.selector = selector;

	var string = function string(opts) {
	  return new _string["default"](opts);
	};

	constructors.string = string;

	var tag = function tag(opts) {
	  return new _tag["default"](opts);
	};

	constructors.tag = tag;

	var universal = function universal(opts) {
	  return new _universal["default"](opts);
	};

	constructors.universal = universal;

	var guards = {};

	guards.__esModule = true;
	guards.isNode = isNode;
	guards.isPseudoElement = isPseudoElement;
	guards.isPseudoClass = isPseudoClass;
	guards.isContainer = isContainer;
	guards.isNamespace = isNamespace;
	guards.isUniversal = guards.isTag = guards.isString = guards.isSelector = guards.isRoot = guards.isPseudo = guards.isNesting = guards.isIdentifier = guards.isComment = guards.isCombinator = guards.isClassName = guards.isAttribute = void 0;

	var _types = types$1;

	var _IS_TYPE;

	var IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);

	function isNode(node) {
	  return typeof node === "object" && IS_TYPE[node.type];
	}

	function isNodeType(type, node) {
	  return isNode(node) && node.type === type;
	}

	var isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);
	guards.isAttribute = isAttribute;
	var isClassName = isNodeType.bind(null, _types.CLASS);
	guards.isClassName = isClassName;
	var isCombinator = isNodeType.bind(null, _types.COMBINATOR);
	guards.isCombinator = isCombinator;
	var isComment = isNodeType.bind(null, _types.COMMENT);
	guards.isComment = isComment;
	var isIdentifier = isNodeType.bind(null, _types.ID);
	guards.isIdentifier = isIdentifier;
	var isNesting = isNodeType.bind(null, _types.NESTING);
	guards.isNesting = isNesting;
	var isPseudo = isNodeType.bind(null, _types.PSEUDO);
	guards.isPseudo = isPseudo;
	var isRoot = isNodeType.bind(null, _types.ROOT);
	guards.isRoot = isRoot;
	var isSelector = isNodeType.bind(null, _types.SELECTOR);
	guards.isSelector = isSelector;
	var isString = isNodeType.bind(null, _types.STRING);
	guards.isString = isString;
	var isTag = isNodeType.bind(null, _types.TAG);
	guards.isTag = isTag;
	var isUniversal = isNodeType.bind(null, _types.UNIVERSAL);
	guards.isUniversal = isUniversal;

	function isPseudoElement(node) {
	  return isPseudo(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after");
	}

	function isPseudoClass(node) {
	  return isPseudo(node) && !isPseudoElement(node);
	}

	function isContainer(node) {
	  return !!(isNode(node) && node.walk);
	}

	function isNamespace(node) {
	  return isAttribute(node) || isTag(node);
	}

	(function (exports) {

	exports.__esModule = true;

	var _types = types$1;

	Object.keys(_types).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _types[key]) return;
	  exports[key] = _types[key];
	});

	var _constructors = constructors;

	Object.keys(_constructors).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _constructors[key]) return;
	  exports[key] = _constructors[key];
	});

	var _guards = guards;

	Object.keys(_guards).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (key in exports && exports[key] === _guards[key]) return;
	  exports[key] = _guards[key];
	});
	}(selectors));

	(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = void 0;

	var _processor = _interopRequireDefault(processor.exports);

	var selectors$1 = _interopRequireWildcard(selectors);

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var parser = function parser(processor) {
	  return new _processor["default"](processor);
	};

	Object.assign(parser, selectors$1);
	delete parser.__esModule;
	var _default = parser;
	exports["default"] = _default;
	module.exports = exports.default;
	}(dist, dist.exports));

	var sourceMap$1 = sourceMap$3;
	var SourceMapConsumer = sourceMap$1.SourceMapConsumer;
	var SourceMapGenerator = sourceMap$1.SourceMapGenerator;

	var _mergeSourceMap_1_1_0_mergeSourceMap = merge$1;

	/**
	 * Merge old source map and new source map and return merged.
	 * If old or new source map value is falsy, return another one as it is.
	 *
	 * @param {object|string} [oldMap] old source map object
	 * @param {object|string} [newmap] new source map object
	 * @return {object|undefined} merged source map object, or undefined when both old and new source map are undefined
	 */
	function merge$1(oldMap, newMap) {
	  if (!oldMap) return newMap
	  if (!newMap) return oldMap

	  var oldMapConsumer = new SourceMapConsumer(oldMap);
	  var newMapConsumer = new SourceMapConsumer(newMap);
	  var mergedMapGenerator = new SourceMapGenerator();

	  // iterate on new map and overwrite original position of new map with one of old map
	  newMapConsumer.eachMapping(function(m) {
	    // pass when `originalLine` is null.
	    // It occurs in case that the node does not have origin in original code.
	    if (m.originalLine == null) return

	    var origPosInOldMap = oldMapConsumer.originalPositionFor({
	      line: m.originalLine,
	      column: m.originalColumn
	    });

	    if (origPosInOldMap.source == null) return

	    mergedMapGenerator.addMapping({
	      original: {
	        line: origPosInOldMap.line,
	        column: origPosInOldMap.column
	      },
	      generated: {
	        line: m.generatedLine,
	        column: m.generatedColumn
	      },
	      source: origPosInOldMap.source,
	      name: origPosInOldMap.name
	    });
	  });

	  var consumers = [oldMapConsumer, newMapConsumer];
	  consumers.forEach(function(consumer) {
	    consumer.sources.forEach(function(sourceFile) {
	      mergedMapGenerator._sources.add(sourceFile);
	      var sourceContent = consumer.sourceContentFor(sourceFile);
	      if (sourceContent != null) {
	        mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
	      }
	    });
	  });

	  mergedMapGenerator._sourceRoot = oldMap.sourceRoot;
	  mergedMapGenerator._file = oldMap.file;

	  return JSON.parse(mergedMapGenerator.toString())
	}

	var charToInteger = {};
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	for (var i = 0; i < chars.length; i++) {
	    charToInteger[chars.charCodeAt(i)] = i;
	}
	function encode(decoded) {
	    var sourceFileIndex = 0; // second field
	    var sourceCodeLine = 0; // third field
	    var sourceCodeColumn = 0; // fourth field
	    var nameIndex = 0; // fifth field
	    var mappings = '';
	    for (var i = 0; i < decoded.length; i++) {
	        var line = decoded[i];
	        if (i > 0)
	            mappings += ';';
	        if (line.length === 0)
	            continue;
	        var generatedCodeColumn = 0; // first field
	        var lineMappings = [];
	        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
	            var segment = line_1[_i];
	            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
	            generatedCodeColumn = segment[0];
	            if (segment.length > 1) {
	                segmentMappings +=
	                    encodeInteger(segment[1] - sourceFileIndex) +
	                        encodeInteger(segment[2] - sourceCodeLine) +
	                        encodeInteger(segment[3] - sourceCodeColumn);
	                sourceFileIndex = segment[1];
	                sourceCodeLine = segment[2];
	                sourceCodeColumn = segment[3];
	            }
	            if (segment.length === 5) {
	                segmentMappings += encodeInteger(segment[4] - nameIndex);
	                nameIndex = segment[4];
	            }
	            lineMappings.push(segmentMappings);
	        }
	        mappings += lineMappings.join(',');
	    }
	    return mappings;
	}
	function encodeInteger(num) {
	    var result = '';
	    num = num < 0 ? (-num << 1) | 1 : num << 1;
	    do {
	        var clamped = num & 31;
	        num >>>= 5;
	        if (num > 0) {
	            clamped |= 32;
	        }
	        result += chars[clamped];
	    } while (num > 0);
	    return result;
	}

	var BitSet = function BitSet(arg) {
		this.bits = arg instanceof BitSet ? arg.bits.slice() : [];
	};

	BitSet.prototype.add = function add (n) {
		this.bits[n >> 5] |= 1 << (n & 31);
	};

	BitSet.prototype.has = function has (n) {
		return !!(this.bits[n >> 5] & (1 << (n & 31)));
	};

	var Chunk = function Chunk(start, end, content) {
		this.start = start;
		this.end = end;
		this.original = content;

		this.intro = '';
		this.outro = '';

		this.content = content;
		this.storeName = false;
		this.edited = false;

		// we make these non-enumerable, for sanity while debugging
		Object.defineProperties(this, {
			previous: { writable: true, value: null },
			next:     { writable: true, value: null }
		});
	};

	Chunk.prototype.appendLeft = function appendLeft (content) {
		this.outro += content;
	};

	Chunk.prototype.appendRight = function appendRight (content) {
		this.intro = this.intro + content;
	};

	Chunk.prototype.clone = function clone () {
		var chunk = new Chunk(this.start, this.end, this.original);

		chunk.intro = this.intro;
		chunk.outro = this.outro;
		chunk.content = this.content;
		chunk.storeName = this.storeName;
		chunk.edited = this.edited;

		return chunk;
	};

	Chunk.prototype.contains = function contains (index) {
		return this.start < index && index < this.end;
	};

	Chunk.prototype.eachNext = function eachNext (fn) {
		var chunk = this;
		while (chunk) {
			fn(chunk);
			chunk = chunk.next;
		}
	};

	Chunk.prototype.eachPrevious = function eachPrevious (fn) {
		var chunk = this;
		while (chunk) {
			fn(chunk);
			chunk = chunk.previous;
		}
	};

	Chunk.prototype.edit = function edit (content, storeName, contentOnly) {
		this.content = content;
		if (!contentOnly) {
			this.intro = '';
			this.outro = '';
		}
		this.storeName = storeName;

		this.edited = true;

		return this;
	};

	Chunk.prototype.prependLeft = function prependLeft (content) {
		this.outro = content + this.outro;
	};

	Chunk.prototype.prependRight = function prependRight (content) {
		this.intro = content + this.intro;
	};

	Chunk.prototype.split = function split (index) {
		var sliceIndex = index - this.start;

		var originalBefore = this.original.slice(0, sliceIndex);
		var originalAfter = this.original.slice(sliceIndex);

		this.original = originalBefore;

		var newChunk = new Chunk(index, this.end, originalAfter);
		newChunk.outro = this.outro;
		this.outro = '';

		this.end = index;

		if (this.edited) {
			// TODO is this block necessary?...
			newChunk.edit('', false);
			this.content = '';
		} else {
			this.content = originalBefore;
		}

		newChunk.next = this.next;
		if (newChunk.next) { newChunk.next.previous = newChunk; }
		newChunk.previous = this;
		this.next = newChunk;

		return newChunk;
	};

	Chunk.prototype.toString = function toString () {
		return this.intro + this.content + this.outro;
	};

	Chunk.prototype.trimEnd = function trimEnd (rx) {
		this.outro = this.outro.replace(rx, '');
		if (this.outro.length) { return true; }

		var trimmed = this.content.replace(rx, '');

		if (trimmed.length) {
			if (trimmed !== this.content) {
				this.split(this.start + trimmed.length).edit('', undefined, true);
			}
			return true;

		} else {
			this.edit('', undefined, true);

			this.intro = this.intro.replace(rx, '');
			if (this.intro.length) { return true; }
		}
	};

	Chunk.prototype.trimStart = function trimStart (rx) {
		this.intro = this.intro.replace(rx, '');
		if (this.intro.length) { return true; }

		var trimmed = this.content.replace(rx, '');

		if (trimmed.length) {
			if (trimmed !== this.content) {
				this.split(this.end - trimmed.length);
				this.edit('', undefined, true);
			}
			return true;

		} else {
			this.edit('', undefined, true);

			this.outro = this.outro.replace(rx, '');
			if (this.outro.length) { return true; }
		}
	};

	var btoa = function () {
		throw new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');
	};
	if (typeof window !== 'undefined' && typeof window.btoa === 'function') {
		btoa = function (str) { return window.btoa(unescape(encodeURIComponent(str))); };
	} else if (typeof Buffer === 'function') {
		btoa = function (str) { return Buffer.from(str, 'utf-8').toString('base64'); };
	}

	var SourceMap = function SourceMap(properties) {
		this.version = 3;
		this.file = properties.file;
		this.sources = properties.sources;
		this.sourcesContent = properties.sourcesContent;
		this.names = properties.names;
		this.mappings = encode(properties.mappings);
	};

	SourceMap.prototype.toString = function toString () {
		return JSON.stringify(this);
	};

	SourceMap.prototype.toUrl = function toUrl () {
		return 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());
	};

	function guessIndent(code) {
		var lines = code.split('\n');

		var tabbed = lines.filter(function (line) { return /^\t+/.test(line); });
		var spaced = lines.filter(function (line) { return /^ {2,}/.test(line); });

		if (tabbed.length === 0 && spaced.length === 0) {
			return null;
		}

		// More lines tabbed than spaced? Assume tabs, and
		// default to tabs in the case of a tie (or nothing
		// to go on)
		if (tabbed.length >= spaced.length) {
			return '\t';
		}

		// Otherwise, we need to guess the multiple
		var min = spaced.reduce(function (previous, current) {
			var numSpaces = /^ +/.exec(current)[0].length;
			return Math.min(numSpaces, previous);
		}, Infinity);

		return new Array(min + 1).join(' ');
	}

	function getRelativePath(from, to) {
		var fromParts = from.split(/[/\\]/);
		var toParts = to.split(/[/\\]/);

		fromParts.pop(); // get dirname

		while (fromParts[0] === toParts[0]) {
			fromParts.shift();
			toParts.shift();
		}

		if (fromParts.length) {
			var i = fromParts.length;
			while (i--) { fromParts[i] = '..'; }
		}

		return fromParts.concat(toParts).join('/');
	}

	var toString$1 = Object.prototype.toString;

	function isObject$1(thing) {
		return toString$1.call(thing) === '[object Object]';
	}

	function getLocator(source) {
		var originalLines = source.split('\n');
		var lineOffsets = [];

		for (var i = 0, pos = 0; i < originalLines.length; i++) {
			lineOffsets.push(pos);
			pos += originalLines[i].length + 1;
		}

		return function locate(index) {
			var i = 0;
			var j = lineOffsets.length;
			while (i < j) {
				var m = (i + j) >> 1;
				if (index < lineOffsets[m]) {
					j = m;
				} else {
					i = m + 1;
				}
			}
			var line = i - 1;
			var column = index - lineOffsets[line];
			return { line: line, column: column };
		};
	}

	var Mappings = function Mappings(hires) {
		this.hires = hires;
		this.generatedCodeLine = 0;
		this.generatedCodeColumn = 0;
		this.raw = [];
		this.rawSegments = this.raw[this.generatedCodeLine] = [];
		this.pending = null;
	};

	Mappings.prototype.addEdit = function addEdit (sourceIndex, content, loc, nameIndex) {
		if (content.length) {
			var segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
			if (nameIndex >= 0) {
				segment.push(nameIndex);
			}
			this.rawSegments.push(segment);
		} else if (this.pending) {
			this.rawSegments.push(this.pending);
		}

		this.advance(content);
		this.pending = null;
	};

	Mappings.prototype.addUneditedChunk = function addUneditedChunk (sourceIndex, chunk, original, loc, sourcemapLocations) {
		var originalCharIndex = chunk.start;
		var first = true;

		while (originalCharIndex < chunk.end) {
			if (this.hires || first || sourcemapLocations.has(originalCharIndex)) {
				this.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);
			}

			if (original[originalCharIndex] === '\n') {
				loc.line += 1;
				loc.column = 0;
				this.generatedCodeLine += 1;
				this.raw[this.generatedCodeLine] = this.rawSegments = [];
				this.generatedCodeColumn = 0;
				first = true;
			} else {
				loc.column += 1;
				this.generatedCodeColumn += 1;
				first = false;
			}

			originalCharIndex += 1;
		}

		this.pending = null;
	};

	Mappings.prototype.advance = function advance (str) {
		if (!str) { return; }

		var lines = str.split('\n');

		if (lines.length > 1) {
			for (var i = 0; i < lines.length - 1; i++) {
				this.generatedCodeLine++;
				this.raw[this.generatedCodeLine] = this.rawSegments = [];
			}
			this.generatedCodeColumn = 0;
		}

		this.generatedCodeColumn += lines[lines.length - 1].length;
	};

	var n = '\n';

	var warned = {
		insertLeft: false,
		insertRight: false,
		storeName: false
	};

	var MagicString$1 = function MagicString(string, options) {
		if ( options === void 0 ) options = {};

		var chunk = new Chunk(0, string.length, string);

		Object.defineProperties(this, {
			original:              { writable: true, value: string },
			outro:                 { writable: true, value: '' },
			intro:                 { writable: true, value: '' },
			firstChunk:            { writable: true, value: chunk },
			lastChunk:             { writable: true, value: chunk },
			lastSearchedChunk:     { writable: true, value: chunk },
			byStart:               { writable: true, value: {} },
			byEnd:                 { writable: true, value: {} },
			filename:              { writable: true, value: options.filename },
			indentExclusionRanges: { writable: true, value: options.indentExclusionRanges },
			sourcemapLocations:    { writable: true, value: new BitSet() },
			storedNames:           { writable: true, value: {} },
			indentStr:             { writable: true, value: guessIndent(string) }
		});

		this.byStart[0] = chunk;
		this.byEnd[string.length] = chunk;
	};

	MagicString$1.prototype.addSourcemapLocation = function addSourcemapLocation (char) {
		this.sourcemapLocations.add(char);
	};

	MagicString$1.prototype.append = function append (content) {
		if (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }

		this.outro += content;
		return this;
	};

	MagicString$1.prototype.appendLeft = function appendLeft (index, content) {
		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }

		this._split(index);

		var chunk = this.byEnd[index];

		if (chunk) {
			chunk.appendLeft(content);
		} else {
			this.intro += content;
		}
		return this;
	};

	MagicString$1.prototype.appendRight = function appendRight (index, content) {
		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }

		this._split(index);

		var chunk = this.byStart[index];

		if (chunk) {
			chunk.appendRight(content);
		} else {
			this.outro += content;
		}
		return this;
	};

	MagicString$1.prototype.clone = function clone () {
		var cloned = new MagicString$1(this.original, { filename: this.filename });

		var originalChunk = this.firstChunk;
		var clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());

		while (originalChunk) {
			cloned.byStart[clonedChunk.start] = clonedChunk;
			cloned.byEnd[clonedChunk.end] = clonedChunk;

			var nextOriginalChunk = originalChunk.next;
			var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();

			if (nextClonedChunk) {
				clonedChunk.next = nextClonedChunk;
				nextClonedChunk.previous = clonedChunk;

				clonedChunk = nextClonedChunk;
			}

			originalChunk = nextOriginalChunk;
		}

		cloned.lastChunk = clonedChunk;

		if (this.indentExclusionRanges) {
			cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
		}

		cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);

		cloned.intro = this.intro;
		cloned.outro = this.outro;

		return cloned;
	};

	MagicString$1.prototype.generateDecodedMap = function generateDecodedMap (options) {
			var this$1$1 = this;

		options = options || {};

		var sourceIndex = 0;
		var names = Object.keys(this.storedNames);
		var mappings = new Mappings(options.hires);

		var locate = getLocator(this.original);

		if (this.intro) {
			mappings.advance(this.intro);
		}

		this.firstChunk.eachNext(function (chunk) {
			var loc = locate(chunk.start);

			if (chunk.intro.length) { mappings.advance(chunk.intro); }

			if (chunk.edited) {
				mappings.addEdit(
					sourceIndex,
					chunk.content,
					loc,
					chunk.storeName ? names.indexOf(chunk.original) : -1
				);
			} else {
				mappings.addUneditedChunk(sourceIndex, chunk, this$1$1.original, loc, this$1$1.sourcemapLocations);
			}

			if (chunk.outro.length) { mappings.advance(chunk.outro); }
		});

		return {
			file: options.file ? options.file.split(/[/\\]/).pop() : null,
			sources: [options.source ? getRelativePath(options.file || '', options.source) : null],
			sourcesContent: options.includeContent ? [this.original] : [null],
			names: names,
			mappings: mappings.raw
		};
	};

	MagicString$1.prototype.generateMap = function generateMap (options) {
		return new SourceMap(this.generateDecodedMap(options));
	};

	MagicString$1.prototype.getIndentString = function getIndentString () {
		return this.indentStr === null ? '\t' : this.indentStr;
	};

	MagicString$1.prototype.indent = function indent (indentStr, options) {
		var pattern = /^[^\r\n]/gm;

		if (isObject$1(indentStr)) {
			options = indentStr;
			indentStr = undefined;
		}

		indentStr = indentStr !== undefined ? indentStr : this.indentStr || '\t';

		if (indentStr === '') { return this; } // noop

		options = options || {};

		// Process exclusion ranges
		var isExcluded = {};

		if (options.exclude) {
			var exclusions =
				typeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;
			exclusions.forEach(function (exclusion) {
				for (var i = exclusion[0]; i < exclusion[1]; i += 1) {
					isExcluded[i] = true;
				}
			});
		}

		var shouldIndentNextCharacter = options.indentStart !== false;
		var replacer = function (match) {
			if (shouldIndentNextCharacter) { return ("" + indentStr + match); }
			shouldIndentNextCharacter = true;
			return match;
		};

		this.intro = this.intro.replace(pattern, replacer);

		var charIndex = 0;
		var chunk = this.firstChunk;

		while (chunk) {
			var end = chunk.end;

			if (chunk.edited) {
				if (!isExcluded[charIndex]) {
					chunk.content = chunk.content.replace(pattern, replacer);

					if (chunk.content.length) {
						shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\n';
					}
				}
			} else {
				charIndex = chunk.start;

				while (charIndex < end) {
					if (!isExcluded[charIndex]) {
						var char = this.original[charIndex];

						if (char === '\n') {
							shouldIndentNextCharacter = true;
						} else if (char !== '\r' && shouldIndentNextCharacter) {
							shouldIndentNextCharacter = false;

							if (charIndex === chunk.start) {
								chunk.prependRight(indentStr);
							} else {
								this._splitChunk(chunk, charIndex);
								chunk = chunk.next;
								chunk.prependRight(indentStr);
							}
						}
					}

					charIndex += 1;
				}
			}

			charIndex = chunk.end;
			chunk = chunk.next;
		}

		this.outro = this.outro.replace(pattern, replacer);

		return this;
	};

	MagicString$1.prototype.insert = function insert () {
		throw new Error('magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)');
	};

	MagicString$1.prototype.insertLeft = function insertLeft (index, content) {
		if (!warned.insertLeft) {
			console.warn('magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'); // eslint-disable-line no-console
			warned.insertLeft = true;
		}

		return this.appendLeft(index, content);
	};

	MagicString$1.prototype.insertRight = function insertRight (index, content) {
		if (!warned.insertRight) {
			console.warn('magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'); // eslint-disable-line no-console
			warned.insertRight = true;
		}

		return this.prependRight(index, content);
	};

	MagicString$1.prototype.move = function move (start, end, index) {
		if (index >= start && index <= end) { throw new Error('Cannot move a selection inside itself'); }

		this._split(start);
		this._split(end);
		this._split(index);

		var first = this.byStart[start];
		var last = this.byEnd[end];

		var oldLeft = first.previous;
		var oldRight = last.next;

		var newRight = this.byStart[index];
		if (!newRight && last === this.lastChunk) { return this; }
		var newLeft = newRight ? newRight.previous : this.lastChunk;

		if (oldLeft) { oldLeft.next = oldRight; }
		if (oldRight) { oldRight.previous = oldLeft; }

		if (newLeft) { newLeft.next = first; }
		if (newRight) { newRight.previous = last; }

		if (!first.previous) { this.firstChunk = last.next; }
		if (!last.next) {
			this.lastChunk = first.previous;
			this.lastChunk.next = null;
		}

		first.previous = newLeft;
		last.next = newRight || null;

		if (!newLeft) { this.firstChunk = first; }
		if (!newRight) { this.lastChunk = last; }
		return this;
	};

	MagicString$1.prototype.overwrite = function overwrite (start, end, content, options) {
		if (typeof content !== 'string') { throw new TypeError('replacement content must be a string'); }

		while (start < 0) { start += this.original.length; }
		while (end < 0) { end += this.original.length; }

		if (end > this.original.length) { throw new Error('end is out of bounds'); }
		if (start === end)
			{ throw new Error('Cannot overwrite a zero-length range – use appendLeft or prependRight instead'); }

		this._split(start);
		this._split(end);

		if (options === true) {
			if (!warned.storeName) {
				console.warn('The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'); // eslint-disable-line no-console
				warned.storeName = true;
			}

			options = { storeName: true };
		}
		var storeName = options !== undefined ? options.storeName : false;
		var contentOnly = options !== undefined ? options.contentOnly : false;

		if (storeName) {
			var original = this.original.slice(start, end);
			this.storedNames[original] = true;
		}

		var first = this.byStart[start];
		var last = this.byEnd[end];

		if (first) {
			if (end > first.end && first.next !== this.byStart[first.end]) {
				throw new Error('Cannot overwrite across a split point');
			}

			first.edit(content, storeName, contentOnly);

			if (first !== last) {
				var chunk = first.next;
				while (chunk !== last) {
					chunk.edit('', false);
					chunk = chunk.next;
				}

				chunk.edit('', false);
			}
		} else {
			// must be inserting at the end
			var newChunk = new Chunk(start, end, '').edit(content, storeName);

			// TODO last chunk in the array may not be the last chunk, if it's moved...
			last.next = newChunk;
			newChunk.previous = last;
		}
		return this;
	};

	MagicString$1.prototype.prepend = function prepend (content) {
		if (typeof content !== 'string') { throw new TypeError('outro content must be a string'); }

		this.intro = content + this.intro;
		return this;
	};

	MagicString$1.prototype.prependLeft = function prependLeft (index, content) {
		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }

		this._split(index);

		var chunk = this.byEnd[index];

		if (chunk) {
			chunk.prependLeft(content);
		} else {
			this.intro = content + this.intro;
		}
		return this;
	};

	MagicString$1.prototype.prependRight = function prependRight (index, content) {
		if (typeof content !== 'string') { throw new TypeError('inserted content must be a string'); }

		this._split(index);

		var chunk = this.byStart[index];

		if (chunk) {
			chunk.prependRight(content);
		} else {
			this.outro = content + this.outro;
		}
		return this;
	};

	MagicString$1.prototype.remove = function remove (start, end) {
		while (start < 0) { start += this.original.length; }
		while (end < 0) { end += this.original.length; }

		if (start === end) { return this; }

		if (start < 0 || end > this.original.length) { throw new Error('Character is out of bounds'); }
		if (start > end) { throw new Error('end must be greater than start'); }

		this._split(start);
		this._split(end);

		var chunk = this.byStart[start];

		while (chunk) {
			chunk.intro = '';
			chunk.outro = '';
			chunk.edit('');

			chunk = end > chunk.end ? this.byStart[chunk.end] : null;
		}
		return this;
	};

	MagicString$1.prototype.lastChar = function lastChar () {
		if (this.outro.length)
			{ return this.outro[this.outro.length - 1]; }
		var chunk = this.lastChunk;
		do {
			if (chunk.outro.length)
				{ return chunk.outro[chunk.outro.length - 1]; }
			if (chunk.content.length)
				{ return chunk.content[chunk.content.length - 1]; }
			if (chunk.intro.length)
				{ return chunk.intro[chunk.intro.length - 1]; }
		} while (chunk = chunk.previous);
		if (this.intro.length)
			{ return this.intro[this.intro.length - 1]; }
		return '';
	};

	MagicString$1.prototype.lastLine = function lastLine () {
		var lineIndex = this.outro.lastIndexOf(n);
		if (lineIndex !== -1)
			{ return this.outro.substr(lineIndex + 1); }
		var lineStr = this.outro;
		var chunk = this.lastChunk;
		do {
			if (chunk.outro.length > 0) {
				lineIndex = chunk.outro.lastIndexOf(n);
				if (lineIndex !== -1)
					{ return chunk.outro.substr(lineIndex + 1) + lineStr; }
				lineStr = chunk.outro + lineStr;
			}

			if (chunk.content.length > 0) {
				lineIndex = chunk.content.lastIndexOf(n);
				if (lineIndex !== -1)
					{ return chunk.content.substr(lineIndex + 1) + lineStr; }
				lineStr = chunk.content + lineStr;
			}

			if (chunk.intro.length > 0) {
				lineIndex = chunk.intro.lastIndexOf(n);
				if (lineIndex !== -1)
					{ return chunk.intro.substr(lineIndex + 1) + lineStr; }
				lineStr = chunk.intro + lineStr;
			}
		} while (chunk = chunk.previous);
		lineIndex = this.intro.lastIndexOf(n);
		if (lineIndex !== -1)
			{ return this.intro.substr(lineIndex + 1) + lineStr; }
		return this.intro + lineStr;
	};

	MagicString$1.prototype.slice = function slice (start, end) {
			if ( start === void 0 ) start = 0;
			if ( end === void 0 ) end = this.original.length;

		while (start < 0) { start += this.original.length; }
		while (end < 0) { end += this.original.length; }

		var result = '';

		// find start chunk
		var chunk = this.firstChunk;
		while (chunk && (chunk.start > start || chunk.end <= start)) {
			// found end chunk before start
			if (chunk.start < end && chunk.end >= end) {
				return result;
			}

			chunk = chunk.next;
		}

		if (chunk && chunk.edited && chunk.start !== start)
			{ throw new Error(("Cannot use replaced character " + start + " as slice start anchor.")); }

		var startChunk = chunk;
		while (chunk) {
			if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
				result += chunk.intro;
			}

			var containsEnd = chunk.start < end && chunk.end >= end;
			if (containsEnd && chunk.edited && chunk.end !== end)
				{ throw new Error(("Cannot use replaced character " + end + " as slice end anchor.")); }

			var sliceStart = startChunk === chunk ? start - chunk.start : 0;
			var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;

			result += chunk.content.slice(sliceStart, sliceEnd);

			if (chunk.outro && (!containsEnd || chunk.end === end)) {
				result += chunk.outro;
			}

			if (containsEnd) {
				break;
			}

			chunk = chunk.next;
		}

		return result;
	};

	// TODO deprecate this? not really very useful
	MagicString$1.prototype.snip = function snip (start, end) {
		var clone = this.clone();
		clone.remove(0, start);
		clone.remove(end, clone.original.length);

		return clone;
	};

	MagicString$1.prototype._split = function _split (index) {
		if (this.byStart[index] || this.byEnd[index]) { return; }

		var chunk = this.lastSearchedChunk;
		var searchForward = index > chunk.end;

		while (chunk) {
			if (chunk.contains(index)) { return this._splitChunk(chunk, index); }

			chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
		}
	};

	MagicString$1.prototype._splitChunk = function _splitChunk (chunk, index) {
		if (chunk.edited && chunk.content.length) {
			// zero-length edited chunks are a special case (overlapping replacements)
			var loc = getLocator(this.original)(index);
			throw new Error(
				("Cannot split a chunk that has already been edited (" + (loc.line) + ":" + (loc.column) + " – \"" + (chunk.original) + "\")")
			);
		}

		var newChunk = chunk.split(index);

		this.byEnd[index] = chunk;
		this.byStart[index] = newChunk;
		this.byEnd[newChunk.end] = newChunk;

		if (chunk === this.lastChunk) { this.lastChunk = newChunk; }

		this.lastSearchedChunk = chunk;
		return true;
	};

	MagicString$1.prototype.toString = function toString () {
		var str = this.intro;

		var chunk = this.firstChunk;
		while (chunk) {
			str += chunk.toString();
			chunk = chunk.next;
		}

		return str + this.outro;
	};

	MagicString$1.prototype.isEmpty = function isEmpty () {
		var chunk = this.firstChunk;
		do {
			if (chunk.intro.length && chunk.intro.trim() ||
					chunk.content.length && chunk.content.trim() ||
					chunk.outro.length && chunk.outro.trim())
				{ return false; }
		} while (chunk = chunk.next);
		return true;
	};

	MagicString$1.prototype.length = function length () {
		var chunk = this.firstChunk;
		var length = 0;
		do {
			length += chunk.intro.length + chunk.content.length + chunk.outro.length;
		} while (chunk = chunk.next);
		return length;
	};

	MagicString$1.prototype.trimLines = function trimLines () {
		return this.trim('[\\r\\n]');
	};

	MagicString$1.prototype.trim = function trim (charType) {
		return this.trimStart(charType).trimEnd(charType);
	};

	MagicString$1.prototype.trimEndAborted = function trimEndAborted (charType) {
		var rx = new RegExp((charType || '\\s') + '+$');

		this.outro = this.outro.replace(rx, '');
		if (this.outro.length) { return true; }

		var chunk = this.lastChunk;

		do {
			var end = chunk.end;
			var aborted = chunk.trimEnd(rx);

			// if chunk was trimmed, we have a new lastChunk
			if (chunk.end !== end) {
				if (this.lastChunk === chunk) {
					this.lastChunk = chunk.next;
				}

				this.byEnd[chunk.end] = chunk;
				this.byStart[chunk.next.start] = chunk.next;
				this.byEnd[chunk.next.end] = chunk.next;
			}

			if (aborted) { return true; }
			chunk = chunk.previous;
		} while (chunk);

		return false;
	};

	MagicString$1.prototype.trimEnd = function trimEnd (charType) {
		this.trimEndAborted(charType);
		return this;
	};
	MagicString$1.prototype.trimStartAborted = function trimStartAborted (charType) {
		var rx = new RegExp('^' + (charType || '\\s') + '+');

		this.intro = this.intro.replace(rx, '');
		if (this.intro.length) { return true; }

		var chunk = this.firstChunk;

		do {
			var end = chunk.end;
			var aborted = chunk.trimStart(rx);

			if (chunk.end !== end) {
				// special case...
				if (chunk === this.lastChunk) { this.lastChunk = chunk.next; }

				this.byEnd[chunk.end] = chunk;
				this.byStart[chunk.next.start] = chunk.next;
				this.byEnd[chunk.next.end] = chunk.next;
			}

			if (aborted) { return true; }
			chunk = chunk.next;
		} while (chunk);

		return false;
	};

	MagicString$1.prototype.trimStart = function trimStart (charType) {
		this.trimStartAborted(charType);
		return this;
	};

	var hasOwnProp = Object.prototype.hasOwnProperty;

	var Bundle = function Bundle(options) {
		if ( options === void 0 ) options = {};

		this.intro = options.intro || '';
		this.separator = options.separator !== undefined ? options.separator : '\n';
		this.sources = [];
		this.uniqueSources = [];
		this.uniqueSourceIndexByFilename = {};
	};

	Bundle.prototype.addSource = function addSource (source) {
		if (source instanceof MagicString$1) {
			return this.addSource({
				content: source,
				filename: source.filename,
				separator: this.separator
			});
		}

		if (!isObject$1(source) || !source.content) {
			throw new Error('bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`');
		}

		['filename', 'indentExclusionRanges', 'separator'].forEach(function (option) {
			if (!hasOwnProp.call(source, option)) { source[option] = source.content[option]; }
		});

		if (source.separator === undefined) {
			// TODO there's a bunch of this sort of thing, needs cleaning up
			source.separator = this.separator;
		}

		if (source.filename) {
			if (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {
				this.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;
				this.uniqueSources.push({ filename: source.filename, content: source.content.original });
			} else {
				var uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];
				if (source.content.original !== uniqueSource.content) {
					throw new Error(("Illegal source: same filename (" + (source.filename) + "), different contents"));
				}
			}
		}

		this.sources.push(source);
		return this;
	};

	Bundle.prototype.append = function append (str, options) {
		this.addSource({
			content: new MagicString$1(str),
			separator: (options && options.separator) || ''
		});

		return this;
	};

	Bundle.prototype.clone = function clone () {
		var bundle = new Bundle({
			intro: this.intro,
			separator: this.separator
		});

		this.sources.forEach(function (source) {
			bundle.addSource({
				filename: source.filename,
				content: source.content.clone(),
				separator: source.separator
			});
		});

		return bundle;
	};

	Bundle.prototype.generateDecodedMap = function generateDecodedMap (options) {
			var this$1$1 = this;
			if ( options === void 0 ) options = {};

		var names = [];
		this.sources.forEach(function (source) {
			Object.keys(source.content.storedNames).forEach(function (name) {
				if (!~names.indexOf(name)) { names.push(name); }
			});
		});

		var mappings = new Mappings(options.hires);

		if (this.intro) {
			mappings.advance(this.intro);
		}

		this.sources.forEach(function (source, i) {
			if (i > 0) {
				mappings.advance(this$1$1.separator);
			}

			var sourceIndex = source.filename ? this$1$1.uniqueSourceIndexByFilename[source.filename] : -1;
			var magicString = source.content;
			var locate = getLocator(magicString.original);

			if (magicString.intro) {
				mappings.advance(magicString.intro);
			}

			magicString.firstChunk.eachNext(function (chunk) {
				var loc = locate(chunk.start);

				if (chunk.intro.length) { mappings.advance(chunk.intro); }

				if (source.filename) {
					if (chunk.edited) {
						mappings.addEdit(
							sourceIndex,
							chunk.content,
							loc,
							chunk.storeName ? names.indexOf(chunk.original) : -1
						);
					} else {
						mappings.addUneditedChunk(
							sourceIndex,
							chunk,
							magicString.original,
							loc,
							magicString.sourcemapLocations
						);
					}
				} else {
					mappings.advance(chunk.content);
				}

				if (chunk.outro.length) { mappings.advance(chunk.outro); }
			});

			if (magicString.outro) {
				mappings.advance(magicString.outro);
			}
		});

		return {
			file: options.file ? options.file.split(/[/\\]/).pop() : null,
			sources: this.uniqueSources.map(function (source) {
				return options.file ? getRelativePath(options.file, source.filename) : source.filename;
			}),
			sourcesContent: this.uniqueSources.map(function (source) {
				return options.includeContent ? source.content : null;
			}),
			names: names,
			mappings: mappings.raw
		};
	};

	Bundle.prototype.generateMap = function generateMap (options) {
		return new SourceMap(this.generateDecodedMap(options));
	};

	Bundle.prototype.getIndentString = function getIndentString () {
		var indentStringCounts = {};

		this.sources.forEach(function (source) {
			var indentStr = source.content.indentStr;

			if (indentStr === null) { return; }

			if (!indentStringCounts[indentStr]) { indentStringCounts[indentStr] = 0; }
			indentStringCounts[indentStr] += 1;
		});

		return (
			Object.keys(indentStringCounts).sort(function (a, b) {
				return indentStringCounts[a] - indentStringCounts[b];
			})[0] || '\t'
		);
	};

	Bundle.prototype.indent = function indent (indentStr) {
			var this$1$1 = this;

		if (!arguments.length) {
			indentStr = this.getIndentString();
		}

		if (indentStr === '') { return this; } // noop

		var trailingNewline = !this.intro || this.intro.slice(-1) === '\n';

		this.sources.forEach(function (source, i) {
			var separator = source.separator !== undefined ? source.separator : this$1$1.separator;
			var indentStart = trailingNewline || (i > 0 && /\r?\n$/.test(separator));

			source.content.indent(indentStr, {
				exclude: source.indentExclusionRanges,
				indentStart: indentStart //: trailingNewline || /\r?\n$/.test( separator )  //true///\r?\n/.test( separator )
			});

			trailingNewline = source.content.lastChar() === '\n';
		});

		if (this.intro) {
			this.intro =
				indentStr +
				this.intro.replace(/^[^\n]/gm, function (match, index) {
					return index > 0 ? indentStr + match : match;
				});
		}

		return this;
	};

	Bundle.prototype.prepend = function prepend (str) {
		this.intro = str + this.intro;
		return this;
	};

	Bundle.prototype.toString = function toString () {
			var this$1$1 = this;

		var body = this.sources
			.map(function (source, i) {
				var separator = source.separator !== undefined ? source.separator : this$1$1.separator;
				var str = (i > 0 ? separator : '') + source.content.toString();

				return str;
			})
			.join('');

		return this.intro + body;
	};

	Bundle.prototype.isEmpty = function isEmpty () {
		if (this.intro.length && this.intro.trim())
			{ return false; }
		if (this.sources.some(function (source) { return !source.content.isEmpty(); }))
			{ return false; }
		return true;
	};

	Bundle.prototype.length = function length () {
		return this.sources.reduce(function (length, source) { return length + source.content.length(); }, this.intro.length);
	};

	Bundle.prototype.trimLines = function trimLines () {
		return this.trim('[\\r\\n]');
	};

	Bundle.prototype.trim = function trim (charType) {
		return this.trimStart(charType).trimEnd(charType);
	};

	Bundle.prototype.trimStart = function trimStart (charType) {
		var rx = new RegExp('^' + (charType || '\\s') + '+');
		this.intro = this.intro.replace(rx, '');

		if (!this.intro) {
			var source;
			var i = 0;

			do {
				source = this.sources[i++];
				if (!source) {
					break;
				}
			} while (!source.content.trimStartAborted(charType));
		}

		return this;
	};

	Bundle.prototype.trimEnd = function trimEnd (charType) {
		var rx = new RegExp((charType || '\\s') + '+$');

		var source;
		var i = this.sources.length - 1;

		do {
			source = this.sources[i--];
			if (!source) {
				this.intro = this.intro.replace(rx, '');
				break;
			}
		} while (!source.content.trimEndAborted(charType));

		return this;
	};

	var magicString_es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': MagicString$1,
		Bundle: Bundle,
		SourceMap: SourceMap
	});

	var require$$11 = /*@__PURE__*/getAugmentedNamespace(magicString_es);

	var estreeWalker$1 = {exports: {}};

	(function (module, exports) {
	(function (global, factory) {
		factory(exports) ;
	}(commonjsGlobal, (function (exports) {
		// @ts-check
		/** @typedef { import('estree').BaseNode} BaseNode */

		/** @typedef {{
			skip: () => void;
			remove: () => void;
			replace: (node: BaseNode) => void;
		}} WalkerContext */

		class WalkerBase {
			constructor() {
				/** @type {boolean} */
				this.should_skip = false;

				/** @type {boolean} */
				this.should_remove = false;

				/** @type {BaseNode | null} */
				this.replacement = null;

				/** @type {WalkerContext} */
				this.context = {
					skip: () => (this.should_skip = true),
					remove: () => (this.should_remove = true),
					replace: (node) => (this.replacement = node)
				};
			}

			/**
			 *
			 * @param {any} parent
			 * @param {string} prop
			 * @param {number} index
			 * @param {BaseNode} node
			 */
			replace(parent, prop, index, node) {
				if (parent) {
					if (index !== null) {
						parent[prop][index] = node;
					} else {
						parent[prop] = node;
					}
				}
			}

			/**
			 *
			 * @param {any} parent
			 * @param {string} prop
			 * @param {number} index
			 */
			remove(parent, prop, index) {
				if (parent) {
					if (index !== null) {
						parent[prop].splice(index, 1);
					} else {
						delete parent[prop];
					}
				}
			}
		}

		// @ts-check

		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./walker.js').WalkerContext} WalkerContext */

		/** @typedef {(
		 *    this: WalkerContext,
		 *    node: BaseNode,
		 *    parent: BaseNode,
		 *    key: string,
		 *    index: number
		 * ) => void} SyncHandler */

		class SyncWalker extends WalkerBase {
			/**
			 *
			 * @param {SyncHandler} enter
			 * @param {SyncHandler} leave
			 */
			constructor(enter, leave) {
				super();

				/** @type {SyncHandler} */
				this.enter = enter;

				/** @type {SyncHandler} */
				this.leave = leave;
			}

			/**
			 *
			 * @param {BaseNode} node
			 * @param {BaseNode} parent
			 * @param {string} [prop]
			 * @param {number} [index]
			 * @returns {BaseNode}
			 */
			visit(node, parent, prop, index) {
				if (node) {
					if (this.enter) {
						const _should_skip = this.should_skip;
						const _should_remove = this.should_remove;
						const _replacement = this.replacement;
						this.should_skip = false;
						this.should_remove = false;
						this.replacement = null;

						this.enter.call(this.context, node, parent, prop, index);

						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index, node);
						}

						if (this.should_remove) {
							this.remove(parent, prop, index);
						}

						const skipped = this.should_skip;
						const removed = this.should_remove;

						this.should_skip = _should_skip;
						this.should_remove = _should_remove;
						this.replacement = _replacement;

						if (skipped) return node;
						if (removed) return null;
					}

					for (const key in node) {
						const value = node[key];

						if (typeof value !== "object") {
							continue;
						} else if (Array.isArray(value)) {
							for (let i = 0; i < value.length; i += 1) {
								if (value[i] !== null && typeof value[i].type === 'string') {
									if (!this.visit(value[i], node, key, i)) {
										// removed
										i--;
									}
								}
							}
						} else if (value !== null && typeof value.type === "string") {
							this.visit(value, node, key, null);
						}
					}

					if (this.leave) {
						const _replacement = this.replacement;
						const _should_remove = this.should_remove;
						this.replacement = null;
						this.should_remove = false;

						this.leave.call(this.context, node, parent, prop, index);

						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index, node);
						}

						if (this.should_remove) {
							this.remove(parent, prop, index);
						}

						const removed = this.should_remove;

						this.replacement = _replacement;
						this.should_remove = _should_remove;

						if (removed) return null;
					}
				}

				return node;
			}
		}

		// @ts-check

		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./walker').WalkerContext} WalkerContext */

		/** @typedef {(
		 *    this: WalkerContext,
		 *    node: BaseNode,
		 *    parent: BaseNode,
		 *    key: string,
		 *    index: number
		 * ) => Promise<void>} AsyncHandler */

		class AsyncWalker extends WalkerBase {
			/**
			 *
			 * @param {AsyncHandler} enter
			 * @param {AsyncHandler} leave
			 */
			constructor(enter, leave) {
				super();

				/** @type {AsyncHandler} */
				this.enter = enter;

				/** @type {AsyncHandler} */
				this.leave = leave;
			}

			/**
			 *
			 * @param {BaseNode} node
			 * @param {BaseNode} parent
			 * @param {string} [prop]
			 * @param {number} [index]
			 * @returns {Promise<BaseNode>}
			 */
			async visit(node, parent, prop, index) {
				if (node) {
					if (this.enter) {
						const _should_skip = this.should_skip;
						const _should_remove = this.should_remove;
						const _replacement = this.replacement;
						this.should_skip = false;
						this.should_remove = false;
						this.replacement = null;

						await this.enter.call(this.context, node, parent, prop, index);

						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index, node);
						}

						if (this.should_remove) {
							this.remove(parent, prop, index);
						}

						const skipped = this.should_skip;
						const removed = this.should_remove;

						this.should_skip = _should_skip;
						this.should_remove = _should_remove;
						this.replacement = _replacement;

						if (skipped) return node;
						if (removed) return null;
					}

					for (const key in node) {
						const value = node[key];

						if (typeof value !== "object") {
							continue;
						} else if (Array.isArray(value)) {
							for (let i = 0; i < value.length; i += 1) {
								if (value[i] !== null && typeof value[i].type === 'string') {
									if (!(await this.visit(value[i], node, key, i))) {
										// removed
										i--;
									}
								}
							}
						} else if (value !== null && typeof value.type === "string") {
							await this.visit(value, node, key, null);
						}
					}

					if (this.leave) {
						const _replacement = this.replacement;
						const _should_remove = this.should_remove;
						this.replacement = null;
						this.should_remove = false;

						await this.leave.call(this.context, node, parent, prop, index);

						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index, node);
						}

						if (this.should_remove) {
							this.remove(parent, prop, index);
						}

						const removed = this.should_remove;

						this.replacement = _replacement;
						this.should_remove = _should_remove;

						if (removed) return null;
					}
				}

				return node;
			}
		}

		// @ts-check

		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./sync.js').SyncHandler} SyncHandler */
		/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */

		/**
		 *
		 * @param {BaseNode} ast
		 * @param {{
		 *   enter?: SyncHandler
		 *   leave?: SyncHandler
		 * }} walker
		 * @returns {BaseNode}
		 */
		function walk(ast, { enter, leave }) {
			const instance = new SyncWalker(enter, leave);
			return instance.visit(ast, null);
		}

		/**
		 *
		 * @param {BaseNode} ast
		 * @param {{
		 *   enter?: AsyncHandler
		 *   leave?: AsyncHandler
		 * }} walker
		 * @returns {Promise<BaseNode>}
		 */
		async function asyncWalk(ast, { enter, leave }) {
			const instance = new AsyncWalker(enter, leave);
			return await instance.visit(ast, null);
		}

		exports.asyncWalk = asyncWalk;
		exports.walk = walk;

		Object.defineProperty(exports, '__esModule', { value: true });

	})));
	}(estreeWalker$1, estreeWalker$1.exports));

	var iterator = function (Yallist) {
	  Yallist.prototype[Symbol.iterator] = function* () {
	    for (let walker = this.head; walker; walker = walker.next) {
	      yield walker.value;
	    }
	  };
	};

	var yallist = Yallist$1;

	Yallist$1.Node = Node;
	Yallist$1.create = Yallist$1;

	function Yallist$1 (list) {
	  var self = this;
	  if (!(self instanceof Yallist$1)) {
	    self = new Yallist$1();
	  }

	  self.tail = null;
	  self.head = null;
	  self.length = 0;

	  if (list && typeof list.forEach === 'function') {
	    list.forEach(function (item) {
	      self.push(item);
	    });
	  } else if (arguments.length > 0) {
	    for (var i = 0, l = arguments.length; i < l; i++) {
	      self.push(arguments[i]);
	    }
	  }

	  return self
	}

	Yallist$1.prototype.removeNode = function (node) {
	  if (node.list !== this) {
	    throw new Error('removing node which does not belong to this list')
	  }

	  var next = node.next;
	  var prev = node.prev;

	  if (next) {
	    next.prev = prev;
	  }

	  if (prev) {
	    prev.next = next;
	  }

	  if (node === this.head) {
	    this.head = next;
	  }
	  if (node === this.tail) {
	    this.tail = prev;
	  }

	  node.list.length--;
	  node.next = null;
	  node.prev = null;
	  node.list = null;

	  return next
	};

	Yallist$1.prototype.unshiftNode = function (node) {
	  if (node === this.head) {
	    return
	  }

	  if (node.list) {
	    node.list.removeNode(node);
	  }

	  var head = this.head;
	  node.list = this;
	  node.next = head;
	  if (head) {
	    head.prev = node;
	  }

	  this.head = node;
	  if (!this.tail) {
	    this.tail = node;
	  }
	  this.length++;
	};

	Yallist$1.prototype.pushNode = function (node) {
	  if (node === this.tail) {
	    return
	  }

	  if (node.list) {
	    node.list.removeNode(node);
	  }

	  var tail = this.tail;
	  node.list = this;
	  node.prev = tail;
	  if (tail) {
	    tail.next = node;
	  }

	  this.tail = node;
	  if (!this.head) {
	    this.head = node;
	  }
	  this.length++;
	};

	Yallist$1.prototype.push = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    push(this, arguments[i]);
	  }
	  return this.length
	};

	Yallist$1.prototype.unshift = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    unshift(this, arguments[i]);
	  }
	  return this.length
	};

	Yallist$1.prototype.pop = function () {
	  if (!this.tail) {
	    return undefined
	  }

	  var res = this.tail.value;
	  this.tail = this.tail.prev;
	  if (this.tail) {
	    this.tail.next = null;
	  } else {
	    this.head = null;
	  }
	  this.length--;
	  return res
	};

	Yallist$1.prototype.shift = function () {
	  if (!this.head) {
	    return undefined
	  }

	  var res = this.head.value;
	  this.head = this.head.next;
	  if (this.head) {
	    this.head.prev = null;
	  } else {
	    this.tail = null;
	  }
	  this.length--;
	  return res
	};

	Yallist$1.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this;
	  for (var walker = this.head, i = 0; walker !== null; i++) {
	    fn.call(thisp, walker.value, i, this);
	    walker = walker.next;
	  }
	};

	Yallist$1.prototype.forEachReverse = function (fn, thisp) {
	  thisp = thisp || this;
	  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
	    fn.call(thisp, walker.value, i, this);
	    walker = walker.prev;
	  }
	};

	Yallist$1.prototype.get = function (n) {
	  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.next;
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	};

	Yallist$1.prototype.getReverse = function (n) {
	  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.prev;
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	};

	Yallist$1.prototype.map = function (fn, thisp) {
	  thisp = thisp || this;
	  var res = new Yallist$1();
	  for (var walker = this.head; walker !== null;) {
	    res.push(fn.call(thisp, walker.value, this));
	    walker = walker.next;
	  }
	  return res
	};

	Yallist$1.prototype.mapReverse = function (fn, thisp) {
	  thisp = thisp || this;
	  var res = new Yallist$1();
	  for (var walker = this.tail; walker !== null;) {
	    res.push(fn.call(thisp, walker.value, this));
	    walker = walker.prev;
	  }
	  return res
	};

	Yallist$1.prototype.reduce = function (fn, initial) {
	  var acc;
	  var walker = this.head;
	  if (arguments.length > 1) {
	    acc = initial;
	  } else if (this.head) {
	    walker = this.head.next;
	    acc = this.head.value;
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }

	  for (var i = 0; walker !== null; i++) {
	    acc = fn(acc, walker.value, i);
	    walker = walker.next;
	  }

	  return acc
	};

	Yallist$1.prototype.reduceReverse = function (fn, initial) {
	  var acc;
	  var walker = this.tail;
	  if (arguments.length > 1) {
	    acc = initial;
	  } else if (this.tail) {
	    walker = this.tail.prev;
	    acc = this.tail.value;
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }

	  for (var i = this.length - 1; walker !== null; i--) {
	    acc = fn(acc, walker.value, i);
	    walker = walker.prev;
	  }

	  return acc
	};

	Yallist$1.prototype.toArray = function () {
	  var arr = new Array(this.length);
	  for (var i = 0, walker = this.head; walker !== null; i++) {
	    arr[i] = walker.value;
	    walker = walker.next;
	  }
	  return arr
	};

	Yallist$1.prototype.toArrayReverse = function () {
	  var arr = new Array(this.length);
	  for (var i = 0, walker = this.tail; walker !== null; i++) {
	    arr[i] = walker.value;
	    walker = walker.prev;
	  }
	  return arr
	};

	Yallist$1.prototype.slice = function (from, to) {
	  to = to || this.length;
	  if (to < 0) {
	    to += this.length;
	  }
	  from = from || 0;
	  if (from < 0) {
	    from += this.length;
	  }
	  var ret = new Yallist$1();
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0;
	  }
	  if (to > this.length) {
	    to = this.length;
	  }
	  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
	    walker = walker.next;
	  }
	  for (; walker !== null && i < to; i++, walker = walker.next) {
	    ret.push(walker.value);
	  }
	  return ret
	};

	Yallist$1.prototype.sliceReverse = function (from, to) {
	  to = to || this.length;
	  if (to < 0) {
	    to += this.length;
	  }
	  from = from || 0;
	  if (from < 0) {
	    from += this.length;
	  }
	  var ret = new Yallist$1();
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0;
	  }
	  if (to > this.length) {
	    to = this.length;
	  }
	  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
	    walker = walker.prev;
	  }
	  for (; walker !== null && i > from; i--, walker = walker.prev) {
	    ret.push(walker.value);
	  }
	  return ret
	};

	Yallist$1.prototype.splice = function (start, deleteCount /*, ...nodes */) {
	  if (start > this.length) {
	    start = this.length - 1;
	  }
	  if (start < 0) {
	    start = this.length + start;
	  }

	  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
	    walker = walker.next;
	  }

	  var ret = [];
	  for (var i = 0; walker && i < deleteCount; i++) {
	    ret.push(walker.value);
	    walker = this.removeNode(walker);
	  }
	  if (walker === null) {
	    walker = this.tail;
	  }

	  if (walker !== this.head && walker !== this.tail) {
	    walker = walker.prev;
	  }

	  for (var i = 2; i < arguments.length; i++) {
	    walker = insert(this, walker, arguments[i]);
	  }
	  return ret;
	};

	Yallist$1.prototype.reverse = function () {
	  var head = this.head;
	  var tail = this.tail;
	  for (var walker = head; walker !== null; walker = walker.prev) {
	    var p = walker.prev;
	    walker.prev = walker.next;
	    walker.next = p;
	  }
	  this.head = tail;
	  this.tail = head;
	  return this
	};

	function insert (self, node, value) {
	  var inserted = node === self.head ?
	    new Node(value, null, node, self) :
	    new Node(value, node, node.next, self);

	  if (inserted.next === null) {
	    self.tail = inserted;
	  }
	  if (inserted.prev === null) {
	    self.head = inserted;
	  }

	  self.length++;

	  return inserted
	}

	function push (self, item) {
	  self.tail = new Node(item, self.tail, null, self);
	  if (!self.head) {
	    self.head = self.tail;
	  }
	  self.length++;
	}

	function unshift (self, item) {
	  self.head = new Node(item, null, self.head, self);
	  if (!self.tail) {
	    self.tail = self.head;
	  }
	  self.length++;
	}

	function Node (value, prev, next, list) {
	  if (!(this instanceof Node)) {
	    return new Node(value, prev, next, list)
	  }

	  this.list = list;
	  this.value = value;

	  if (prev) {
	    prev.next = this;
	    this.prev = prev;
	  } else {
	    this.prev = null;
	  }

	  if (next) {
	    next.prev = this;
	    this.next = next;
	  } else {
	    this.next = null;
	  }
	}

	try {
	  // add if support for Symbol.iterator is present
	  iterator(Yallist$1);
	} catch (er) {}

	// A linked list to keep track of recently-used-ness
	const Yallist = yallist;

	const MAX = Symbol('max');
	const LENGTH = Symbol('length');
	const LENGTH_CALCULATOR = Symbol('lengthCalculator');
	const ALLOW_STALE = Symbol('allowStale');
	const MAX_AGE = Symbol('maxAge');
	const DISPOSE = Symbol('dispose');
	const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
	const LRU_LIST = Symbol('lruList');
	const CACHE = Symbol('cache');
	const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

	const naiveLength = () => 1;

	// lruList is a yallist where the head is the youngest
	// item, and the tail is the oldest.  the list contains the Hit
	// objects as the entries.
	// Each Hit object has a reference to its Yallist.Node.  This
	// never changes.
	//
	// cache is a Map (or PseudoMap) that matches the keys to
	// the Yallist.Node object.
	class LRUCache {
	  constructor (options) {
	    if (typeof options === 'number')
	      options = { max: options };

	    if (!options)
	      options = {};

	    if (options.max && (typeof options.max !== 'number' || options.max < 0))
	      throw new TypeError('max must be a non-negative number')
	    // Kind of weird to have a default max of Infinity, but oh well.
	    this[MAX] = options.max || Infinity;

	    const lc = options.length || naiveLength;
	    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
	    this[ALLOW_STALE] = options.stale || false;
	    if (options.maxAge && typeof options.maxAge !== 'number')
	      throw new TypeError('maxAge must be a number')
	    this[MAX_AGE] = options.maxAge || 0;
	    this[DISPOSE] = options.dispose;
	    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
	    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
	    this.reset();
	  }

	  // resize the cache when the max changes.
	  set max (mL) {
	    if (typeof mL !== 'number' || mL < 0)
	      throw new TypeError('max must be a non-negative number')

	    this[MAX] = mL || Infinity;
	    trim(this);
	  }
	  get max () {
	    return this[MAX]
	  }

	  set allowStale (allowStale) {
	    this[ALLOW_STALE] = !!allowStale;
	  }
	  get allowStale () {
	    return this[ALLOW_STALE]
	  }

	  set maxAge (mA) {
	    if (typeof mA !== 'number')
	      throw new TypeError('maxAge must be a non-negative number')

	    this[MAX_AGE] = mA;
	    trim(this);
	  }
	  get maxAge () {
	    return this[MAX_AGE]
	  }

	  // resize the cache when the lengthCalculator changes.
	  set lengthCalculator (lC) {
	    if (typeof lC !== 'function')
	      lC = naiveLength;

	    if (lC !== this[LENGTH_CALCULATOR]) {
	      this[LENGTH_CALCULATOR] = lC;
	      this[LENGTH] = 0;
	      this[LRU_LIST].forEach(hit => {
	        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
	        this[LENGTH] += hit.length;
	      });
	    }
	    trim(this);
	  }
	  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

	  get length () { return this[LENGTH] }
	  get itemCount () { return this[LRU_LIST].length }

	  rforEach (fn, thisp) {
	    thisp = thisp || this;
	    for (let walker = this[LRU_LIST].tail; walker !== null;) {
	      const prev = walker.prev;
	      forEachStep(this, fn, walker, thisp);
	      walker = prev;
	    }
	  }

	  forEach (fn, thisp) {
	    thisp = thisp || this;
	    for (let walker = this[LRU_LIST].head; walker !== null;) {
	      const next = walker.next;
	      forEachStep(this, fn, walker, thisp);
	      walker = next;
	    }
	  }

	  keys () {
	    return this[LRU_LIST].toArray().map(k => k.key)
	  }

	  values () {
	    return this[LRU_LIST].toArray().map(k => k.value)
	  }

	  reset () {
	    if (this[DISPOSE] &&
	        this[LRU_LIST] &&
	        this[LRU_LIST].length) {
	      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
	    }

	    this[CACHE] = new Map(); // hash of items by key
	    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
	    this[LENGTH] = 0; // length of items in the list
	  }

	  dump () {
	    return this[LRU_LIST].map(hit =>
	      isStale(this, hit) ? false : {
	        k: hit.key,
	        v: hit.value,
	        e: hit.now + (hit.maxAge || 0)
	      }).toArray().filter(h => h)
	  }

	  dumpLru () {
	    return this[LRU_LIST]
	  }

	  set (key, value, maxAge) {
	    maxAge = maxAge || this[MAX_AGE];

	    if (maxAge && typeof maxAge !== 'number')
	      throw new TypeError('maxAge must be a number')

	    const now = maxAge ? Date.now() : 0;
	    const len = this[LENGTH_CALCULATOR](value, key);

	    if (this[CACHE].has(key)) {
	      if (len > this[MAX]) {
	        del(this, this[CACHE].get(key));
	        return false
	      }

	      const node = this[CACHE].get(key);
	      const item = node.value;

	      // dispose of the old one before overwriting
	      // split out into 2 ifs for better coverage tracking
	      if (this[DISPOSE]) {
	        if (!this[NO_DISPOSE_ON_SET])
	          this[DISPOSE](key, item.value);
	      }

	      item.now = now;
	      item.maxAge = maxAge;
	      item.value = value;
	      this[LENGTH] += len - item.length;
	      item.length = len;
	      this.get(key);
	      trim(this);
	      return true
	    }

	    const hit = new Entry(key, value, len, now, maxAge);

	    // oversized objects fall out of cache automatically.
	    if (hit.length > this[MAX]) {
	      if (this[DISPOSE])
	        this[DISPOSE](key, value);

	      return false
	    }

	    this[LENGTH] += hit.length;
	    this[LRU_LIST].unshift(hit);
	    this[CACHE].set(key, this[LRU_LIST].head);
	    trim(this);
	    return true
	  }

	  has (key) {
	    if (!this[CACHE].has(key)) return false
	    const hit = this[CACHE].get(key).value;
	    return !isStale(this, hit)
	  }

	  get (key) {
	    return get(this, key, true)
	  }

	  peek (key) {
	    return get(this, key, false)
	  }

	  pop () {
	    const node = this[LRU_LIST].tail;
	    if (!node)
	      return null

	    del(this, node);
	    return node.value
	  }

	  del (key) {
	    del(this, this[CACHE].get(key));
	  }

	  load (arr) {
	    // reset the cache
	    this.reset();

	    const now = Date.now();
	    // A previous serialized cache has the most recent items first
	    for (let l = arr.length - 1; l >= 0; l--) {
	      const hit = arr[l];
	      const expiresAt = hit.e || 0;
	      if (expiresAt === 0)
	        // the item was created without expiration in a non aged cache
	        this.set(hit.k, hit.v);
	      else {
	        const maxAge = expiresAt - now;
	        // dont add already expired items
	        if (maxAge > 0) {
	          this.set(hit.k, hit.v, maxAge);
	        }
	      }
	    }
	  }

	  prune () {
	    this[CACHE].forEach((value, key) => get(this, key, false));
	  }
	}

	const get = (self, key, doUse) => {
	  const node = self[CACHE].get(key);
	  if (node) {
	    const hit = node.value;
	    if (isStale(self, hit)) {
	      del(self, node);
	      if (!self[ALLOW_STALE])
	        return undefined
	    } else {
	      if (doUse) {
	        if (self[UPDATE_AGE_ON_GET])
	          node.value.now = Date.now();
	        self[LRU_LIST].unshiftNode(node);
	      }
	    }
	    return hit.value
	  }
	};

	const isStale = (self, hit) => {
	  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
	    return false

	  const diff = Date.now() - hit.now;
	  return hit.maxAge ? diff > hit.maxAge
	    : self[MAX_AGE] && (diff > self[MAX_AGE])
	};

	const trim = self => {
	  if (self[LENGTH] > self[MAX]) {
	    for (let walker = self[LRU_LIST].tail;
	      self[LENGTH] > self[MAX] && walker !== null;) {
	      // We know that we're about to delete this one, and also
	      // what the next least recently used key will be, so just
	      // go ahead and set it now.
	      const prev = walker.prev;
	      del(self, walker);
	      walker = prev;
	    }
	  }
	};

	const del = (self, node) => {
	  if (node) {
	    const hit = node.value;
	    if (self[DISPOSE])
	      self[DISPOSE](hit.key, hit.value);

	    self[LENGTH] -= hit.length;
	    self[CACHE].delete(hit.key);
	    self[LRU_LIST].removeNode(node);
	  }
	};

	class Entry {
	  constructor (key, value, length, now, maxAge) {
	    this.key = key;
	    this.value = value;
	    this.length = length;
	    this.now = now;
	    this.maxAge = maxAge || 0;
	  }
	}

	const forEachStep = (self, fn, node, thisp) => {
	  let hit = node.value;
	  if (isStale(self, hit)) {
	    del(self, node);
	    if (!self[ALLOW_STALE])
	      hit = undefined;
	  }
	  if (hit)
	    fn.call(thisp, hit.value, hit.key, self);
	};

	var _lruCache_5_1_1_lruCache = LRUCache;

	var build = {exports: {}};

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsAstral = '[' + rsAstralRange + ']',
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	  rsUpper + '+' + rsOptUpperContr,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 'ss'
	};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	  return hasUnicode(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var Symbol$1 = root.Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function(string) {
	    string = toString(string);

	    var strSymbols = hasUnicode(string)
	      ? stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar--');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__FOO_BAR__');
	 * // => 'fooBar'
	 */
	var camelCase = createCompounder(function(result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize(word) : word);
	});

	/**
	 * Converts the first character of `string` to upper case and the remaining
	 * to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('FRED');
	 * // => 'Fred'
	 */
	function capitalize(string) {
	  return upperFirst(toString(string).toLowerCase());
	}

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst = createCaseFirst('toUpperCase');

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	var _lodash_camelcase_4_3_0_lodash_camelcase = camelCase;

	var lib$3 = {};

	var lib$2 = {exports: {}};

	var parse$6 = {exports: {}};

	var util = {};

	var unicode$1 = {};

	Object.defineProperty(unicode$1,"__esModule",{value:true});unicode$1.Space_Separator=/[\u1680\u2000-\u200A\u202F\u205F\u3000]/;unicode$1.ID_Start=/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/;unicode$1.ID_Continue=/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;

	Object.defineProperty(util,'__esModule',{value:true});util.isSpaceSeparator=isSpaceSeparator;util.isIdStartChar=isIdStartChar;util.isIdContinueChar=isIdContinueChar;util.isDigit=isDigit;util.isHexDigit=isHexDigit;var _unicode=unicode$1;var unicode=_interopRequireWildcard(_unicode);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else {var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj}}function isSpaceSeparator(c){return unicode.Space_Separator.test(c)}function isIdStartChar(c){return c>='a'&&c<='z'||c>='A'&&c<='Z'||c==='$'||c==='_'||unicode.ID_Start.test(c)}function isIdContinueChar(c){return c>='a'&&c<='z'||c>='A'&&c<='Z'||c>='0'&&c<='9'||c==='$'||c==='_'||c==='\u200C'||c==='\u200D'||unicode.ID_Continue.test(c)}function isDigit(c){return /[0-9]/.test(c)}function isHexDigit(c){return /[0-9A-Fa-f]/.test(c)}

	(function (module, exports) {
	Object.defineProperty(exports,'__esModule',{value:true});var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};exports.default=parse;var _util=util;var util$1=_interopRequireWildcard(_util);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else {var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj}}var source=void 0;var parseState=void 0;var stack=void 0;var pos=void 0;var line=void 0;var column=void 0;var token=void 0;var key=void 0;var root=void 0;function parse(text,reviver){source=String(text);parseState='start';stack=[];pos=0;line=1;column=0;token=undefined;key=undefined;root=undefined;do{token=lex();parseStates[parseState]();}while(token.type!=='eof');if(typeof reviver==='function'){return internalize({'':root},'',reviver)}return root}function internalize(holder,name,reviver){var value=holder[name];if(value!=null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'){for(var _key in value){var replacement=internalize(value,_key,reviver);if(replacement===undefined){delete value[_key];}else {value[_key]=replacement;}}}return reviver.call(holder,name,value)}var lexState=void 0;var buffer=void 0;var doubleQuote=void 0;var _sign=void 0;var c=void 0;function lex(){lexState='default';buffer='';doubleQuote=false;_sign=1;for(;;){c=peek();var _token=lexStates[lexState]();if(_token){return _token}}}function peek(){if(source[pos]){return String.fromCodePoint(source.codePointAt(pos))}}function read(){var c=peek();if(c==='\n'){line++;column=0;}else if(c){column+=c.length;}else {column++;}if(c){pos+=c.length;}return c}var lexStates={default:function _default(){switch(c){case'\t':case'\x0B':case'\f':case' ':case'\xA0':case'\uFEFF':case'\n':case'\r':case'\u2028':case'\u2029':read();return;case'/':read();lexState='comment';return;case undefined:read();return newToken('eof');}if(util$1.isSpaceSeparator(c)){read();return}return lexStates[parseState]()},comment:function comment(){switch(c){case'*':read();lexState='multiLineComment';return;case'/':read();lexState='singleLineComment';return;}throw invalidChar(read())},multiLineComment:function multiLineComment(){switch(c){case'*':read();lexState='multiLineCommentAsterisk';return;case undefined:throw invalidChar(read());}read();},multiLineCommentAsterisk:function multiLineCommentAsterisk(){switch(c){case'*':read();return;case'/':read();lexState='default';return;case undefined:throw invalidChar(read());}read();lexState='multiLineComment';},singleLineComment:function singleLineComment(){switch(c){case'\n':case'\r':case'\u2028':case'\u2029':read();lexState='default';return;case undefined:read();return newToken('eof');}read();},value:function value(){switch(c){case'{':case'[':return newToken('punctuator',read());case'n':read();literal('ull');return newToken('null',null);case't':read();literal('rue');return newToken('boolean',true);case'f':read();literal('alse');return newToken('boolean',false);case'-':case'+':if(read()==='-'){_sign=-1;}lexState='sign';return;case'.':buffer=read();lexState='decimalPointLeading';return;case'0':buffer=read();lexState='zero';return;case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':buffer=read();lexState='decimalInteger';return;case'I':read();literal('nfinity');return newToken('numeric',Infinity);case'N':read();literal('aN');return newToken('numeric',NaN);case'"':case'\'':doubleQuote=read()==='"';buffer='';lexState='string';return;}throw invalidChar(read())},identifierNameStartEscape:function identifierNameStartEscape(){if(c!=='u'){throw invalidChar(read())}read();var u=unicodeEscape();switch(u){case'$':case'_':break;default:if(!util$1.isIdStartChar(u)){throw invalidIdentifier()}break;}buffer+=u;lexState='identifierName';},identifierName:function identifierName(){switch(c){case'$':case'_':case'\u200C':case'\u200D':buffer+=read();return;case'\\':read();lexState='identifierNameEscape';return;}if(util$1.isIdContinueChar(c)){buffer+=read();return}return newToken('identifier',buffer)},identifierNameEscape:function identifierNameEscape(){if(c!=='u'){throw invalidChar(read())}read();var u=unicodeEscape();switch(u){case'$':case'_':case'\u200C':case'\u200D':break;default:if(!util$1.isIdContinueChar(u)){throw invalidIdentifier()}break;}buffer+=u;lexState='identifierName';},sign:function sign(){switch(c){case'.':buffer=read();lexState='decimalPointLeading';return;case'0':buffer=read();lexState='zero';return;case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':buffer=read();lexState='decimalInteger';return;case'I':read();literal('nfinity');return newToken('numeric',_sign*Infinity);case'N':read();literal('aN');return newToken('numeric',NaN);}throw invalidChar(read())},zero:function zero(){switch(c){case'.':buffer+=read();lexState='decimalPoint';return;case'e':case'E':buffer+=read();lexState='decimalExponent';return;case'x':case'X':buffer+=read();lexState='hexadecimal';return;}return newToken('numeric',_sign*0)},decimalInteger:function decimalInteger(){switch(c){case'.':buffer+=read();lexState='decimalPoint';return;case'e':case'E':buffer+=read();lexState='decimalExponent';return;}if(util$1.isDigit(c)){buffer+=read();return}return newToken('numeric',_sign*Number(buffer))},decimalPointLeading:function decimalPointLeading(){if(util$1.isDigit(c)){buffer+=read();lexState='decimalFraction';return}throw invalidChar(read())},decimalPoint:function decimalPoint(){switch(c){case'e':case'E':buffer+=read();lexState='decimalExponent';return;}if(util$1.isDigit(c)){buffer+=read();lexState='decimalFraction';return}return newToken('numeric',_sign*Number(buffer))},decimalFraction:function decimalFraction(){switch(c){case'e':case'E':buffer+=read();lexState='decimalExponent';return;}if(util$1.isDigit(c)){buffer+=read();return}return newToken('numeric',_sign*Number(buffer))},decimalExponent:function decimalExponent(){switch(c){case'+':case'-':buffer+=read();lexState='decimalExponentSign';return;}if(util$1.isDigit(c)){buffer+=read();lexState='decimalExponentInteger';return}throw invalidChar(read())},decimalExponentSign:function decimalExponentSign(){if(util$1.isDigit(c)){buffer+=read();lexState='decimalExponentInteger';return}throw invalidChar(read())},decimalExponentInteger:function decimalExponentInteger(){if(util$1.isDigit(c)){buffer+=read();return}return newToken('numeric',_sign*Number(buffer))},hexadecimal:function hexadecimal(){if(util$1.isHexDigit(c)){buffer+=read();lexState='hexadecimalInteger';return}throw invalidChar(read())},hexadecimalInteger:function hexadecimalInteger(){if(util$1.isHexDigit(c)){buffer+=read();return}return newToken('numeric',_sign*Number(buffer))},string:function string(){switch(c){case'\\':read();buffer+=escape();return;case'"':if(doubleQuote){read();return newToken('string',buffer)}buffer+=read();return;case'\'':if(!doubleQuote){read();return newToken('string',buffer)}buffer+=read();return;case'\n':case'\r':throw invalidChar(read());case'\u2028':case'\u2029':separatorChar(c);break;case undefined:throw invalidChar(read());}buffer+=read();},start:function start(){switch(c){case'{':case'[':return newToken('punctuator',read());}lexState='value';},beforePropertyName:function beforePropertyName(){switch(c){case'$':case'_':buffer=read();lexState='identifierName';return;case'\\':read();lexState='identifierNameStartEscape';return;case'}':return newToken('punctuator',read());case'"':case'\'':doubleQuote=read()==='"';lexState='string';return;}if(util$1.isIdStartChar(c)){buffer+=read();lexState='identifierName';return}throw invalidChar(read())},afterPropertyName:function afterPropertyName(){if(c===':'){return newToken('punctuator',read())}throw invalidChar(read())},beforePropertyValue:function beforePropertyValue(){lexState='value';},afterPropertyValue:function afterPropertyValue(){switch(c){case',':case'}':return newToken('punctuator',read());}throw invalidChar(read())},beforeArrayValue:function beforeArrayValue(){if(c===']'){return newToken('punctuator',read())}lexState='value';},afterArrayValue:function afterArrayValue(){switch(c){case',':case']':return newToken('punctuator',read());}throw invalidChar(read())},end:function end(){throw invalidChar(read())}};function newToken(type,value){return {type:type,value:value,line:line,column:column}}function literal(s){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=s[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var _c=_step.value;var p=peek();if(p!==_c){throw invalidChar(read())}read();}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError}}}}function escape(){var c=peek();switch(c){case'b':read();return '\b';case'f':read();return '\f';case'n':read();return '\n';case'r':read();return '\r';case't':read();return '\t';case'v':read();return '\x0B';case'0':read();if(util$1.isDigit(peek())){throw invalidChar(read())}return '\0';case'x':read();return hexEscape();case'u':read();return unicodeEscape();case'\n':case'\u2028':case'\u2029':read();return '';case'\r':read();if(peek()==='\n'){read();}return '';case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':throw invalidChar(read());case undefined:throw invalidChar(read());}return read()}function hexEscape(){var buffer='';var c=peek();if(!util$1.isHexDigit(c)){throw invalidChar(read())}buffer+=read();c=peek();if(!util$1.isHexDigit(c)){throw invalidChar(read())}buffer+=read();return String.fromCodePoint(parseInt(buffer,16))}function unicodeEscape(){var buffer='';var count=4;while(count-->0){var _c2=peek();if(!util$1.isHexDigit(_c2)){throw invalidChar(read())}buffer+=read();}return String.fromCodePoint(parseInt(buffer,16))}var parseStates={start:function start(){if(token.type==='eof'){throw invalidEOF()}push();},beforePropertyName:function beforePropertyName(){switch(token.type){case'identifier':case'string':key=token.value;parseState='afterPropertyName';return;case'punctuator':pop();return;case'eof':throw invalidEOF();}},afterPropertyName:function afterPropertyName(){if(token.type==='eof'){throw invalidEOF()}parseState='beforePropertyValue';},beforePropertyValue:function beforePropertyValue(){if(token.type==='eof'){throw invalidEOF()}push();},beforeArrayValue:function beforeArrayValue(){if(token.type==='eof'){throw invalidEOF()}if(token.type==='punctuator'&&token.value===']'){pop();return}push();},afterPropertyValue:function afterPropertyValue(){if(token.type==='eof'){throw invalidEOF()}switch(token.value){case',':parseState='beforePropertyName';return;case'}':pop();}},afterArrayValue:function afterArrayValue(){if(token.type==='eof'){throw invalidEOF()}switch(token.value){case',':parseState='beforeArrayValue';return;case']':pop();}},end:function end(){}};function push(){var value=void 0;switch(token.type){case'punctuator':switch(token.value){case'{':value={};break;case'[':value=[];break;}break;case'null':case'boolean':case'numeric':case'string':value=token.value;break;}if(root===undefined){root=value;}else {var parent=stack[stack.length-1];if(Array.isArray(parent)){parent.push(value);}else {parent[key]=value;}}if(value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'){stack.push(value);if(Array.isArray(value)){parseState='beforeArrayValue';}else {parseState='beforePropertyName';}}else {var current=stack[stack.length-1];if(current==null){parseState='end';}else if(Array.isArray(current)){parseState='afterArrayValue';}else {parseState='afterPropertyValue';}}}function pop(){stack.pop();var current=stack[stack.length-1];if(current==null){parseState='end';}else if(Array.isArray(current)){parseState='afterArrayValue';}else {parseState='afterPropertyValue';}}function invalidChar(c){if(c===undefined){return syntaxError('JSON5: invalid end of input at '+line+':'+column)}return syntaxError('JSON5: invalid character \''+formatChar(c)+'\' at '+line+':'+column)}function invalidEOF(){return syntaxError('JSON5: invalid end of input at '+line+':'+column)}function invalidIdentifier(){column-=5;return syntaxError('JSON5: invalid identifier character at '+line+':'+column)}function separatorChar(c){console.warn('JSON5: \''+c+'\' is not valid ECMAScript; consider escaping');}function formatChar(c){var replacements={'\'':'\\\'','"':'\\"','\\':'\\\\','\b':'\\b','\f':'\\f','\n':'\\n','\r':'\\r','\t':'\\t','\x0B':'\\v','\0':'\\0','\u2028':'\\u2028','\u2029':'\\u2029'};if(replacements[c]){return replacements[c]}if(c<' '){var hexString=c.charCodeAt(0).toString(16);return '\\x'+('00'+hexString).substring(hexString.length)}return c}function syntaxError(message){var err=new SyntaxError(message);err.lineNumber=line;err.columnNumber=column;return err}module.exports=exports['default'];
	}(parse$6, parse$6.exports));

	var stringify$3 = {exports: {}};

	(function (module, exports) {
	Object.defineProperty(exports,'__esModule',{value:true});var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};exports.default=stringify;var _util=util;var util$1=_interopRequireWildcard(_util);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else {var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj}}function stringify(value,replacer,space){var stack=[];var indent='';var propertyList=void 0;var replacerFunc=void 0;var gap='';var quote=void 0;if(replacer!=null&&(typeof replacer==='undefined'?'undefined':_typeof(replacer))==='object'&&!Array.isArray(replacer)){space=replacer.space;quote=replacer.quote;replacer=replacer.replacer;}if(typeof replacer==='function'){replacerFunc=replacer;}else if(Array.isArray(replacer)){propertyList=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=replacer[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var v=_step.value;var item=void 0;if(typeof v==='string'){item=v;}else if(typeof v==='number'||v instanceof String||v instanceof Number){item=String(v);}if(item!==undefined&&propertyList.indexOf(item)<0){propertyList.push(item);}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError}}}}if(space instanceof Number){space=Number(space);}else if(space instanceof String){space=String(space);}if(typeof space==='number'){if(space>0){space=Math.min(10,Math.floor(space));gap='          '.substr(0,space);}}else if(typeof space==='string'){gap=space.substr(0,10);}return serializeProperty('',{'':value});function serializeProperty(key,holder){var value=holder[key];if(value!=null){if(typeof value.toJSON5==='function'){value=value.toJSON5(key);}else if(typeof value.toJSON==='function'){value=value.toJSON(key);}}if(replacerFunc){value=replacerFunc.call(holder,key,value);}if(value instanceof Number){value=Number(value);}else if(value instanceof String){value=String(value);}else if(value instanceof Boolean){value=value.valueOf();}switch(value){case null:return 'null';case true:return 'true';case false:return 'false';}if(typeof value==='string'){return quoteString(value)}if(typeof value==='number'){return String(value)}if((typeof value==='undefined'?'undefined':_typeof(value))==='object'){return Array.isArray(value)?serializeArray(value):serializeObject(value)}return undefined}function quoteString(value){var quotes={'\'':0.1,'"':0.2};var replacements={'\'':'\\\'','"':'\\"','\\':'\\\\','\b':'\\b','\f':'\\f','\n':'\\n','\r':'\\r','\t':'\\t','\x0B':'\\v','\0':'\\0','\u2028':'\\u2028','\u2029':'\\u2029'};var product='';var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=value[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var c=_step2.value;switch(c){case'\'':case'"':quotes[c]++;product+=c;continue;}if(replacements[c]){product+=replacements[c];continue}if(c<' '){var hexString=c.charCodeAt(0).toString(16);product+='\\x'+('00'+hexString).substring(hexString.length);continue}product+=c;}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2}}}var quoteChar=quote||Object.keys(quotes).reduce(function(a,b){return quotes[a]<quotes[b]?a:b});product=product.replace(new RegExp(quoteChar,'g'),replacements[quoteChar]);return quoteChar+product+quoteChar}function serializeObject(value){if(stack.indexOf(value)>=0){throw TypeError('Converting circular structure to JSON5')}stack.push(value);var stepback=indent;indent=indent+gap;var keys=propertyList||Object.keys(value);var partial=[];var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=keys[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var key=_step3.value;var propertyString=serializeProperty(key,value);if(propertyString!==undefined){var member=serializeKey(key)+':';if(gap!==''){member+=' ';}member+=propertyString;partial.push(member);}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3}}}var final=void 0;if(partial.length===0){final='{}';}else {var properties=void 0;if(gap===''){properties=partial.join(',');final='{'+properties+'}';}else {var separator=',\n'+indent;properties=partial.join(separator);final='{\n'+indent+properties+',\n'+stepback+'}';}}stack.pop();indent=stepback;return final}function serializeKey(key){if(key.length===0){return quoteString(key)}var firstChar=String.fromCodePoint(key.codePointAt(0));if(!util$1.isIdStartChar(firstChar)){return quoteString(key)}for(var i=firstChar.length;i<key.length;i++){if(!util$1.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))){return quoteString(key)}}return key}function serializeArray(value){if(stack.indexOf(value)>=0){throw TypeError('Converting circular structure to JSON5')}stack.push(value);var stepback=indent;indent=indent+gap;var partial=[];for(var i=0;i<value.length;i++){var propertyString=serializeProperty(String(i),value);partial.push(propertyString!==undefined?propertyString:'null');}var final=void 0;if(partial.length===0){final='[]';}else {if(gap===''){var properties=partial.join(',');final='['+properties+']';}else {var separator=',\n'+indent;var _properties=partial.join(separator);final='[\n'+indent+_properties+',\n'+stepback+']';}}stack.pop();indent=stepback;return final}}module.exports=exports['default'];
	}(stringify$3, stringify$3.exports));

	(function (module, exports) {
	Object.defineProperty(exports,'__esModule',{value:true});var _parse=parse$6.exports;var _parse2=_interopRequireDefault(_parse);var _stringify=stringify$3.exports;var _stringify2=_interopRequireDefault(_stringify);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.default={parse:_parse2.default,stringify:_stringify2.default};module.exports=exports['default'];
	}(lib$2, lib$2.exports));

	const JSON5 = lib$2.exports;

	const specialValues = {
	  null: null,
	  true: true,
	  false: false,
	};

	function parseQuery$2(query) {
	  if (query.substr(0, 1) !== '?') {
	    throw new Error(
	      "A valid query string passed to parseQuery should begin with '?'"
	    );
	  }

	  query = query.substr(1);

	  if (!query) {
	    return {};
	  }

	  if (query.substr(0, 1) === '{' && query.substr(-1) === '}') {
	    return JSON5.parse(query);
	  }

	  const queryArgs = query.split(/[,&]/g);
	  const result = {};

	  queryArgs.forEach((arg) => {
	    const idx = arg.indexOf('=');

	    if (idx >= 0) {
	      let name = arg.substr(0, idx);
	      let value = decodeURIComponent(arg.substr(idx + 1));

	      if (specialValues.hasOwnProperty(value)) {
	        value = specialValues[value];
	      }

	      if (name.substr(-2) === '[]') {
	        name = decodeURIComponent(name.substr(0, name.length - 2));

	        if (!Array.isArray(result[name])) {
	          result[name] = [];
	        }

	        result[name].push(value);
	      } else {
	        name = decodeURIComponent(name);
	        result[name] = value;
	      }
	    } else {
	      if (arg.substr(0, 1) === '-') {
	        result[decodeURIComponent(arg.substr(1))] = false;
	      } else if (arg.substr(0, 1) === '+') {
	        result[decodeURIComponent(arg.substr(1))] = true;
	      } else {
	        result[decodeURIComponent(arg)] = true;
	      }
	    }
	  });

	  return result;
	}

	var parseQuery_1 = parseQuery$2;

	const parseQuery$1 = parseQuery_1;

	function getOptions$1(loaderContext) {
	  const query = loaderContext.query;

	  if (typeof query === 'string' && query !== '') {
	    return parseQuery$1(loaderContext.query);
	  }

	  if (!query || typeof query !== 'object') {
	    // Not object-like queries are not supported.
	    return null;
	  }

	  return query;
	}

	var getOptions_1 = getOptions$1;

	const path$4 = require$$3;

	const matchRelativePath = /^\.\.?[/\\]/;

	function isAbsolutePath(str) {
	  return path$4.posix.isAbsolute(str) || path$4.win32.isAbsolute(str);
	}

	function isRelativePath(str) {
	  return matchRelativePath.test(str);
	}

	function stringifyRequest$1(loaderContext, request) {
	  const splitted = request.split('!');
	  const context =
	    loaderContext.context ||
	    (loaderContext.options && loaderContext.options.context);

	  return JSON.stringify(
	    splitted
	      .map((part) => {
	        // First, separate singlePath from query, because the query might contain paths again
	        const splittedPart = part.match(/^(.*?)(\?.*)/);
	        const query = splittedPart ? splittedPart[2] : '';
	        let singlePath = splittedPart ? splittedPart[1] : part;

	        if (isAbsolutePath(singlePath) && context) {
	          singlePath = path$4.relative(context, singlePath);

	          if (isAbsolutePath(singlePath)) {
	            // If singlePath still matches an absolute path, singlePath was on a different drive than context.
	            // In this case, we leave the path platform-specific without replacing any separators.
	            // @see https://github.com/webpack/loader-utils/pull/14
	            return singlePath + query;
	          }

	          if (isRelativePath(singlePath) === false) {
	            // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).
	            singlePath = './' + singlePath;
	          }
	        }

	        return singlePath.replace(/\\/g, '/') + query;
	      })
	      .join('!')
	  );
	}

	var stringifyRequest_1 = stringifyRequest$1;

	function getRemainingRequest$1(loaderContext) {
	  if (loaderContext.remainingRequest) {
	    return loaderContext.remainingRequest;
	  }

	  const request = loaderContext.loaders
	    .slice(loaderContext.loaderIndex + 1)
	    .map((obj) => obj.request)
	    .concat([loaderContext.resource]);

	  return request.join('!');
	}

	var getRemainingRequest_1 = getRemainingRequest$1;

	function getCurrentRequest$1(loaderContext) {
	  if (loaderContext.currentRequest) {
	    return loaderContext.currentRequest;
	  }

	  const request = loaderContext.loaders
	    .slice(loaderContext.loaderIndex)
	    .map((obj) => obj.request)
	    .concat([loaderContext.resource]);

	  return request.join('!');
	}

	var getCurrentRequest_1 = getCurrentRequest$1;

	const path$3 = require$$3;

	function isUrlRequest$1(url, root) {
	  // An URL is not an request if

	  // 1. It's an absolute url and it is not `windows` path like `C:\dir\file`
	  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !path$3.win32.isAbsolute(url)) {
	    return false;
	  }

	  // 2. It's a protocol-relative
	  if (/^\/\//.test(url)) {
	    return false;
	  }

	  // 3. It's some kind of url for a template
	  if (/^[{}[\]#*;,'§$%&(=?`´^°<>]/.test(url)) {
	    return false;
	  }

	  // 4. It's also not an request if root isn't set and it's a root-relative url
	  if ((root === undefined || root === false) && /^\//.test(url)) {
	    return false;
	  }

	  return true;
	}

	var isUrlRequest_1 = isUrlRequest$1;

	// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash
	const matchNativeWin32Path = /^[A-Z]:[/\\]|^\\\\/i;

	function urlToRequest$1(url, root) {
	  // Do not rewrite an empty url
	  if (url === '') {
	    return '';
	  }

	  const moduleRequestRegex = /^[^?]*~/;
	  let request;

	  if (matchNativeWin32Path.test(url)) {
	    // absolute windows path, keep it
	    request = url;
	  } else if (root !== undefined && root !== false && /^\//.test(url)) {
	    // if root is set and the url is root-relative
	    switch (typeof root) {
	      // 1. root is a string: root is prefixed to the url
	      case 'string':
	        // special case: `~` roots convert to module request
	        if (moduleRequestRegex.test(root)) {
	          request = root.replace(/([^~/])$/, '$1/') + url.slice(1);
	        } else {
	          request = root + url;
	        }
	        break;
	      // 2. root is `true`: absolute paths are allowed
	      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`
	      case 'boolean':
	        request = url;
	        break;
	      default:
	        throw new Error(
	          "Unexpected parameters to loader-utils 'urlToRequest': url = " +
	            url +
	            ', root = ' +
	            root +
	            '.'
	        );
	    }
	  } else if (/^\.\.?\//.test(url)) {
	    // A relative url stays
	    request = url;
	  } else {
	    // every other url is threaded like a relative url
	    request = './' + url;
	  }

	  // A `~` makes the url an module
	  if (moduleRequestRegex.test(request)) {
	    request = request.replace(moduleRequestRegex, '');
	  }

	  return request;
	}

	var urlToRequest_1 = urlToRequest$1;

	function parseString$1(str) {
	  try {
	    if (str[0] === '"') {
	      return JSON.parse(str);
	    }

	    if (str[0] === "'" && str.substr(str.length - 1) === "'") {
	      return parseString$1(
	        str
	          .replace(/\\.|"/g, (x) => (x === '"' ? '\\"' : x))
	          .replace(/^'|'$/g, '"')
	      );
	    }

	    return JSON.parse('"' + str + '"');
	  } catch (e) {
	    return str;
	  }
	}

	var parseString_1 = parseString$1;

	/*
	 *  big.js v5.2.2
	 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
	 *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
	 *  https://github.com/MikeMcl/big.js/LICENCE
	 */


	/************************************** EDITABLE DEFAULTS *****************************************/


	  // The default values below must be integers within the stated ranges.

	  /*
	   * The maximum number of decimal places (DP) of the results of operations involving division:
	   * div and sqrt, and pow with negative exponents.
	   */
	var DP = 20,          // 0 to MAX_DP

	  /*
	   * The rounding mode (RM) used when rounding to the above decimal places.
	   *
	   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
	   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
	   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
	   *  3  Away from zero.                                  (ROUND_UP)
	   */
	  RM = 1,             // 0, 1, 2 or 3

	  // The maximum value of DP and Big.DP.
	  MAX_DP = 1E6,       // 0 to 1000000

	  // The maximum magnitude of the exponent argument to the pow method.
	  MAX_POWER = 1E6,    // 1 to 1000000

	  /*
	   * The negative exponent (NE) at and beneath which toString returns exponential notation.
	   * (JavaScript numbers: -7)
	   * -1000000 is the minimum recommended exponent value of a Big.
	   */
	  NE = -7,            // 0 to -1000000

	  /*
	   * The positive exponent (PE) at and above which toString returns exponential notation.
	   * (JavaScript numbers: 21)
	   * 1000000 is the maximum recommended exponent value of a Big.
	   * (This limit is not enforced or checked.)
	   */
	  PE = 21,            // 0 to 1000000


	/**************************************************************************************************/


	  // Error messages.
	  NAME = '[big.js] ',
	  INVALID = NAME + 'Invalid ',
	  INVALID_DP = INVALID + 'decimal places',
	  INVALID_RM = INVALID + 'rounding mode',
	  DIV_BY_ZERO = NAME + 'Division by zero',

	  // The shared prototype object.
	  P = {},
	  UNDEFINED = void 0,
	  NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


	/*
	 * Create and return a Big constructor.
	 *
	 */
	function _Big_() {

	  /*
	   * The Big constructor and exported function.
	   * Create and return a new instance of a Big number object.
	   *
	   * n {number|string|Big} A numeric value.
	   */
	  function Big(n) {
	    var x = this;

	    // Enable constructor usage without new.
	    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

	    // Duplicate.
	    if (n instanceof Big) {
	      x.s = n.s;
	      x.e = n.e;
	      x.c = n.c.slice();
	    } else {
	      parse$5(x, n);
	    }

	    /*
	     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which
	     * points to Object.
	     */
	    x.constructor = Big;
	  }

	  Big.prototype = P;
	  Big.DP = DP;
	  Big.RM = RM;
	  Big.NE = NE;
	  Big.PE = PE;
	  Big.version = '5.2.2';

	  return Big;
	}


	/*
	 * Parse the number or string value passed to a Big constructor.
	 *
	 * x {Big} A Big number instance.
	 * n {number|string} A numeric value.
	 */
	function parse$5(x, n) {
	  var e, i, nl;

	  // Minus zero?
	  if (n === 0 && 1 / n < 0) n = '-0';
	  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');

	  // Determine sign.
	  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

	  // Decimal point?
	  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

	  // Exponential form?
	  if ((i = n.search(/e/i)) > 0) {

	    // Determine exponent.
	    if (e < 0) e = i;
	    e += +n.slice(i + 1);
	    n = n.substring(0, i);
	  } else if (e < 0) {

	    // Integer.
	    e = n.length;
	  }

	  nl = n.length;

	  // Determine leading zeros.
	  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

	  if (i == nl) {

	    // Zero.
	    x.c = [x.e = 0];
	  } else {

	    // Determine trailing zeros.
	    for (; nl > 0 && n.charAt(--nl) == '0';);
	    x.e = e - i - 1;
	    x.c = [];

	    // Convert string to array of digits without leading/trailing zeros.
	    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
	  }

	  return x;
	}


	/*
	 * Round Big x to a maximum of dp decimal places using rounding mode rm.
	 * Called by stringify, P.div, P.round and P.sqrt.
	 *
	 * x {Big} The Big to round.
	 * dp {number} Integer, 0 to MAX_DP inclusive.
	 * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
	 * [more] {boolean} Whether the result of division was truncated.
	 */
	function round(x, dp, rm, more) {
	  var xc = x.c,
	    i = x.e + dp + 1;

	  if (i < xc.length) {
	    if (rm === 1) {

	      // xc[i] is the digit after the digit that may be rounded up.
	      more = xc[i] >= 5;
	    } else if (rm === 2) {
	      more = xc[i] > 5 || xc[i] == 5 &&
	        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
	    } else if (rm === 3) {
	      more = more || !!xc[0];
	    } else {
	      more = false;
	      if (rm !== 0) throw Error(INVALID_RM);
	    }

	    if (i < 1) {
	      xc.length = 1;

	      if (more) {

	        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	        x.e = -dp;
	        xc[0] = 1;
	      } else {

	        // Zero.
	        xc[0] = x.e = 0;
	      }
	    } else {

	      // Remove any digits after the required decimal places.
	      xc.length = i--;

	      // Round up?
	      if (more) {

	        // Rounding up may mean the previous digit has to be rounded up.
	        for (; ++xc[i] > 9;) {
	          xc[i] = 0;
	          if (!i--) {
	            ++x.e;
	            xc.unshift(1);
	          }
	        }
	      }

	      // Remove trailing zeros.
	      for (i = xc.length; !xc[--i];) xc.pop();
	    }
	  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
	    throw Error(INVALID_RM);
	  }

	  return x;
	}


	/*
	 * Return a string representing the value of Big x in normal or exponential notation.
	 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
	 *
	 * x {Big}
	 * id? {number} Caller id.
	 *         1 toExponential
	 *         2 toFixed
	 *         3 toPrecision
	 *         4 valueOf
	 * n? {number|undefined} Caller's argument.
	 * k? {number|undefined}
	 */
	function stringify$2(x, id, n, k) {
	  var e, s,
	    Big = x.constructor,
	    z = !x.c[0];

	  if (n !== UNDEFINED) {
	    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
	      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);
	    }

	    x = new Big(x);

	    // The index of the digit that may be rounded up.
	    n = k - x.e;

	    // Round?
	    if (x.c.length > ++k) round(x, n, Big.RM);

	    // toFixed: recalculate k as x.e may have changed if value rounded up.
	    if (id == 2) k = x.e + n + 1;

	    // Append zeros?
	    for (; x.c.length < k;) x.c.push(0);
	  }

	  e = x.e;
	  s = x.c.join('');
	  n = s.length;

	  // Exponential notation?
	  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {
	    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

	  // Normal notation.
	  } else if (e < 0) {
	    for (; ++e;) s = '0' + s;
	    s = '0.' + s;
	  } else if (e > 0) {
	    if (++e > n) for (e -= n; e--;) s += '0';
	    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);
	  } else if (n > 1) {
	    s = s.charAt(0) + '.' + s.slice(1);
	  }

	  return x.s < 0 && (!z || id == 4) ? '-' + s : s;
	}


	// Prototype/instance methods


	/*
	 * Return a new Big whose value is the absolute value of this Big.
	 */
	P.abs = function () {
	  var x = new this.constructor(this);
	  x.s = 1;
	  return x;
	};


	/*
	 * Return 1 if the value of this Big is greater than the value of Big y,
	 *       -1 if the value of this Big is less than the value of Big y, or
	 *        0 if they have the same value.
	*/
	P.cmp = function (y) {
	  var isneg,
	    x = this,
	    xc = x.c,
	    yc = (y = new x.constructor(y)).c,
	    i = x.s,
	    j = y.s,
	    k = x.e,
	    l = y.e;

	  // Either zero?
	  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

	  // Signs differ?
	  if (i != j) return i;

	  isneg = i < 0;

	  // Compare exponents.
	  if (k != l) return k > l ^ isneg ? 1 : -1;

	  j = (k = xc.length) < (l = yc.length) ? k : l;

	  // Compare digit by digit.
	  for (i = -1; ++i < j;) {
	    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
	  }

	  // Compare lengths.
	  return k == l ? 0 : k > l ^ isneg ? 1 : -1;
	};


	/*
	 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
	 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
	 */
	P.div = function (y) {
	  var x = this,
	    Big = x.constructor,
	    a = x.c,                  // dividend
	    b = (y = new Big(y)).c,   // divisor
	    k = x.s == y.s ? 1 : -1,
	    dp = Big.DP;

	  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);

	  // Divisor is zero?
	  if (!b[0]) throw Error(DIV_BY_ZERO);

	  // Dividend is 0? Return +-0.
	  if (!a[0]) return new Big(k * 0);

	  var bl, bt, n, cmp, ri,
	    bz = b.slice(),
	    ai = bl = b.length,
	    al = a.length,
	    r = a.slice(0, bl),   // remainder
	    rl = r.length,
	    q = y,                // quotient
	    qc = q.c = [],
	    qi = 0,
	    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result

	  q.s = k;
	  k = d < 0 ? 0 : d;

	  // Create version of divisor with leading zero.
	  bz.unshift(0);

	  // Add zeros to make remainder as long as divisor.
	  for (; rl++ < bl;) r.push(0);

	  do {

	    // n is how many times the divisor goes into current remainder.
	    for (n = 0; n < 10; n++) {

	      // Compare divisor and remainder.
	      if (bl != (rl = r.length)) {
	        cmp = bl > rl ? 1 : -1;
	      } else {
	        for (ri = -1, cmp = 0; ++ri < bl;) {
	          if (b[ri] != r[ri]) {
	            cmp = b[ri] > r[ri] ? 1 : -1;
	            break;
	          }
	        }
	      }

	      // If divisor < remainder, subtract divisor from remainder.
	      if (cmp < 0) {

	        // Remainder can't be more than 1 digit longer than divisor.
	        // Equalise lengths using divisor with extra leading zero?
	        for (bt = rl == bl ? b : bz; rl;) {
	          if (r[--rl] < bt[rl]) {
	            ri = rl;
	            for (; ri && !r[--ri];) r[ri] = 9;
	            --r[ri];
	            r[rl] += 10;
	          }
	          r[rl] -= bt[rl];
	        }

	        for (; !r[0];) r.shift();
	      } else {
	        break;
	      }
	    }

	    // Add the digit n to the result array.
	    qc[qi++] = cmp ? n : ++n;

	    // Update the remainder.
	    if (r[0] && cmp) r[rl] = a[ai] || 0;
	    else r = [a[ai]];

	  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

	  // Leading zero? Do not remove if result is simply zero (qi == 1).
	  if (!qc[0] && qi != 1) {

	    // There can't be more than one zero.
	    qc.shift();
	    q.e--;
	  }

	  // Round?
	  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);

	  return q;
	};


	/*
	 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
	 */
	P.eq = function (y) {
	  return !this.cmp(y);
	};


	/*
	 * Return true if the value of this Big is greater than the value of Big y, otherwise return
	 * false.
	 */
	P.gt = function (y) {
	  return this.cmp(y) > 0;
	};


	/*
	 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
	 * return false.
	 */
	P.gte = function (y) {
	  return this.cmp(y) > -1;
	};


	/*
	 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
	 */
	P.lt = function (y) {
	  return this.cmp(y) < 0;
	};


	/*
	 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
	 * return false.
	 */
	P.lte = function (y) {
	  return this.cmp(y) < 1;
	};


	/*
	 * Return a new Big whose value is the value of this Big minus the value of Big y.
	 */
	P.minus = P.sub = function (y) {
	  var i, j, t, xlty,
	    x = this,
	    Big = x.constructor,
	    a = x.s,
	    b = (y = new Big(y)).s;

	  // Signs differ?
	  if (a != b) {
	    y.s = -b;
	    return x.plus(y);
	  }

	  var xc = x.c.slice(),
	    xe = x.e,
	    yc = y.c,
	    ye = y.e;

	  // Either zero?
	  if (!xc[0] || !yc[0]) {

	    // y is non-zero? x is non-zero? Or both are zero.
	    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
	  }

	  // Determine which is the bigger number. Prepend zeros to equalise exponents.
	  if (a = xe - ye) {

	    if (xlty = a < 0) {
	      a = -a;
	      t = xc;
	    } else {
	      ye = xe;
	      t = yc;
	    }

	    t.reverse();
	    for (b = a; b--;) t.push(0);
	    t.reverse();
	  } else {

	    // Exponents equal. Check digit by digit.
	    j = ((xlty = xc.length < yc.length) ? xc : yc).length;

	    for (a = b = 0; b < j; b++) {
	      if (xc[b] != yc[b]) {
	        xlty = xc[b] < yc[b];
	        break;
	      }
	    }
	  }

	  // x < y? Point xc to the array of the bigger number.
	  if (xlty) {
	    t = xc;
	    xc = yc;
	    yc = t;
	    y.s = -y.s;
	  }

	  /*
	   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
	   * needs to start at yc.length.
	   */
	  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

	  // Subtract yc from xc.
	  for (b = i; j > a;) {
	    if (xc[--j] < yc[j]) {
	      for (i = j; i && !xc[--i];) xc[i] = 9;
	      --xc[i];
	      xc[j] += 10;
	    }

	    xc[j] -= yc[j];
	  }

	  // Remove trailing zeros.
	  for (; xc[--b] === 0;) xc.pop();

	  // Remove leading zeros and adjust exponent accordingly.
	  for (; xc[0] === 0;) {
	    xc.shift();
	    --ye;
	  }

	  if (!xc[0]) {

	    // n - n = +0
	    y.s = 1;

	    // Result must be zero.
	    xc = [ye = 0];
	  }

	  y.c = xc;
	  y.e = ye;

	  return y;
	};


	/*
	 * Return a new Big whose value is the value of this Big modulo the value of Big y.
	 */
	P.mod = function (y) {
	  var ygtx,
	    x = this,
	    Big = x.constructor,
	    a = x.s,
	    b = (y = new Big(y)).s;

	  if (!y.c[0]) throw Error(DIV_BY_ZERO);

	  x.s = y.s = 1;
	  ygtx = y.cmp(x) == 1;
	  x.s = a;
	  y.s = b;

	  if (ygtx) return new Big(x);

	  a = Big.DP;
	  b = Big.RM;
	  Big.DP = Big.RM = 0;
	  x = x.div(y);
	  Big.DP = a;
	  Big.RM = b;

	  return this.minus(x.times(y));
	};


	/*
	 * Return a new Big whose value is the value of this Big plus the value of Big y.
	 */
	P.plus = P.add = function (y) {
	  var t,
	    x = this,
	    Big = x.constructor,
	    a = x.s,
	    b = (y = new Big(y)).s;

	  // Signs differ?
	  if (a != b) {
	    y.s = -b;
	    return x.minus(y);
	  }

	  var xe = x.e,
	    xc = x.c,
	    ye = y.e,
	    yc = y.c;

	  // Either zero? y is non-zero? x is non-zero? Or both are zero.
	  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);

	  xc = xc.slice();

	  // Prepend zeros to equalise exponents.
	  // Note: reverse faster than unshifts.
	  if (a = xe - ye) {
	    if (a > 0) {
	      ye = xe;
	      t = yc;
	    } else {
	      a = -a;
	      t = xc;
	    }

	    t.reverse();
	    for (; a--;) t.push(0);
	    t.reverse();
	  }

	  // Point xc to the longer array.
	  if (xc.length - yc.length < 0) {
	    t = yc;
	    yc = xc;
	    xc = t;
	  }

	  a = yc.length;

	  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
	  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;

	  // No need to check for zero, as +x + +y != 0 && -x + -y != 0

	  if (b) {
	    xc.unshift(b);
	    ++ye;
	  }

	  // Remove trailing zeros.
	  for (a = xc.length; xc[--a] === 0;) xc.pop();

	  y.c = xc;
	  y.e = ye;

	  return y;
	};


	/*
	 * Return a Big whose value is the value of this Big raised to the power n.
	 * If n is negative, round to a maximum of Big.DP decimal places using rounding
	 * mode Big.RM.
	 *
	 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
	 */
	P.pow = function (n) {
	  var x = this,
	    one = new x.constructor(1),
	    y = one,
	    isneg = n < 0;

	  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');
	  if (isneg) n = -n;

	  for (;;) {
	    if (n & 1) y = y.times(x);
	    n >>= 1;
	    if (!n) break;
	    x = x.times(x);
	  }

	  return isneg ? one.div(y) : y;
	};


	/*
	 * Return a new Big whose value is the value of this Big rounded using rounding mode rm
	 * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a
	 * multiple of 10**-dp.
	 * If dp is not specified, round to 0 decimal places.
	 * If rm is not specified, use Big.RM.
	 *
	 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
	 * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
	 */
	P.round = function (dp, rm) {
	  var Big = this.constructor;
	  if (dp === UNDEFINED) dp = 0;
	  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
	  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);
	};


	/*
	 * Return a new Big whose value is the square root of the value of this Big, rounded, if
	 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
	 */
	P.sqrt = function () {
	  var r, c, t,
	    x = this,
	    Big = x.constructor,
	    s = x.s,
	    e = x.e,
	    half = new Big(0.5);

	  // Zero?
	  if (!x.c[0]) return new Big(x);

	  // Negative?
	  if (s < 0) throw Error(NAME + 'No square root');

	  // Estimate.
	  s = Math.sqrt(x + '');

	  // Math.sqrt underflow/overflow?
	  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
	  if (s === 0 || s === 1 / 0) {
	    c = x.c.join('');
	    if (!(c.length + e & 1)) c += '0';
	    s = Math.sqrt(c);
	    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
	    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
	  } else {
	    r = new Big(s);
	  }

	  e = r.e + (Big.DP += 4);

	  // Newton-Raphson iteration.
	  do {
	    t = r;
	    r = half.times(t.plus(x.div(t)));
	  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

	  return round(r, Big.DP -= 4, Big.RM);
	};


	/*
	 * Return a new Big whose value is the value of this Big times the value of Big y.
	 */
	P.times = P.mul = function (y) {
	  var c,
	    x = this,
	    Big = x.constructor,
	    xc = x.c,
	    yc = (y = new Big(y)).c,
	    a = xc.length,
	    b = yc.length,
	    i = x.e,
	    j = y.e;

	  // Determine sign of result.
	  y.s = x.s == y.s ? 1 : -1;

	  // Return signed 0 if either 0.
	  if (!xc[0] || !yc[0]) return new Big(y.s * 0);

	  // Initialise exponent of result as x.e + y.e.
	  y.e = i + j;

	  // If array xc has fewer digits than yc, swap xc and yc, and lengths.
	  if (a < b) {
	    c = xc;
	    xc = yc;
	    yc = c;
	    j = a;
	    a = b;
	    b = j;
	  }

	  // Initialise coefficient array of result with zeros.
	  for (c = new Array(j = a + b); j--;) c[j] = 0;

	  // Multiply.

	  // i is initially xc.length.
	  for (i = b; i--;) {
	    b = 0;

	    // a is yc.length.
	    for (j = a + i; j > i;) {

	      // Current sum of products at this digit position, plus carry.
	      b = c[j] + yc[i] * xc[j - i - 1] + b;
	      c[j--] = b % 10;

	      // carry
	      b = b / 10 | 0;
	    }

	    c[j] = (c[j] + b) % 10;
	  }

	  // Increment result exponent if there is a final carry, otherwise remove leading zero.
	  if (b) ++y.e;
	  else c.shift();

	  // Remove trailing zeros.
	  for (i = c.length; !c[--i];) c.pop();
	  y.c = c;

	  return y;
	};


	/*
	 * Return a string representing the value of this Big in exponential notation to dp fixed decimal
	 * places and rounded using Big.RM.
	 *
	 * dp? {number} Integer, 0 to MAX_DP inclusive.
	 */
	P.toExponential = function (dp) {
	  return stringify$2(this, 1, dp, dp);
	};


	/*
	 * Return a string representing the value of this Big in normal notation to dp fixed decimal
	 * places and rounded using Big.RM.
	 *
	 * dp? {number} Integer, 0 to MAX_DP inclusive.
	 *
	 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	 */
	P.toFixed = function (dp) {
	  return stringify$2(this, 2, dp, this.e + dp);
	};


	/*
	 * Return a string representing the value of this Big rounded to sd significant digits using
	 * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent
	 * the integer part of the value in normal notation.
	 *
	 * sd {number} Integer, 1 to MAX_DP inclusive.
	 */
	P.toPrecision = function (sd) {
	  return stringify$2(this, 3, sd, sd - 1);
	};


	/*
	 * Return a string representing the value of this Big.
	 * Return exponential notation if this Big has a positive exponent equal to or greater than
	 * Big.PE, or a negative exponent equal to or less than Big.NE.
	 * Omit the sign for negative zero.
	 */
	P.toString = function () {
	  return stringify$2(this);
	};


	/*
	 * Return a string representing the value of this Big.
	 * Return exponential notation if this Big has a positive exponent equal to or greater than
	 * Big.PE, or a negative exponent equal to or less than Big.NE.
	 * Include the sign for negative zero.
	 */
	P.valueOf = P.toJSON = function () {
	  return stringify$2(this, 4);
	};


	// Export


	var Big = _Big_();

	var big = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Big: Big,
		'default': Big
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(big);

	const baseEncodeTables = {
	  26: 'abcdefghijklmnopqrstuvwxyz',
	  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio
	  36: '0123456789abcdefghijklmnopqrstuvwxyz',
	  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO
	  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
	  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO
	  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
	  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',
	};

	function encodeBufferToBase(buffer, base) {
	  const encodeTable = baseEncodeTables[base];
	  if (!encodeTable) {
	    throw new Error('Unknown encoding base' + base);
	  }

	  const readLength = buffer.length;
	  const Big = require$$0;

	  Big.RM = Big.DP = 0;
	  let b = new Big(0);

	  for (let i = readLength - 1; i >= 0; i--) {
	    b = b.times(256).plus(buffer[i]);
	  }

	  let output = '';
	  while (b.gt(0)) {
	    output = encodeTable[b.mod(base)] + output;
	    b = b.div(base);
	  }

	  Big.DP = 20;
	  Big.RM = 1;

	  return output;
	}

	function getHashDigest$2(buffer, hashType, digestType, maxLength) {
	  hashType = hashType || 'md5';
	  maxLength = maxLength || 9999;

	  const hash = require$$0$5.createHash(hashType);

	  hash.update(buffer);

	  if (
	    digestType === 'base26' ||
	    digestType === 'base32' ||
	    digestType === 'base36' ||
	    digestType === 'base49' ||
	    digestType === 'base52' ||
	    digestType === 'base58' ||
	    digestType === 'base62' ||
	    digestType === 'base64'
	  ) {
	    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(
	      0,
	      maxLength
	    );
	  } else {
	    return hash.digest(digestType || 'hex').substr(0, maxLength);
	  }
	}

	var getHashDigest_1 = getHashDigest$2;

	var _emojisList_3_0_0_emojisList = [
	  "🀄️",
	  "🃏",
	  "🅰️",
	  "🅱️",
	  "🅾️",
	  "🅿️",
	  "🆎",
	  "🆑",
	  "🆒",
	  "🆓",
	  "🆔",
	  "🆕",
	  "🆖",
	  "🆗",
	  "🆘",
	  "🆙",
	  "🆚",
	  "🇦🇨",
	  "🇦🇩",
	  "🇦🇪",
	  "🇦🇫",
	  "🇦🇬",
	  "🇦🇮",
	  "🇦🇱",
	  "🇦🇲",
	  "🇦🇴",
	  "🇦🇶",
	  "🇦🇷",
	  "🇦🇸",
	  "🇦🇹",
	  "🇦🇺",
	  "🇦🇼",
	  "🇦🇽",
	  "🇦🇿",
	  "🇦",
	  "🇧🇦",
	  "🇧🇧",
	  "🇧🇩",
	  "🇧🇪",
	  "🇧🇫",
	  "🇧🇬",
	  "🇧🇭",
	  "🇧🇮",
	  "🇧🇯",
	  "🇧🇱",
	  "🇧🇲",
	  "🇧🇳",
	  "🇧🇴",
	  "🇧🇶",
	  "🇧🇷",
	  "🇧🇸",
	  "🇧🇹",
	  "🇧🇻",
	  "🇧🇼",
	  "🇧🇾",
	  "🇧🇿",
	  "🇧",
	  "🇨🇦",
	  "🇨🇨",
	  "🇨🇩",
	  "🇨🇫",
	  "🇨🇬",
	  "🇨🇭",
	  "🇨🇮",
	  "🇨🇰",
	  "🇨🇱",
	  "🇨🇲",
	  "🇨🇳",
	  "🇨🇴",
	  "🇨🇵",
	  "🇨🇷",
	  "🇨🇺",
	  "🇨🇻",
	  "🇨🇼",
	  "🇨🇽",
	  "🇨🇾",
	  "🇨🇿",
	  "🇨",
	  "🇩🇪",
	  "🇩🇬",
	  "🇩🇯",
	  "🇩🇰",
	  "🇩🇲",
	  "🇩🇴",
	  "🇩🇿",
	  "🇩",
	  "🇪🇦",
	  "🇪🇨",
	  "🇪🇪",
	  "🇪🇬",
	  "🇪🇭",
	  "🇪🇷",
	  "🇪🇸",
	  "🇪🇹",
	  "🇪🇺",
	  "🇪",
	  "🇫🇮",
	  "🇫🇯",
	  "🇫🇰",
	  "🇫🇲",
	  "🇫🇴",
	  "🇫🇷",
	  "🇫",
	  "🇬🇦",
	  "🇬🇧",
	  "🇬🇩",
	  "🇬🇪",
	  "🇬🇫",
	  "🇬🇬",
	  "🇬🇭",
	  "🇬🇮",
	  "🇬🇱",
	  "🇬🇲",
	  "🇬🇳",
	  "🇬🇵",
	  "🇬🇶",
	  "🇬🇷",
	  "🇬🇸",
	  "🇬🇹",
	  "🇬🇺",
	  "🇬🇼",
	  "🇬🇾",
	  "🇬",
	  "🇭🇰",
	  "🇭🇲",
	  "🇭🇳",
	  "🇭🇷",
	  "🇭🇹",
	  "🇭🇺",
	  "🇭",
	  "🇮🇨",
	  "🇮🇩",
	  "🇮🇪",
	  "🇮🇱",
	  "🇮🇲",
	  "🇮🇳",
	  "🇮🇴",
	  "🇮🇶",
	  "🇮🇷",
	  "🇮🇸",
	  "🇮🇹",
	  "🇮",
	  "🇯🇪",
	  "🇯🇲",
	  "🇯🇴",
	  "🇯🇵",
	  "🇯",
	  "🇰🇪",
	  "🇰🇬",
	  "🇰🇭",
	  "🇰🇮",
	  "🇰🇲",
	  "🇰🇳",
	  "🇰🇵",
	  "🇰🇷",
	  "🇰🇼",
	  "🇰🇾",
	  "🇰🇿",
	  "🇰",
	  "🇱🇦",
	  "🇱🇧",
	  "🇱🇨",
	  "🇱🇮",
	  "🇱🇰",
	  "🇱🇷",
	  "🇱🇸",
	  "🇱🇹",
	  "🇱🇺",
	  "🇱🇻",
	  "🇱🇾",
	  "🇱",
	  "🇲🇦",
	  "🇲🇨",
	  "🇲🇩",
	  "🇲🇪",
	  "🇲🇫",
	  "🇲🇬",
	  "🇲🇭",
	  "🇲🇰",
	  "🇲🇱",
	  "🇲🇲",
	  "🇲🇳",
	  "🇲🇴",
	  "🇲🇵",
	  "🇲🇶",
	  "🇲🇷",
	  "🇲🇸",
	  "🇲🇹",
	  "🇲🇺",
	  "🇲🇻",
	  "🇲🇼",
	  "🇲🇽",
	  "🇲🇾",
	  "🇲🇿",
	  "🇲",
	  "🇳🇦",
	  "🇳🇨",
	  "🇳🇪",
	  "🇳🇫",
	  "🇳🇬",
	  "🇳🇮",
	  "🇳🇱",
	  "🇳🇴",
	  "🇳🇵",
	  "🇳🇷",
	  "🇳🇺",
	  "🇳🇿",
	  "🇳",
	  "🇴🇲",
	  "🇴",
	  "🇵🇦",
	  "🇵🇪",
	  "🇵🇫",
	  "🇵🇬",
	  "🇵🇭",
	  "🇵🇰",
	  "🇵🇱",
	  "🇵🇲",
	  "🇵🇳",
	  "🇵🇷",
	  "🇵🇸",
	  "🇵🇹",
	  "🇵🇼",
	  "🇵🇾",
	  "🇵",
	  "🇶🇦",
	  "🇶",
	  "🇷🇪",
	  "🇷🇴",
	  "🇷🇸",
	  "🇷🇺",
	  "🇷🇼",
	  "🇷",
	  "🇸🇦",
	  "🇸🇧",
	  "🇸🇨",
	  "🇸🇩",
	  "🇸🇪",
	  "🇸🇬",
	  "🇸🇭",
	  "🇸🇮",
	  "🇸🇯",
	  "🇸🇰",
	  "🇸🇱",
	  "🇸🇲",
	  "🇸🇳",
	  "🇸🇴",
	  "🇸🇷",
	  "🇸🇸",
	  "🇸🇹",
	  "🇸🇻",
	  "🇸🇽",
	  "🇸🇾",
	  "🇸🇿",
	  "🇸",
	  "🇹🇦",
	  "🇹🇨",
	  "🇹🇩",
	  "🇹🇫",
	  "🇹🇬",
	  "🇹🇭",
	  "🇹🇯",
	  "🇹🇰",
	  "🇹🇱",
	  "🇹🇲",
	  "🇹🇳",
	  "🇹🇴",
	  "🇹🇷",
	  "🇹🇹",
	  "🇹🇻",
	  "🇹🇼",
	  "🇹🇿",
	  "🇹",
	  "🇺🇦",
	  "🇺🇬",
	  "🇺🇲",
	  "🇺🇳",
	  "🇺🇸",
	  "🇺🇾",
	  "🇺🇿",
	  "🇺",
	  "🇻🇦",
	  "🇻🇨",
	  "🇻🇪",
	  "🇻🇬",
	  "🇻🇮",
	  "🇻🇳",
	  "🇻🇺",
	  "🇻",
	  "🇼🇫",
	  "🇼🇸",
	  "🇼",
	  "🇽🇰",
	  "🇽",
	  "🇾🇪",
	  "🇾🇹",
	  "🇾",
	  "🇿🇦",
	  "🇿🇲",
	  "🇿🇼",
	  "🇿",
	  "🈁",
	  "🈂️",
	  "🈚️",
	  "🈯️",
	  "🈲",
	  "🈳",
	  "🈴",
	  "🈵",
	  "🈶",
	  "🈷️",
	  "🈸",
	  "🈹",
	  "🈺",
	  "🉐",
	  "🉑",
	  "🌀",
	  "🌁",
	  "🌂",
	  "🌃",
	  "🌄",
	  "🌅",
	  "🌆",
	  "🌇",
	  "🌈",
	  "🌉",
	  "🌊",
	  "🌋",
	  "🌌",
	  "🌍",
	  "🌎",
	  "🌏",
	  "🌐",
	  "🌑",
	  "🌒",
	  "🌓",
	  "🌔",
	  "🌕",
	  "🌖",
	  "🌗",
	  "🌘",
	  "🌙",
	  "🌚",
	  "🌛",
	  "🌜",
	  "🌝",
	  "🌞",
	  "🌟",
	  "🌠",
	  "🌡️",
	  "🌤️",
	  "🌥️",
	  "🌦️",
	  "🌧️",
	  "🌨️",
	  "🌩️",
	  "🌪️",
	  "🌫️",
	  "🌬️",
	  "🌭",
	  "🌮",
	  "🌯",
	  "🌰",
	  "🌱",
	  "🌲",
	  "🌳",
	  "🌴",
	  "🌵",
	  "🌶️",
	  "🌷",
	  "🌸",
	  "🌹",
	  "🌺",
	  "🌻",
	  "🌼",
	  "🌽",
	  "🌾",
	  "🌿",
	  "🍀",
	  "🍁",
	  "🍂",
	  "🍃",
	  "🍄",
	  "🍅",
	  "🍆",
	  "🍇",
	  "🍈",
	  "🍉",
	  "🍊",
	  "🍋",
	  "🍌",
	  "🍍",
	  "🍎",
	  "🍏",
	  "🍐",
	  "🍑",
	  "🍒",
	  "🍓",
	  "🍔",
	  "🍕",
	  "🍖",
	  "🍗",
	  "🍘",
	  "🍙",
	  "🍚",
	  "🍛",
	  "🍜",
	  "🍝",
	  "🍞",
	  "🍟",
	  "🍠",
	  "🍡",
	  "🍢",
	  "🍣",
	  "🍤",
	  "🍥",
	  "🍦",
	  "🍧",
	  "🍨",
	  "🍩",
	  "🍪",
	  "🍫",
	  "🍬",
	  "🍭",
	  "🍮",
	  "🍯",
	  "🍰",
	  "🍱",
	  "🍲",
	  "🍳",
	  "🍴",
	  "🍵",
	  "🍶",
	  "🍷",
	  "🍸",
	  "🍹",
	  "🍺",
	  "🍻",
	  "🍼",
	  "🍽️",
	  "🍾",
	  "🍿",
	  "🎀",
	  "🎁",
	  "🎂",
	  "🎃",
	  "🎄",
	  "🎅🏻",
	  "🎅🏼",
	  "🎅🏽",
	  "🎅🏾",
	  "🎅🏿",
	  "🎅",
	  "🎆",
	  "🎇",
	  "🎈",
	  "🎉",
	  "🎊",
	  "🎋",
	  "🎌",
	  "🎍",
	  "🎎",
	  "🎏",
	  "🎐",
	  "🎑",
	  "🎒",
	  "🎓",
	  "🎖️",
	  "🎗️",
	  "🎙️",
	  "🎚️",
	  "🎛️",
	  "🎞️",
	  "🎟️",
	  "🎠",
	  "🎡",
	  "🎢",
	  "🎣",
	  "🎤",
	  "🎥",
	  "🎦",
	  "🎧",
	  "🎨",
	  "🎩",
	  "🎪",
	  "🎫",
	  "🎬",
	  "🎭",
	  "🎮",
	  "🎯",
	  "🎰",
	  "🎱",
	  "🎲",
	  "🎳",
	  "🎴",
	  "🎵",
	  "🎶",
	  "🎷",
	  "🎸",
	  "🎹",
	  "🎺",
	  "🎻",
	  "🎼",
	  "🎽",
	  "🎾",
	  "🎿",
	  "🏀",
	  "🏁",
	  "🏂🏻",
	  "🏂🏼",
	  "🏂🏽",
	  "🏂🏾",
	  "🏂🏿",
	  "🏂",
	  "🏃🏻‍♀️",
	  "🏃🏻‍♂️",
	  "🏃🏻",
	  "🏃🏼‍♀️",
	  "🏃🏼‍♂️",
	  "🏃🏼",
	  "🏃🏽‍♀️",
	  "🏃🏽‍♂️",
	  "🏃🏽",
	  "🏃🏾‍♀️",
	  "🏃🏾‍♂️",
	  "🏃🏾",
	  "🏃🏿‍♀️",
	  "🏃🏿‍♂️",
	  "🏃🏿",
	  "🏃‍♀️",
	  "🏃‍♂️",
	  "🏃",
	  "🏄🏻‍♀️",
	  "🏄🏻‍♂️",
	  "🏄🏻",
	  "🏄🏼‍♀️",
	  "🏄🏼‍♂️",
	  "🏄🏼",
	  "🏄🏽‍♀️",
	  "🏄🏽‍♂️",
	  "🏄🏽",
	  "🏄🏾‍♀️",
	  "🏄🏾‍♂️",
	  "🏄🏾",
	  "🏄🏿‍♀️",
	  "🏄🏿‍♂️",
	  "🏄🏿",
	  "🏄‍♀️",
	  "🏄‍♂️",
	  "🏄",
	  "🏅",
	  "🏆",
	  "🏇🏻",
	  "🏇🏼",
	  "🏇🏽",
	  "🏇🏾",
	  "🏇🏿",
	  "🏇",
	  "🏈",
	  "🏉",
	  "🏊🏻‍♀️",
	  "🏊🏻‍♂️",
	  "🏊🏻",
	  "🏊🏼‍♀️",
	  "🏊🏼‍♂️",
	  "🏊🏼",
	  "🏊🏽‍♀️",
	  "🏊🏽‍♂️",
	  "🏊🏽",
	  "🏊🏾‍♀️",
	  "🏊🏾‍♂️",
	  "🏊🏾",
	  "🏊🏿‍♀️",
	  "🏊🏿‍♂️",
	  "🏊🏿",
	  "🏊‍♀️",
	  "🏊‍♂️",
	  "🏊",
	  "🏋🏻‍♀️",
	  "🏋🏻‍♂️",
	  "🏋🏻",
	  "🏋🏼‍♀️",
	  "🏋🏼‍♂️",
	  "🏋🏼",
	  "🏋🏽‍♀️",
	  "🏋🏽‍♂️",
	  "🏋🏽",
	  "🏋🏾‍♀️",
	  "🏋🏾‍♂️",
	  "🏋🏾",
	  "🏋🏿‍♀️",
	  "🏋🏿‍♂️",
	  "🏋🏿",
	  "🏋️‍♀️",
	  "🏋️‍♂️",
	  "🏋️",
	  "🏌🏻‍♀️",
	  "🏌🏻‍♂️",
	  "🏌🏻",
	  "🏌🏼‍♀️",
	  "🏌🏼‍♂️",
	  "🏌🏼",
	  "🏌🏽‍♀️",
	  "🏌🏽‍♂️",
	  "🏌🏽",
	  "🏌🏾‍♀️",
	  "🏌🏾‍♂️",
	  "🏌🏾",
	  "🏌🏿‍♀️",
	  "🏌🏿‍♂️",
	  "🏌🏿",
	  "🏌️‍♀️",
	  "🏌️‍♂️",
	  "🏌️",
	  "🏍️",
	  "🏎️",
	  "🏏",
	  "🏐",
	  "🏑",
	  "🏒",
	  "🏓",
	  "🏔️",
	  "🏕️",
	  "🏖️",
	  "🏗️",
	  "🏘️",
	  "🏙️",
	  "🏚️",
	  "🏛️",
	  "🏜️",
	  "🏝️",
	  "🏞️",
	  "🏟️",
	  "🏠",
	  "🏡",
	  "🏢",
	  "🏣",
	  "🏤",
	  "🏥",
	  "🏦",
	  "🏧",
	  "🏨",
	  "🏩",
	  "🏪",
	  "🏫",
	  "🏬",
	  "🏭",
	  "🏮",
	  "🏯",
	  "🏰",
	  "🏳️‍🌈",
	  "🏳️",
	  "🏴‍☠️",
	  "🏴󠁧󠁢󠁥󠁮󠁧󠁿",
	  "🏴󠁧󠁢󠁳󠁣󠁴󠁿",
	  "🏴󠁧󠁢󠁷󠁬󠁳󠁿",
	  "🏴",
	  "🏵️",
	  "🏷️",
	  "🏸",
	  "🏹",
	  "🏺",
	  "🏻",
	  "🏼",
	  "🏽",
	  "🏾",
	  "🏿",
	  "🐀",
	  "🐁",
	  "🐂",
	  "🐃",
	  "🐄",
	  "🐅",
	  "🐆",
	  "🐇",
	  "🐈",
	  "🐉",
	  "🐊",
	  "🐋",
	  "🐌",
	  "🐍",
	  "🐎",
	  "🐏",
	  "🐐",
	  "🐑",
	  "🐒",
	  "🐓",
	  "🐔",
	  "🐕‍🦺",
	  "🐕",
	  "🐖",
	  "🐗",
	  "🐘",
	  "🐙",
	  "🐚",
	  "🐛",
	  "🐜",
	  "🐝",
	  "🐞",
	  "🐟",
	  "🐠",
	  "🐡",
	  "🐢",
	  "🐣",
	  "🐤",
	  "🐥",
	  "🐦",
	  "🐧",
	  "🐨",
	  "🐩",
	  "🐪",
	  "🐫",
	  "🐬",
	  "🐭",
	  "🐮",
	  "🐯",
	  "🐰",
	  "🐱",
	  "🐲",
	  "🐳",
	  "🐴",
	  "🐵",
	  "🐶",
	  "🐷",
	  "🐸",
	  "🐹",
	  "🐺",
	  "🐻",
	  "🐼",
	  "🐽",
	  "🐾",
	  "🐿️",
	  "👀",
	  "👁‍🗨",
	  "👁️",
	  "👂🏻",
	  "👂🏼",
	  "👂🏽",
	  "👂🏾",
	  "👂🏿",
	  "👂",
	  "👃🏻",
	  "👃🏼",
	  "👃🏽",
	  "👃🏾",
	  "👃🏿",
	  "👃",
	  "👄",
	  "👅",
	  "👆🏻",
	  "👆🏼",
	  "👆🏽",
	  "👆🏾",
	  "👆🏿",
	  "👆",
	  "👇🏻",
	  "👇🏼",
	  "👇🏽",
	  "👇🏾",
	  "👇🏿",
	  "👇",
	  "👈🏻",
	  "👈🏼",
	  "👈🏽",
	  "👈🏾",
	  "👈🏿",
	  "👈",
	  "👉🏻",
	  "👉🏼",
	  "👉🏽",
	  "👉🏾",
	  "👉🏿",
	  "👉",
	  "👊🏻",
	  "👊🏼",
	  "👊🏽",
	  "👊🏾",
	  "👊🏿",
	  "👊",
	  "👋🏻",
	  "👋🏼",
	  "👋🏽",
	  "👋🏾",
	  "👋🏿",
	  "👋",
	  "👌🏻",
	  "👌🏼",
	  "👌🏽",
	  "👌🏾",
	  "👌🏿",
	  "👌",
	  "👍🏻",
	  "👍🏼",
	  "👍🏽",
	  "👍🏾",
	  "👍🏿",
	  "👍",
	  "👎🏻",
	  "👎🏼",
	  "👎🏽",
	  "👎🏾",
	  "👎🏿",
	  "👎",
	  "👏🏻",
	  "👏🏼",
	  "👏🏽",
	  "👏🏾",
	  "👏🏿",
	  "👏",
	  "👐🏻",
	  "👐🏼",
	  "👐🏽",
	  "👐🏾",
	  "👐🏿",
	  "👐",
	  "👑",
	  "👒",
	  "👓",
	  "👔",
	  "👕",
	  "👖",
	  "👗",
	  "👘",
	  "👙",
	  "👚",
	  "👛",
	  "👜",
	  "👝",
	  "👞",
	  "👟",
	  "👠",
	  "👡",
	  "👢",
	  "👣",
	  "👤",
	  "👥",
	  "👦🏻",
	  "👦🏼",
	  "👦🏽",
	  "👦🏾",
	  "👦🏿",
	  "👦",
	  "👧🏻",
	  "👧🏼",
	  "👧🏽",
	  "👧🏾",
	  "👧🏿",
	  "👧",
	  "👨🏻‍🌾",
	  "👨🏻‍🍳",
	  "👨🏻‍🎓",
	  "👨🏻‍🎤",
	  "👨🏻‍🎨",
	  "👨🏻‍🏫",
	  "👨🏻‍🏭",
	  "👨🏻‍💻",
	  "👨🏻‍💼",
	  "👨🏻‍🔧",
	  "👨🏻‍🔬",
	  "👨🏻‍🚀",
	  "👨🏻‍🚒",
	  "👨🏻‍🦯",
	  "👨🏻‍🦰",
	  "👨🏻‍🦱",
	  "👨🏻‍🦲",
	  "👨🏻‍🦳",
	  "👨🏻‍🦼",
	  "👨🏻‍🦽",
	  "👨🏻‍⚕️",
	  "👨🏻‍⚖️",
	  "👨🏻‍✈️",
	  "👨🏻",
	  "👨🏼‍🌾",
	  "👨🏼‍🍳",
	  "👨🏼‍🎓",
	  "👨🏼‍🎤",
	  "👨🏼‍🎨",
	  "👨🏼‍🏫",
	  "👨🏼‍🏭",
	  "👨🏼‍💻",
	  "👨🏼‍💼",
	  "👨🏼‍🔧",
	  "👨🏼‍🔬",
	  "👨🏼‍🚀",
	  "👨🏼‍🚒",
	  "👨🏼‍🤝‍👨🏻",
	  "👨🏼‍🦯",
	  "👨🏼‍🦰",
	  "👨🏼‍🦱",
	  "👨🏼‍🦲",
	  "👨🏼‍🦳",
	  "👨🏼‍🦼",
	  "👨🏼‍🦽",
	  "👨🏼‍⚕️",
	  "👨🏼‍⚖️",
	  "👨🏼‍✈️",
	  "👨🏼",
	  "👨🏽‍🌾",
	  "👨🏽‍🍳",
	  "👨🏽‍🎓",
	  "👨🏽‍🎤",
	  "👨🏽‍🎨",
	  "👨🏽‍🏫",
	  "👨🏽‍🏭",
	  "👨🏽‍💻",
	  "👨🏽‍💼",
	  "👨🏽‍🔧",
	  "👨🏽‍🔬",
	  "👨🏽‍🚀",
	  "👨🏽‍🚒",
	  "👨🏽‍🤝‍👨🏻",
	  "👨🏽‍🤝‍👨🏼",
	  "👨🏽‍🦯",
	  "👨🏽‍🦰",
	  "👨🏽‍🦱",
	  "👨🏽‍🦲",
	  "👨🏽‍🦳",
	  "👨🏽‍🦼",
	  "👨🏽‍🦽",
	  "👨🏽‍⚕️",
	  "👨🏽‍⚖️",
	  "👨🏽‍✈️",
	  "👨🏽",
	  "👨🏾‍🌾",
	  "👨🏾‍🍳",
	  "👨🏾‍🎓",
	  "👨🏾‍🎤",
	  "👨🏾‍🎨",
	  "👨🏾‍🏫",
	  "👨🏾‍🏭",
	  "👨🏾‍💻",
	  "👨🏾‍💼",
	  "👨🏾‍🔧",
	  "👨🏾‍🔬",
	  "👨🏾‍🚀",
	  "👨🏾‍🚒",
	  "👨🏾‍🤝‍👨🏻",
	  "👨🏾‍🤝‍👨🏼",
	  "👨🏾‍🤝‍👨🏽",
	  "👨🏾‍🦯",
	  "👨🏾‍🦰",
	  "👨🏾‍🦱",
	  "👨🏾‍🦲",
	  "👨🏾‍🦳",
	  "👨🏾‍🦼",
	  "👨🏾‍🦽",
	  "👨🏾‍⚕️",
	  "👨🏾‍⚖️",
	  "👨🏾‍✈️",
	  "👨🏾",
	  "👨🏿‍🌾",
	  "👨🏿‍🍳",
	  "👨🏿‍🎓",
	  "👨🏿‍🎤",
	  "👨🏿‍🎨",
	  "👨🏿‍🏫",
	  "👨🏿‍🏭",
	  "👨🏿‍💻",
	  "👨🏿‍💼",
	  "👨🏿‍🔧",
	  "👨🏿‍🔬",
	  "👨🏿‍🚀",
	  "👨🏿‍🚒",
	  "👨🏿‍🤝‍👨🏻",
	  "👨🏿‍🤝‍👨🏼",
	  "👨🏿‍🤝‍👨🏽",
	  "👨🏿‍🤝‍👨🏾",
	  "👨🏿‍🦯",
	  "👨🏿‍🦰",
	  "👨🏿‍🦱",
	  "👨🏿‍🦲",
	  "👨🏿‍🦳",
	  "👨🏿‍🦼",
	  "👨🏿‍🦽",
	  "👨🏿‍⚕️",
	  "👨🏿‍⚖️",
	  "👨🏿‍✈️",
	  "👨🏿",
	  "👨‍🌾",
	  "👨‍🍳",
	  "👨‍🎓",
	  "👨‍🎤",
	  "👨‍🎨",
	  "👨‍🏫",
	  "👨‍🏭",
	  "👨‍👦‍👦",
	  "👨‍👦",
	  "👨‍👧‍👦",
	  "👨‍👧‍👧",
	  "👨‍👧",
	  "👨‍👨‍👦‍👦",
	  "👨‍👨‍👦",
	  "👨‍👨‍👧‍👦",
	  "👨‍👨‍👧‍👧",
	  "👨‍👨‍👧",
	  "👨‍👩‍👦‍👦",
	  "👨‍👩‍👦",
	  "👨‍👩‍👧‍👦",
	  "👨‍👩‍👧‍👧",
	  "👨‍👩‍👧",
	  "👨‍💻",
	  "👨‍💼",
	  "👨‍🔧",
	  "👨‍🔬",
	  "👨‍🚀",
	  "👨‍🚒",
	  "👨‍🦯",
	  "👨‍🦰",
	  "👨‍🦱",
	  "👨‍🦲",
	  "👨‍🦳",
	  "👨‍🦼",
	  "👨‍🦽",
	  "👨‍⚕️",
	  "👨‍⚖️",
	  "👨‍✈️",
	  "👨‍❤️‍👨",
	  "👨‍❤️‍💋‍👨",
	  "👨",
	  "👩🏻‍🌾",
	  "👩🏻‍🍳",
	  "👩🏻‍🎓",
	  "👩🏻‍🎤",
	  "👩🏻‍🎨",
	  "👩🏻‍🏫",
	  "👩🏻‍🏭",
	  "👩🏻‍💻",
	  "👩🏻‍💼",
	  "👩🏻‍🔧",
	  "👩🏻‍🔬",
	  "👩🏻‍🚀",
	  "👩🏻‍🚒",
	  "👩🏻‍🤝‍👨🏼",
	  "👩🏻‍🤝‍👨🏽",
	  "👩🏻‍🤝‍👨🏾",
	  "👩🏻‍🤝‍👨🏿",
	  "👩🏻‍🦯",
	  "👩🏻‍🦰",
	  "👩🏻‍🦱",
	  "👩🏻‍🦲",
	  "👩🏻‍🦳",
	  "👩🏻‍🦼",
	  "👩🏻‍🦽",
	  "👩🏻‍⚕️",
	  "👩🏻‍⚖️",
	  "👩🏻‍✈️",
	  "👩🏻",
	  "👩🏼‍🌾",
	  "👩🏼‍🍳",
	  "👩🏼‍🎓",
	  "👩🏼‍🎤",
	  "👩🏼‍🎨",
	  "👩🏼‍🏫",
	  "👩🏼‍🏭",
	  "👩🏼‍💻",
	  "👩🏼‍💼",
	  "👩🏼‍🔧",
	  "👩🏼‍🔬",
	  "👩🏼‍🚀",
	  "👩🏼‍🚒",
	  "👩🏼‍🤝‍👨🏻",
	  "👩🏼‍🤝‍👨🏽",
	  "👩🏼‍🤝‍👨🏾",
	  "👩🏼‍🤝‍👨🏿",
	  "👩🏼‍🤝‍👩🏻",
	  "👩🏼‍🦯",
	  "👩🏼‍🦰",
	  "👩🏼‍🦱",
	  "👩🏼‍🦲",
	  "👩🏼‍🦳",
	  "👩🏼‍🦼",
	  "👩🏼‍🦽",
	  "👩🏼‍⚕️",
	  "👩🏼‍⚖️",
	  "👩🏼‍✈️",
	  "👩🏼",
	  "👩🏽‍🌾",
	  "👩🏽‍🍳",
	  "👩🏽‍🎓",
	  "👩🏽‍🎤",
	  "👩🏽‍🎨",
	  "👩🏽‍🏫",
	  "👩🏽‍🏭",
	  "👩🏽‍💻",
	  "👩🏽‍💼",
	  "👩🏽‍🔧",
	  "👩🏽‍🔬",
	  "👩🏽‍🚀",
	  "👩🏽‍🚒",
	  "👩🏽‍🤝‍👨🏻",
	  "👩🏽‍🤝‍👨🏼",
	  "👩🏽‍🤝‍👨🏾",
	  "👩🏽‍🤝‍👨🏿",
	  "👩🏽‍🤝‍👩🏻",
	  "👩🏽‍🤝‍👩🏼",
	  "👩🏽‍🦯",
	  "👩🏽‍🦰",
	  "👩🏽‍🦱",
	  "👩🏽‍🦲",
	  "👩🏽‍🦳",
	  "👩🏽‍🦼",
	  "👩🏽‍🦽",
	  "👩🏽‍⚕️",
	  "👩🏽‍⚖️",
	  "👩🏽‍✈️",
	  "👩🏽",
	  "👩🏾‍🌾",
	  "👩🏾‍🍳",
	  "👩🏾‍🎓",
	  "👩🏾‍🎤",
	  "👩🏾‍🎨",
	  "👩🏾‍🏫",
	  "👩🏾‍🏭",
	  "👩🏾‍💻",
	  "👩🏾‍💼",
	  "👩🏾‍🔧",
	  "👩🏾‍🔬",
	  "👩🏾‍🚀",
	  "👩🏾‍🚒",
	  "👩🏾‍🤝‍👨🏻",
	  "👩🏾‍🤝‍👨🏼",
	  "👩🏾‍🤝‍👨🏽",
	  "👩🏾‍🤝‍👨🏿",
	  "👩🏾‍🤝‍👩🏻",
	  "👩🏾‍🤝‍👩🏼",
	  "👩🏾‍🤝‍👩🏽",
	  "👩🏾‍🦯",
	  "👩🏾‍🦰",
	  "👩🏾‍🦱",
	  "👩🏾‍🦲",
	  "👩🏾‍🦳",
	  "👩🏾‍🦼",
	  "👩🏾‍🦽",
	  "👩🏾‍⚕️",
	  "👩🏾‍⚖️",
	  "👩🏾‍✈️",
	  "👩🏾",
	  "👩🏿‍🌾",
	  "👩🏿‍🍳",
	  "👩🏿‍🎓",
	  "👩🏿‍🎤",
	  "👩🏿‍🎨",
	  "👩🏿‍🏫",
	  "👩🏿‍🏭",
	  "👩🏿‍💻",
	  "👩🏿‍💼",
	  "👩🏿‍🔧",
	  "👩🏿‍🔬",
	  "👩🏿‍🚀",
	  "👩🏿‍🚒",
	  "👩🏿‍🤝‍👨🏻",
	  "👩🏿‍🤝‍👨🏼",
	  "👩🏿‍🤝‍👨🏽",
	  "👩🏿‍🤝‍👨🏾",
	  "👩🏿‍🤝‍👩🏻",
	  "👩🏿‍🤝‍👩🏼",
	  "👩🏿‍🤝‍👩🏽",
	  "👩🏿‍🤝‍👩🏾",
	  "👩🏿‍🦯",
	  "👩🏿‍🦰",
	  "👩🏿‍🦱",
	  "👩🏿‍🦲",
	  "👩🏿‍🦳",
	  "👩🏿‍🦼",
	  "👩🏿‍🦽",
	  "👩🏿‍⚕️",
	  "👩🏿‍⚖️",
	  "👩🏿‍✈️",
	  "👩🏿",
	  "👩‍🌾",
	  "👩‍🍳",
	  "👩‍🎓",
	  "👩‍🎤",
	  "👩‍🎨",
	  "👩‍🏫",
	  "👩‍🏭",
	  "👩‍👦‍👦",
	  "👩‍👦",
	  "👩‍👧‍👦",
	  "👩‍👧‍👧",
	  "👩‍👧",
	  "👩‍👩‍👦‍👦",
	  "👩‍👩‍👦",
	  "👩‍👩‍👧‍👦",
	  "👩‍👩‍👧‍👧",
	  "👩‍👩‍👧",
	  "👩‍💻",
	  "👩‍💼",
	  "👩‍🔧",
	  "👩‍🔬",
	  "👩‍🚀",
	  "👩‍🚒",
	  "👩‍🦯",
	  "👩‍🦰",
	  "👩‍🦱",
	  "👩‍🦲",
	  "👩‍🦳",
	  "👩‍🦼",
	  "👩‍🦽",
	  "👩‍⚕️",
	  "👩‍⚖️",
	  "👩‍✈️",
	  "👩‍❤️‍👨",
	  "👩‍❤️‍👩",
	  "👩‍❤️‍💋‍👨",
	  "👩‍❤️‍💋‍👩",
	  "👩",
	  "👪",
	  "👫🏻",
	  "👫🏼",
	  "👫🏽",
	  "👫🏾",
	  "👫🏿",
	  "👫",
	  "👬🏻",
	  "👬🏼",
	  "👬🏽",
	  "👬🏾",
	  "👬🏿",
	  "👬",
	  "👭🏻",
	  "👭🏼",
	  "👭🏽",
	  "👭🏾",
	  "👭🏿",
	  "👭",
	  "👮🏻‍♀️",
	  "👮🏻‍♂️",
	  "👮🏻",
	  "👮🏼‍♀️",
	  "👮🏼‍♂️",
	  "👮🏼",
	  "👮🏽‍♀️",
	  "👮🏽‍♂️",
	  "👮🏽",
	  "👮🏾‍♀️",
	  "👮🏾‍♂️",
	  "👮🏾",
	  "👮🏿‍♀️",
	  "👮🏿‍♂️",
	  "👮🏿",
	  "👮‍♀️",
	  "👮‍♂️",
	  "👮",
	  "👯‍♀️",
	  "👯‍♂️",
	  "👯",
	  "👰🏻",
	  "👰🏼",
	  "👰🏽",
	  "👰🏾",
	  "👰🏿",
	  "👰",
	  "👱🏻‍♀️",
	  "👱🏻‍♂️",
	  "👱🏻",
	  "👱🏼‍♀️",
	  "👱🏼‍♂️",
	  "👱🏼",
	  "👱🏽‍♀️",
	  "👱🏽‍♂️",
	  "👱🏽",
	  "👱🏾‍♀️",
	  "👱🏾‍♂️",
	  "👱🏾",
	  "👱🏿‍♀️",
	  "👱🏿‍♂️",
	  "👱🏿",
	  "👱‍♀️",
	  "👱‍♂️",
	  "👱",
	  "👲🏻",
	  "👲🏼",
	  "👲🏽",
	  "👲🏾",
	  "👲🏿",
	  "👲",
	  "👳🏻‍♀️",
	  "👳🏻‍♂️",
	  "👳🏻",
	  "👳🏼‍♀️",
	  "👳🏼‍♂️",
	  "👳🏼",
	  "👳🏽‍♀️",
	  "👳🏽‍♂️",
	  "👳🏽",
	  "👳🏾‍♀️",
	  "👳🏾‍♂️",
	  "👳🏾",
	  "👳🏿‍♀️",
	  "👳🏿‍♂️",
	  "👳🏿",
	  "👳‍♀️",
	  "👳‍♂️",
	  "👳",
	  "👴🏻",
	  "👴🏼",
	  "👴🏽",
	  "👴🏾",
	  "👴🏿",
	  "👴",
	  "👵🏻",
	  "👵🏼",
	  "👵🏽",
	  "👵🏾",
	  "👵🏿",
	  "👵",
	  "👶🏻",
	  "👶🏼",
	  "👶🏽",
	  "👶🏾",
	  "👶🏿",
	  "👶",
	  "👷🏻‍♀️",
	  "👷🏻‍♂️",
	  "👷🏻",
	  "👷🏼‍♀️",
	  "👷🏼‍♂️",
	  "👷🏼",
	  "👷🏽‍♀️",
	  "👷🏽‍♂️",
	  "👷🏽",
	  "👷🏾‍♀️",
	  "👷🏾‍♂️",
	  "👷🏾",
	  "👷🏿‍♀️",
	  "👷🏿‍♂️",
	  "👷🏿",
	  "👷‍♀️",
	  "👷‍♂️",
	  "👷",
	  "👸🏻",
	  "👸🏼",
	  "👸🏽",
	  "👸🏾",
	  "👸🏿",
	  "👸",
	  "👹",
	  "👺",
	  "👻",
	  "👼🏻",
	  "👼🏼",
	  "👼🏽",
	  "👼🏾",
	  "👼🏿",
	  "👼",
	  "👽",
	  "👾",
	  "👿",
	  "💀",
	  "💁🏻‍♀️",
	  "💁🏻‍♂️",
	  "💁🏻",
	  "💁🏼‍♀️",
	  "💁🏼‍♂️",
	  "💁🏼",
	  "💁🏽‍♀️",
	  "💁🏽‍♂️",
	  "💁🏽",
	  "💁🏾‍♀️",
	  "💁🏾‍♂️",
	  "💁🏾",
	  "💁🏿‍♀️",
	  "💁🏿‍♂️",
	  "💁🏿",
	  "💁‍♀️",
	  "💁‍♂️",
	  "💁",
	  "💂🏻‍♀️",
	  "💂🏻‍♂️",
	  "💂🏻",
	  "💂🏼‍♀️",
	  "💂🏼‍♂️",
	  "💂🏼",
	  "💂🏽‍♀️",
	  "💂🏽‍♂️",
	  "💂🏽",
	  "💂🏾‍♀️",
	  "💂🏾‍♂️",
	  "💂🏾",
	  "💂🏿‍♀️",
	  "💂🏿‍♂️",
	  "💂🏿",
	  "💂‍♀️",
	  "💂‍♂️",
	  "💂",
	  "💃🏻",
	  "💃🏼",
	  "💃🏽",
	  "💃🏾",
	  "💃🏿",
	  "💃",
	  "💄",
	  "💅🏻",
	  "💅🏼",
	  "💅🏽",
	  "💅🏾",
	  "💅🏿",
	  "💅",
	  "💆🏻‍♀️",
	  "💆🏻‍♂️",
	  "💆🏻",
	  "💆🏼‍♀️",
	  "💆🏼‍♂️",
	  "💆🏼",
	  "💆🏽‍♀️",
	  "💆🏽‍♂️",
	  "💆🏽",
	  "💆🏾‍♀️",
	  "💆🏾‍♂️",
	  "💆🏾",
	  "💆🏿‍♀️",
	  "💆🏿‍♂️",
	  "💆🏿",
	  "💆‍♀️",
	  "💆‍♂️",
	  "💆",
	  "💇🏻‍♀️",
	  "💇🏻‍♂️",
	  "💇🏻",
	  "💇🏼‍♀️",
	  "💇🏼‍♂️",
	  "💇🏼",
	  "💇🏽‍♀️",
	  "💇🏽‍♂️",
	  "💇🏽",
	  "💇🏾‍♀️",
	  "💇🏾‍♂️",
	  "💇🏾",
	  "💇🏿‍♀️",
	  "💇🏿‍♂️",
	  "💇🏿",
	  "💇‍♀️",
	  "💇‍♂️",
	  "💇",
	  "💈",
	  "💉",
	  "💊",
	  "💋",
	  "💌",
	  "💍",
	  "💎",
	  "💏",
	  "💐",
	  "💑",
	  "💒",
	  "💓",
	  "💔",
	  "💕",
	  "💖",
	  "💗",
	  "💘",
	  "💙",
	  "💚",
	  "💛",
	  "💜",
	  "💝",
	  "💞",
	  "💟",
	  "💠",
	  "💡",
	  "💢",
	  "💣",
	  "💤",
	  "💥",
	  "💦",
	  "💧",
	  "💨",
	  "💩",
	  "💪🏻",
	  "💪🏼",
	  "💪🏽",
	  "💪🏾",
	  "💪🏿",
	  "💪",
	  "💫",
	  "💬",
	  "💭",
	  "💮",
	  "💯",
	  "💰",
	  "💱",
	  "💲",
	  "💳",
	  "💴",
	  "💵",
	  "💶",
	  "💷",
	  "💸",
	  "💹",
	  "💺",
	  "💻",
	  "💼",
	  "💽",
	  "💾",
	  "💿",
	  "📀",
	  "📁",
	  "📂",
	  "📃",
	  "📄",
	  "📅",
	  "📆",
	  "📇",
	  "📈",
	  "📉",
	  "📊",
	  "📋",
	  "📌",
	  "📍",
	  "📎",
	  "📏",
	  "📐",
	  "📑",
	  "📒",
	  "📓",
	  "📔",
	  "📕",
	  "📖",
	  "📗",
	  "📘",
	  "📙",
	  "📚",
	  "📛",
	  "📜",
	  "📝",
	  "📞",
	  "📟",
	  "📠",
	  "📡",
	  "📢",
	  "📣",
	  "📤",
	  "📥",
	  "📦",
	  "📧",
	  "📨",
	  "📩",
	  "📪",
	  "📫",
	  "📬",
	  "📭",
	  "📮",
	  "📯",
	  "📰",
	  "📱",
	  "📲",
	  "📳",
	  "📴",
	  "📵",
	  "📶",
	  "📷",
	  "📸",
	  "📹",
	  "📺",
	  "📻",
	  "📼",
	  "📽️",
	  "📿",
	  "🔀",
	  "🔁",
	  "🔂",
	  "🔃",
	  "🔄",
	  "🔅",
	  "🔆",
	  "🔇",
	  "🔈",
	  "🔉",
	  "🔊",
	  "🔋",
	  "🔌",
	  "🔍",
	  "🔎",
	  "🔏",
	  "🔐",
	  "🔑",
	  "🔒",
	  "🔓",
	  "🔔",
	  "🔕",
	  "🔖",
	  "🔗",
	  "🔘",
	  "🔙",
	  "🔚",
	  "🔛",
	  "🔜",
	  "🔝",
	  "🔞",
	  "🔟",
	  "🔠",
	  "🔡",
	  "🔢",
	  "🔣",
	  "🔤",
	  "🔥",
	  "🔦",
	  "🔧",
	  "🔨",
	  "🔩",
	  "🔪",
	  "🔫",
	  "🔬",
	  "🔭",
	  "🔮",
	  "🔯",
	  "🔰",
	  "🔱",
	  "🔲",
	  "🔳",
	  "🔴",
	  "🔵",
	  "🔶",
	  "🔷",
	  "🔸",
	  "🔹",
	  "🔺",
	  "🔻",
	  "🔼",
	  "🔽",
	  "🕉️",
	  "🕊️",
	  "🕋",
	  "🕌",
	  "🕍",
	  "🕎",
	  "🕐",
	  "🕑",
	  "🕒",
	  "🕓",
	  "🕔",
	  "🕕",
	  "🕖",
	  "🕗",
	  "🕘",
	  "🕙",
	  "🕚",
	  "🕛",
	  "🕜",
	  "🕝",
	  "🕞",
	  "🕟",
	  "🕠",
	  "🕡",
	  "🕢",
	  "🕣",
	  "🕤",
	  "🕥",
	  "🕦",
	  "🕧",
	  "🕯️",
	  "🕰️",
	  "🕳️",
	  "🕴🏻‍♀️",
	  "🕴🏻‍♂️",
	  "🕴🏻",
	  "🕴🏼‍♀️",
	  "🕴🏼‍♂️",
	  "🕴🏼",
	  "🕴🏽‍♀️",
	  "🕴🏽‍♂️",
	  "🕴🏽",
	  "🕴🏾‍♀️",
	  "🕴🏾‍♂️",
	  "🕴🏾",
	  "🕴🏿‍♀️",
	  "🕴🏿‍♂️",
	  "🕴🏿",
	  "🕴️‍♀️",
	  "🕴️‍♂️",
	  "🕴️",
	  "🕵🏻‍♀️",
	  "🕵🏻‍♂️",
	  "🕵🏻",
	  "🕵🏼‍♀️",
	  "🕵🏼‍♂️",
	  "🕵🏼",
	  "🕵🏽‍♀️",
	  "🕵🏽‍♂️",
	  "🕵🏽",
	  "🕵🏾‍♀️",
	  "🕵🏾‍♂️",
	  "🕵🏾",
	  "🕵🏿‍♀️",
	  "🕵🏿‍♂️",
	  "🕵🏿",
	  "🕵️‍♀️",
	  "🕵️‍♂️",
	  "🕵️",
	  "🕶️",
	  "🕷️",
	  "🕸️",
	  "🕹️",
	  "🕺🏻",
	  "🕺🏼",
	  "🕺🏽",
	  "🕺🏾",
	  "🕺🏿",
	  "🕺",
	  "🖇️",
	  "🖊️",
	  "🖋️",
	  "🖌️",
	  "🖍️",
	  "🖐🏻",
	  "🖐🏼",
	  "🖐🏽",
	  "🖐🏾",
	  "🖐🏿",
	  "🖐️",
	  "🖕🏻",
	  "🖕🏼",
	  "🖕🏽",
	  "🖕🏾",
	  "🖕🏿",
	  "🖕",
	  "🖖🏻",
	  "🖖🏼",
	  "🖖🏽",
	  "🖖🏾",
	  "🖖🏿",
	  "🖖",
	  "🖤",
	  "🖥️",
	  "🖨️",
	  "🖱️",
	  "🖲️",
	  "🖼️",
	  "🗂️",
	  "🗃️",
	  "🗄️",
	  "🗑️",
	  "🗒️",
	  "🗓️",
	  "🗜️",
	  "🗝️",
	  "🗞️",
	  "🗡️",
	  "🗣️",
	  "🗨️",
	  "🗯️",
	  "🗳️",
	  "🗺️",
	  "🗻",
	  "🗼",
	  "🗽",
	  "🗾",
	  "🗿",
	  "😀",
	  "😁",
	  "😂",
	  "😃",
	  "😄",
	  "😅",
	  "😆",
	  "😇",
	  "😈",
	  "😉",
	  "😊",
	  "😋",
	  "😌",
	  "😍",
	  "😎",
	  "😏",
	  "😐",
	  "😑",
	  "😒",
	  "😓",
	  "😔",
	  "😕",
	  "😖",
	  "😗",
	  "😘",
	  "😙",
	  "😚",
	  "😛",
	  "😜",
	  "😝",
	  "😞",
	  "😟",
	  "😠",
	  "😡",
	  "😢",
	  "😣",
	  "😤",
	  "😥",
	  "😦",
	  "😧",
	  "😨",
	  "😩",
	  "😪",
	  "😫",
	  "😬",
	  "😭",
	  "😮",
	  "😯",
	  "😰",
	  "😱",
	  "😲",
	  "😳",
	  "😴",
	  "😵",
	  "😶",
	  "😷",
	  "😸",
	  "😹",
	  "😺",
	  "😻",
	  "😼",
	  "😽",
	  "😾",
	  "😿",
	  "🙀",
	  "🙁",
	  "🙂",
	  "🙃",
	  "🙄",
	  "🙅🏻‍♀️",
	  "🙅🏻‍♂️",
	  "🙅🏻",
	  "🙅🏼‍♀️",
	  "🙅🏼‍♂️",
	  "🙅🏼",
	  "🙅🏽‍♀️",
	  "🙅🏽‍♂️",
	  "🙅🏽",
	  "🙅🏾‍♀️",
	  "🙅🏾‍♂️",
	  "🙅🏾",
	  "🙅🏿‍♀️",
	  "🙅🏿‍♂️",
	  "🙅🏿",
	  "🙅‍♀️",
	  "🙅‍♂️",
	  "🙅",
	  "🙆🏻‍♀️",
	  "🙆🏻‍♂️",
	  "🙆🏻",
	  "🙆🏼‍♀️",
	  "🙆🏼‍♂️",
	  "🙆🏼",
	  "🙆🏽‍♀️",
	  "🙆🏽‍♂️",
	  "🙆🏽",
	  "🙆🏾‍♀️",
	  "🙆🏾‍♂️",
	  "🙆🏾",
	  "🙆🏿‍♀️",
	  "🙆🏿‍♂️",
	  "🙆🏿",
	  "🙆‍♀️",
	  "🙆‍♂️",
	  "🙆",
	  "🙇🏻‍♀️",
	  "🙇🏻‍♂️",
	  "🙇🏻",
	  "🙇🏼‍♀️",
	  "🙇🏼‍♂️",
	  "🙇🏼",
	  "🙇🏽‍♀️",
	  "🙇🏽‍♂️",
	  "🙇🏽",
	  "🙇🏾‍♀️",
	  "🙇🏾‍♂️",
	  "🙇🏾",
	  "🙇🏿‍♀️",
	  "🙇🏿‍♂️",
	  "🙇🏿",
	  "🙇‍♀️",
	  "🙇‍♂️",
	  "🙇",
	  "🙈",
	  "🙉",
	  "🙊",
	  "🙋🏻‍♀️",
	  "🙋🏻‍♂️",
	  "🙋🏻",
	  "🙋🏼‍♀️",
	  "🙋🏼‍♂️",
	  "🙋🏼",
	  "🙋🏽‍♀️",
	  "🙋🏽‍♂️",
	  "🙋🏽",
	  "🙋🏾‍♀️",
	  "🙋🏾‍♂️",
	  "🙋🏾",
	  "🙋🏿‍♀️",
	  "🙋🏿‍♂️",
	  "🙋🏿",
	  "🙋‍♀️",
	  "🙋‍♂️",
	  "🙋",
	  "🙌🏻",
	  "🙌🏼",
	  "🙌🏽",
	  "🙌🏾",
	  "🙌🏿",
	  "🙌",
	  "🙍🏻‍♀️",
	  "🙍🏻‍♂️",
	  "🙍🏻",
	  "🙍🏼‍♀️",
	  "🙍🏼‍♂️",
	  "🙍🏼",
	  "🙍🏽‍♀️",
	  "🙍🏽‍♂️",
	  "🙍🏽",
	  "🙍🏾‍♀️",
	  "🙍🏾‍♂️",
	  "🙍🏾",
	  "🙍🏿‍♀️",
	  "🙍🏿‍♂️",
	  "🙍🏿",
	  "🙍‍♀️",
	  "🙍‍♂️",
	  "🙍",
	  "🙎🏻‍♀️",
	  "🙎🏻‍♂️",
	  "🙎🏻",
	  "🙎🏼‍♀️",
	  "🙎🏼‍♂️",
	  "🙎🏼",
	  "🙎🏽‍♀️",
	  "🙎🏽‍♂️",
	  "🙎🏽",
	  "🙎🏾‍♀️",
	  "🙎🏾‍♂️",
	  "🙎🏾",
	  "🙎🏿‍♀️",
	  "🙎🏿‍♂️",
	  "🙎🏿",
	  "🙎‍♀️",
	  "🙎‍♂️",
	  "🙎",
	  "🙏🏻",
	  "🙏🏼",
	  "🙏🏽",
	  "🙏🏾",
	  "🙏🏿",
	  "🙏",
	  "🚀",
	  "🚁",
	  "🚂",
	  "🚃",
	  "🚄",
	  "🚅",
	  "🚆",
	  "🚇",
	  "🚈",
	  "🚉",
	  "🚊",
	  "🚋",
	  "🚌",
	  "🚍",
	  "🚎",
	  "🚏",
	  "🚐",
	  "🚑",
	  "🚒",
	  "🚓",
	  "🚔",
	  "🚕",
	  "🚖",
	  "🚗",
	  "🚘",
	  "🚙",
	  "🚚",
	  "🚛",
	  "🚜",
	  "🚝",
	  "🚞",
	  "🚟",
	  "🚠",
	  "🚡",
	  "🚢",
	  "🚣🏻‍♀️",
	  "🚣🏻‍♂️",
	  "🚣🏻",
	  "🚣🏼‍♀️",
	  "🚣🏼‍♂️",
	  "🚣🏼",
	  "🚣🏽‍♀️",
	  "🚣🏽‍♂️",
	  "🚣🏽",
	  "🚣🏾‍♀️",
	  "🚣🏾‍♂️",
	  "🚣🏾",
	  "🚣🏿‍♀️",
	  "🚣🏿‍♂️",
	  "🚣🏿",
	  "🚣‍♀️",
	  "🚣‍♂️",
	  "🚣",
	  "🚤",
	  "🚥",
	  "🚦",
	  "🚧",
	  "🚨",
	  "🚩",
	  "🚪",
	  "🚫",
	  "🚬",
	  "🚭",
	  "🚮",
	  "🚯",
	  "🚰",
	  "🚱",
	  "🚲",
	  "🚳",
	  "🚴🏻‍♀️",
	  "🚴🏻‍♂️",
	  "🚴🏻",
	  "🚴🏼‍♀️",
	  "🚴🏼‍♂️",
	  "🚴🏼",
	  "🚴🏽‍♀️",
	  "🚴🏽‍♂️",
	  "🚴🏽",
	  "🚴🏾‍♀️",
	  "🚴🏾‍♂️",
	  "🚴🏾",
	  "🚴🏿‍♀️",
	  "🚴🏿‍♂️",
	  "🚴🏿",
	  "🚴‍♀️",
	  "🚴‍♂️",
	  "🚴",
	  "🚵🏻‍♀️",
	  "🚵🏻‍♂️",
	  "🚵🏻",
	  "🚵🏼‍♀️",
	  "🚵🏼‍♂️",
	  "🚵🏼",
	  "🚵🏽‍♀️",
	  "🚵🏽‍♂️",
	  "🚵🏽",
	  "🚵🏾‍♀️",
	  "🚵🏾‍♂️",
	  "🚵🏾",
	  "🚵🏿‍♀️",
	  "🚵🏿‍♂️",
	  "🚵🏿",
	  "🚵‍♀️",
	  "🚵‍♂️",
	  "🚵",
	  "🚶🏻‍♀️",
	  "🚶🏻‍♂️",
	  "🚶🏻",
	  "🚶🏼‍♀️",
	  "🚶🏼‍♂️",
	  "🚶🏼",
	  "🚶🏽‍♀️",
	  "🚶🏽‍♂️",
	  "🚶🏽",
	  "🚶🏾‍♀️",
	  "🚶🏾‍♂️",
	  "🚶🏾",
	  "🚶🏿‍♀️",
	  "🚶🏿‍♂️",
	  "🚶🏿",
	  "🚶‍♀️",
	  "🚶‍♂️",
	  "🚶",
	  "🚷",
	  "🚸",
	  "🚹",
	  "🚺",
	  "🚻",
	  "🚼",
	  "🚽",
	  "🚾",
	  "🚿",
	  "🛀🏻",
	  "🛀🏼",
	  "🛀🏽",
	  "🛀🏾",
	  "🛀🏿",
	  "🛀",
	  "🛁",
	  "🛂",
	  "🛃",
	  "🛄",
	  "🛅",
	  "🛋️",
	  "🛌🏻",
	  "🛌🏼",
	  "🛌🏽",
	  "🛌🏾",
	  "🛌🏿",
	  "🛌",
	  "🛍️",
	  "🛎️",
	  "🛏️",
	  "🛐",
	  "🛑",
	  "🛒",
	  "🛕",
	  "🛠️",
	  "🛡️",
	  "🛢️",
	  "🛣️",
	  "🛤️",
	  "🛥️",
	  "🛩️",
	  "🛫",
	  "🛬",
	  "🛰️",
	  "🛳️",
	  "🛴",
	  "🛵",
	  "🛶",
	  "🛷",
	  "🛸",
	  "🛹",
	  "🛺",
	  "🟠",
	  "🟡",
	  "🟢",
	  "🟣",
	  "🟤",
	  "🟥",
	  "🟦",
	  "🟧",
	  "🟨",
	  "🟩",
	  "🟪",
	  "🟫",
	  "🤍",
	  "🤎",
	  "🤏🏻",
	  "🤏🏼",
	  "🤏🏽",
	  "🤏🏾",
	  "🤏🏿",
	  "🤏",
	  "🤐",
	  "🤑",
	  "🤒",
	  "🤓",
	  "🤔",
	  "🤕",
	  "🤖",
	  "🤗",
	  "🤘🏻",
	  "🤘🏼",
	  "🤘🏽",
	  "🤘🏾",
	  "🤘🏿",
	  "🤘",
	  "🤙🏻",
	  "🤙🏼",
	  "🤙🏽",
	  "🤙🏾",
	  "🤙🏿",
	  "🤙",
	  "🤚🏻",
	  "🤚🏼",
	  "🤚🏽",
	  "🤚🏾",
	  "🤚🏿",
	  "🤚",
	  "🤛🏻",
	  "🤛🏼",
	  "🤛🏽",
	  "🤛🏾",
	  "🤛🏿",
	  "🤛",
	  "🤜🏻",
	  "🤜🏼",
	  "🤜🏽",
	  "🤜🏾",
	  "🤜🏿",
	  "🤜",
	  "🤝",
	  "🤞🏻",
	  "🤞🏼",
	  "🤞🏽",
	  "🤞🏾",
	  "🤞🏿",
	  "🤞",
	  "🤟🏻",
	  "🤟🏼",
	  "🤟🏽",
	  "🤟🏾",
	  "🤟🏿",
	  "🤟",
	  "🤠",
	  "🤡",
	  "🤢",
	  "🤣",
	  "🤤",
	  "🤥",
	  "🤦🏻‍♀️",
	  "🤦🏻‍♂️",
	  "🤦🏻",
	  "🤦🏼‍♀️",
	  "🤦🏼‍♂️",
	  "🤦🏼",
	  "🤦🏽‍♀️",
	  "🤦🏽‍♂️",
	  "🤦🏽",
	  "🤦🏾‍♀️",
	  "🤦🏾‍♂️",
	  "🤦🏾",
	  "🤦🏿‍♀️",
	  "🤦🏿‍♂️",
	  "🤦🏿",
	  "🤦‍♀️",
	  "🤦‍♂️",
	  "🤦",
	  "🤧",
	  "🤨",
	  "🤩",
	  "🤪",
	  "🤫",
	  "🤬",
	  "🤭",
	  "🤮",
	  "🤯",
	  "🤰🏻",
	  "🤰🏼",
	  "🤰🏽",
	  "🤰🏾",
	  "🤰🏿",
	  "🤰",
	  "🤱🏻",
	  "🤱🏼",
	  "🤱🏽",
	  "🤱🏾",
	  "🤱🏿",
	  "🤱",
	  "🤲🏻",
	  "🤲🏼",
	  "🤲🏽",
	  "🤲🏾",
	  "🤲🏿",
	  "🤲",
	  "🤳🏻",
	  "🤳🏼",
	  "🤳🏽",
	  "🤳🏾",
	  "🤳🏿",
	  "🤳",
	  "🤴🏻",
	  "🤴🏼",
	  "🤴🏽",
	  "🤴🏾",
	  "🤴🏿",
	  "🤴",
	  "🤵🏻‍♀️",
	  "🤵🏻‍♂️",
	  "🤵🏻",
	  "🤵🏼‍♀️",
	  "🤵🏼‍♂️",
	  "🤵🏼",
	  "🤵🏽‍♀️",
	  "🤵🏽‍♂️",
	  "🤵🏽",
	  "🤵🏾‍♀️",
	  "🤵🏾‍♂️",
	  "🤵🏾",
	  "🤵🏿‍♀️",
	  "🤵🏿‍♂️",
	  "🤵🏿",
	  "🤵‍♀️",
	  "🤵‍♂️",
	  "🤵",
	  "🤶🏻",
	  "🤶🏼",
	  "🤶🏽",
	  "🤶🏾",
	  "🤶🏿",
	  "🤶",
	  "🤷🏻‍♀️",
	  "🤷🏻‍♂️",
	  "🤷🏻",
	  "🤷🏼‍♀️",
	  "🤷🏼‍♂️",
	  "🤷🏼",
	  "🤷🏽‍♀️",
	  "🤷🏽‍♂️",
	  "🤷🏽",
	  "🤷🏾‍♀️",
	  "🤷🏾‍♂️",
	  "🤷🏾",
	  "🤷🏿‍♀️",
	  "🤷🏿‍♂️",
	  "🤷🏿",
	  "🤷‍♀️",
	  "🤷‍♂️",
	  "🤷",
	  "🤸🏻‍♀️",
	  "🤸🏻‍♂️",
	  "🤸🏻",
	  "🤸🏼‍♀️",
	  "🤸🏼‍♂️",
	  "🤸🏼",
	  "🤸🏽‍♀️",
	  "🤸🏽‍♂️",
	  "🤸🏽",
	  "🤸🏾‍♀️",
	  "🤸🏾‍♂️",
	  "🤸🏾",
	  "🤸🏿‍♀️",
	  "🤸🏿‍♂️",
	  "🤸🏿",
	  "🤸‍♀️",
	  "🤸‍♂️",
	  "🤸",
	  "🤹🏻‍♀️",
	  "🤹🏻‍♂️",
	  "🤹🏻",
	  "🤹🏼‍♀️",
	  "🤹🏼‍♂️",
	  "🤹🏼",
	  "🤹🏽‍♀️",
	  "🤹🏽‍♂️",
	  "🤹🏽",
	  "🤹🏾‍♀️",
	  "🤹🏾‍♂️",
	  "🤹🏾",
	  "🤹🏿‍♀️",
	  "🤹🏿‍♂️",
	  "🤹🏿",
	  "🤹‍♀️",
	  "🤹‍♂️",
	  "🤹",
	  "🤺",
	  "🤼‍♀️",
	  "🤼‍♂️",
	  "🤼",
	  "🤽🏻‍♀️",
	  "🤽🏻‍♂️",
	  "🤽🏻",
	  "🤽🏼‍♀️",
	  "🤽🏼‍♂️",
	  "🤽🏼",
	  "🤽🏽‍♀️",
	  "🤽🏽‍♂️",
	  "🤽🏽",
	  "🤽🏾‍♀️",
	  "🤽🏾‍♂️",
	  "🤽🏾",
	  "🤽🏿‍♀️",
	  "🤽🏿‍♂️",
	  "🤽🏿",
	  "🤽‍♀️",
	  "🤽‍♂️",
	  "🤽",
	  "🤾🏻‍♀️",
	  "🤾🏻‍♂️",
	  "🤾🏻",
	  "🤾🏼‍♀️",
	  "🤾🏼‍♂️",
	  "🤾🏼",
	  "🤾🏽‍♀️",
	  "🤾🏽‍♂️",
	  "🤾🏽",
	  "🤾🏾‍♀️",
	  "🤾🏾‍♂️",
	  "🤾🏾",
	  "🤾🏿‍♀️",
	  "🤾🏿‍♂️",
	  "🤾🏿",
	  "🤾‍♀️",
	  "🤾‍♂️",
	  "🤾",
	  "🤿",
	  "🥀",
	  "🥁",
	  "🥂",
	  "🥃",
	  "🥄",
	  "🥅",
	  "🥇",
	  "🥈",
	  "🥉",
	  "🥊",
	  "🥋",
	  "🥌",
	  "🥍",
	  "🥎",
	  "🥏",
	  "🥐",
	  "🥑",
	  "🥒",
	  "🥓",
	  "🥔",
	  "🥕",
	  "🥖",
	  "🥗",
	  "🥘",
	  "🥙",
	  "🥚",
	  "🥛",
	  "🥜",
	  "🥝",
	  "🥞",
	  "🥟",
	  "🥠",
	  "🥡",
	  "🥢",
	  "🥣",
	  "🥤",
	  "🥥",
	  "🥦",
	  "🥧",
	  "🥨",
	  "🥩",
	  "🥪",
	  "🥫",
	  "🥬",
	  "🥭",
	  "🥮",
	  "🥯",
	  "🥰",
	  "🥱",
	  "🥳",
	  "🥴",
	  "🥵",
	  "🥶",
	  "🥺",
	  "🥻",
	  "🥼",
	  "🥽",
	  "🥾",
	  "🥿",
	  "🦀",
	  "🦁",
	  "🦂",
	  "🦃",
	  "🦄",
	  "🦅",
	  "🦆",
	  "🦇",
	  "🦈",
	  "🦉",
	  "🦊",
	  "🦋",
	  "🦌",
	  "🦍",
	  "🦎",
	  "🦏",
	  "🦐",
	  "🦑",
	  "🦒",
	  "🦓",
	  "🦔",
	  "🦕",
	  "🦖",
	  "🦗",
	  "🦘",
	  "🦙",
	  "🦚",
	  "🦛",
	  "🦜",
	  "🦝",
	  "🦞",
	  "🦟",
	  "🦠",
	  "🦡",
	  "🦢",
	  "🦥",
	  "🦦",
	  "🦧",
	  "🦨",
	  "🦩",
	  "🦪",
	  "🦮",
	  "🦯",
	  "🦰",
	  "🦱",
	  "🦲",
	  "🦳",
	  "🦴",
	  "🦵🏻",
	  "🦵🏼",
	  "🦵🏽",
	  "🦵🏾",
	  "🦵🏿",
	  "🦵",
	  "🦶🏻",
	  "🦶🏼",
	  "🦶🏽",
	  "🦶🏾",
	  "🦶🏿",
	  "🦶",
	  "🦷",
	  "🦸🏻‍♀️",
	  "🦸🏻‍♂️",
	  "🦸🏻",
	  "🦸🏼‍♀️",
	  "🦸🏼‍♂️",
	  "🦸🏼",
	  "🦸🏽‍♀️",
	  "🦸🏽‍♂️",
	  "🦸🏽",
	  "🦸🏾‍♀️",
	  "🦸🏾‍♂️",
	  "🦸🏾",
	  "🦸🏿‍♀️",
	  "🦸🏿‍♂️",
	  "🦸🏿",
	  "🦸‍♀️",
	  "🦸‍♂️",
	  "🦸",
	  "🦹🏻‍♀️",
	  "🦹🏻‍♂️",
	  "🦹🏻",
	  "🦹🏼‍♀️",
	  "🦹🏼‍♂️",
	  "🦹🏼",
	  "🦹🏽‍♀️",
	  "🦹🏽‍♂️",
	  "🦹🏽",
	  "🦹🏾‍♀️",
	  "🦹🏾‍♂️",
	  "🦹🏾",
	  "🦹🏿‍♀️",
	  "🦹🏿‍♂️",
	  "🦹🏿",
	  "🦹‍♀️",
	  "🦹‍♂️",
	  "🦹",
	  "🦺",
	  "🦻🏻",
	  "🦻🏼",
	  "🦻🏽",
	  "🦻🏾",
	  "🦻🏿",
	  "🦻",
	  "🦼",
	  "🦽",
	  "🦾",
	  "🦿",
	  "🧀",
	  "🧁",
	  "🧂",
	  "🧃",
	  "🧄",
	  "🧅",
	  "🧆",
	  "🧇",
	  "🧈",
	  "🧉",
	  "🧊",
	  "🧍🏻‍♀️",
	  "🧍🏻‍♂️",
	  "🧍🏻",
	  "🧍🏼‍♀️",
	  "🧍🏼‍♂️",
	  "🧍🏼",
	  "🧍🏽‍♀️",
	  "🧍🏽‍♂️",
	  "🧍🏽",
	  "🧍🏾‍♀️",
	  "🧍🏾‍♂️",
	  "🧍🏾",
	  "🧍🏿‍♀️",
	  "🧍🏿‍♂️",
	  "🧍🏿",
	  "🧍‍♀️",
	  "🧍‍♂️",
	  "🧍",
	  "🧎🏻‍♀️",
	  "🧎🏻‍♂️",
	  "🧎🏻",
	  "🧎🏼‍♀️",
	  "🧎🏼‍♂️",
	  "🧎🏼",
	  "🧎🏽‍♀️",
	  "🧎🏽‍♂️",
	  "🧎🏽",
	  "🧎🏾‍♀️",
	  "🧎🏾‍♂️",
	  "🧎🏾",
	  "🧎🏿‍♀️",
	  "🧎🏿‍♂️",
	  "🧎🏿",
	  "🧎‍♀️",
	  "🧎‍♂️",
	  "🧎",
	  "🧏🏻‍♀️",
	  "🧏🏻‍♂️",
	  "🧏🏻",
	  "🧏🏼‍♀️",
	  "🧏🏼‍♂️",
	  "🧏🏼",
	  "🧏🏽‍♀️",
	  "🧏🏽‍♂️",
	  "🧏🏽",
	  "🧏🏾‍♀️",
	  "🧏🏾‍♂️",
	  "🧏🏾",
	  "🧏🏿‍♀️",
	  "🧏🏿‍♂️",
	  "🧏🏿",
	  "🧏‍♀️",
	  "🧏‍♂️",
	  "🧏",
	  "🧐",
	  "🧑🏻‍🤝‍🧑🏻",
	  "🧑🏻",
	  "🧑🏼‍🤝‍🧑🏻",
	  "🧑🏼‍🤝‍🧑🏼",
	  "🧑🏼",
	  "🧑🏽‍🤝‍🧑🏻",
	  "🧑🏽‍🤝‍🧑🏼",
	  "🧑🏽‍🤝‍🧑🏽",
	  "🧑🏽",
	  "🧑🏾‍🤝‍🧑🏻",
	  "🧑🏾‍🤝‍🧑🏼",
	  "🧑🏾‍🤝‍🧑🏽",
	  "🧑🏾‍🤝‍🧑🏾",
	  "🧑🏾",
	  "🧑🏿‍🤝‍🧑🏻",
	  "🧑🏿‍🤝‍🧑🏼",
	  "🧑🏿‍🤝‍🧑🏽",
	  "🧑🏿‍🤝‍🧑🏾",
	  "🧑🏿‍🤝‍🧑🏿",
	  "🧑🏿",
	  "🧑‍🤝‍🧑",
	  "🧑",
	  "🧒🏻",
	  "🧒🏼",
	  "🧒🏽",
	  "🧒🏾",
	  "🧒🏿",
	  "🧒",
	  "🧓🏻",
	  "🧓🏼",
	  "🧓🏽",
	  "🧓🏾",
	  "🧓🏿",
	  "🧓",
	  "🧔🏻",
	  "🧔🏼",
	  "🧔🏽",
	  "🧔🏾",
	  "🧔🏿",
	  "🧔",
	  "🧕🏻",
	  "🧕🏼",
	  "🧕🏽",
	  "🧕🏾",
	  "🧕🏿",
	  "🧕",
	  "🧖🏻‍♀️",
	  "🧖🏻‍♂️",
	  "🧖🏻",
	  "🧖🏼‍♀️",
	  "🧖🏼‍♂️",
	  "🧖🏼",
	  "🧖🏽‍♀️",
	  "🧖🏽‍♂️",
	  "🧖🏽",
	  "🧖🏾‍♀️",
	  "🧖🏾‍♂️",
	  "🧖🏾",
	  "🧖🏿‍♀️",
	  "🧖🏿‍♂️",
	  "🧖🏿",
	  "🧖‍♀️",
	  "🧖‍♂️",
	  "🧖",
	  "🧗🏻‍♀️",
	  "🧗🏻‍♂️",
	  "🧗🏻",
	  "🧗🏼‍♀️",
	  "🧗🏼‍♂️",
	  "🧗🏼",
	  "🧗🏽‍♀️",
	  "🧗🏽‍♂️",
	  "🧗🏽",
	  "🧗🏾‍♀️",
	  "🧗🏾‍♂️",
	  "🧗🏾",
	  "🧗🏿‍♀️",
	  "🧗🏿‍♂️",
	  "🧗🏿",
	  "🧗‍♀️",
	  "🧗‍♂️",
	  "🧗",
	  "🧘🏻‍♀️",
	  "🧘🏻‍♂️",
	  "🧘🏻",
	  "🧘🏼‍♀️",
	  "🧘🏼‍♂️",
	  "🧘🏼",
	  "🧘🏽‍♀️",
	  "🧘🏽‍♂️",
	  "🧘🏽",
	  "🧘🏾‍♀️",
	  "🧘🏾‍♂️",
	  "🧘🏾",
	  "🧘🏿‍♀️",
	  "🧘🏿‍♂️",
	  "🧘🏿",
	  "🧘‍♀️",
	  "🧘‍♂️",
	  "🧘",
	  "🧙🏻‍♀️",
	  "🧙🏻‍♂️",
	  "🧙🏻",
	  "🧙🏼‍♀️",
	  "🧙🏼‍♂️",
	  "🧙🏼",
	  "🧙🏽‍♀️",
	  "🧙🏽‍♂️",
	  "🧙🏽",
	  "🧙🏾‍♀️",
	  "🧙🏾‍♂️",
	  "🧙🏾",
	  "🧙🏿‍♀️",
	  "🧙🏿‍♂️",
	  "🧙🏿",
	  "🧙‍♀️",
	  "🧙‍♂️",
	  "🧙",
	  "🧚🏻‍♀️",
	  "🧚🏻‍♂️",
	  "🧚🏻",
	  "🧚🏼‍♀️",
	  "🧚🏼‍♂️",
	  "🧚🏼",
	  "🧚🏽‍♀️",
	  "🧚🏽‍♂️",
	  "🧚🏽",
	  "🧚🏾‍♀️",
	  "🧚🏾‍♂️",
	  "🧚🏾",
	  "🧚🏿‍♀️",
	  "🧚🏿‍♂️",
	  "🧚🏿",
	  "🧚‍♀️",
	  "🧚‍♂️",
	  "🧚",
	  "🧛🏻‍♀️",
	  "🧛🏻‍♂️",
	  "🧛🏻",
	  "🧛🏼‍♀️",
	  "🧛🏼‍♂️",
	  "🧛🏼",
	  "🧛🏽‍♀️",
	  "🧛🏽‍♂️",
	  "🧛🏽",
	  "🧛🏾‍♀️",
	  "🧛🏾‍♂️",
	  "🧛🏾",
	  "🧛🏿‍♀️",
	  "🧛🏿‍♂️",
	  "🧛🏿",
	  "🧛‍♀️",
	  "🧛‍♂️",
	  "🧛",
	  "🧜🏻‍♀️",
	  "🧜🏻‍♂️",
	  "🧜🏻",
	  "🧜🏼‍♀️",
	  "🧜🏼‍♂️",
	  "🧜🏼",
	  "🧜🏽‍♀️",
	  "🧜🏽‍♂️",
	  "🧜🏽",
	  "🧜🏾‍♀️",
	  "🧜🏾‍♂️",
	  "🧜🏾",
	  "🧜🏿‍♀️",
	  "🧜🏿‍♂️",
	  "🧜🏿",
	  "🧜‍♀️",
	  "🧜‍♂️",
	  "🧜",
	  "🧝🏻‍♀️",
	  "🧝🏻‍♂️",
	  "🧝🏻",
	  "🧝🏼‍♀️",
	  "🧝🏼‍♂️",
	  "🧝🏼",
	  "🧝🏽‍♀️",
	  "🧝🏽‍♂️",
	  "🧝🏽",
	  "🧝🏾‍♀️",
	  "🧝🏾‍♂️",
	  "🧝🏾",
	  "🧝🏿‍♀️",
	  "🧝🏿‍♂️",
	  "🧝🏿",
	  "🧝‍♀️",
	  "🧝‍♂️",
	  "🧝",
	  "🧞‍♀️",
	  "🧞‍♂️",
	  "🧞",
	  "🧟‍♀️",
	  "🧟‍♂️",
	  "🧟",
	  "🧠",
	  "🧡",
	  "🧢",
	  "🧣",
	  "🧤",
	  "🧥",
	  "🧦",
	  "🧧",
	  "🧨",
	  "🧩",
	  "🧪",
	  "🧫",
	  "🧬",
	  "🧭",
	  "🧮",
	  "🧯",
	  "🧰",
	  "🧱",
	  "🧲",
	  "🧳",
	  "🧴",
	  "🧵",
	  "🧶",
	  "🧷",
	  "🧸",
	  "🧹",
	  "🧺",
	  "🧻",
	  "🧼",
	  "🧽",
	  "🧾",
	  "🧿",
	  "🩰",
	  "🩱",
	  "🩲",
	  "🩳",
	  "🩸",
	  "🩹",
	  "🩺",
	  "🪀",
	  "🪁",
	  "🪂",
	  "🪐",
	  "🪑",
	  "🪒",
	  "🪓",
	  "🪔",
	  "🪕",
	  "‼️",
	  "⁉️",
	  "™️",
	  "ℹ️",
	  "↔️",
	  "↕️",
	  "↖️",
	  "↗️",
	  "↘️",
	  "↙️",
	  "↩️",
	  "↪️",
	  "#⃣",
	  "⌚️",
	  "⌛️",
	  "⌨️",
	  "⏏️",
	  "⏩",
	  "⏪",
	  "⏫",
	  "⏬",
	  "⏭️",
	  "⏮️",
	  "⏯️",
	  "⏰",
	  "⏱️",
	  "⏲️",
	  "⏳",
	  "⏸️",
	  "⏹️",
	  "⏺️",
	  "Ⓜ️",
	  "▪️",
	  "▫️",
	  "▶️",
	  "◀️",
	  "◻️",
	  "◼️",
	  "◽️",
	  "◾️",
	  "☀️",
	  "☁️",
	  "☂️",
	  "☃️",
	  "☄️",
	  "☎️",
	  "☑️",
	  "☔️",
	  "☕️",
	  "☘️",
	  "☝🏻",
	  "☝🏼",
	  "☝🏽",
	  "☝🏾",
	  "☝🏿",
	  "☝️",
	  "☠️",
	  "☢️",
	  "☣️",
	  "☦️",
	  "☪️",
	  "☮️",
	  "☯️",
	  "☸️",
	  "☹️",
	  "☺️",
	  "♀️",
	  "♂️",
	  "♈️",
	  "♉️",
	  "♊️",
	  "♋️",
	  "♌️",
	  "♍️",
	  "♎️",
	  "♏️",
	  "♐️",
	  "♑️",
	  "♒️",
	  "♓️",
	  "♟️",
	  "♠️",
	  "♣️",
	  "♥️",
	  "♦️",
	  "♨️",
	  "♻️",
	  "♾",
	  "♿️",
	  "⚒️",
	  "⚓️",
	  "⚔️",
	  "⚕️",
	  "⚖️",
	  "⚗️",
	  "⚙️",
	  "⚛️",
	  "⚜️",
	  "⚠️",
	  "⚡️",
	  "⚪️",
	  "⚫️",
	  "⚰️",
	  "⚱️",
	  "⚽️",
	  "⚾️",
	  "⛄️",
	  "⛅️",
	  "⛈️",
	  "⛎",
	  "⛏️",
	  "⛑️",
	  "⛓️",
	  "⛔️",
	  "⛩️",
	  "⛪️",
	  "⛰️",
	  "⛱️",
	  "⛲️",
	  "⛳️",
	  "⛴️",
	  "⛵️",
	  "⛷🏻",
	  "⛷🏼",
	  "⛷🏽",
	  "⛷🏾",
	  "⛷🏿",
	  "⛷️",
	  "⛸️",
	  "⛹🏻‍♀️",
	  "⛹🏻‍♂️",
	  "⛹🏻",
	  "⛹🏼‍♀️",
	  "⛹🏼‍♂️",
	  "⛹🏼",
	  "⛹🏽‍♀️",
	  "⛹🏽‍♂️",
	  "⛹🏽",
	  "⛹🏾‍♀️",
	  "⛹🏾‍♂️",
	  "⛹🏾",
	  "⛹🏿‍♀️",
	  "⛹🏿‍♂️",
	  "⛹🏿",
	  "⛹️‍♀️",
	  "⛹️‍♂️",
	  "⛹️",
	  "⛺️",
	  "⛽️",
	  "✂️",
	  "✅",
	  "✈️",
	  "✉️",
	  "✊🏻",
	  "✊🏼",
	  "✊🏽",
	  "✊🏾",
	  "✊🏿",
	  "✊",
	  "✋🏻",
	  "✋🏼",
	  "✋🏽",
	  "✋🏾",
	  "✋🏿",
	  "✋",
	  "✌🏻",
	  "✌🏼",
	  "✌🏽",
	  "✌🏾",
	  "✌🏿",
	  "✌️",
	  "✍🏻",
	  "✍🏼",
	  "✍🏽",
	  "✍🏾",
	  "✍🏿",
	  "✍️",
	  "✏️",
	  "✒️",
	  "✔️",
	  "✖️",
	  "✝️",
	  "✡️",
	  "✨",
	  "✳️",
	  "✴️",
	  "❄️",
	  "❇️",
	  "❌",
	  "❎",
	  "❓",
	  "❔",
	  "❕",
	  "❗️",
	  "❣️",
	  "❤️",
	  "➕",
	  "➖",
	  "➗",
	  "➡️",
	  "➰",
	  "➿",
	  "⤴️",
	  "⤵️",
	  "*⃣",
	  "⬅️",
	  "⬆️",
	  "⬇️",
	  "⬛️",
	  "⬜️",
	  "⭐️",
	  "⭕️",
	  "0⃣",
	  "〰️",
	  "〽️",
	  "1⃣",
	  "2⃣",
	  "㊗️",
	  "㊙️",
	  "3⃣",
	  "4⃣",
	  "5⃣",
	  "6⃣",
	  "7⃣",
	  "8⃣",
	  "9⃣",
	  "©️",
	  "®️",
	  ""
	];

	const path$2 = require$$3;
	const emojisList = _emojisList_3_0_0_emojisList;
	const getHashDigest$1 = getHashDigest_1;

	const emojiRegex = /[\uD800-\uDFFF]./;
	const emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));
	const emojiCache = {};

	function encodeStringToEmoji(content, length) {
	  if (emojiCache[content]) {
	    return emojiCache[content];
	  }

	  length = length || 1;

	  const emojis = [];

	  do {
	    if (!emojiList.length) {
	      throw new Error('Ran out of emoji');
	    }

	    const index = Math.floor(Math.random() * emojiList.length);

	    emojis.push(emojiList[index]);
	    emojiList.splice(index, 1);
	  } while (--length > 0);

	  const emojiEncoding = emojis.join('');

	  emojiCache[content] = emojiEncoding;

	  return emojiEncoding;
	}

	function interpolateName$2(loaderContext, name, options) {
	  let filename;

	  const hasQuery =
	    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;

	  if (typeof name === 'function') {
	    filename = name(
	      loaderContext.resourcePath,
	      hasQuery ? loaderContext.resourceQuery : undefined
	    );
	  } else {
	    filename = name || '[hash].[ext]';
	  }

	  const context = options.context;
	  const content = options.content;
	  const regExp = options.regExp;

	  let ext = 'bin';
	  let basename = 'file';
	  let directory = '';
	  let folder = '';
	  let query = '';

	  if (loaderContext.resourcePath) {
	    const parsed = path$2.parse(loaderContext.resourcePath);
	    let resourcePath = loaderContext.resourcePath;

	    if (parsed.ext) {
	      ext = parsed.ext.substr(1);
	    }

	    if (parsed.dir) {
	      basename = parsed.name;
	      resourcePath = parsed.dir + path$2.sep;
	    }

	    if (typeof context !== 'undefined') {
	      directory = path$2
	        .relative(context, resourcePath + '_')
	        .replace(/\\/g, '/')
	        .replace(/\.\.(\/)?/g, '_$1');
	      directory = directory.substr(0, directory.length - 1);
	    } else {
	      directory = resourcePath.replace(/\\/g, '/').replace(/\.\.(\/)?/g, '_$1');
	    }

	    if (directory.length === 1) {
	      directory = '';
	    } else if (directory.length > 1) {
	      folder = path$2.basename(directory);
	    }
	  }

	  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {
	    query = loaderContext.resourceQuery;

	    const hashIdx = query.indexOf('#');

	    if (hashIdx >= 0) {
	      query = query.substr(0, hashIdx);
	    }
	  }

	  let url = filename;

	  if (content) {
	    // Match hash template
	    url = url
	      // `hash` and `contenthash` are same in `loader-utils` context
	      // let's keep `hash` for backward compatibility
	      .replace(
	        /\[(?:([^:\]]+):)?(?:hash|contenthash)(?::([a-z]+\d*))?(?::(\d+))?\]/gi,
	        (all, hashType, digestType, maxLength) =>
	          getHashDigest$1(content, hashType, digestType, parseInt(maxLength, 10))
	      )
	      .replace(/\[emoji(?::(\d+))?\]/gi, (all, length) =>
	        encodeStringToEmoji(content, parseInt(length, 10))
	      );
	  }

	  url = url
	    .replace(/\[ext\]/gi, () => ext)
	    .replace(/\[name\]/gi, () => basename)
	    .replace(/\[path\]/gi, () => directory)
	    .replace(/\[folder\]/gi, () => folder)
	    .replace(/\[query\]/gi, () => query);

	  if (regExp && loaderContext.resourcePath) {
	    const match = loaderContext.resourcePath.match(new RegExp(regExp));

	    match &&
	      match.forEach((matched, i) => {
	        url = url.replace(new RegExp('\\[' + i + '\\]', 'ig'), matched);
	      });
	  }

	  if (
	    typeof loaderContext.options === 'object' &&
	    typeof loaderContext.options.customInterpolateName === 'function'
	  ) {
	    url = loaderContext.options.customInterpolateName.call(
	      loaderContext,
	      url,
	      name,
	      options
	    );
	  }

	  return url;
	}

	var interpolateName_1 = interpolateName$2;

	const getOptions = getOptions_1;
	const parseQuery = parseQuery_1;
	const stringifyRequest = stringifyRequest_1;
	const getRemainingRequest = getRemainingRequest_1;
	const getCurrentRequest = getCurrentRequest_1;
	const isUrlRequest = isUrlRequest_1;
	const urlToRequest = urlToRequest_1;
	const parseString = parseString_1;
	const getHashDigest = getHashDigest_1;
	const interpolateName$1 = interpolateName_1;

	lib$3.getOptions = getOptions;
	lib$3.parseQuery = parseQuery;
	lib$3.stringifyRequest = stringifyRequest;
	lib$3.getRemainingRequest = getRemainingRequest;
	lib$3.getCurrentRequest = getCurrentRequest;
	lib$3.isUrlRequest = isUrlRequest;
	lib$3.urlToRequest = urlToRequest;
	lib$3.parseString = parseString;
	lib$3.getHashDigest = getHashDigest;
	lib$3.interpolateName = interpolateName$1;

	var interpolateName = lib$3.interpolateName;
	var path$1 = require$$3;

	/**
	 * @param  {string} pattern
	 * @param  {object} options
	 * @param  {string} options.context
	 * @param  {string} options.hashPrefix
	 * @return {function}
	 */
	var _genericNames_2_0_1_genericNames = function createGenerator(pattern, options) {
	  options = options || {};
	  var context =
	    options && typeof options.context === "string"
	      ? options.context
	      : process.cwd();
	  var hashPrefix =
	    options && typeof options.hashPrefix === "string" ? options.hashPrefix : "";

	  /**
	   * @param  {string} localName Usually a class name
	   * @param  {string} filepath  Absolute path
	   * @return {string}
	   */
	  return function generate(localName, filepath) {
	    var name = pattern.replace(/\[local\]/gi, localName);
	    var loaderContext = {
	      resourcePath: filepath
	    };

	    var loaderOptions = {
	      content:
	        hashPrefix +
	        path$1.relative(context, filepath).replace(/\\/g, "/") +
	        "+" +
	        localName,
	      context: context
	    };

	    var genericName = interpolateName(loaderContext, name, loaderOptions);
	    return genericName
	      .replace(new RegExp("[^a-zA-Z0-9\\-_\u00A0-\uFFFF]", "g"), "-")
	      .replace(/^((-?[0-9])|--)/, "_$1");
	  };
	};

	var parser$1 = {};

	var lib$1 = {};

	Object.defineProperty(lib$1, "__esModule", {
	  value: true
	});
	lib$1.replaceAll = replaceAll;
	var matchConstName = /[$#]?[\w-\.]+/g;

	function replaceAll(replacements, text) {
	  var matches = void 0;
	  while (matches = matchConstName.exec(text)) {
	    var replacement = replacements[matches[0]];
	    if (replacement) {
	      text = text.slice(0, matches.index) + replacement + text.slice(matchConstName.lastIndex);
	      matchConstName.lastIndex -= matches[0].length - replacement.length;
	    }
	  }
	  return text;
	}

	lib$1.default = function (css, translations) {
	  css.walkDecls(function (decl) {
	    return decl.value = replaceAll(translations, decl.value);
	  });
	  css.walkAtRules('media', function (atRule) {
	    return atRule.params = replaceAll(translations, atRule.params);
	  });
	};

	Object.defineProperty(parser$1, "__esModule", {
	  value: true
	});

	var _icssReplaceSymbols = lib$1;

	var _icssReplaceSymbols2 = _interopRequireDefault$4(_icssReplaceSymbols);

	function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Copied from https://github.com/css-modules/css-modules-loader-core

	const importRegexp = /^:import\((.+)\)$/;
	class Parser {
	  constructor(pathFetcher, trace) {
	    this.pathFetcher = pathFetcher;
	    this.plugin = this.plugin.bind(this);
	    this.exportTokens = {};
	    this.translations = {};
	    this.trace = trace;
	  }

	  plugin() {
	    const parser = this;
	    return {
	      postcssPlugin: "css-modules-parser",
	      OnceExit(css) {
	        return Promise.all(parser.fetchAllImports(css)).then(() => parser.linkImportedSymbols(css)).then(() => parser.extractExports(css));
	      }
	    };
	  }

	  fetchAllImports(css) {
	    let imports = [];
	    css.each(node => {
	      if (node.type == "rule" && node.selector.match(importRegexp)) {
	        imports.push(this.fetchImport(node, css.source.input.from, imports.length));
	      }
	    });
	    return imports;
	  }

	  linkImportedSymbols(css) {
	    (0, _icssReplaceSymbols2.default)(css, this.translations);
	  }

	  extractExports(css) {
	    css.each(node => {
	      if (node.type == "rule" && node.selector == ":export") this.handleExport(node);
	    });
	  }

	  handleExport(exportNode) {
	    exportNode.each(decl => {
	      if (decl.type == "decl") {
	        Object.keys(this.translations).forEach(translation => {
	          decl.value = decl.value.replace(translation, this.translations[translation]);
	        });
	        this.exportTokens[decl.prop] = decl.value;
	      }
	    });
	    exportNode.remove();
	  }

	  fetchImport(importNode, relativeTo, depNr) {
	    let file = importNode.selector.match(importRegexp)[1],
	        depTrace = this.trace + String.fromCharCode(depNr);
	    return this.pathFetcher(file, relativeTo, depTrace).then(exports => {
	      importNode.each(decl => {
	        if (decl.type == "decl") {
	          this.translations[decl.prop] = exports[decl.value];
	        }
	      });
	      importNode.remove();
	    }, err => console.log(err));
	  }
	}
	parser$1.default = Parser;

	var loader = {};

	Object.defineProperty(loader, "__esModule", {
	  value: true
	});

	var _postcss$1 = postcss_1;

	var _postcss2$1 = _interopRequireDefault$3(_postcss$1);

	var _fs$1 = require$$0$5;

	var _fs2 = _interopRequireDefault$3(_fs$1);

	var _path = require$$3;

	var _path2 = _interopRequireDefault$3(_path);

	var _parser$1 = parser$1;

	var _parser2$1 = _interopRequireDefault$3(_parser$1);

	function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Copied from https://github.com/css-modules/css-modules-loader-core

	class Core {
	  constructor(plugins) {
	    this.plugins = plugins || Core.defaultPlugins;
	  }

	  load(sourceString, sourcePath, trace, pathFetcher) {
	    let parser = new _parser2$1.default(pathFetcher, trace);

	    return (0, _postcss2$1.default)(this.plugins.concat([parser.plugin()])).process(sourceString, { from: "/" + sourcePath }).then(result => {
	      return {
	        injectableSource: result.css,
	        exportTokens: parser.exportTokens
	      };
	    });
	  }
	}

	// Sorts dependencies in the following way:
	// AAA comes before AA and A
	// AB comes after AA and before A
	// All Bs come after all As
	// This ensures that the files are always returned in the following order:
	// - In the order they were required, except
	// - After all their dependencies
	const traceKeySorter = (a, b) => {
	  if (a.length < b.length) {
	    return a < b.substring(0, a.length) ? -1 : 1;
	  } else if (a.length > b.length) {
	    return a.substring(0, b.length) <= b ? -1 : 1;
	  } else {
	    return a < b ? -1 : 1;
	  }
	};

	class FileSystemLoader {
	  constructor(root, plugins) {
	    this.root = root;
	    this.sources = {};
	    this.traces = {};
	    this.importNr = 0;
	    this.core = new Core(plugins);
	    this.tokensByFile = {};
	  }

	  fetch(_newPath, relativeTo, _trace) {
	    let newPath = _newPath.replace(/^["']|["']$/g, ""),
	        trace = _trace || String.fromCharCode(this.importNr++);
	    return new Promise((resolve, reject) => {
	      let relativeDir = _path2.default.dirname(relativeTo),
	          rootRelativePath = _path2.default.resolve(relativeDir, newPath),
	          fileRelativePath = _path2.default.resolve(_path2.default.join(this.root, relativeDir), newPath);

	      // if the path is not relative or absolute, try to resolve it in node_modules
	      if (newPath[0] !== "." && newPath[0] !== "/") {
	        try {
	          fileRelativePath = require.resolve(newPath);
	        } catch (e) {
	          // noop
	        }
	      }

	      const tokens = this.tokensByFile[fileRelativePath];
	      if (tokens) {
	        return resolve(tokens);
	      }

	      _fs2.default.readFile(fileRelativePath, "utf-8", (err, source) => {
	        if (err) reject(err);
	        this.core.load(source, rootRelativePath, trace, this.fetch.bind(this)).then(({ injectableSource, exportTokens }) => {
	          this.sources[fileRelativePath] = injectableSource;
	          this.traces[trace] = fileRelativePath;
	          this.tokensByFile[fileRelativePath] = exportTokens;
	          resolve(exportTokens);
	        }, reject);
	      });
	    });
	  }

	  get finalSource() {
	    const traces = this.traces;
	    const sources = this.sources;
	    let written = new Set();

	    return Object.keys(traces).sort(traceKeySorter).map(key => {
	      const filename = traces[key];
	      if (written.has(filename)) {
	        return null;
	      }
	      written.add(filename);

	      return sources[filename];
	    }).join("");
	  }
	}
	loader.default = FileSystemLoader;

	var generateScopedName$1 = {};

	function hash$1(str) {
	  var hash = 5381,
	      i    = str.length;

	  while(i) {
	    hash = (hash * 33) ^ str.charCodeAt(--i);
	  }

	  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
	   * integers. Since we want the results to be always positive, convert the
	   * signed int to an unsigned by doing an unsigned bitshift. */
	  return hash >>> 0;
	}

	var _stringHash_1_1_3_stringHash = hash$1;

	Object.defineProperty(generateScopedName$1, "__esModule", {
	  value: true
	});
	generateScopedName$1.default = generateScopedName;

	var _stringHash = _stringHash_1_1_3_stringHash;

	var _stringHash2 = _interopRequireDefault$2(_stringHash);

	function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function generateScopedName(name, filename, css) {
	  const i = css.indexOf(`.${name}`);
	  const lineNumber = css.substr(0, i).split(/[\r\n]/).length;
	  const hash = (0, _stringHash2.default)(css).toString(36).substr(0, 5);

	  return `_${name}_${hash}_${lineNumber}`;
	}

	var saveJSON$1 = {};

	Object.defineProperty(saveJSON$1, "__esModule", {
	  value: true
	});
	saveJSON$1.default = saveJSON;

	var _fs = require$$0$5;

	function saveJSON(cssFile, json) {
	  return new Promise((resolve, reject) => {
	    (0, _fs.writeFile)(`${cssFile}.json`, JSON.stringify(json), e => e ? reject(e) : resolve(json));
	  });
	}

	var behaviours$1 = {};

	var src$4 = {exports: {}};

	var openParentheses = "(".charCodeAt(0);
	var closeParentheses = ")".charCodeAt(0);
	var singleQuote = "'".charCodeAt(0);
	var doubleQuote = '"'.charCodeAt(0);
	var backslash = "\\".charCodeAt(0);
	var slash = "/".charCodeAt(0);
	var comma = ",".charCodeAt(0);
	var colon = ":".charCodeAt(0);
	var star = "*".charCodeAt(0);
	var uLower = "u".charCodeAt(0);
	var uUpper = "U".charCodeAt(0);
	var plus$1 = "+".charCodeAt(0);
	var isUnicodeRange = /^[a-f0-9?-]+$/i;

	var parse$4 = function(input) {
	  var tokens = [];
	  var value = input;

	  var next,
	    quote,
	    prev,
	    token,
	    escape,
	    escapePos,
	    whitespacePos,
	    parenthesesOpenPos;
	  var pos = 0;
	  var code = value.charCodeAt(pos);
	  var max = value.length;
	  var stack = [{ nodes: tokens }];
	  var balanced = 0;
	  var parent;

	  var name = "";
	  var before = "";
	  var after = "";

	  while (pos < max) {
	    // Whitespaces
	    if (code <= 32) {
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      token = value.slice(pos, next);

	      prev = tokens[tokens.length - 1];
	      if (code === closeParentheses && balanced) {
	        after = token;
	      } else if (prev && prev.type === "div") {
	        prev.after = token;
	      } else if (
	        code === comma ||
	        code === colon ||
	        (code === slash &&
	          value.charCodeAt(next + 1) !== star &&
	          (!parent ||
	            (parent && parent.type === "function" && parent.value !== "calc")))
	      ) {
	        before = token;
	      } else {
	        tokens.push({
	          type: "space",
	          sourceIndex: pos,
	          value: token
	        });
	      }

	      pos = next;

	      // Quotes
	    } else if (code === singleQuote || code === doubleQuote) {
	      next = pos;
	      quote = code === singleQuote ? "'" : '"';
	      token = {
	        type: "string",
	        sourceIndex: pos,
	        quote: quote
	      };
	      do {
	        escape = false;
	        next = value.indexOf(quote, next + 1);
	        if (~next) {
	          escapePos = next;
	          while (value.charCodeAt(escapePos - 1) === backslash) {
	            escapePos -= 1;
	            escape = !escape;
	          }
	        } else {
	          value += quote;
	          next = value.length - 1;
	          token.unclosed = true;
	        }
	      } while (escape);
	      token.value = value.slice(pos + 1, next);

	      tokens.push(token);
	      pos = next + 1;
	      code = value.charCodeAt(pos);

	      // Comments
	    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
	      token = {
	        type: "comment",
	        sourceIndex: pos
	      };

	      next = value.indexOf("*/", pos);
	      if (next === -1) {
	        token.unclosed = true;
	        next = value.length;
	      }

	      token.value = value.slice(pos + 2, next);
	      tokens.push(token);

	      pos = next + 2;
	      code = value.charCodeAt(pos);

	      // Operation within calc
	    } else if (
	      (code === slash || code === star) &&
	      parent &&
	      parent.type === "function" &&
	      parent.value === "calc"
	    ) {
	      token = value[pos];
	      tokens.push({
	        type: "word",
	        sourceIndex: pos - before.length,
	        value: token
	      });
	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Dividers
	    } else if (code === slash || code === comma || code === colon) {
	      token = value[pos];

	      tokens.push({
	        type: "div",
	        sourceIndex: pos - before.length,
	        value: token,
	        before: before,
	        after: ""
	      });
	      before = "";

	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Open parentheses
	    } else if (openParentheses === code) {
	      // Whitespaces after open parentheses
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      parenthesesOpenPos = pos;
	      token = {
	        type: "function",
	        sourceIndex: pos - name.length,
	        value: name,
	        before: value.slice(parenthesesOpenPos + 1, next)
	      };
	      pos = next;

	      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
	        next -= 1;
	        do {
	          escape = false;
	          next = value.indexOf(")", next + 1);
	          if (~next) {
	            escapePos = next;
	            while (value.charCodeAt(escapePos - 1) === backslash) {
	              escapePos -= 1;
	              escape = !escape;
	            }
	          } else {
	            value += ")";
	            next = value.length - 1;
	            token.unclosed = true;
	          }
	        } while (escape);
	        // Whitespaces before closed
	        whitespacePos = next;
	        do {
	          whitespacePos -= 1;
	          code = value.charCodeAt(whitespacePos);
	        } while (code <= 32);
	        if (parenthesesOpenPos < whitespacePos) {
	          if (pos !== whitespacePos + 1) {
	            token.nodes = [
	              {
	                type: "word",
	                sourceIndex: pos,
	                value: value.slice(pos, whitespacePos + 1)
	              }
	            ];
	          } else {
	            token.nodes = [];
	          }
	          if (token.unclosed && whitespacePos + 1 !== next) {
	            token.after = "";
	            token.nodes.push({
	              type: "space",
	              sourceIndex: whitespacePos + 1,
	              value: value.slice(whitespacePos + 1, next)
	            });
	          } else {
	            token.after = value.slice(whitespacePos + 1, next);
	          }
	        } else {
	          token.after = "";
	          token.nodes = [];
	        }
	        pos = next + 1;
	        code = value.charCodeAt(pos);
	        tokens.push(token);
	      } else {
	        balanced += 1;
	        token.after = "";
	        tokens.push(token);
	        stack.push(token);
	        tokens = token.nodes = [];
	        parent = token;
	      }
	      name = "";

	      // Close parentheses
	    } else if (closeParentheses === code && balanced) {
	      pos += 1;
	      code = value.charCodeAt(pos);

	      parent.after = after;
	      after = "";
	      balanced -= 1;
	      stack.pop();
	      parent = stack[balanced];
	      tokens = parent.nodes;

	      // Words
	    } else {
	      next = pos;
	      do {
	        if (code === backslash) {
	          next += 1;
	        }
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (
	        next < max &&
	        !(
	          code <= 32 ||
	          code === singleQuote ||
	          code === doubleQuote ||
	          code === comma ||
	          code === colon ||
	          code === slash ||
	          code === openParentheses ||
	          (code === star &&
	            parent &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === slash &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === closeParentheses && balanced)
	        )
	      );
	      token = value.slice(pos, next);

	      if (openParentheses === code) {
	        name = token;
	      } else if (
	        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
	        plus$1 === token.charCodeAt(1) &&
	        isUnicodeRange.test(token.slice(2))
	      ) {
	        tokens.push({
	          type: "unicode-range",
	          sourceIndex: pos,
	          value: token
	        });
	      } else {
	        tokens.push({
	          type: "word",
	          sourceIndex: pos,
	          value: token
	        });
	      }

	      pos = next;
	    }
	  }

	  for (pos = stack.length - 1; pos; pos -= 1) {
	    stack[pos].unclosed = true;
	  }

	  return stack[0].nodes;
	};

	var walk$1 = function walk(nodes, cb, bubble) {
	  var i, max, node, result;

	  for (i = 0, max = nodes.length; i < max; i += 1) {
	    node = nodes[i];
	    if (!bubble) {
	      result = cb(node, i, nodes);
	    }

	    if (
	      result !== false &&
	      node.type === "function" &&
	      Array.isArray(node.nodes)
	    ) {
	      walk(node.nodes, cb, bubble);
	    }

	    if (bubble) {
	      cb(node, i, nodes);
	    }
	  }
	};

	function stringifyNode(node, custom) {
	  var type = node.type;
	  var value = node.value;
	  var buf;
	  var customResult;

	  if (custom && (customResult = custom(node)) !== undefined) {
	    return customResult;
	  } else if (type === "word" || type === "space") {
	    return value;
	  } else if (type === "string") {
	    buf = node.quote || "";
	    return buf + value + (node.unclosed ? "" : buf);
	  } else if (type === "comment") {
	    return "/*" + value + (node.unclosed ? "" : "*/");
	  } else if (type === "div") {
	    return (node.before || "") + value + (node.after || "");
	  } else if (Array.isArray(node.nodes)) {
	    buf = stringify$1(node.nodes, custom);
	    if (type !== "function") {
	      return buf;
	    }
	    return (
	      value +
	      "(" +
	      (node.before || "") +
	      buf +
	      (node.after || "") +
	      (node.unclosed ? "" : ")")
	    );
	  }
	  return value;
	}

	function stringify$1(nodes, custom) {
	  var result, i;

	  if (Array.isArray(nodes)) {
	    result = "";
	    for (i = nodes.length - 1; ~i; i -= 1) {
	      result = stringifyNode(nodes[i], custom) + result;
	    }
	    return result;
	  }
	  return stringifyNode(nodes, custom);
	}

	var stringify_1 = stringify$1;

	var minus = "-".charCodeAt(0);
	var plus = "+".charCodeAt(0);
	var dot = ".".charCodeAt(0);
	var exp = "e".charCodeAt(0);
	var EXP = "E".charCodeAt(0);

	// Check if three code points would start a number
	// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
	function likeNumber(value) {
	  var code = value.charCodeAt(0);
	  var nextCode;

	  if (code === plus || code === minus) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    var nextNextCode = value.charCodeAt(2);

	    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code === dot) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code >= 48 && code <= 57) {
	    return true;
	  }

	  return false;
	}

	// Consume a number
	// https://www.w3.org/TR/css-syntax-3/#consume-number
	var unit = function(value) {
	  var pos = 0;
	  var length = value.length;
	  var code;
	  var nextCode;
	  var nextNextCode;

	  if (length === 0 || !likeNumber(value)) {
	    return false;
	  }

	  code = value.charCodeAt(pos);

	  if (code === plus || code === minus) {
	    pos++;
	  }

	  while (pos < length) {
	    code = value.charCodeAt(pos);

	    if (code < 48 || code > 57) {
	      break;
	    }

	    pos += 1;
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);

	  if (code === dot && nextCode >= 48 && nextCode <= 57) {
	    pos += 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);
	  nextNextCode = value.charCodeAt(pos + 2);

	  if (
	    (code === exp || code === EXP) &&
	    ((nextCode >= 48 && nextCode <= 57) ||
	      ((nextCode === plus || nextCode === minus) &&
	        nextNextCode >= 48 &&
	        nextNextCode <= 57))
	  ) {
	    pos += nextCode === plus || nextCode === minus ? 3 : 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  return {
	    number: value.slice(0, pos),
	    unit: value.slice(pos)
	  };
	};

	var parse$3 = parse$4;
	var walk = walk$1;
	var stringify = stringify_1;

	function ValueParser(value) {
	  if (this instanceof ValueParser) {
	    this.nodes = parse$3(value);
	    return this;
	  }
	  return new ValueParser(value);
	}

	ValueParser.prototype.toString = function() {
	  return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
	};

	ValueParser.prototype.walk = function(cb, bubble) {
	  walk(this.nodes, cb, bubble);
	  return this;
	};

	ValueParser.unit = unit;

	ValueParser.walk = walk;

	ValueParser.stringify = stringify;

	var lib = ValueParser;

	const matchValueName = /[$]?[\w-]+/g;

	const replaceValueSymbols$2 = (value, replacements) => {
	  let matches;

	  while ((matches = matchValueName.exec(value))) {
	    const replacement = replacements[matches[0]];

	    if (replacement) {
	      value =
	        value.slice(0, matches.index) +
	        replacement +
	        value.slice(matchValueName.lastIndex);

	      matchValueName.lastIndex -= matches[0].length - replacement.length;
	    }
	  }

	  return value;
	};

	var replaceValueSymbols_1 = replaceValueSymbols$2;

	const replaceValueSymbols$1 = replaceValueSymbols_1;

	const replaceSymbols$1 = (css, replacements) => {
	  css.walk((node) => {
	    if (node.type === "decl" && node.value) {
	      node.value = replaceValueSymbols$1(node.value.toString(), replacements);
	    } else if (node.type === "rule" && node.selector) {
	      node.selector = replaceValueSymbols$1(
	        node.selector.toString(),
	        replacements
	      );
	    } else if (node.type === "atrule" && node.params) {
	      node.params = replaceValueSymbols$1(node.params.toString(), replacements);
	    }
	  });
	};

	var replaceSymbols_1 = replaceSymbols$1;

	const importPattern = /^:import\(("[^"]*"|'[^']*'|[^"']+)\)$/;
	const balancedQuotes = /^("[^"]*"|'[^']*'|[^"']+)$/;

	const getDeclsObject = (rule) => {
	  const object = {};

	  rule.walkDecls((decl) => {
	    const before = decl.raws.before ? decl.raws.before.trim() : "";

	    object[before + decl.prop] = decl.value;
	  });

	  return object;
	};
	/**
	 *
	 * @param {string} css
	 * @param {boolean} removeRules
	 * @param {'auto' | 'rule' | 'at-rule'} mode
	 */
	const extractICSS$2 = (css, removeRules = true, mode = "auto") => {
	  const icssImports = {};
	  const icssExports = {};

	  function addImports(node, path) {
	    const unquoted = path.replace(/'|"/g, "");
	    icssImports[unquoted] = Object.assign(
	      icssImports[unquoted] || {},
	      getDeclsObject(node)
	    );

	    if (removeRules) {
	      node.remove();
	    }
	  }

	  function addExports(node) {
	    Object.assign(icssExports, getDeclsObject(node));
	    if (removeRules) {
	      node.remove();
	    }
	  }

	  css.each((node) => {
	    if (node.type === "rule" && mode !== "at-rule") {
	      if (node.selector.slice(0, 7) === ":import") {
	        const matches = importPattern.exec(node.selector);

	        if (matches) {
	          addImports(node, matches[1]);
	        }
	      }

	      if (node.selector === ":export") {
	        addExports(node);
	      }
	    }

	    if (node.type === "atrule" && mode !== "rule") {
	      if (node.name === "icss-import") {
	        const matches = balancedQuotes.exec(node.params);

	        if (matches) {
	          addImports(node, matches[1]);
	        }
	      }
	      if (node.name === "icss-export") {
	        addExports(node);
	      }
	    }
	  });

	  return { icssImports, icssExports };
	};

	var extractICSS_1 = extractICSS$2;

	const createImports = (imports, postcss, mode = "rule") => {
	  return Object.keys(imports).map((path) => {
	    const aliases = imports[path];
	    const declarations = Object.keys(aliases).map((key) =>
	      postcss.decl({
	        prop: key,
	        value: aliases[key],
	        raws: { before: "\n  " },
	      })
	    );

	    const hasDeclarations = declarations.length > 0;

	    const rule =
	      mode === "rule"
	        ? postcss.rule({
	            selector: `:import('${path}')`,
	            raws: { after: hasDeclarations ? "\n" : "" },
	          })
	        : postcss.atRule({
	            name: "icss-import",
	            params: `'${path}'`,
	            raws: { after: hasDeclarations ? "\n" : "" },
	          });

	    if (hasDeclarations) {
	      rule.append(declarations);
	    }

	    return rule;
	  });
	};

	const createExports = (exports, postcss, mode = "rule") => {
	  const declarations = Object.keys(exports).map((key) =>
	    postcss.decl({
	      prop: key,
	      value: exports[key],
	      raws: { before: "\n  " },
	    })
	  );

	  if (declarations.length === 0) {
	    return [];
	  }
	  const rule =
	    mode === "rule"
	      ? postcss.rule({
	          selector: `:export`,
	          raws: { after: "\n" },
	        })
	      : postcss.atRule({
	          name: "icss-export",
	          raws: { after: "\n" },
	        });

	  rule.append(declarations);

	  return [rule];
	};

	const createICSSRules$1 = (imports, exports, postcss, mode) => [
	  ...createImports(imports, postcss, mode),
	  ...createExports(exports, postcss, mode),
	];

	var createICSSRules_1 = createICSSRules$1;

	const replaceValueSymbols = replaceValueSymbols_1;
	const replaceSymbols = replaceSymbols_1;
	const extractICSS$1 = extractICSS_1;
	const createICSSRules = createICSSRules_1;

	var src$3 = {
	  replaceValueSymbols,
	  replaceSymbols,
	  extractICSS: extractICSS$1,
	  createICSSRules,
	};

	const selectorParser$2 = dist.exports;
	const valueParser = lib;
	const { extractICSS } = src$3;

	const isSpacing = (node) => node.type === "combinator" && node.value === " ";

	function normalizeNodeArray(nodes) {
	  const array = [];

	  nodes.forEach((x) => {
	    if (Array.isArray(x)) {
	      normalizeNodeArray(x).forEach((item) => {
	        array.push(item);
	      });
	    } else if (x) {
	      array.push(x);
	    }
	  });

	  if (array.length > 0 && isSpacing(array[array.length - 1])) {
	    array.pop();
	  }
	  return array;
	}

	function localizeNode(rule, mode, localAliasMap) {
	  const transform = (node, context) => {
	    if (context.ignoreNextSpacing && !isSpacing(node)) {
	      throw new Error("Missing whitespace after " + context.ignoreNextSpacing);
	    }

	    if (context.enforceNoSpacing && isSpacing(node)) {
	      throw new Error("Missing whitespace before " + context.enforceNoSpacing);
	    }

	    let newNodes;

	    switch (node.type) {
	      case "root": {
	        let resultingGlobal;

	        context.hasPureGlobals = false;

	        newNodes = node.nodes.map((n) => {
	          const nContext = {
	            global: context.global,
	            lastWasSpacing: true,
	            hasLocals: false,
	            explicit: false,
	          };

	          n = transform(n, nContext);

	          if (typeof resultingGlobal === "undefined") {
	            resultingGlobal = nContext.global;
	          } else if (resultingGlobal !== nContext.global) {
	            throw new Error(
	              'Inconsistent rule global/local result in rule "' +
	                node +
	                '" (multiple selectors must result in the same mode for the rule)'
	            );
	          }

	          if (!nContext.hasLocals) {
	            context.hasPureGlobals = true;
	          }

	          return n;
	        });

	        context.global = resultingGlobal;

	        node.nodes = normalizeNodeArray(newNodes);
	        break;
	      }
	      case "selector": {
	        newNodes = node.map((childNode) => transform(childNode, context));

	        node = node.clone();
	        node.nodes = normalizeNodeArray(newNodes);
	        break;
	      }
	      case "combinator": {
	        if (isSpacing(node)) {
	          if (context.ignoreNextSpacing) {
	            context.ignoreNextSpacing = false;
	            context.lastWasSpacing = false;
	            context.enforceNoSpacing = false;
	            return null;
	          }
	          context.lastWasSpacing = true;
	          return node;
	        }
	        break;
	      }
	      case "pseudo": {
	        let childContext;
	        const isNested = !!node.length;
	        const isScoped = node.value === ":local" || node.value === ":global";
	        const isImportExport =
	          node.value === ":import" || node.value === ":export";

	        if (isImportExport) {
	          context.hasLocals = true;
	          // :local(.foo)
	        } else if (isNested) {
	          if (isScoped) {
	            if (node.nodes.length === 0) {
	              throw new Error(`${node.value}() can't be empty`);
	            }

	            if (context.inside) {
	              throw new Error(
	                `A ${node.value} is not allowed inside of a ${context.inside}(...)`
	              );
	            }

	            childContext = {
	              global: node.value === ":global",
	              inside: node.value,
	              hasLocals: false,
	              explicit: true,
	            };

	            newNodes = node
	              .map((childNode) => transform(childNode, childContext))
	              .reduce((acc, next) => acc.concat(next.nodes), []);

	            if (newNodes.length) {
	              const { before, after } = node.spaces;

	              const first = newNodes[0];
	              const last = newNodes[newNodes.length - 1];

	              first.spaces = { before, after: first.spaces.after };
	              last.spaces = { before: last.spaces.before, after };
	            }

	            node = newNodes;

	            break;
	          } else {
	            childContext = {
	              global: context.global,
	              inside: context.inside,
	              lastWasSpacing: true,
	              hasLocals: false,
	              explicit: context.explicit,
	            };
	            newNodes = node.map((childNode) =>
	              transform(childNode, childContext)
	            );

	            node = node.clone();
	            node.nodes = normalizeNodeArray(newNodes);

	            if (childContext.hasLocals) {
	              context.hasLocals = true;
	            }
	          }
	          break;

	          //:local .foo .bar
	        } else if (isScoped) {
	          if (context.inside) {
	            throw new Error(
	              `A ${node.value} is not allowed inside of a ${context.inside}(...)`
	            );
	          }

	          const addBackSpacing = !!node.spaces.before;

	          context.ignoreNextSpacing = context.lastWasSpacing
	            ? node.value
	            : false;

	          context.enforceNoSpacing = context.lastWasSpacing
	            ? false
	            : node.value;

	          context.global = node.value === ":global";
	          context.explicit = true;

	          // because this node has spacing that is lost when we remove it
	          // we make up for it by adding an extra combinator in since adding
	          // spacing on the parent selector doesn't work
	          return addBackSpacing
	            ? selectorParser$2.combinator({ value: " " })
	            : null;
	        }
	        break;
	      }
	      case "id":
	      case "class": {
	        if (!node.value) {
	          throw new Error("Invalid class or id selector syntax");
	        }

	        if (context.global) {
	          break;
	        }

	        const isImportedValue = localAliasMap.has(node.value);
	        const isImportedWithExplicitScope = isImportedValue && context.explicit;

	        if (!isImportedValue || isImportedWithExplicitScope) {
	          const innerNode = node.clone();
	          innerNode.spaces = { before: "", after: "" };

	          node = selectorParser$2.pseudo({
	            value: ":local",
	            nodes: [innerNode],
	            spaces: node.spaces,
	          });

	          context.hasLocals = true;
	        }

	        break;
	      }
	    }

	    context.lastWasSpacing = false;
	    context.ignoreNextSpacing = false;
	    context.enforceNoSpacing = false;

	    return node;
	  };

	  const rootContext = {
	    global: mode === "global",
	    hasPureGlobals: false,
	  };

	  rootContext.selector = selectorParser$2((root) => {
	    transform(root, rootContext);
	  }).processSync(rule, { updateSelector: false, lossless: true });

	  return rootContext;
	}

	function localizeDeclNode(node, context) {
	  switch (node.type) {
	    case "word":
	      if (context.localizeNextItem) {
	        if (!context.localAliasMap.has(node.value)) {
	          node.value = ":local(" + node.value + ")";
	          context.localizeNextItem = false;
	        }
	      }
	      break;

	    case "function":
	      if (
	        context.options &&
	        context.options.rewriteUrl &&
	        node.value.toLowerCase() === "url"
	      ) {
	        node.nodes.map((nestedNode) => {
	          if (nestedNode.type !== "string" && nestedNode.type !== "word") {
	            return;
	          }

	          let newUrl = context.options.rewriteUrl(
	            context.global,
	            nestedNode.value
	          );

	          switch (nestedNode.type) {
	            case "string":
	              if (nestedNode.quote === "'") {
	                newUrl = newUrl.replace(/(\\)/g, "\\$1").replace(/'/g, "\\'");
	              }

	              if (nestedNode.quote === '"') {
	                newUrl = newUrl.replace(/(\\)/g, "\\$1").replace(/"/g, '\\"');
	              }

	              break;
	            case "word":
	              newUrl = newUrl.replace(/("|'|\)|\\)/g, "\\$1");
	              break;
	          }

	          nestedNode.value = newUrl;
	        });
	      }
	      break;
	  }
	  return node;
	}

	function isWordAFunctionArgument(wordNode, functionNode) {
	  return functionNode
	    ? functionNode.nodes.some(
	        (functionNodeChild) =>
	          functionNodeChild.sourceIndex === wordNode.sourceIndex
	      )
	    : false;
	}

	function localizeDeclarationValues(localize, declaration, context) {
	  const valueNodes = valueParser(declaration.value);

	  valueNodes.walk((node, index, nodes) => {
	    const subContext = {
	      options: context.options,
	      global: context.global,
	      localizeNextItem: localize && !context.global,
	      localAliasMap: context.localAliasMap,
	    };
	    nodes[index] = localizeDeclNode(node, subContext);
	  });

	  declaration.value = valueNodes.toString();
	}

	function localizeDeclaration(declaration, context) {
	  const isAnimation = /animation$/i.test(declaration.prop);

	  if (isAnimation) {
	    const validIdent = /^-?[_a-z][_a-z0-9-]*$/i;

	    /*
	    The spec defines some keywords that you can use to describe properties such as the timing
	    function. These are still valid animation names, so as long as there is a property that accepts
	    a keyword, it is given priority. Only when all the properties that can take a keyword are
	    exhausted can the animation name be set to the keyword. I.e.
	  
	    animation: infinite infinite;
	  
	    The animation will repeat an infinite number of times from the first argument, and will have an
	    animation name of infinite from the second.
	    */
	    const animationKeywords = {
	      $alternate: 1,
	      "$alternate-reverse": 1,
	      $backwards: 1,
	      $both: 1,
	      $ease: 1,
	      "$ease-in": 1,
	      "$ease-in-out": 1,
	      "$ease-out": 1,
	      $forwards: 1,
	      $infinite: 1,
	      $linear: 1,
	      $none: Infinity, // No matter how many times you write none, it will never be an animation name
	      $normal: 1,
	      $paused: 1,
	      $reverse: 1,
	      $running: 1,
	      "$step-end": 1,
	      "$step-start": 1,
	      $initial: Infinity,
	      $inherit: Infinity,
	      $unset: Infinity,
	    };
	    let parsedAnimationKeywords = {};
	    let stepsFunctionNode = null;
	    const valueNodes = valueParser(declaration.value).walk((node) => {
	      /* If div-token appeared (represents as comma ','), a possibility of an animation-keywords should be reflesh. */
	      if (node.type === "div") {
	        parsedAnimationKeywords = {};
	      }
	      if (node.type === "function" && node.value.toLowerCase() === "steps") {
	        stepsFunctionNode = node;
	      }
	      const value =
	        node.type === "word" &&
	        !isWordAFunctionArgument(node, stepsFunctionNode)
	          ? node.value.toLowerCase()
	          : null;

	      let shouldParseAnimationName = false;

	      if (value && validIdent.test(value)) {
	        if ("$" + value in animationKeywords) {
	          parsedAnimationKeywords["$" + value] =
	            "$" + value in parsedAnimationKeywords
	              ? parsedAnimationKeywords["$" + value] + 1
	              : 0;

	          shouldParseAnimationName =
	            parsedAnimationKeywords["$" + value] >=
	            animationKeywords["$" + value];
	        } else {
	          shouldParseAnimationName = true;
	        }
	      }

	      const subContext = {
	        options: context.options,
	        global: context.global,
	        localizeNextItem: shouldParseAnimationName && !context.global,
	        localAliasMap: context.localAliasMap,
	      };
	      return localizeDeclNode(node, subContext);
	    });

	    declaration.value = valueNodes.toString();

	    return;
	  }

	  const isAnimationName = /animation(-name)?$/i.test(declaration.prop);

	  if (isAnimationName) {
	    return localizeDeclarationValues(true, declaration, context);
	  }

	  const hasUrl = /url\(/i.test(declaration.value);

	  if (hasUrl) {
	    return localizeDeclarationValues(false, declaration, context);
	  }
	}

	src$4.exports = (options = {}) => {
	  if (
	    options &&
	    options.mode &&
	    options.mode !== "global" &&
	    options.mode !== "local" &&
	    options.mode !== "pure"
	  ) {
	    throw new Error(
	      'options.mode must be either "global", "local" or "pure" (default "local")'
	    );
	  }

	  const pureMode = options && options.mode === "pure";
	  const globalMode = options && options.mode === "global";

	  return {
	    postcssPlugin: "postcss-modules-local-by-default",
	    prepare() {
	      const localAliasMap = new Map();

	      return {
	        Once(root) {
	          const { icssImports } = extractICSS(root, false);

	          Object.keys(icssImports).forEach((key) => {
	            Object.keys(icssImports[key]).forEach((prop) => {
	              localAliasMap.set(prop, icssImports[key][prop]);
	            });
	          });

	          root.walkAtRules((atRule) => {
	            if (/keyframes$/i.test(atRule.name)) {
	              const globalMatch = /^\s*:global\s*\((.+)\)\s*$/.exec(
	                atRule.params
	              );
	              const localMatch = /^\s*:local\s*\((.+)\)\s*$/.exec(
	                atRule.params
	              );

	              let globalKeyframes = globalMode;

	              if (globalMatch) {
	                if (pureMode) {
	                  throw atRule.error(
	                    "@keyframes :global(...) is not allowed in pure mode"
	                  );
	                }
	                atRule.params = globalMatch[1];
	                globalKeyframes = true;
	              } else if (localMatch) {
	                atRule.params = localMatch[0];
	                globalKeyframes = false;
	              } else if (!globalMode) {
	                if (atRule.params && !localAliasMap.has(atRule.params)) {
	                  atRule.params = ":local(" + atRule.params + ")";
	                }
	              }

	              atRule.walkDecls((declaration) => {
	                localizeDeclaration(declaration, {
	                  localAliasMap,
	                  options: options,
	                  global: globalKeyframes,
	                });
	              });
	            } else if (atRule.nodes) {
	              atRule.nodes.forEach((declaration) => {
	                if (declaration.type === "decl") {
	                  localizeDeclaration(declaration, {
	                    localAliasMap,
	                    options: options,
	                    global: globalMode,
	                  });
	                }
	              });
	            }
	          });

	          root.walkRules((rule) => {
	            if (
	              rule.parent &&
	              rule.parent.type === "atrule" &&
	              /keyframes$/i.test(rule.parent.name)
	            ) {
	              // ignore keyframe rules
	              return;
	            }

	            const context = localizeNode(rule, options.mode, localAliasMap);

	            context.options = options;
	            context.localAliasMap = localAliasMap;

	            if (pureMode && context.hasPureGlobals) {
	              throw rule.error(
	                'Selector "' +
	                  rule.selector +
	                  '" is not pure ' +
	                  "(pure selectors must contain at least one local class or id)"
	              );
	            }

	            rule.selector = context.selector;

	            // Less-syntax mixins parse as rules with no nodes
	            if (rule.nodes) {
	              rule.nodes.forEach((declaration) =>
	                localizeDeclaration(declaration, context)
	              );
	            }
	          });
	        },
	      };
	    },
	  };
	};
	src$4.exports.postcss = true;

	var src$2 = {exports: {}};

	const PERMANENT_MARKER = 2;
	const TEMPORARY_MARKER = 1;

	function createError(node, graph) {
	  const er = new Error("Nondeterministic import's order");

	  const related = graph[node];
	  const relatedNode = related.find(
	    (relatedNode) => graph[relatedNode].indexOf(node) > -1
	  );

	  er.nodes = [node, relatedNode];

	  return er;
	}

	function walkGraph(node, graph, state, result, strict) {
	  if (state[node] === PERMANENT_MARKER) {
	    return;
	  }

	  if (state[node] === TEMPORARY_MARKER) {
	    if (strict) {
	      return createError(node, graph);
	    }

	    return;
	  }

	  state[node] = TEMPORARY_MARKER;

	  const children = graph[node];
	  const length = children.length;

	  for (let i = 0; i < length; ++i) {
	    const error = walkGraph(children[i], graph, state, result, strict);

	    if (error instanceof Error) {
	      return error;
	    }
	  }

	  state[node] = PERMANENT_MARKER;

	  result.push(node);
	}

	function topologicalSort$1(graph, strict) {
	  const result = [];
	  const state = {};

	  const nodes = Object.keys(graph);
	  const length = nodes.length;

	  for (let i = 0; i < length; ++i) {
	    const er = walkGraph(nodes[i], graph, state, result, strict);

	    if (er instanceof Error) {
	      return er;
	    }
	  }

	  return result;
	}

	var topologicalSort_1 = topologicalSort$1;

	const topologicalSort = topologicalSort_1;

	const matchImports$1 = /^(.+?)\s+from\s+(?:"([^"]+)"|'([^']+)'|(global))$/;
	const icssImport = /^:import\((?:"([^"]+)"|'([^']+)')\)/;

	const VISITED_MARKER = 1;

	/**
	 * :import('G') {}
	 *
	 * Rule
	 *   composes: ... from 'A'
	 *   composes: ... from 'B'

	 * Rule
	 *   composes: ... from 'A'
	 *   composes: ... from 'A'
	 *   composes: ... from 'C'
	 *
	 * Results in:
	 *
	 * graph: {
	 *   G: [],
	 *   A: [],
	 *   B: ['A'],
	 *   C: ['A'],
	 * }
	 */
	function addImportToGraph(importId, parentId, graph, visited) {
	  const siblingsId = parentId + "_" + "siblings";
	  const visitedId = parentId + "_" + importId;

	  if (visited[visitedId] !== VISITED_MARKER) {
	    if (!Array.isArray(visited[siblingsId])) {
	      visited[siblingsId] = [];
	    }

	    const siblings = visited[siblingsId];

	    if (Array.isArray(graph[importId])) {
	      graph[importId] = graph[importId].concat(siblings);
	    } else {
	      graph[importId] = siblings.slice();
	    }

	    visited[visitedId] = VISITED_MARKER;

	    siblings.push(importId);
	  }
	}

	src$2.exports = (options = {}) => {
	  let importIndex = 0;
	  const createImportedName =
	    typeof options.createImportedName !== "function"
	      ? (importName /*, path*/) =>
	          `i__imported_${importName.replace(/\W/g, "_")}_${importIndex++}`
	      : options.createImportedName;
	  const failOnWrongOrder = options.failOnWrongOrder;

	  return {
	    postcssPlugin: "postcss-modules-extract-imports",
	    prepare() {
	      const graph = {};
	      const visited = {};
	      const existingImports = {};
	      const importDecls = {};
	      const imports = {};

	      return {
	        Once(root, postcss) {
	          // Check the existing imports order and save refs
	          root.walkRules((rule) => {
	            const matches = icssImport.exec(rule.selector);

	            if (matches) {
	              const [, /*match*/ doubleQuotePath, singleQuotePath] = matches;
	              const importPath = doubleQuotePath || singleQuotePath;

	              addImportToGraph(importPath, "root", graph, visited);

	              existingImports[importPath] = rule;
	            }
	          });

	          root.walkDecls(/^composes$/, (declaration) => {
	            const matches = declaration.value.match(matchImports$1);

	            if (!matches) {
	              return;
	            }

	            let tmpSymbols;
	            let [
	              ,
	              /*match*/ symbols,
	              doubleQuotePath,
	              singleQuotePath,
	              global,
	            ] = matches;

	            if (global) {
	              // Composing globals simply means changing these classes to wrap them in global(name)
	              tmpSymbols = symbols.split(/\s+/).map((s) => `global(${s})`);
	            } else {
	              const importPath = doubleQuotePath || singleQuotePath;

	              let parent = declaration.parent;
	              let parentIndexes = "";

	              while (parent.type !== "root") {
	                parentIndexes =
	                  parent.parent.index(parent) + "_" + parentIndexes;
	                parent = parent.parent;
	              }

	              const { selector } = declaration.parent;
	              const parentRule = `_${parentIndexes}${selector}`;

	              addImportToGraph(importPath, parentRule, graph, visited);

	              importDecls[importPath] = declaration;
	              imports[importPath] = imports[importPath] || {};

	              tmpSymbols = symbols.split(/\s+/).map((s) => {
	                if (!imports[importPath][s]) {
	                  imports[importPath][s] = createImportedName(s, importPath);
	                }

	                return imports[importPath][s];
	              });
	            }

	            declaration.value = tmpSymbols.join(" ");
	          });

	          const importsOrder = topologicalSort(graph, failOnWrongOrder);

	          if (importsOrder instanceof Error) {
	            const importPath = importsOrder.nodes.find((importPath) =>
	              // eslint-disable-next-line no-prototype-builtins
	              importDecls.hasOwnProperty(importPath)
	            );
	            const decl = importDecls[importPath];

	            throw decl.error(
	              "Failed to resolve order of composed modules " +
	                importsOrder.nodes
	                  .map((importPath) => "`" + importPath + "`")
	                  .join(", ") +
	                ".",
	              {
	                plugin: "postcss-modules-extract-imports",
	                word: "composes",
	              }
	            );
	          }

	          let lastImportRule;

	          importsOrder.forEach((path) => {
	            const importedSymbols = imports[path];
	            let rule = existingImports[path];

	            if (!rule && importedSymbols) {
	              rule = postcss.rule({
	                selector: `:import("${path}")`,
	                raws: { after: "\n" },
	              });

	              if (lastImportRule) {
	                root.insertAfter(lastImportRule, rule);
	              } else {
	                root.prepend(rule);
	              }
	            }

	            lastImportRule = rule;

	            if (!importedSymbols) {
	              return;
	            }

	            Object.keys(importedSymbols).forEach((importedSymbol) => {
	              rule.append(
	                postcss.decl({
	                  value: importedSymbol,
	                  prop: importedSymbols[importedSymbol],
	                  raws: { before: "\n  " },
	                })
	              );
	            });
	          });
	        },
	      };
	    },
	  };
	};

	src$2.exports.postcss = true;

	const selectorParser$1 = dist.exports;

	const hasOwnProperty = Object.prototype.hasOwnProperty;

	function getSingleLocalNamesForComposes(root) {
	  return root.nodes.map((node) => {
	    if (node.type !== "selector" || node.nodes.length !== 1) {
	      throw new Error(
	        `composition is only allowed when selector is single :local class name not in "${root}"`
	      );
	    }

	    node = node.nodes[0];

	    if (
	      node.type !== "pseudo" ||
	      node.value !== ":local" ||
	      node.nodes.length !== 1
	    ) {
	      throw new Error(
	        'composition is only allowed when selector is single :local class name not in "' +
	          root +
	          '", "' +
	          node +
	          '" is weird'
	      );
	    }

	    node = node.first;

	    if (node.type !== "selector" || node.length !== 1) {
	      throw new Error(
	        'composition is only allowed when selector is single :local class name not in "' +
	          root +
	          '", "' +
	          node +
	          '" is weird'
	      );
	    }

	    node = node.first;

	    if (node.type !== "class") {
	      // 'id' is not possible, because you can't compose ids
	      throw new Error(
	        'composition is only allowed when selector is single :local class name not in "' +
	          root +
	          '", "' +
	          node +
	          '" is weird'
	      );
	    }

	    return node.value;
	  });
	}

	const whitespace = "[\\x20\\t\\r\\n\\f]";
	const unescapeRegExp = new RegExp(
	  "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)",
	  "ig"
	);

	function unescape$1(str) {
	  return str.replace(unescapeRegExp, (_, escaped, escapedWhitespace) => {
	    const high = "0x" + escaped - 0x10000;

	    // NaN means non-codepoint
	    // Workaround erroneous numeric interpretation of +"0x"
	    return high !== high || escapedWhitespace
	      ? escaped
	      : high < 0
	      ? // BMP codepoint
	        String.fromCharCode(high + 0x10000)
	      : // Supplemental Plane codepoint (surrogate pair)
	        String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
	  });
	}

	const plugin = (options = {}) => {
	  const generateScopedName =
	    (options && options.generateScopedName) || plugin.generateScopedName;
	  const generateExportEntry =
	    (options && options.generateExportEntry) || plugin.generateExportEntry;
	  const exportGlobals = options && options.exportGlobals;

	  return {
	    postcssPlugin: "postcss-modules-scope",
	    Once(root, { rule }) {
	      const exports = Object.create(null);

	      function exportScopedName(name, rawName) {
	        const scopedName = generateScopedName(
	          rawName ? rawName : name,
	          root.source.input.from,
	          root.source.input.css
	        );
	        const exportEntry = generateExportEntry(
	          rawName ? rawName : name,
	          scopedName,
	          root.source.input.from,
	          root.source.input.css
	        );
	        const { key, value } = exportEntry;

	        exports[key] = exports[key] || [];

	        if (exports[key].indexOf(value) < 0) {
	          exports[key].push(value);
	        }

	        return scopedName;
	      }

	      function localizeNode(node) {
	        switch (node.type) {
	          case "selector":
	            node.nodes = node.map(localizeNode);
	            return node;
	          case "class":
	            return selectorParser$1.className({
	              value: exportScopedName(
	                node.value,
	                node.raws && node.raws.value ? node.raws.value : null
	              ),
	            });
	          case "id": {
	            return selectorParser$1.id({
	              value: exportScopedName(
	                node.value,
	                node.raws && node.raws.value ? node.raws.value : null
	              ),
	            });
	          }
	        }

	        throw new Error(
	          `${node.type} ("${node}") is not allowed in a :local block`
	        );
	      }

	      function traverseNode(node) {
	        switch (node.type) {
	          case "pseudo":
	            if (node.value === ":local") {
	              if (node.nodes.length !== 1) {
	                throw new Error('Unexpected comma (",") in :local block');
	              }

	              const selector = localizeNode(node.first, node.spaces);
	              // move the spaces that were around the psuedo selector to the first
	              // non-container node
	              selector.first.spaces = node.spaces;

	              const nextNode = node.next();

	              if (
	                nextNode &&
	                nextNode.type === "combinator" &&
	                nextNode.value === " " &&
	                /\\[A-F0-9]{1,6}$/.test(selector.last.value)
	              ) {
	                selector.last.spaces.after = " ";
	              }

	              node.replaceWith(selector);

	              return;
	            }
	          /* falls through */
	          case "root":
	          case "selector": {
	            node.each(traverseNode);
	            break;
	          }
	          case "id":
	          case "class":
	            if (exportGlobals) {
	              exports[node.value] = [node.value];
	            }
	            break;
	        }
	        return node;
	      }

	      // Find any :import and remember imported names
	      const importedNames = {};

	      root.walkRules(/^:import\(.+\)$/, (rule) => {
	        rule.walkDecls((decl) => {
	          importedNames[decl.prop] = true;
	        });
	      });

	      // Find any :local selectors
	      root.walkRules((rule) => {
	        let parsedSelector = selectorParser$1().astSync(rule);

	        rule.selector = traverseNode(parsedSelector.clone()).toString();

	        rule.walkDecls(/composes|compose-with/i, (decl) => {
	          const localNames = getSingleLocalNamesForComposes(parsedSelector);
	          const classes = decl.value.split(/\s+/);

	          classes.forEach((className) => {
	            const global = /^global\(([^)]+)\)$/.exec(className);

	            if (global) {
	              localNames.forEach((exportedName) => {
	                exports[exportedName].push(global[1]);
	              });
	            } else if (hasOwnProperty.call(importedNames, className)) {
	              localNames.forEach((exportedName) => {
	                exports[exportedName].push(className);
	              });
	            } else if (hasOwnProperty.call(exports, className)) {
	              localNames.forEach((exportedName) => {
	                exports[className].forEach((item) => {
	                  exports[exportedName].push(item);
	                });
	              });
	            } else {
	              throw decl.error(
	                `referenced class name "${className}" in ${decl.prop} not found`
	              );
	            }
	          });

	          decl.remove();
	        });

	        // Find any :local values
	        rule.walkDecls((decl) => {
	          if (!/:local\s*\((.+?)\)/.test(decl.value)) {
	            return;
	          }

	          let tokens = decl.value.split(/(,|'[^']*'|"[^"]*")/);

	          tokens = tokens.map((token, idx) => {
	            if (idx === 0 || tokens[idx - 1] === ",") {
	              let result = token;

	              const localMatch = /:local\s*\((.+?)\)/.exec(token);

	              if (localMatch) {
	                const input = localMatch.input;
	                const matchPattern = localMatch[0];
	                const matchVal = localMatch[1];
	                const newVal = exportScopedName(matchVal);

	                result = input.replace(matchPattern, newVal);
	              } else {
	                return token;
	              }

	              return result;
	            } else {
	              return token;
	            }
	          });

	          decl.value = tokens.join("");
	        });
	      });

	      // Find any :local keyframes
	      root.walkAtRules(/keyframes$/i, (atRule) => {
	        const localMatch = /^\s*:local\s*\((.+?)\)\s*$/.exec(atRule.params);

	        if (!localMatch) {
	          return;
	        }

	        atRule.params = exportScopedName(localMatch[1]);
	      });

	      // If we found any :locals, insert an :export rule
	      const exportedNames = Object.keys(exports);

	      if (exportedNames.length > 0) {
	        const exportRule = rule({ selector: ":export" });

	        exportedNames.forEach((exportedName) =>
	          exportRule.append({
	            prop: exportedName,
	            value: exports[exportedName].join(" "),
	            raws: { before: "\n  " },
	          })
	        );

	        root.append(exportRule);
	      }
	    },
	  };
	};

	plugin.postcss = true;

	plugin.generateScopedName = function (name, path) {
	  const sanitisedPath = path
	    .replace(/\.[^./\\]+$/, "")
	    .replace(/[\W_]+/g, "_")
	    .replace(/^_|_$/g, "");

	  return `_${sanitisedPath}__${name}`.trim();
	};

	plugin.generateExportEntry = function (name, scopedName) {
	  return {
	    key: unescape$1(name),
	    value: unescape$1(scopedName),
	  };
	};

	var src$1 = plugin;

	var src = {exports: {}};

	const ICSSUtils = src$3;

	const matchImports = /^(.+?|\([\s\S]+?\))\s+from\s+("[^"]*"|'[^']*'|[\w-]+)$/;
	const matchValueDefinition = /(?:\s+|^)([\w-]+):?(.*?)$/;
	const matchImport = /^([\w-]+)(?:\s+as\s+([\w-]+))?/;

	src.exports = (options) => {
	  let importIndex = 0;
	  const createImportedName =
	    (options && options.createImportedName) ||
	    ((importName /*, path*/) =>
	      `i__const_${importName.replace(/\W/g, "_")}_${importIndex++}`);

	  return {
	    postcssPlugin: "postcss-modules-values",
	    prepare(result) {
	      const importAliases = [];
	      const definitions = {};

	      return {
	        Once(root, postcss) {
	          root.walkAtRules(/value/i, (atRule) => {
	            const matches = atRule.params.match(matchImports);

	            if (matches) {
	              let [, /*match*/ aliases, path] = matches;

	              // We can use constants for path names
	              if (definitions[path]) {
	                path = definitions[path];
	              }

	              const imports = aliases
	                .replace(/^\(\s*([\s\S]+)\s*\)$/, "$1")
	                .split(/\s*,\s*/)
	                .map((alias) => {
	                  const tokens = matchImport.exec(alias);

	                  if (tokens) {
	                    const [, /*match*/ theirName, myName = theirName] = tokens;
	                    const importedName = createImportedName(myName);
	                    definitions[myName] = importedName;
	                    return { theirName, importedName };
	                  } else {
	                    throw new Error(`@import statement "${alias}" is invalid!`);
	                  }
	                });

	              importAliases.push({ path, imports });

	              atRule.remove();

	              return;
	            }

	            if (atRule.params.indexOf("@value") !== -1) {
	              result.warn("Invalid value definition: " + atRule.params);
	            }

	            let [, key, value] = `${atRule.params}${atRule.raws.between}`.match(
	              matchValueDefinition
	            );

	            const normalizedValue = value.replace(/\/\*((?!\*\/).*?)\*\//g, "");

	            if (normalizedValue.length === 0) {
	              result.warn("Invalid value definition: " + atRule.params);
	              atRule.remove();

	              return;
	            }

	            let isOnlySpace = /^\s+$/.test(normalizedValue);

	            if (!isOnlySpace) {
	              value = value.trim();
	            }

	            // Add to the definitions, knowing that values can refer to each other
	            definitions[key] = ICSSUtils.replaceValueSymbols(
	              value,
	              definitions
	            );

	            atRule.remove();
	          });

	          /* If we have no definitions, don't continue */
	          if (!Object.keys(definitions).length) {
	            return;
	          }

	          /* Perform replacements */
	          ICSSUtils.replaceSymbols(root, definitions);

	          /* We want to export anything defined by now, but don't add it to the CSS yet or it well get picked up by the replacement stuff */
	          const exportDeclarations = Object.keys(definitions).map((key) =>
	            postcss.decl({
	              value: definitions[key],
	              prop: key,
	              raws: { before: "\n  " },
	            })
	          );

	          /* Add export rules if any */
	          if (exportDeclarations.length > 0) {
	            const exportRule = postcss.rule({
	              selector: ":export",
	              raws: { after: "\n" },
	            });

	            exportRule.append(exportDeclarations);

	            root.prepend(exportRule);
	          }

	          /* Add import rules */
	          importAliases.reverse().forEach(({ path, imports }) => {
	            const importRule = postcss.rule({
	              selector: `:import(${path})`,
	              raws: { after: "\n" },
	            });

	            imports.forEach(({ theirName, importedName }) => {
	              importRule.append({
	                value: theirName,
	                prop: importedName,
	                raws: { before: "\n  " },
	              });
	            });

	            root.prepend(importRule);
	          });
	        },
	      };
	    },
	  };
	};

	src.exports.postcss = true;

	Object.defineProperty(behaviours$1, "__esModule", {
	  value: true
	});
	behaviours$1.behaviours = undefined;
	behaviours$1.getDefaultPlugins = getDefaultPlugins;
	behaviours$1.isValidBehaviour = isValidBehaviour;

	var _postcssModulesLocalByDefault = src$4.exports;

	var _postcssModulesLocalByDefault2 = _interopRequireDefault$1(_postcssModulesLocalByDefault);

	var _postcssModulesExtractImports = src$2.exports;

	var _postcssModulesExtractImports2 = _interopRequireDefault$1(_postcssModulesExtractImports);

	var _postcssModulesScope = src$1;

	var _postcssModulesScope2 = _interopRequireDefault$1(_postcssModulesScope);

	var _postcssModulesValues = src.exports;

	var _postcssModulesValues2 = _interopRequireDefault$1(_postcssModulesValues);

	function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	const behaviours = behaviours$1.behaviours = {
	  LOCAL: "local",
	  GLOBAL: "global"
	};

	function getDefaultPlugins({
	  behaviour,
	  generateScopedName,
	  exportGlobals
	}) {
	  const scope = (0, _postcssModulesScope2.default)({ generateScopedName, exportGlobals });

	  const plugins = {
	    [behaviours.LOCAL]: [_postcssModulesValues2.default, _postcssModulesLocalByDefault2.default, _postcssModulesExtractImports2.default, scope],
	    [behaviours.GLOBAL]: [_postcssModulesValues2.default, _postcssModulesExtractImports2.default, scope]
	  };

	  return plugins[behaviour];
	}

	function isValidBehaviour(behaviour) {
	  return Object.keys(behaviours).map(key => behaviours[key]).indexOf(behaviour) > -1;
	}

	var _postcss = postcss_1;

	var _postcss2 = _interopRequireDefault(_postcss);

	var _lodash = _lodash_camelcase_4_3_0_lodash_camelcase;

	var _lodash2 = _interopRequireDefault(_lodash);

	var _genericNames = _genericNames_2_0_1_genericNames;

	var _genericNames2 = _interopRequireDefault(_genericNames);

	var _parser = parser$1;

	var _parser2 = _interopRequireDefault(_parser);

	var _loader = loader;

	var _loader2 = _interopRequireDefault(_loader);

	var _generateScopedName = generateScopedName$1;

	var _generateScopedName2 = _interopRequireDefault(_generateScopedName);

	var _saveJSON = saveJSON$1;

	var _saveJSON2 = _interopRequireDefault(_saveJSON);

	var _behaviours = behaviours$1;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

	const PLUGIN_NAME = "postcss-modules";

	function getDefaultScopeBehaviour(opts) {
	  if (opts.scopeBehaviour && (0, _behaviours.isValidBehaviour)(opts.scopeBehaviour)) {
	    return opts.scopeBehaviour;
	  }

	  return _behaviours.behaviours.LOCAL;
	}

	function getScopedNameGenerator(opts) {
	  const scopedNameGenerator = opts.generateScopedName || _generateScopedName2.default;

	  if (typeof scopedNameGenerator === "function") return scopedNameGenerator;
	  return (0, _genericNames2.default)(scopedNameGenerator, {
	    context: process.cwd(),
	    hashPrefix: opts.hashPrefix
	  });
	}

	function getLoader(opts, plugins) {
	  const root = typeof opts.root === "undefined" ? "/" : opts.root;
	  return typeof opts.Loader === "function" ? new opts.Loader(root, plugins) : new _loader2.default(root, plugins);
	}

	function isGlobalModule(globalModules, inputFile) {
	  return globalModules.some(regex => inputFile.match(regex));
	}

	function getDefaultPluginsList(opts, inputFile) {
	  const globalModulesList = opts.globalModulePaths || null;
	  const exportGlobals = opts.exportGlobals || false;
	  const defaultBehaviour = getDefaultScopeBehaviour(opts);
	  const generateScopedName = getScopedNameGenerator(opts);

	  if (globalModulesList && isGlobalModule(globalModulesList, inputFile)) {
	    return (0, _behaviours.getDefaultPlugins)({
	      behaviour: _behaviours.behaviours.GLOBAL,
	      generateScopedName,
	      exportGlobals
	    });
	  }

	  return (0, _behaviours.getDefaultPlugins)({
	    behaviour: defaultBehaviour,
	    generateScopedName,
	    exportGlobals
	  });
	}

	function isOurPlugin(plugin) {
	  return plugin.postcssPlugin === PLUGIN_NAME;
	}

	function dashesCamelCase(string) {
	  return string.replace(/-+(\w)/g, (_, firstLetter) => firstLetter.toUpperCase());
	}

	build.exports = (opts = {}) => {
	  return {
	    postcssPlugin: PLUGIN_NAME,
	    OnceExit(css, { result }) {
	      return _asyncToGenerator(function* () {
	        const getJSON = opts.getJSON || _saveJSON2.default;
	        const inputFile = css.source.input.file;
	        const pluginList = getDefaultPluginsList(opts, inputFile);
	        const resultPluginIndex = result.processor.plugins.findIndex(function (plugin) {
	          return isOurPlugin(plugin);
	        });
	        if (resultPluginIndex === -1) {
	          throw new Error('Plugin missing from options.');
	        }
	        const earlierPlugins = result.processor.plugins.slice(0, resultPluginIndex);
	        const loaderPlugins = [...earlierPlugins, ...pluginList];
	        const loader = getLoader(opts, loaderPlugins);
	        const parser = new _parser2.default(loader.fetch.bind(loader));

	        yield (0, _postcss2.default)([...pluginList, parser.plugin()]).process(css, {
	          from: inputFile
	        });

	        const out = loader.finalSource;
	        if (out) css.prepend(out);

	        if (opts.localsConvention) {
	          const isFunc = typeof opts.localsConvention === "function";

	          parser.exportTokens = Object.entries(parser.exportTokens).reduce(function (tokens, [className, value]) {
	            if (isFunc) {
	              tokens[opts.localsConvention(className, value, inputFile)] = value;

	              return tokens;
	            }

	            switch (opts.localsConvention) {
	              case "camelCase":
	                tokens[className] = value;
	                tokens[(0, _lodash2.default)(className)] = value;

	                break;
	              case "camelCaseOnly":
	                tokens[(0, _lodash2.default)(className)] = value;

	                break;
	              case "dashes":
	                tokens[className] = value;
	                tokens[dashesCamelCase(className)] = value;

	                break;
	              case "dashesOnly":
	                tokens[dashesCamelCase(className)] = value;

	                break;
	            }

	            return tokens;
	          }, {});
	        }

	        result.messages.push({
	          type: "export",
	          plugin: "postcss-modules",
	          exportTokens: parser.exportTokens
	        });

	        // getJSON may return a promise
	        return getJSON(css.source.input.file, parser.exportTokens, result.opts.to);
	      })();
	    }
	  };
	};

	build.exports.postcss = true;

	Object.defineProperty(compilerSfc_cjs, '__esModule', { value: true });

	var CompilerDOM = require$$0$2;
	var sourceMap = sourceMap$3;
	var hash = hashSum;
	var path = require$$3;
	var compilerCore = require$$4;
	var url = require$$5;
	var shared = require$$6;
	var CompilerSSR = compilerSsr_cjs;
	var postcss = postcss_1;
	var selectorParser = dist.exports;
	var merge = _mergeSourceMap_1_1_0_mergeSourceMap;
	var MagicString = require$$11;
	var parser = lib$4;
	var estreeWalker = estreeWalker$1.exports;

	function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

	function _interopNamespace$1(e) {
	  if (e && e.__esModule) return e;
	  var n = Object.create(null);
	  if (e) {
	    Object.keys(e).forEach(function (k) {
	      n[k] = e[k];
	    });
	  }
	  n['default'] = e;
	  return Object.freeze(n);
	}

	var CompilerDOM__namespace = /*#__PURE__*/_interopNamespace$1(CompilerDOM);
	var hash__default = /*#__PURE__*/_interopDefaultLegacy$1(hash);
	var path__default = /*#__PURE__*/_interopDefaultLegacy$1(path);
	var CompilerSSR__namespace = /*#__PURE__*/_interopNamespace$1(CompilerSSR);
	var postcss__default = /*#__PURE__*/_interopDefaultLegacy$1(postcss);
	var selectorParser__default = /*#__PURE__*/_interopDefaultLegacy$1(selectorParser);
	var merge__default = /*#__PURE__*/_interopDefaultLegacy$1(merge);
	var MagicString__default = /*#__PURE__*/_interopDefaultLegacy$1(MagicString);

	const CSS_VARS_HELPER = `useCssVars`;
	const cssVarRE = /\bv-bind\(\s*(?:'([^']+)'|"([^"]+)"|([^'"][^)]*))\s*\)/g;
	function genCssVarsFromList(vars, id, isProd) {
	    return `{\n  ${vars
        .map(key => `"${genVarName(id, key, isProd)}": (${key})`)
        .join(',\n  ')}\n}`;
	}
	function genVarName(id, raw, isProd) {
	    if (isProd) {
	        return hash__default(id + raw);
	    }
	    else {
	        return `${id}-${raw.replace(/([^\w-])/g, '_')}`;
	    }
	}
	function parseCssVars(sfc) {
	    const vars = [];
	    sfc.styles.forEach(style => {
	        let match;
	        while ((match = cssVarRE.exec(style.content))) {
	            vars.push(match[1] || match[2] || match[3]);
	        }
	    });
	    return vars;
	}
	const cssVarsPlugin = opts => {
	    const { id, isProd } = opts;
	    return {
	        postcssPlugin: 'vue-sfc-vars',
	        Declaration(decl) {
	            // rewrite CSS variables
	            if (cssVarRE.test(decl.value)) {
	                decl.value = decl.value.replace(cssVarRE, (_, $1, $2, $3) => {
	                    return `var(--${genVarName(id, $1 || $2 || $3, isProd)})`;
	                });
	            }
	        }
	    };
	};
	cssVarsPlugin.postcss = true;
	function genCssVarsCode(vars, bindings, id, isProd) {
	    const varsExp = genCssVarsFromList(vars, id, isProd);
	    const exp = CompilerDOM.createSimpleExpression(varsExp, false);
	    const context = CompilerDOM.createTransformContext(CompilerDOM.createRoot([]), {
	        prefixIdentifiers: true,
	        inline: true,
	        bindingMetadata: bindings
	    });
	    const transformed = CompilerDOM.processExpression(exp, context);
	    const transformedString = transformed.type === 4 /* SIMPLE_EXPRESSION */
	        ? transformed.content
	        : transformed.children
	            .map(c => {
	            return typeof c === 'string'
	                ? c
	                : c.content;
	        })
	            .join('');
	    return `_${CSS_VARS_HELPER}(_ctx => (${transformedString}))`;
	}
	// <script setup> already gets the calls injected as part of the transform
	// this is only for single normal <script>
	function genNormalScriptCssVarsCode(cssVars, bindings, id, isProd) {
	    return (`\nimport { ${CSS_VARS_HELPER} as _${CSS_VARS_HELPER} } from 'vue'\n` +
	        `const __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, bindings, id, isProd)}}\n` +
	        `const __setup__ = __default__.setup\n` +
	        `__default__.setup = __setup__\n` +
	        `  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }\n` +
	        `  : __injectCSSVars__\n`);
	}

	const hasWarned = {};
	function warnOnce(msg) {
	    const isNodeProd = typeof process !== 'undefined' && "production" === 'production';
	    if (!isNodeProd && !false && !hasWarned[msg]) {
	        hasWarned[msg] = true;
	        warn(msg);
	    }
	}
	function warn(msg) {
	    console.warn(`\x1b[1m\x1b[33m[@vue/compiler-sfc]\x1b[0m\x1b[33m ${msg}\x1b[0m\n`);
	}
	function warnExperimental(feature, rfcId) {
	    // eslint-disable-next-line
	    if (typeof window !== 'undefined') {
	        return;
	    }
	    warnOnce(`${feature} is still an experimental proposal.\n` +
	        `Follow its status at https://github.com/vuejs/rfcs/pull/${rfcId}.`);
	    warnOnce(`When using experimental features,\n` +
	        `it is recommended to pin your vue dependencies to exact versions to avoid breakage.`);
	}

	const SFC_CACHE_MAX_SIZE = 500;
	const sourceToSFC = new (_lruCache_5_1_1_lruCache)(SFC_CACHE_MAX_SIZE);
	function parse$2(source, { sourceMap = true, filename = 'anonymous.vue', sourceRoot = '', pad = false, compiler = CompilerDOM__namespace } = {}) {
	    const sourceKey = source + sourceMap + filename + sourceRoot + pad + compiler.parse;
	    const cache = sourceToSFC.get(sourceKey);
	    if (cache) {
	        return cache;
	    }
	    const descriptor = {
	        filename,
	        source,
	        template: null,
	        script: null,
	        scriptSetup: null,
	        styles: [],
	        customBlocks: [],
	        cssVars: [],
	        slotted: false
	    };
	    const errors = [];
	    const ast = compiler.parse(source, {
	        // there are no components at SFC parsing level
	        isNativeTag: () => true,
	        // preserve all whitespaces
	        isPreTag: () => true,
	        getTextMode: ({ tag, props }, parent) => {
	            // all top level elements except <template> are parsed as raw text
	            // containers
	            if ((!parent && tag !== 'template') ||
	                // <template lang="xxx"> should also be treated as raw text
	                (tag === 'template' &&
	                    props.some(p => p.type === 6 /* ATTRIBUTE */ &&
	                        p.name === 'lang' &&
	                        p.value &&
	                        p.value.content &&
	                        p.value.content !== 'html'))) {
	                return 2 /* RAWTEXT */;
	            }
	            else {
	                return 0 /* DATA */;
	            }
	        },
	        onError: e => {
	            errors.push(e);
	        }
	    });
	    ast.children.forEach(node => {
	        if (node.type !== 1 /* ELEMENT */) {
	            return;
	        }
	        if (!node.children.length && !hasSrc(node) && node.tag !== 'template') {
	            return;
	        }
	        switch (node.tag) {
	            case 'template':
	                if (!descriptor.template) {
	                    const templateBlock = (descriptor.template = createBlock(node, source, false));
	                    templateBlock.ast = node;
	                }
	                else {
	                    errors.push(createDuplicateBlockError(node));
	                }
	                break;
	            case 'script':
	                const scriptBlock = createBlock(node, source, pad);
	                const isSetup = !!scriptBlock.attrs.setup;
	                if (isSetup && !descriptor.scriptSetup) {
	                    descriptor.scriptSetup = scriptBlock;
	                    break;
	                }
	                if (!isSetup && !descriptor.script) {
	                    descriptor.script = scriptBlock;
	                    break;
	                }
	                errors.push(createDuplicateBlockError(node, isSetup));
	                break;
	            case 'style':
	                const styleBlock = createBlock(node, source, pad);
	                if (styleBlock.attrs.vars) {
	                    errors.push(new SyntaxError(`<style vars> has been replaced by a new proposal: ` +
	                        `https://github.com/vuejs/rfcs/pull/231`));
	                }
	                descriptor.styles.push(styleBlock);
	                break;
	            default:
	                descriptor.customBlocks.push(createBlock(node, source, pad));
	                break;
	        }
	    });
	    if (descriptor.scriptSetup) {
	        if (descriptor.scriptSetup.src) {
	            errors.push(new SyntaxError(`<script setup> cannot use the "src" attribute because ` +
	                `its syntax will be ambiguous outside of the component.`));
	            descriptor.scriptSetup = null;
	        }
	        if (descriptor.script && descriptor.script.src) {
	            errors.push(new SyntaxError(`<script> cannot use the "src" attribute when <script setup> is ` +
	                `also present because they must be processed together.`));
	            descriptor.script = null;
	        }
	    }
	    if (sourceMap) {
	        const genMap = (block) => {
	            if (block && !block.src) {
	                block.map = generateSourceMap(filename, source, block.content, sourceRoot, !pad || block.type === 'template' ? block.loc.start.line - 1 : 0);
	            }
	        };
	        genMap(descriptor.template);
	        genMap(descriptor.script);
	        descriptor.styles.forEach(genMap);
	        descriptor.customBlocks.forEach(genMap);
	    }
	    // parse CSS vars
	    descriptor.cssVars = parseCssVars(descriptor);
	    if (descriptor.cssVars.length) {
	        warnExperimental(`v-bind() CSS variable injection`, 231);
	    }
	    // check if the SFC uses :slotted
	    const slottedRE = /(?:::v-|:)slotted\(/;
	    descriptor.slotted = descriptor.styles.some(s => s.scoped && slottedRE.test(s.content));
	    const result = {
	        descriptor,
	        errors
	    };
	    sourceToSFC.set(sourceKey, result);
	    return result;
	}
	function createDuplicateBlockError(node, isScriptSetup = false) {
	    const err = new SyntaxError(`Single file component can contain only one <${node.tag}${isScriptSetup ? ` setup` : ``}> element`);
	    err.loc = node.loc;
	    return err;
	}
	function createBlock(node, source, pad) {
	    const type = node.tag;
	    let { start, end } = node.loc;
	    let content = '';
	    if (node.children.length) {
	        start = node.children[0].loc.start;
	        end = node.children[node.children.length - 1].loc.end;
	        content = source.slice(start.offset, end.offset);
	    }
	    const loc = {
	        source: content,
	        start,
	        end
	    };
	    const attrs = {};
	    const block = {
	        type,
	        content,
	        loc,
	        attrs
	    };
	    if (pad) {
	        block.content = padContent(source, block, pad) + block.content;
	    }
	    node.props.forEach(p => {
	        if (p.type === 6 /* ATTRIBUTE */) {
	            attrs[p.name] = p.value ? p.value.content || true : true;
	            if (p.name === 'lang') {
	                block.lang = p.value && p.value.content;
	            }
	            else if (p.name === 'src') {
	                block.src = p.value && p.value.content;
	            }
	            else if (type === 'style') {
	                if (p.name === 'scoped') {
	                    block.scoped = true;
	                }
	                else if (p.name === 'module') {
	                    block.module = attrs[p.name];
	                }
	            }
	            else if (type === 'script' && p.name === 'setup') {
	                block.setup = attrs.setup;
	            }
	        }
	    });
	    return block;
	}
	const splitRE = /\r?\n/g;
	const emptyRE = /^(?:\/\/)?\s*$/;
	const replaceRE = /./g;
	function generateSourceMap(filename, source, generated, sourceRoot, lineOffset) {
	    const map = new sourceMap.SourceMapGenerator({
	        file: filename.replace(/\\/g, '/'),
	        sourceRoot: sourceRoot.replace(/\\/g, '/')
	    });
	    map.setSourceContent(filename, source);
	    generated.split(splitRE).forEach((line, index) => {
	        if (!emptyRE.test(line)) {
	            const originalLine = index + 1 + lineOffset;
	            const generatedLine = index + 1;
	            for (let i = 0; i < line.length; i++) {
	                if (!/\s/.test(line[i])) {
	                    map.addMapping({
	                        source: filename,
	                        original: {
	                            line: originalLine,
	                            column: i
	                        },
	                        generated: {
	                            line: generatedLine,
	                            column: i
	                        }
	                    });
	                }
	            }
	        }
	    });
	    return JSON.parse(map.toString());
	}
	function padContent(content, block, pad) {
	    content = content.slice(0, block.loc.start.offset);
	    if (pad === 'space') {
	        return content.replace(replaceRE, ' ');
	    }
	    else {
	        const offset = content.split(splitRE).length;
	        const padChar = block.type === 'script' && !block.lang ? '//\n' : '\n';
	        return Array(offset).join(padChar);
	    }
	}
	function hasSrc(node) {
	    return node.props.some(p => {
	        if (p.type !== 6 /* ATTRIBUTE */) {
	            return false;
	        }
	        return p.name === 'src';
	    });
	}

	function isRelativeUrl(url) {
	    const firstChar = url.charAt(0);
	    return firstChar === '.' || firstChar === '~' || firstChar === '@';
	}
	const externalRE = /^https?:\/\//;
	function isExternalUrl(url) {
	    return externalRE.test(url);
	}
	const dataUrlRE = /^\s*data:/i;
	function isDataUrl(url) {
	    return dataUrlRE.test(url);
	}
	/**
	 * Parses string url into URL object.
	 */
	function parseUrl(url) {
	    const firstChar = url.charAt(0);
	    if (firstChar === '~') {
	        const secondChar = url.charAt(1);
	        url = url.slice(secondChar === '/' ? 2 : 1);
	    }
	    return parseUriParts(url);
	}
	/**
	 * vuejs/component-compiler-utils#22 Support uri fragment in transformed require
	 * @param urlString an url as a string
	 */
	function parseUriParts(urlString) {
	    // A TypeError is thrown if urlString is not a string
	    // @see https://nodejs.org/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost
	    return url.parse(shared.isString(urlString) ? urlString : '', false, true);
	}

	const defaultAssetUrlOptions = {
	    base: null,
	    includeAbsolute: false,
	    tags: {
	        video: ['src', 'poster'],
	        source: ['src'],
	        img: ['src'],
	        image: ['xlink:href', 'href'],
	        use: ['xlink:href', 'href']
	    }
	};
	const normalizeOptions = (options) => {
	    if (Object.keys(options).some(key => shared.isArray(options[key]))) {
	        // legacy option format which directly passes in tags config
	        return {
	            ...defaultAssetUrlOptions,
	            tags: options
	        };
	    }
	    return {
	        ...defaultAssetUrlOptions,
	        ...options
	    };
	};
	const createAssetUrlTransformWithOptions = (options) => {
	    return (node, context) => transformAssetUrl(node, context, options);
	};
	/**
	 * A `@vue/compiler-core` plugin that transforms relative asset urls into
	 * either imports or absolute urls.
	 *
	 * ``` js
	 * // Before
	 * createVNode('img', { src: './logo.png' })
	 *
	 * // After
	 * import _imports_0 from './logo.png'
	 * createVNode('img', { src: _imports_0 })
	 * ```
	 */
	const transformAssetUrl = (node, context, options = defaultAssetUrlOptions) => {
	    if (node.type === 1 /* ELEMENT */) {
	        if (!node.props.length) {
	            return;
	        }
	        const tags = options.tags || defaultAssetUrlOptions.tags;
	        const attrs = tags[node.tag];
	        const wildCardAttrs = tags['*'];
	        if (!attrs && !wildCardAttrs) {
	            return;
	        }
	        const assetAttrs = (attrs || []).concat(wildCardAttrs || []);
	        node.props.forEach((attr, index) => {
	            if (attr.type !== 6 /* ATTRIBUTE */ ||
	                !assetAttrs.includes(attr.name) ||
	                !attr.value ||
	                isExternalUrl(attr.value.content) ||
	                isDataUrl(attr.value.content) ||
	                attr.value.content[0] === '#' ||
	                (!options.includeAbsolute && !isRelativeUrl(attr.value.content))) {
	                return;
	            }
	            const url = parseUrl(attr.value.content);
	            if (options.base && attr.value.content[0] === '.') {
	                // explicit base - directly rewrite relative urls into absolute url
	                // to avoid generating extra imports
	                // Allow for full hostnames provided in options.base
	                const base = parseUrl(options.base);
	                const protocol = base.protocol || '';
	                const host = base.host ? protocol + '//' + base.host : '';
	                const basePath = base.path || '/';
	                // when packaged in the browser, path will be using the posix-
	                // only version provided by rollup-plugin-node-builtins.
	                attr.value.content =
	                    host +
	                        (path__default.posix || path__default).join(basePath, url.path + (url.hash || ''));
	                return;
	            }
	            // otherwise, transform the url into an import.
	            // this assumes a bundler will resolve the import into the correct
	            // absolute url (e.g. webpack file-loader)
	            const exp = getImportsExpressionExp(url.path, url.hash, attr.loc, context);
	            node.props[index] = {
	                type: 7 /* DIRECTIVE */,
	                name: 'bind',
	                arg: compilerCore.createSimpleExpression(attr.name, true, attr.loc),
	                exp,
	                modifiers: [],
	                loc: attr.loc
	            };
	        });
	    }
	};
	function getImportsExpressionExp(path, hash, loc, context) {
	    if (path) {
	        const existing = context.imports.find(i => i.path === path);
	        if (existing) {
	            return existing.exp;
	        }
	        const name = `_imports_${context.imports.length}`;
	        const exp = compilerCore.createSimpleExpression(name, false, loc, 2 /* CAN_HOIST */);
	        context.imports.push({ exp, path });
	        if (hash && path) {
	            return context.hoist(compilerCore.createSimpleExpression(`${name} + '${hash}'`, false, loc, 2 /* CAN_HOIST */));
	        }
	        else {
	            return exp;
	        }
	    }
	    else {
	        return compilerCore.createSimpleExpression(`''`, false, loc, 2 /* CAN_HOIST */);
	    }
	}

	const srcsetTags = ['img', 'source'];
	// http://w3c.github.io/html/semantics-embedded-content.html#ref-for-image-candidate-string-5
	const escapedSpaceCharacters = /( |\\t|\\n|\\f|\\r)+/g;
	const createSrcsetTransformWithOptions = (options) => {
	    return (node, context) => transformSrcset(node, context, options);
	};
	const transformSrcset = (node, context, options = defaultAssetUrlOptions) => {
	    if (node.type === 1 /* ELEMENT */) {
	        if (srcsetTags.includes(node.tag) && node.props.length) {
	            node.props.forEach((attr, index) => {
	                if (attr.name === 'srcset' && attr.type === 6 /* ATTRIBUTE */) {
	                    if (!attr.value)
	                        return;
	                    const value = attr.value.content;
	                    if (!value)
	                        return;
	                    const imageCandidates = value.split(',').map(s => {
	                        // The attribute value arrives here with all whitespace, except
	                        // normal spaces, represented by escape sequences
	                        const [url, descriptor] = s
	                            .replace(escapedSpaceCharacters, ' ')
	                            .trim()
	                            .split(' ', 2);
	                        return { url, descriptor };
	                    });
	                    // data urls contains comma after the ecoding so we need to re-merge
	                    // them
	                    for (let i = 0; i < imageCandidates.length; i++) {
	                        const { url } = imageCandidates[i];
	                        if (isDataUrl(url)) {
	                            imageCandidates[i + 1].url =
	                                url + ',' + imageCandidates[i + 1].url;
	                            imageCandidates.splice(i, 1);
	                        }
	                    }
	                    const hasQualifiedUrl = imageCandidates.some(({ url }) => {
	                        return (!isExternalUrl(url) &&
	                            !isDataUrl(url) &&
	                            (options.includeAbsolute || isRelativeUrl(url)));
	                    });
	                    // When srcset does not contain any qualified URLs, skip transforming
	                    if (!hasQualifiedUrl) {
	                        return;
	                    }
	                    if (options.base) {
	                        const base = options.base;
	                        const set = [];
	                        imageCandidates.forEach(({ url, descriptor }) => {
	                            descriptor = descriptor ? ` ${descriptor}` : ``;
	                            if (isRelativeUrl(url)) {
	                                set.push((path__default.posix || path__default).join(base, url) + descriptor);
	                            }
	                            else {
	                                set.push(url + descriptor);
	                            }
	                        });
	                        attr.value.content = set.join(', ');
	                        return;
	                    }
	                    const compoundExpression = compilerCore.createCompoundExpression([], attr.loc);
	                    imageCandidates.forEach(({ url, descriptor }, index) => {
	                        if (!isExternalUrl(url) &&
	                            !isDataUrl(url) &&
	                            (options.includeAbsolute || isRelativeUrl(url))) {
	                            const { path } = parseUrl(url);
	                            let exp;
	                            if (path) {
	                                const existingImportsIndex = context.imports.findIndex(i => i.path === path);
	                                if (existingImportsIndex > -1) {
	                                    exp = compilerCore.createSimpleExpression(`_imports_${existingImportsIndex}`, false, attr.loc, 2 /* CAN_HOIST */);
	                                }
	                                else {
	                                    exp = compilerCore.createSimpleExpression(`_imports_${context.imports.length}`, false, attr.loc, 2 /* CAN_HOIST */);
	                                    context.imports.push({ exp, path });
	                                }
	                                compoundExpression.children.push(exp);
	                            }
	                        }
	                        else {
	                            const exp = compilerCore.createSimpleExpression(`"${url}"`, false, attr.loc, 2 /* CAN_HOIST */);
	                            compoundExpression.children.push(exp);
	                        }
	                        const isNotLast = imageCandidates.length - 1 > index;
	                        if (descriptor && isNotLast) {
	                            compoundExpression.children.push(` + ' ${descriptor}, ' + `);
	                        }
	                        else if (descriptor) {
	                            compoundExpression.children.push(` + ' ${descriptor}'`);
	                        }
	                        else if (isNotLast) {
	                            compoundExpression.children.push(` + ', ' + `);
	                        }
	                    });
	                    const hoisted = context.hoist(compoundExpression);
	                    hoisted.constType = 2 /* CAN_HOIST */;
	                    node.props[index] = {
	                        type: 7 /* DIRECTIVE */,
	                        name: 'bind',
	                        arg: compilerCore.createSimpleExpression('srcset', true, attr.loc),
	                        exp: hoisted,
	                        modifiers: [],
	                        loc: attr.loc
	                    };
	                }
	            });
	        }
	    }
	};

	function preprocess({ source, filename, preprocessOptions }, preprocessor) {
	    // Consolidate exposes a callback based API, but the callback is in fact
	    // called synchronously for most templating engines. In our case, we have to
	    // expose a synchronous API so that it is usable in Jest transforms (which
	    // have to be sync because they are applied via Node.js require hooks)
	    let res = '';
	    let err = null;
	    preprocessor.render(source, { filename, ...preprocessOptions }, (_err, _res) => {
	        if (_err)
	            err = _err;
	        res = _res;
	    });
	    if (err)
	        throw err;
	    return res;
	}
	function compileTemplate(options) {
	    const { preprocessLang, preprocessCustomRequire } = options;
	    const preprocessor = preprocessLang
	        ? preprocessCustomRequire
	            ? preprocessCustomRequire(preprocessLang)
	            : {}
	        : false;
	    if (preprocessor) {
	        try {
	            return doCompileTemplate({
	                ...options,
	                source: preprocess(options, preprocessor)
	            });
	        }
	        catch (e) {
	            return {
	                code: `export default function render() {}`,
	                source: options.source,
	                tips: [],
	                errors: [e]
	            };
	        }
	    }
	    else if (preprocessLang) {
	        return {
	            code: `export default function render() {}`,
	            source: options.source,
	            tips: [
	                `Component ${options.filename} uses lang ${preprocessLang} for template. Please install the language preprocessor.`
	            ],
	            errors: [
	                `Component ${options.filename} uses lang ${preprocessLang} for template, however it is not installed.`
	            ]
	        };
	    }
	    else {
	        return doCompileTemplate(options);
	    }
	}
	function doCompileTemplate({ filename, id, scoped, slotted, inMap, source, ssr = false, ssrCssVars, isProd = false, compiler = ssr ? CompilerSSR__namespace : CompilerDOM__namespace, compilerOptions = {}, transformAssetUrls }) {
	    const errors = [];
	    let nodeTransforms = [];
	    if (shared.isObject(transformAssetUrls)) {
	        const assetOptions = normalizeOptions(transformAssetUrls);
	        nodeTransforms = [
	            createAssetUrlTransformWithOptions(assetOptions),
	            createSrcsetTransformWithOptions(assetOptions)
	        ];
	    }
	    else if (transformAssetUrls !== false) {
	        nodeTransforms = [transformAssetUrl, transformSrcset];
	    }
	    if (ssr && !ssrCssVars) {
	        warnOnce(`compileTemplate is called with \`ssr: true\` but no ` +
	            `corresponding \`cssVars\` option.\`.`);
	    }
	    if (!id) {
	        warnOnce(`compileTemplate now requires the \`id\` option.\`.`);
	        id = '';
	    }
	    const shortId = id.replace(/^data-v-/, '');
	    const longId = `data-v-${shortId}`;
	    let { code, ast, preamble, map } = compiler.compile(source, {
	        mode: 'module',
	        prefixIdentifiers: true,
	        hoistStatic: true,
	        cacheHandlers: true,
	        ssrCssVars: ssr && ssrCssVars && ssrCssVars.length
	            ? genCssVarsFromList(ssrCssVars, shortId, isProd)
	            : '',
	        scopeId: scoped ? longId : undefined,
	        slotted,
	        ...compilerOptions,
	        nodeTransforms: nodeTransforms.concat(compilerOptions.nodeTransforms || []),
	        filename,
	        sourceMap: true,
	        onError: e => errors.push(e)
	    });
	    // inMap should be the map produced by ./parse.ts which is a simple line-only
	    // mapping. If it is present, we need to adjust the final map and errors to
	    // reflect the original line numbers.
	    if (inMap) {
	        if (map) {
	            map = mapLines(inMap, map);
	        }
	        if (errors.length) {
	            patchErrors(errors, source, inMap);
	        }
	    }
	    return { code, ast, preamble, source, errors, tips: [], map };
	}
	function mapLines(oldMap, newMap) {
	    if (!oldMap)
	        return newMap;
	    if (!newMap)
	        return oldMap;
	    const oldMapConsumer = new sourceMap.SourceMapConsumer(oldMap);
	    const newMapConsumer = new sourceMap.SourceMapConsumer(newMap);
	    const mergedMapGenerator = new sourceMap.SourceMapGenerator();
	    newMapConsumer.eachMapping(m => {
	        if (m.originalLine == null) {
	            return;
	        }
	        const origPosInOldMap = oldMapConsumer.originalPositionFor({
	            line: m.originalLine,
	            column: m.originalColumn
	        });
	        if (origPosInOldMap.source == null) {
	            return;
	        }
	        mergedMapGenerator.addMapping({
	            generated: {
	                line: m.generatedLine,
	                column: m.generatedColumn
	            },
	            original: {
	                line: origPosInOldMap.line,
	                // use current column, since the oldMap produced by @vue/compiler-sfc
	                // does not
	                column: m.originalColumn
	            },
	            source: origPosInOldMap.source,
	            name: origPosInOldMap.name
	        });
	    });
	    // source-map's type definition is incomplete
	    const generator = mergedMapGenerator;
	    oldMapConsumer.sources.forEach((sourceFile) => {
	        generator._sources.add(sourceFile);
	        const sourceContent = oldMapConsumer.sourceContentFor(sourceFile);
	        if (sourceContent != null) {
	            mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
	        }
	    });
	    generator._sourceRoot = oldMap.sourceRoot;
	    generator._file = oldMap.file;
	    return generator.toJSON();
	}
	function patchErrors(errors, source, inMap) {
	    const originalSource = inMap.sourcesContent[0];
	    const offset = originalSource.indexOf(source);
	    const lineOffset = originalSource.slice(0, offset).split(/\r?\n/).length - 1;
	    errors.forEach(err => {
	        if (err.loc) {
	            err.loc.start.line += lineOffset;
	            err.loc.start.offset += offset;
	            if (err.loc.end !== err.loc.start) {
	                err.loc.end.line += lineOffset;
	                err.loc.end.offset += offset;
	            }
	        }
	    });
	}

	const trimPlugin = () => {
	    return {
	        postcssPlugin: 'vue-sfc-trim',
	        Once(root) {
	            root.walk(({ type, raws }) => {
	                if (type === 'rule' || type === 'atrule') {
	                    if (raws.before)
	                        raws.before = '\n';
	                    if ('after' in raws && raws.after)
	                        raws.after = '\n';
	                }
	            });
	        }
	    };
	};
	trimPlugin.postcss = true;

	const animationNameRE = /^(-\w+-)?animation-name$/;
	const animationRE = /^(-\w+-)?animation$/;
	const scopedPlugin = (id = '') => {
	    const keyframes = Object.create(null);
	    const shortId = id.replace(/^data-v-/, '');
	    return {
	        postcssPlugin: 'vue-sfc-scoped',
	        Rule(rule) {
	            processRule(id, rule);
	        },
	        AtRule(node) {
	            if (/-?keyframes$/.test(node.name) &&
	                !node.params.endsWith(`-${shortId}`)) {
	                // register keyframes
	                keyframes[node.params] = node.params = node.params + '-' + shortId;
	            }
	        },
	        OnceExit(root) {
	            if (Object.keys(keyframes).length) {
	                // If keyframes are found in this <style>, find and rewrite animation names
	                // in declarations.
	                // Caveat: this only works for keyframes and animation rules in the same
	                // <style> element.
	                // individual animation-name declaration
	                root.walkDecls(decl => {
	                    if (animationNameRE.test(decl.prop)) {
	                        decl.value = decl.value
	                            .split(',')
	                            .map(v => keyframes[v.trim()] || v.trim())
	                            .join(',');
	                    }
	                    // shorthand
	                    if (animationRE.test(decl.prop)) {
	                        decl.value = decl.value
	                            .split(',')
	                            .map(v => {
	                            const vals = v.trim().split(/\s+/);
	                            const i = vals.findIndex(val => keyframes[val]);
	                            if (i !== -1) {
	                                vals.splice(i, 1, keyframes[vals[i]]);
	                                return vals.join(' ');
	                            }
	                            else {
	                                return v;
	                            }
	                        })
	                            .join(',');
	                    }
	                });
	            }
	        }
	    };
	};
	const processedRules = new WeakSet();
	function processRule(id, rule) {
	    if (processedRules.has(rule) ||
	        (rule.parent &&
	            rule.parent.type === 'atrule' &&
	            /-?keyframes$/.test(rule.parent.name))) {
	        return;
	    }
	    processedRules.add(rule);
	    rule.selector = selectorParser__default(selectorRoot => {
	        selectorRoot.each(selector => {
	            rewriteSelector(id, selector, selectorRoot);
	        });
	    }).processSync(rule.selector);
	}
	function rewriteSelector(id, selector, selectorRoot, slotted = false) {
	    let node = null;
	    let shouldInject = true;
	    // find the last child node to insert attribute selector
	    selector.each(n => {
	        // DEPRECATED ">>>" and "/deep/" combinator
	        if (n.type === 'combinator' &&
	            (n.value === '>>>' || n.value === '/deep/')) {
	            n.value = ' ';
	            n.spaces.before = n.spaces.after = '';
	            warn(`the >>> and /deep/ combinators have been deprecated. ` +
	                `Use :deep() instead.`);
	            return false;
	        }
	        if (n.type === 'pseudo') {
	            const { value } = n;
	            // deep: inject [id] attribute at the node before the ::v-deep
	            // combinator.
	            if (value === ':deep' || value === '::v-deep') {
	                if (n.nodes.length) {
	                    // .foo ::v-deep(.bar) -> .foo[xxxxxxx] .bar
	                    // replace the current node with ::v-deep's inner selector
	                    let last = n;
	                    n.nodes[0].each(ss => {
	                        selector.insertAfter(last, ss);
	                        last = ss;
	                    });
	                    // insert a space combinator before if it doesn't already have one
	                    const prev = selector.at(selector.index(n) - 1);
	                    if (!prev || !isSpaceCombinator(prev)) {
	                        selector.insertAfter(n, selectorParser__default.combinator({
	                            value: ' '
	                        }));
	                    }
	                    selector.removeChild(n);
	                }
	                else {
	                    // DEPRECATED usage
	                    // .foo ::v-deep .bar -> .foo[xxxxxxx] .bar
	                    warn(`::v-deep usage as a combinator has ` +
	                        `been deprecated. Use :deep(<inner-selector>) instead.`);
	                    const prev = selector.at(selector.index(n) - 1);
	                    if (prev && isSpaceCombinator(prev)) {
	                        selector.removeChild(prev);
	                    }
	                    selector.removeChild(n);
	                }
	                return false;
	            }
	            // slot: use selector inside `::v-slotted` and inject [id + '-s']
	            // instead.
	            // ::v-slotted(.foo) -> .foo[xxxxxxx-s]
	            if (value === ':slotted' || value === '::v-slotted') {
	                rewriteSelector(id, n.nodes[0], selectorRoot, true /* slotted */);
	                let last = n;
	                n.nodes[0].each(ss => {
	                    selector.insertAfter(last, ss);
	                    last = ss;
	                });
	                // selector.insertAfter(n, n.nodes[0])
	                selector.removeChild(n);
	                // since slotted attribute already scopes the selector there's no
	                // need for the non-slot attribute.
	                shouldInject = false;
	                return false;
	            }
	            // global: replace with inner selector and do not inject [id].
	            // ::v-global(.foo) -> .foo
	            if (value === ':global' || value === '::v-global') {
	                selectorRoot.insertAfter(selector, n.nodes[0]);
	                selectorRoot.removeChild(selector);
	                return false;
	            }
	        }
	        if (n.type !== 'pseudo' && n.type !== 'combinator') {
	            node = n;
	        }
	    });
	    if (node) {
	        node.spaces.after = '';
	    }
	    else {
	        // For deep selectors & standalone pseudo selectors,
	        // the attribute selectors are prepended rather than appended.
	        // So all leading spaces must be eliminated to avoid problems.
	        selector.first.spaces.before = '';
	    }
	    if (shouldInject) {
	        const idToAdd = slotted ? id + '-s' : id;
	        selector.insertAfter(
	        // If node is null it means we need to inject [id] at the start
	        // insertAfter can handle `null` here
	        node, selectorParser__default.attribute({
	            attribute: idToAdd,
	            value: idToAdd,
	            raws: {},
	            quoteMark: `"`
	        }));
	    }
	}
	function isSpaceCombinator(node) {
	    return node.type === 'combinator' && /^\s+$/.test(node.value);
	}
	scopedPlugin.postcss = true;

	// .scss/.sass processor
	const scss = (source, map, options, load) => {
	    const nodeSass = load('sass');
	    const finalOptions = {
	        ...options,
	        data: getSource(source, options.filename, options.additionalData),
	        file: options.filename,
	        outFile: options.filename,
	        sourceMap: !!map
	    };
	    try {
	        const result = nodeSass.renderSync(finalOptions);
	        const dependencies = result.stats.includedFiles;
	        if (map) {
	            return {
	                code: result.css.toString(),
	                map: merge__default(map, JSON.parse(result.map.toString())),
	                errors: [],
	                dependencies
	            };
	        }
	        return { code: result.css.toString(), errors: [], dependencies };
	    }
	    catch (e) {
	        return { code: '', errors: [e], dependencies: [] };
	    }
	};
	const sass = (source, map, options, load) => scss(source, map, {
	    ...options,
	    indentedSyntax: true
	}, load);
	// .less
	const less = (source, map, options, load) => {
	    const nodeLess = load('less');
	    let result;
	    let error = null;
	    nodeLess.render(getSource(source, options.filename, options.additionalData), { ...options, syncImport: true }, (err, output) => {
	        error = err;
	        result = output;
	    });
	    if (error)
	        return { code: '', errors: [error], dependencies: [] };
	    const dependencies = result.imports;
	    if (map) {
	        return {
	            code: result.css.toString(),
	            map: merge__default(map, result.map),
	            errors: [],
	            dependencies: dependencies
	        };
	    }
	    return {
	        code: result.css.toString(),
	        errors: [],
	        dependencies: dependencies
	    };
	};
	// .styl
	const styl = (source, map, options, load) => {
	    const nodeStylus = load('stylus');
	    try {
	        const ref = nodeStylus(source);
	        Object.keys(options).forEach(key => ref.set(key, options[key]));
	        if (map)
	            ref.set('sourcemap', { inline: false, comment: false });
	        const result = ref.render();
	        const dependencies = ref.deps();
	        if (map) {
	            return {
	                code: result,
	                map: merge__default(map, ref.sourcemap),
	                errors: [],
	                dependencies
	            };
	        }
	        return { code: result, errors: [], dependencies };
	    }
	    catch (e) {
	        return { code: '', errors: [e], dependencies: [] };
	    }
	};
	function getSource(source, filename, additionalData) {
	    if (!additionalData)
	        return source;
	    if (shared.isFunction(additionalData)) {
	        return additionalData(source, filename);
	    }
	    return additionalData + source;
	}
	const processors = {
	    less,
	    sass,
	    scss,
	    styl,
	    stylus: styl
	};

	function compileStyle(options) {
	    return doCompileStyle({
	        ...options,
	        isAsync: false
	    });
	}
	function compileStyleAsync(options) {
	    return doCompileStyle({ ...options, isAsync: true });
	}
	function doCompileStyle(options) {
	    const { filename, id, scoped = false, trim = true, isProd = false, modules = false, modulesOptions = {}, preprocessLang, postcssOptions, postcssPlugins } = options;
	    const preprocessor = preprocessLang && processors[preprocessLang];
	    const preProcessedSource = preprocessor && preprocess$1(options, preprocessor);
	    const map = preProcessedSource
	        ? preProcessedSource.map
	        : options.inMap || options.map;
	    const source = preProcessedSource ? preProcessedSource.code : options.source;
	    const shortId = id.replace(/^data-v-/, '');
	    const longId = `data-v-${shortId}`;
	    const plugins = (postcssPlugins || []).slice();
	    plugins.unshift(cssVarsPlugin({ id: shortId, isProd }));
	    if (trim) {
	        plugins.push(trimPlugin());
	    }
	    if (scoped) {
	        plugins.push(scopedPlugin(longId));
	    }
	    let cssModules;
	    if (modules) {
	        if (!options.isAsync) {
	            throw new Error('[@vue/compiler-sfc] `modules` option can only be used with compileStyleAsync().');
	        }
	        plugins.push(build.exports({
	            ...modulesOptions,
	            getJSON: (_cssFileName, json) => {
	                cssModules = json;
	            }
	        }));
	    }
	    const postCSSOptions = {
	        ...postcssOptions,
	        to: filename,
	        from: filename
	    };
	    if (map) {
	        postCSSOptions.map = {
	            inline: false,
	            annotation: false,
	            prev: map
	        };
	    }
	    let result;
	    let code;
	    let outMap;
	    // stylus output include plain css. so need remove the repeat item
	    const dependencies = new Set(preProcessedSource ? preProcessedSource.dependencies : []);
	    // sass has filename self when provided filename option
	    dependencies.delete(filename);
	    const errors = [];
	    if (preProcessedSource && preProcessedSource.errors.length) {
	        errors.push(...preProcessedSource.errors);
	    }
	    const recordPlainCssDependencies = (messages) => {
	        messages.forEach(msg => {
	            if (msg.type === 'dependency') {
	                // postcss output path is absolute position path
	                dependencies.add(msg.file);
	            }
	        });
	        return dependencies;
	    };
	    try {
	        result = postcss__default(plugins).process(source, postCSSOptions);
	        // In async mode, return a promise.
	        if (options.isAsync) {
	            return result
	                .then(result => ({
	                code: result.css || '',
	                map: result.map && result.map.toJSON(),
	                errors,
	                modules: cssModules,
	                rawResult: result,
	                dependencies: recordPlainCssDependencies(result.messages)
	            }))
	                .catch(error => ({
	                code: '',
	                map: undefined,
	                errors: [...errors, error],
	                rawResult: undefined,
	                dependencies
	            }));
	        }
	        recordPlainCssDependencies(result.messages);
	        // force synchronous transform (we know we only have sync plugins)
	        code = result.css;
	        outMap = result.map;
	    }
	    catch (e) {
	        errors.push(e);
	    }
	    return {
	        code: code || ``,
	        map: outMap && outMap.toJSON(),
	        errors,
	        rawResult: result,
	        dependencies
	    };
	}
	function preprocess$1(options, preprocessor) {
	    return preprocessor(options.source, options.inMap || options.map, {
	        filename: options.filename,
	        ...options.preprocessOptions
	    }, options.preprocessCustomRequire);
	}

	const defaultExportRE = /((?:^|\n|;)\s*)export(\s*)default/;
	const namedDefaultExportRE = /((?:^|\n|;)\s*)export(.+)as(\s*)default/;
	const exportDefaultClassRE = /((?:^|\n|;)\s*)export\s+default\s+class\s+([\w$]+)/;
	/**
	 * Utility for rewriting `export default` in a script block into a variable
	 * declaration so that we can inject things into it
	 */
	function rewriteDefault(input, as, parserPlugins) {
	    if (!hasDefaultExport(input)) {
	        return input + `\nconst ${as} = {}`;
	    }
	    let replaced;
	    const classMatch = input.match(exportDefaultClassRE);
	    if (classMatch) {
	        replaced =
	            input.replace(exportDefaultClassRE, '$1class $2') +
	                `\nconst ${as} = ${classMatch[2]}`;
	    }
	    else {
	        replaced = input.replace(defaultExportRE, `$1const ${as} =`);
	    }
	    if (!hasDefaultExport(replaced)) {
	        return replaced;
	    }
	    // if the script somehow still contains `default export`, it probably has
	    // multi-line comments or template strings. fallback to a full parse.
	    const s = new MagicString__default(input);
	    const ast = parser.parse(input, {
	        sourceType: 'module',
	        plugins: parserPlugins
	    }).program.body;
	    ast.forEach(node => {
	        if (node.type === 'ExportDefaultDeclaration') {
	            s.overwrite(node.start, node.declaration.start, `const ${as} = `);
	        }
	        if (node.type === 'ExportNamedDeclaration') {
	            node.specifiers.forEach(specifier => {
	                if (specifier.type === 'ExportSpecifier' &&
	                    specifier.exported.type === 'Identifier' &&
	                    specifier.exported.name === 'default') {
	                    const end = specifier.end;
	                    s.overwrite(specifier.start, input.charAt(end) === ',' ? end + 1 : end, ``);
	                    s.append(`\nconst ${as} = ${specifier.local.name}`);
	                }
	            });
	        }
	    });
	    return s.toString();
	}
	function hasDefaultExport(input) {
	    return defaultExportRE.test(input) || namedDefaultExportRE.test(input);
	}

	const DEFINE_PROPS = 'defineProps';
	const DEFINE_EMIT = 'defineEmit';
	/**
	 * Compile `<script setup>`
	 * It requires the whole SFC descriptor because we need to handle and merge
	 * normal `<script>` + `<script setup>` if both are present.
	 */
	function compileScript(sfc, options) {
	    const { script, scriptSetup, source, filename } = sfc;
	    if (scriptSetup) {
	        warnExperimental(`<script setup>`, 227);
	    }
	    // for backwards compat
	    if (!options) {
	        options = { id: '' };
	    }
	    if (!options.id) {
	        warnOnce(`compileScript now requires passing the \`id\` option.\n` +
	            `Upgrade your vite or vue-loader version for compatibility with ` +
	            `the latest experimental proposals.`);
	    }
	    const scopeId = options.id ? options.id.replace(/^data-v-/, '') : '';
	    const cssVars = sfc.cssVars;
	    const hasInheritAttrsFlag = sfc.template && sfc.template.attrs['inherit-attrs'] === 'false';
	    const scriptLang = script && script.lang;
	    const scriptSetupLang = scriptSetup && scriptSetup.lang;
	    const isTS = scriptLang === 'ts' || scriptSetupLang === 'ts';
	    const plugins = [...shared.babelParserDefaultPlugins, 'jsx'];
	    if (options.babelParserPlugins)
	        plugins.push(...options.babelParserPlugins);
	    if (isTS)
	        plugins.push('typescript', 'decorators-legacy');
	    if (!scriptSetup) {
	        if (!script) {
	            throw new Error(`[@vue/compiler-sfc] SFC contains no <script> tags.`);
	        }
	        if (scriptLang && scriptLang !== 'ts') {
	            // do not process non js/ts script blocks
	            return script;
	        }
	        try {
	            const scriptAst = parser.parse(script.content, {
	                plugins,
	                sourceType: 'module'
	            }).program.body;
	            const bindings = analyzeScriptBindings(scriptAst);
	            const needRewrite = cssVars.length || hasInheritAttrsFlag;
	            let content = script.content;
	            if (needRewrite) {
	                content = rewriteDefault(content, `__default__`, plugins);
	                if (cssVars.length) {
	                    content += genNormalScriptCssVarsCode(cssVars, bindings, scopeId, !!options.isProd);
	                }
	                if (hasInheritAttrsFlag) {
	                    content += `__default__.inheritAttrs = false`;
	                }
	                content += `\nexport default __default__`;
	            }
	            return {
	                ...script,
	                content,
	                bindings,
	                scriptAst
	            };
	        }
	        catch (e) {
	            // silently fallback if parse fails since user may be using custom
	            // babel syntax
	            return script;
	        }
	    }
	    if (script && scriptLang !== scriptSetupLang) {
	        throw new Error(`[@vue/compiler-sfc] <script> and <script setup> must have the same language type.`);
	    }
	    if (scriptSetupLang && scriptSetupLang !== 'ts') {
	        // do not process non js/ts script blocks
	        return scriptSetup;
	    }
	    const defaultTempVar = `__default__`;
	    const bindingMetadata = {};
	    const helperImports = new Set();
	    const userImports = Object.create(null);
	    const userImportAlias = Object.create(null);
	    const setupBindings = Object.create(null);
	    const refBindings = Object.create(null);
	    const refIdentifiers = new Set();
	    const enableRefSugar = options.refSugar !== false;
	    let defaultExport;
	    let hasDefinePropsCall = false;
	    let hasDefineEmitCall = false;
	    let propsRuntimeDecl;
	    let propsTypeDecl;
	    let propsIdentifier;
	    let emitRuntimeDecl;
	    let emitTypeDecl;
	    let emitIdentifier;
	    let hasAwait = false;
	    let hasInlinedSsrRenderFn = false;
	    // props/emits declared via types
	    const typeDeclaredProps = {};
	    const typeDeclaredEmits = new Set();
	    // record declared types for runtime props type generation
	    const declaredTypes = {};
	    // magic-string state
	    const s = new MagicString__default(source);
	    const startOffset = scriptSetup.loc.start.offset;
	    const endOffset = scriptSetup.loc.end.offset;
	    const scriptStartOffset = script && script.loc.start.offset;
	    const scriptEndOffset = script && script.loc.end.offset;
	    function helper(key) {
	        helperImports.add(key);
	        return `_${key}`;
	    }
	    function parse(input, options, offset) {
	        try {
	            return parser.parse(input, options).program.body;
	        }
	        catch (e) {
	            e.message = `[@vue/compiler-sfc] ${e.message}\n\n${sfc.filename}\n${shared.generateCodeFrame(source, e.pos + offset, e.pos + offset + 1)}`;
	            throw e;
	        }
	    }
	    function error(msg, node, end = node.end + startOffset) {
	        throw new Error(`[@vue/compiler-sfc] ${msg}\n\n${sfc.filename}\n${shared.generateCodeFrame(source, node.start + startOffset, end)}`);
	    }
	    function registerUserImport(source, local, imported, isType) {
	        if (source === 'vue' && imported) {
	            userImportAlias[imported] = local;
	        }
	        userImports[local] = {
	            isType,
	            imported: imported || 'default',
	            source
	        };
	    }
	    function processDefineProps(node) {
	        if (isCallOf(node, DEFINE_PROPS)) {
	            if (hasDefinePropsCall) {
	                error(`duplicate ${DEFINE_PROPS}() call`, node);
	            }
	            hasDefinePropsCall = true;
	            propsRuntimeDecl = node.arguments[0];
	            // context call has type parameters - infer runtime types from it
	            if (node.typeParameters) {
	                if (propsRuntimeDecl) {
	                    error(`${DEFINE_PROPS}() cannot accept both type and non-type arguments ` +
	                        `at the same time. Use one or the other.`, node);
	                }
	                const typeArg = node.typeParameters.params[0];
	                if (typeArg.type === 'TSTypeLiteral') {
	                    propsTypeDecl = typeArg;
	                }
	                else {
	                    error(`type argument passed to ${DEFINE_PROPS}() must be a literal type.`, typeArg);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    function processDefineEmit(node) {
	        if (isCallOf(node, DEFINE_EMIT)) {
	            if (hasDefineEmitCall) {
	                error(`duplicate ${DEFINE_EMIT}() call`, node);
	            }
	            hasDefineEmitCall = true;
	            emitRuntimeDecl = node.arguments[0];
	            if (node.typeParameters) {
	                if (emitRuntimeDecl) {
	                    error(`${DEFINE_EMIT}() cannot accept both type and non-type arguments ` +
	                        `at the same time. Use one or the other.`, node);
	                }
	                const typeArg = node.typeParameters.params[0];
	                if (typeArg.type === 'TSFunctionType' ||
	                    typeArg.type === 'TSTypeLiteral') {
	                    emitTypeDecl = typeArg;
	                }
	                else {
	                    error(`type argument passed to ${DEFINE_EMIT}() must be a function type ` +
	                        `or a literal type with call signatures.`, typeArg);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    function checkInvalidScopeReference(node, method) {
	        if (!node)
	            return;
	        walkIdentifiers(node, id => {
	            if (setupBindings[id.name]) {
	                error(`\`${method}()\` in <script setup> cannot reference locally ` +
	                    `declared variables because it will be hoisted outside of the ` +
	                    `setup() function. If your component options requires initialization ` +
	                    `in the module scope, use a separate normal <script> to export ` +
	                    `the options instead.`, id);
	            }
	        });
	    }
	    function processRefExpression(exp, statement) {
	        if (exp.type === 'AssignmentExpression') {
	            const { left, right } = exp;
	            if (left.type === 'Identifier') {
	                registerRefBinding(left);
	                s.prependRight(right.start + startOffset, `${helper('ref')}(`);
	                s.appendLeft(right.end + startOffset, ')');
	            }
	            else if (left.type === 'ObjectPattern') {
	                // remove wrapping parens
	                for (let i = left.start; i > 0; i--) {
	                    const char = source[i + startOffset];
	                    if (char === '(') {
	                        s.remove(i + startOffset, i + startOffset + 1);
	                        break;
	                    }
	                }
	                for (let i = left.end; i > 0; i++) {
	                    const char = source[i + startOffset];
	                    if (char === ')') {
	                        s.remove(i + startOffset, i + startOffset + 1);
	                        break;
	                    }
	                }
	                processRefObjectPattern(left, statement);
	            }
	            else if (left.type === 'ArrayPattern') {
	                processRefArrayPattern(left, statement);
	            }
	        }
	        else if (exp.type === 'SequenceExpression') {
	            // possible multiple declarations
	            // ref: x = 1, y = 2
	            exp.expressions.forEach(e => processRefExpression(e, statement));
	        }
	        else if (exp.type === 'Identifier') {
	            registerRefBinding(exp);
	            s.appendLeft(exp.end + startOffset, ` = ${helper('ref')}()`);
	        }
	        else {
	            error(`ref: statements can only contain assignment expressions.`, exp);
	        }
	    }
	    function registerRefBinding(id) {
	        if (id.name[0] === '$') {
	            error(`ref variable identifiers cannot start with $.`, id);
	        }
	        refBindings[id.name] = setupBindings[id.name] = "setup-ref" /* SETUP_REF */;
	        refIdentifiers.add(id);
	    }
	    function processRefObjectPattern(pattern, statement) {
	        for (const p of pattern.properties) {
	            let nameId;
	            if (p.type === 'ObjectProperty') {
	                if (p.key.start === p.value.start) {
	                    // shorthand { foo } --> { foo: __foo }
	                    nameId = p.key;
	                    s.appendLeft(nameId.end + startOffset, `: __${nameId.name}`);
	                    if (p.value.type === 'AssignmentPattern') {
	                        // { foo = 1 }
	                        refIdentifiers.add(p.value.left);
	                    }
	                }
	                else {
	                    if (p.value.type === 'Identifier') {
	                        // { foo: bar } --> { foo: __bar }
	                        nameId = p.value;
	                        s.prependRight(nameId.start + startOffset, `__`);
	                    }
	                    else if (p.value.type === 'ObjectPattern') {
	                        processRefObjectPattern(p.value, statement);
	                    }
	                    else if (p.value.type === 'ArrayPattern') {
	                        processRefArrayPattern(p.value, statement);
	                    }
	                    else if (p.value.type === 'AssignmentPattern') {
	                        // { foo: bar = 1 } --> { foo: __bar = 1 }
	                        nameId = p.value.left;
	                        s.prependRight(nameId.start + startOffset, `__`);
	                    }
	                }
	            }
	            else {
	                // rest element { ...foo } --> { ...__foo }
	                nameId = p.argument;
	                s.prependRight(nameId.start + startOffset, `__`);
	            }
	            if (nameId) {
	                registerRefBinding(nameId);
	                // append binding declarations after the parent statement
	                s.appendLeft(statement.end + startOffset, `\nconst ${nameId.name} = ${helper('ref')}(__${nameId.name});`);
	            }
	        }
	    }
	    function processRefArrayPattern(pattern, statement) {
	        for (const e of pattern.elements) {
	            if (!e)
	                continue;
	            let nameId;
	            if (e.type === 'Identifier') {
	                // [a] --> [__a]
	                nameId = e;
	            }
	            else if (e.type === 'AssignmentPattern') {
	                // [a = 1] --> [__a = 1]
	                nameId = e.left;
	            }
	            else if (e.type === 'RestElement') {
	                // [...a] --> [...__a]
	                nameId = e.argument;
	            }
	            else if (e.type === 'ObjectPattern') {
	                processRefObjectPattern(e, statement);
	            }
	            else if (e.type === 'ArrayPattern') {
	                processRefArrayPattern(e, statement);
	            }
	            if (nameId) {
	                registerRefBinding(nameId);
	                // prefix original
	                s.prependRight(nameId.start + startOffset, `__`);
	                // append binding declarations after the parent statement
	                s.appendLeft(statement.end + startOffset, `\nconst ${nameId.name} = ${helper('ref')}(__${nameId.name});`);
	            }
	        }
	    }
	    // 1. process normal <script> first if it exists
	    let scriptAst;
	    if (script) {
	        // import dedupe between <script> and <script setup>
	        scriptAst = parse(script.content, {
	            plugins,
	            sourceType: 'module'
	        }, scriptStartOffset);
	        for (const node of scriptAst) {
	            if (node.type === 'ImportDeclaration') {
	                // record imports for dedupe
	                for (const specifier of node.specifiers) {
	                    const imported = specifier.type === 'ImportSpecifier' &&
	                        specifier.imported.type === 'Identifier' &&
	                        specifier.imported.name;
	                    registerUserImport(node.source.value, specifier.local.name, imported, node.importKind === 'type');
	                }
	            }
	            else if (node.type === 'ExportDefaultDeclaration') {
	                // export default
	                defaultExport = node;
	                const start = node.start + scriptStartOffset;
	                s.overwrite(start, start + `export default`.length, `const ${defaultTempVar} =`);
	            }
	            else if (node.type === 'ExportNamedDeclaration' && node.specifiers) {
	                const defaultSpecifier = node.specifiers.find(s => s.exported.type === 'Identifier' && s.exported.name === 'default');
	                if (defaultSpecifier) {
	                    defaultExport = node;
	                    // 1. remove specifier
	                    if (node.specifiers.length > 1) {
	                        s.remove(defaultSpecifier.start + scriptStartOffset, defaultSpecifier.end + scriptStartOffset);
	                    }
	                    else {
	                        s.remove(node.start + scriptStartOffset, node.end + scriptStartOffset);
	                    }
	                    if (node.source) {
	                        // export { x as default } from './x'
	                        // rewrite to `import { x as __default__ } from './x'` and
	                        // add to top
	                        s.prepend(`import { ${defaultSpecifier.local.name} as ${defaultTempVar} } from '${node.source.value}'\n`);
	                    }
	                    else {
	                        // export { x as default }
	                        // rewrite to `const __default__ = x` and move to end
	                        s.append(`\nconst ${defaultTempVar} = ${defaultSpecifier.local.name}\n`);
	                    }
	                }
	            }
	        }
	    }
	    // 2. parse <script setup> and  walk over top level statements
	    const scriptSetupAst = parse(scriptSetup.content, {
	        plugins: [
	            ...plugins,
	            // allow top level await but only inside <script setup>
	            'topLevelAwait'
	        ],
	        sourceType: 'module'
	    }, startOffset);
	    for (const node of scriptSetupAst) {
	        const start = node.start + startOffset;
	        let end = node.end + startOffset;
	        // import or type declarations: move to top
	        // locate comment
	        if (node.trailingComments && node.trailingComments.length > 0) {
	            const lastCommentNode = node.trailingComments[node.trailingComments.length - 1];
	            end = lastCommentNode.end + startOffset;
	        }
	        // locate the end of whitespace between this statement and the next
	        while (end <= source.length) {
	            if (!/\s/.test(source.charAt(end))) {
	                break;
	            }
	            end++;
	        }
	        // process `ref: x` bindings (convert to refs)
	        if (node.type === 'LabeledStatement' &&
	            node.label.name === 'ref' &&
	            node.body.type === 'ExpressionStatement') {
	            if (enableRefSugar) {
	                warnExperimental(`ref: sugar`, 228);
	                s.overwrite(node.label.start + startOffset, node.body.start + startOffset, 'const ');
	                processRefExpression(node.body.expression, node);
	            }
	            else {
	                // TODO if we end up shipping ref: sugar as an opt-in feature,
	                // need to proxy the option in vite, vue-loader and rollup-plugin-vue.
	                error(`ref: sugar needs to be explicitly enabled via vite or vue-loader options.`, node);
	            }
	        }
	        if (node.type === 'ImportDeclaration') {
	            // import declarations are moved to top
	            s.move(start, end, 0);
	            // dedupe imports
	            let removed = 0;
	            const removeSpecifier = (i) => {
	                const removeLeft = i > removed;
	                removed++;
	                const current = node.specifiers[i];
	                const next = node.specifiers[i + 1];
	                s.remove(removeLeft
	                    ? node.specifiers[i - 1].end + startOffset
	                    : current.start + startOffset, next && !removeLeft
	                    ? next.start + startOffset
	                    : current.end + startOffset);
	            };
	            for (let i = 0; i < node.specifiers.length; i++) {
	                const specifier = node.specifiers[i];
	                const local = specifier.local.name;
	                const imported = specifier.type === 'ImportSpecifier' &&
	                    specifier.imported.type === 'Identifier' &&
	                    specifier.imported.name;
	                const source = node.source.value;
	                const existing = userImports[local];
	                if (source === 'vue' &&
	                    (imported === DEFINE_PROPS || imported === DEFINE_EMIT)) {
	                    removeSpecifier(i);
	                }
	                else if (existing) {
	                    if (existing.source === source && existing.imported === imported) {
	                        // already imported in <script setup>, dedupe
	                        removeSpecifier(i);
	                    }
	                    else {
	                        error(`different imports aliased to same local name.`, specifier);
	                    }
	                }
	                else {
	                    registerUserImport(source, local, imported, node.importKind === 'type');
	                }
	            }
	            if (node.specifiers.length && removed === node.specifiers.length) {
	                s.remove(node.start + startOffset, node.end + startOffset);
	            }
	        }
	        // process `defineProps` and `defineEmit` calls
	        if (node.type === 'ExpressionStatement' &&
	            (processDefineProps(node.expression) ||
	                processDefineEmit(node.expression))) {
	            s.remove(node.start + startOffset, node.end + startOffset);
	        }
	        if (node.type === 'VariableDeclaration' && !node.declare) {
	            for (const decl of node.declarations) {
	                if (decl.init) {
	                    const isDefineProps = processDefineProps(decl.init);
	                    if (isDefineProps) {
	                        propsIdentifier = scriptSetup.content.slice(decl.id.start, decl.id.end);
	                    }
	                    const isDefineEmit = processDefineEmit(decl.init);
	                    if (isDefineEmit) {
	                        emitIdentifier = scriptSetup.content.slice(decl.id.start, decl.id.end);
	                    }
	                    if (isDefineProps || isDefineEmit)
	                        if (node.declarations.length === 1) {
	                            s.remove(node.start + startOffset, node.end + startOffset);
	                        }
	                        else {
	                            s.remove(decl.start + startOffset, decl.end + startOffset);
	                        }
	                }
	            }
	        }
	        // walk decalrations to record declared bindings
	        if ((node.type === 'VariableDeclaration' ||
	            node.type === 'FunctionDeclaration' ||
	            node.type === 'ClassDeclaration') &&
	            !node.declare) {
	            walkDeclaration(node, setupBindings, userImportAlias);
	        }
	        // Type declarations
	        if (node.type === 'VariableDeclaration' && node.declare) {
	            s.remove(start, end);
	        }
	        // move all type declarations to outer scope
	        if (node.type.startsWith('TS') ||
	            (node.type === 'ExportNamedDeclaration' && node.exportKind === 'type')) {
	            recordType(node, declaredTypes);
	            s.move(start, end, 0);
	        }
	        // walk statements & named exports / variable declarations for top level
	        // await
	        if ((node.type === 'VariableDeclaration' && !node.declare) ||
	            node.type.endsWith('Statement')) {
	            estreeWalker.walk(node, {
	                enter(node) {
	                    if (isFunction(node)) {
	                        this.skip();
	                    }
	                    if (node.type === 'AwaitExpression') {
	                        hasAwait = true;
	                    }
	                }
	            });
	        }
	        if ((node.type === 'ExportNamedDeclaration' && node.exportKind !== 'type') ||
	            node.type === 'ExportAllDeclaration' ||
	            node.type === 'ExportDefaultDeclaration') {
	            error(`<script setup> cannot contain ES module exports. ` +
	                `If you are using a previous version of <script setup>, please ` +
	                `consult the updated RFC at https://github.com/vuejs/rfcs/pull/227.`, node);
	        }
	    }
	    // 3. Do a full walk to rewrite identifiers referencing let exports with ref
	    // value access
	    if (enableRefSugar && Object.keys(refBindings).length) {
	        for (const node of scriptSetupAst) {
	            if (node.type !== 'ImportDeclaration') {
	                walkIdentifiers(node, (id, parent, parentStack) => {
	                    if (refBindings[id.name] && !refIdentifiers.has(id)) {
	                        if (isStaticProperty(parent) && parent.shorthand) {
	                            // let binding used in a property shorthand
	                            // { foo } -> { foo: foo.value }
	                            // skip for destructure patterns
	                            if (!parent.inPattern ||
	                                isInDestructureAssignment(parent, parentStack)) {
	                                s.appendLeft(id.end + startOffset, `: ${id.name}.value`);
	                            }
	                        }
	                        else {
	                            s.appendLeft(id.end + startOffset, '.value');
	                        }
	                    }
	                    else if (id.name[0] === '$' && refBindings[id.name.slice(1)]) {
	                        // $xxx raw ref access variables, remove the $ prefix
	                        s.remove(id.start + startOffset, id.start + startOffset + 1);
	                    }
	                });
	            }
	        }
	    }
	    // 4. extract runtime props/emits code from setup context type
	    if (propsTypeDecl) {
	        extractRuntimeProps(propsTypeDecl, typeDeclaredProps, declaredTypes);
	    }
	    if (emitTypeDecl) {
	        extractRuntimeEmits(emitTypeDecl, typeDeclaredEmits);
	    }
	    // 5. check useOptions args to make sure it doesn't reference setup scope
	    // variables
	    checkInvalidScopeReference(propsRuntimeDecl, DEFINE_PROPS);
	    checkInvalidScopeReference(emitRuntimeDecl, DEFINE_PROPS);
	    // 6. remove non-script content
	    if (script) {
	        if (startOffset < scriptStartOffset) {
	            // <script setup> before <script>
	            s.remove(0, startOffset);
	            s.remove(endOffset, scriptStartOffset);
	            s.remove(scriptEndOffset, source.length);
	        }
	        else {
	            // <script> before <script setup>
	            s.remove(0, scriptStartOffset);
	            s.remove(scriptEndOffset, startOffset);
	            s.remove(endOffset, source.length);
	        }
	    }
	    else {
	        // only <script setup>
	        s.remove(0, startOffset);
	        s.remove(endOffset, source.length);
	    }
	    // 7. analyze binding metadata
	    if (scriptAst) {
	        Object.assign(bindingMetadata, analyzeScriptBindings(scriptAst));
	    }
	    if (propsRuntimeDecl) {
	        for (const key of getObjectOrArrayExpressionKeys(propsRuntimeDecl)) {
	            bindingMetadata[key] = "props" /* PROPS */;
	        }
	    }
	    for (const key in typeDeclaredProps) {
	        bindingMetadata[key] = "props" /* PROPS */;
	    }
	    for (const [key, { isType, imported, source }] of Object.entries(userImports)) {
	        if (isType)
	            continue;
	        bindingMetadata[key] =
	            (imported === 'default' && source.endsWith('.vue')) || source === 'vue'
	                ? "setup-const" /* SETUP_CONST */
	                : "setup-maybe-ref" /* SETUP_MAYBE_REF */;
	    }
	    for (const key in setupBindings) {
	        bindingMetadata[key] = setupBindings[key];
	    }
	    // 8. inject `useCssVars` calls
	    if (cssVars.length) {
	        helperImports.add(CSS_VARS_HELPER);
	        helperImports.add('unref');
	        s.prependRight(startOffset, `\n${genCssVarsCode(cssVars, bindingMetadata, scopeId, !!options.isProd)}\n`);
	    }
	    // 9. finalize setup() argument signature
	    let args = `__props`;
	    if (propsTypeDecl) {
	        args += `: ${scriptSetup.content.slice(propsTypeDecl.start, propsTypeDecl.end)}`;
	    }
	    // inject user assignment of props
	    // we use a default __props so that template expressions referencing props
	    // can use it directly
	    if (propsIdentifier) {
	        s.prependRight(startOffset, `\nconst ${propsIdentifier} = __props`);
	    }
	    if (emitIdentifier) {
	        args +=
	            emitIdentifier === `emit` ? `, { emit }` : `, { emit: ${emitIdentifier} }`;
	        if (emitTypeDecl) {
	            args += `: {
        emit: (${scriptSetup.content.slice(emitTypeDecl.start, emitTypeDecl.end)}),
        slots: any,
        attrs: any
      }`;
	        }
	    }
	    // 10. generate return statement
	    let returned;
	    if (options.inlineTemplate) {
	        if (sfc.template && !sfc.template.src) {
	            if (options.templateOptions && options.templateOptions.ssr) {
	                hasInlinedSsrRenderFn = true;
	            }
	            // inline render function mode - we are going to compile the template and
	            // inline it right here
	            const { code, ast, preamble, tips, errors } = compileTemplate({
	                filename,
	                source: sfc.template.content,
	                inMap: sfc.template.map,
	                ...options.templateOptions,
	                id: scopeId,
	                scoped: sfc.styles.some(s => s.scoped),
	                isProd: options.isProd,
	                ssrCssVars: sfc.cssVars,
	                compilerOptions: {
	                    ...(options.templateOptions &&
	                        options.templateOptions.compilerOptions),
	                    inline: true,
	                    isTS,
	                    bindingMetadata
	                }
	            });
	            if (tips.length) {
	                tips.forEach(warnOnce);
	            }
	            const err = errors[0];
	            if (typeof err === 'string') {
	                throw new Error(err);
	            }
	            else if (err) {
	                if (err.loc) {
	                    err.message +=
	                        `\n\n` +
	                            sfc.filename +
	                            '\n' +
	                            shared.generateCodeFrame(source, err.loc.start.offset, err.loc.end.offset) +
	                            `\n`;
	                }
	                throw err;
	            }
	            if (preamble) {
	                s.prepend(preamble);
	            }
	            // avoid duplicated unref import
	            // as this may get injected by the render function preamble OR the
	            // css vars codegen
	            if (ast && ast.helpers.includes(compilerCore.UNREF)) {
	                helperImports.delete('unref');
	            }
	            returned = code;
	        }
	        else {
	            returned = `() => {}`;
	        }
	    }
	    else {
	        // return bindings from setup
	        const allBindings = { ...setupBindings };
	        for (const key in userImports) {
	            if (!userImports[key].isType) {
	                allBindings[key] = true;
	            }
	        }
	        returned = `{ ${Object.keys(allBindings).join(', ')} }`;
	    }
	    s.appendRight(endOffset, `\nreturn ${returned}\n}\n\n`);
	    // 11. finalize default export
	    // expose: [] makes <script setup> components "closed" by default.
	    let runtimeOptions = `\n  expose: [],`;
	    if (hasInheritAttrsFlag) {
	        runtimeOptions += `\n  inheritAttrs: false,`;
	    }
	    if (hasInlinedSsrRenderFn) {
	        runtimeOptions += `\n  __ssrInlineRender: true,`;
	    }
	    if (propsRuntimeDecl) {
	        runtimeOptions += `\n  props: ${scriptSetup.content
            .slice(propsRuntimeDecl.start, propsRuntimeDecl.end)
            .trim()},`;
	    }
	    else if (propsTypeDecl) {
	        runtimeOptions += genRuntimeProps(typeDeclaredProps);
	    }
	    if (emitRuntimeDecl) {
	        runtimeOptions += `\n  emits: ${scriptSetup.content
            .slice(emitRuntimeDecl.start, emitRuntimeDecl.end)
            .trim()},`;
	    }
	    else if (emitTypeDecl) {
	        runtimeOptions += genRuntimeEmits(typeDeclaredEmits);
	    }
	    if (isTS) {
	        // for TS, make sure the exported type is still valid type with
	        // correct props information
	        // we have to use object spread for types to be merged properly
	        // user's TS setting should compile it down to proper targets
	        const def = defaultExport ? `\n  ...${defaultTempVar},` : ``;
	        // wrap setup code with function.
	        // export the content of <script setup> as a named export, `setup`.
	        // this allows `import { setup } from '*.vue'` for testing purposes.
	        s.prependLeft(startOffset, `\nexport default ${helper(`defineComponent`)}({${def}${runtimeOptions}\n  ${hasAwait ? `async ` : ``}setup(${args}) {\n`);
	        s.appendRight(endOffset, `})`);
	    }
	    else {
	        if (defaultExport) {
	            // can't rely on spread operator in non ts mode
	            s.prependLeft(startOffset, `\n${hasAwait ? `async ` : ``}function setup(${args}) {\n`);
	            s.append(`\nexport default /*#__PURE__*/ Object.assign(${defaultTempVar}, {${runtimeOptions}\n  setup\n})\n`);
	        }
	        else {
	            s.prependLeft(startOffset, `\nexport default {${runtimeOptions}\n  ` +
	                `${hasAwait ? `async ` : ``}setup(${args}) {\n`);
	            s.appendRight(endOffset, `}`);
	        }
	    }
	    // 12. finalize Vue helper imports
	    if (helperImports.size > 0) {
	        s.prepend(`import { ${[...helperImports]
            .map(h => `${h} as _${h}`)
            .join(', ')} } from 'vue'\n`);
	    }
	    s.trim();
	    return {
	        ...scriptSetup,
	        bindings: bindingMetadata,
	        content: s.toString(),
	        map: s.generateMap({
	            source: filename,
	            hires: true,
	            includeContent: true
	        }),
	        scriptAst,
	        scriptSetupAst
	    };
	}
	function walkDeclaration(node, bindings, userImportAlias) {
	    if (node.type === 'VariableDeclaration') {
	        const isConst = node.kind === 'const';
	        // export const foo = ...
	        for (const { id, init } of node.declarations) {
	            const isDefineCall = !!(isConst &&
	                (isCallOf(init, DEFINE_PROPS) || isCallOf(init, DEFINE_EMIT)));
	            if (id.type === 'Identifier') {
	                let bindingType;
	                const userReactiveBinding = userImportAlias['reactive'] || 'reactive';
	                if (isCallOf(init, userReactiveBinding)) {
	                    // treat reactive() calls as let since it's meant to be mutable
	                    bindingType = "setup-let" /* SETUP_LET */;
	                }
	                else if (
	                // if a declaration is a const literal, we can mark it so that
	                // the generated render fn code doesn't need to unref() it
	                isDefineCall ||
	                    (isConst && canNeverBeRef(init, userReactiveBinding))) {
	                    bindingType = "setup-const" /* SETUP_CONST */;
	                }
	                else if (isConst) {
	                    if (isCallOf(init, userImportAlias['ref'] || 'ref')) {
	                        bindingType = "setup-ref" /* SETUP_REF */;
	                    }
	                    else {
	                        bindingType = "setup-maybe-ref" /* SETUP_MAYBE_REF */;
	                    }
	                }
	                else {
	                    bindingType = "setup-let" /* SETUP_LET */;
	                }
	                bindings[id.name] = bindingType;
	            }
	            else if (id.type === 'ObjectPattern') {
	                walkObjectPattern(id, bindings, isConst, isDefineCall);
	            }
	            else if (id.type === 'ArrayPattern') {
	                walkArrayPattern(id, bindings, isConst, isDefineCall);
	            }
	        }
	    }
	    else if (node.type === 'FunctionDeclaration' ||
	        node.type === 'ClassDeclaration') {
	        // export function foo() {} / export class Foo {}
	        // export declarations must be named.
	        bindings[node.id.name] = "setup-const" /* SETUP_CONST */;
	    }
	}
	function walkObjectPattern(node, bindings, isConst, isDefineCall = false) {
	    for (const p of node.properties) {
	        if (p.type === 'ObjectProperty') {
	            // key can only be Identifier in ObjectPattern
	            if (p.key.type === 'Identifier') {
	                if (p.key === p.value) {
	                    // const { x } = ...
	                    bindings[p.key.name] = isDefineCall
	                        ? "setup-const" /* SETUP_CONST */
	                        : isConst
	                            ? "setup-maybe-ref" /* SETUP_MAYBE_REF */
	                            : "setup-let" /* SETUP_LET */;
	                }
	                else {
	                    walkPattern(p.value, bindings, isConst, isDefineCall);
	                }
	            }
	        }
	        else {
	            // ...rest
	            // argument can only be identifer when destructuring
	            bindings[p.argument.name] = isConst
	                ? "setup-const" /* SETUP_CONST */
	                : "setup-let" /* SETUP_LET */;
	        }
	    }
	}
	function walkArrayPattern(node, bindings, isConst, isDefineCall = false) {
	    for (const e of node.elements) {
	        e && walkPattern(e, bindings, isConst, isDefineCall);
	    }
	}
	function walkPattern(node, bindings, isConst, isDefineCall = false) {
	    if (node.type === 'Identifier') {
	        bindings[node.name] = isDefineCall
	            ? "setup-const" /* SETUP_CONST */
	            : isConst
	                ? "setup-maybe-ref" /* SETUP_MAYBE_REF */
	                : "setup-let" /* SETUP_LET */;
	    }
	    else if (node.type === 'RestElement') {
	        // argument can only be identifer when destructuring
	        bindings[node.argument.name] = isConst
	            ? "setup-const" /* SETUP_CONST */
	            : "setup-let" /* SETUP_LET */;
	    }
	    else if (node.type === 'ObjectPattern') {
	        walkObjectPattern(node, bindings, isConst);
	    }
	    else if (node.type === 'ArrayPattern') {
	        walkArrayPattern(node, bindings, isConst);
	    }
	    else if (node.type === 'AssignmentPattern') {
	        if (node.left.type === 'Identifier') {
	            bindings[node.left.name] = isDefineCall
	                ? "setup-const" /* SETUP_CONST */
	                : isConst
	                    ? "setup-maybe-ref" /* SETUP_MAYBE_REF */
	                    : "setup-let" /* SETUP_LET */;
	        }
	        else {
	            walkPattern(node.left, bindings, isConst);
	        }
	    }
	}
	function recordType(node, declaredTypes) {
	    if (node.type === 'TSInterfaceDeclaration') {
	        declaredTypes[node.id.name] = [`Object`];
	    }
	    else if (node.type === 'TSTypeAliasDeclaration') {
	        declaredTypes[node.id.name] = inferRuntimeType(node.typeAnnotation, declaredTypes);
	    }
	    else if (node.type === 'ExportNamedDeclaration' && node.declaration) {
	        recordType(node.declaration, declaredTypes);
	    }
	}
	function extractRuntimeProps(node, props, declaredTypes) {
	    for (const m of node.members) {
	        if (m.type === 'TSPropertySignature' && m.key.type === 'Identifier') {
	            props[m.key.name] = {
	                key: m.key.name,
	                required: !m.optional,
	                type: m.typeAnnotation
	                    ? inferRuntimeType(m.typeAnnotation.typeAnnotation, declaredTypes)
	                    : [`null`]
	            };
	        }
	    }
	}
	function inferRuntimeType(node, declaredTypes) {
	    switch (node.type) {
	        case 'TSStringKeyword':
	            return ['String'];
	        case 'TSNumberKeyword':
	            return ['Number'];
	        case 'TSBooleanKeyword':
	            return ['Boolean'];
	        case 'TSObjectKeyword':
	            return ['Object'];
	        case 'TSTypeLiteral':
	            // TODO (nice to have) generate runtime property validation
	            return ['Object'];
	        case 'TSFunctionType':
	            return ['Function'];
	        case 'TSArrayType':
	        case 'TSTupleType':
	            // TODO (nice to have) generate runtime element type/length checks
	            return ['Array'];
	        case 'TSLiteralType':
	            switch (node.literal.type) {
	                case 'StringLiteral':
	                    return ['String'];
	                case 'BooleanLiteral':
	                    return ['Boolean'];
	                case 'NumericLiteral':
	                case 'BigIntLiteral':
	                    return ['Number'];
	                default:
	                    return [`null`];
	            }
	        case 'TSTypeReference':
	            if (node.typeName.type === 'Identifier') {
	                if (declaredTypes[node.typeName.name]) {
	                    return declaredTypes[node.typeName.name];
	                }
	                switch (node.typeName.name) {
	                    case 'Array':
	                    case 'Function':
	                    case 'Object':
	                    case 'Set':
	                    case 'Map':
	                    case 'WeakSet':
	                    case 'WeakMap':
	                        return [node.typeName.name];
	                    case 'Record':
	                    case 'Partial':
	                    case 'Readonly':
	                    case 'Pick':
	                    case 'Omit':
	                    case 'Exclude':
	                    case 'Extract':
	                    case 'Required':
	                    case 'InstanceType':
	                        return ['Object'];
	                }
	            }
	            return [`null`];
	        case 'TSUnionType':
	            return [
	                ...new Set([].concat(node.types.map(t => inferRuntimeType(t, declaredTypes))))
	            ];
	        case 'TSIntersectionType':
	            return ['Object'];
	        default:
	            return [`null`]; // no runtime check
	    }
	}
	function genRuntimeProps(props) {
	    const keys = Object.keys(props);
	    if (!keys.length) {
	        return ``;
	    }
	    return `\n  props: {\n    ${keys
        .map(key => {
        const { type, required } = props[key];
        return `${key}: { type: ${toRuntimeTypeString(type)}, required: ${required} }`;
    })
        .join(',\n    ')}\n  } as unknown as undefined,`;
	}
	function toRuntimeTypeString(types) {
	    return types.some(t => t === 'null')
	        ? `null`
	        : types.length > 1
	            ? `[${types.join(', ')}]`
	            : types[0];
	}
	function extractRuntimeEmits(node, emits) {
	    if (node.type === 'TSTypeLiteral') {
	        for (let t of node.members) {
	            if (t.type === 'TSCallSignatureDeclaration') {
	                extractEventNames(t.parameters[0], emits);
	            }
	        }
	        return;
	    }
	    else {
	        extractEventNames(node.parameters[0], emits);
	    }
	}
	function extractEventNames(eventName, emits) {
	    if (eventName.type === 'Identifier' &&
	        eventName.typeAnnotation &&
	        eventName.typeAnnotation.type === 'TSTypeAnnotation') {
	        const typeNode = eventName.typeAnnotation.typeAnnotation;
	        if (typeNode.type === 'TSLiteralType') {
	            emits.add(String(typeNode.literal.value));
	        }
	        else if (typeNode.type === 'TSUnionType') {
	            for (const t of typeNode.types) {
	                if (t.type === 'TSLiteralType') {
	                    emits.add(String(t.literal.value));
	                }
	            }
	        }
	    }
	}
	function genRuntimeEmits(emits) {
	    return emits.size
	        ? `\n  emits: [${Array.from(emits)
            .map(p => JSON.stringify(p))
            .join(', ')}] as unknown as undefined,`
	        : ``;
	}
	function markScopeIdentifier(node, child, knownIds) {
	    const { name } = child;
	    if (node.scopeIds && node.scopeIds.has(name)) {
	        return;
	    }
	    if (name in knownIds) {
	        knownIds[name]++;
	    }
	    else {
	        knownIds[name] = 1;
	    }
	    (node.scopeIds || (node.scopeIds = new Set())).add(name);
	}
	/**
	 * Walk an AST and find identifiers that are variable references.
	 * This is largely the same logic with `transformExpressions` in compiler-core
	 * but with some subtle differences as this needs to handle a wider range of
	 * possible syntax.
	 */
	function walkIdentifiers(root, onIdentifier) {
	    const parentStack = [];
	    const knownIds = Object.create(null);
	    estreeWalker.walk(root, {
	        enter(node, parent) {
	            parent && parentStack.push(parent);
	            if (node.type === 'Identifier') {
	                if (!knownIds[node.name] &&
	                    isRefIdentifier(node, parent, parentStack)) {
	                    onIdentifier(node, parent, parentStack);
	                }
	            }
	            else if (isFunction(node)) {
	                // #3445
	                // should not rewrite local variables sharing a name with a top-level ref
	                if (node.body.type === 'BlockStatement') {
	                    node.body.body.forEach(p => {
	                        if (p.type === 'VariableDeclaration') {
	                            for (const decl of p.declarations) {
	                                extractIdentifiers(decl.id).forEach(id => {
	                                    markScopeIdentifier(node, id, knownIds);
	                                });
	                            }
	                        }
	                    });
	                }
	                // walk function expressions and add its arguments to known identifiers
	                // so that we don't prefix them
	                node.params.forEach(p => estreeWalker.walk(p, {
	                    enter(child, parent) {
	                        if (child.type === 'Identifier' &&
	                            // do not record as scope variable if is a destructured key
	                            !isStaticPropertyKey(child, parent) &&
	                            // do not record if this is a default value
	                            // assignment of a destructured variable
	                            !(parent &&
	                                parent.type === 'AssignmentPattern' &&
	                                parent.right === child)) {
	                            markScopeIdentifier(node, child, knownIds);
	                        }
	                    }
	                }));
	            }
	            else if (node.type === 'ObjectProperty' &&
	                parent.type === 'ObjectPattern') {
	                node.inPattern = true;
	            }
	        },
	        leave(node, parent) {
	            parent && parentStack.pop();
	            if (node.scopeIds) {
	                node.scopeIds.forEach((id) => {
	                    knownIds[id]--;
	                    if (knownIds[id] === 0) {
	                        delete knownIds[id];
	                    }
	                });
	            }
	        }
	    });
	}
	function isRefIdentifier(id, parent, parentStack) {
	    // declaration id
	    if ((parent.type === 'VariableDeclarator' ||
	        parent.type === 'ClassDeclaration') &&
	        parent.id === id) {
	        return false;
	    }
	    if (isFunction(parent)) {
	        // function decalration/expression id
	        if (parent.id === id) {
	            return false;
	        }
	        // params list
	        if (parent.params.includes(id)) {
	            return false;
	        }
	    }
	    // property key
	    // this also covers object destructure pattern
	    if (isStaticPropertyKey(id, parent)) {
	        return false;
	    }
	    // non-assignment array destructure pattern
	    if (parent.type === 'ArrayPattern' &&
	        !isInDestructureAssignment(parent, parentStack)) {
	        return false;
	    }
	    // member expression property
	    if ((parent.type === 'MemberExpression' ||
	        parent.type === 'OptionalMemberExpression') &&
	        parent.property === id &&
	        !parent.computed) {
	        return false;
	    }
	    // is a special keyword but parsed as identifier
	    if (id.name === 'arguments') {
	        return false;
	    }
	    return true;
	}
	const isStaticProperty = (node) => node &&
	    (node.type === 'ObjectProperty' || node.type === 'ObjectMethod') &&
	    !node.computed;
	const isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
	function isFunction(node) {
	    return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
	}
	function isCallOf(node, name) {
	    return !!(node &&
	        node.type === 'CallExpression' &&
	        node.callee.type === 'Identifier' &&
	        node.callee.name === name);
	}
	function canNeverBeRef(node, userReactiveImport) {
	    if (isCallOf(node, userReactiveImport)) {
	        return true;
	    }
	    switch (node.type) {
	        case 'UnaryExpression':
	        case 'BinaryExpression':
	        case 'ArrayExpression':
	        case 'ObjectExpression':
	        case 'FunctionExpression':
	        case 'ArrowFunctionExpression':
	        case 'UpdateExpression':
	        case 'ClassExpression':
	        case 'TaggedTemplateExpression':
	            return true;
	        case 'SequenceExpression':
	            return canNeverBeRef(node.expressions[node.expressions.length - 1], userReactiveImport);
	        default:
	            if (node.type.endsWith('Literal')) {
	                return true;
	            }
	            return false;
	    }
	}
	function isInDestructureAssignment(parent, parentStack) {
	    if (parent &&
	        (parent.type === 'ObjectProperty' || parent.type === 'ArrayPattern')) {
	        let i = parentStack.length;
	        while (i--) {
	            const p = parentStack[i];
	            if (p.type === 'AssignmentExpression') {
	                const root = parentStack[0];
	                // if this is a ref: destructure, it should be treated like a
	                // variable decalration!
	                return !(root.type === 'LabeledStatement' && root.label.name === 'ref');
	            }
	            else if (p.type !== 'ObjectProperty' && !p.type.endsWith('Pattern')) {
	                break;
	            }
	        }
	    }
	    return false;
	}
	/**
	 * Analyze bindings in normal `<script>`
	 * Note that `compileScriptSetup` already analyzes bindings as part of its
	 * compilation process so this should only be used on single `<script>` SFCs.
	 */
	function analyzeScriptBindings(ast) {
	    for (const node of ast) {
	        if (node.type === 'ExportDefaultDeclaration' &&
	            node.declaration.type === 'ObjectExpression') {
	            return analyzeBindingsFromOptions(node.declaration);
	        }
	    }
	    return {};
	}
	function analyzeBindingsFromOptions(node) {
	    const bindings = {};
	    // #3270, #3275
	    // mark non-script-setup so we don't resolve components/directives from these
	    Object.defineProperty(bindings, '__isScriptSetup', {
	        enumerable: false,
	        value: false
	    });
	    for (const property of node.properties) {
	        if (property.type === 'ObjectProperty' &&
	            !property.computed &&
	            property.key.type === 'Identifier') {
	            // props
	            if (property.key.name === 'props') {
	                // props: ['foo']
	                // props: { foo: ... }
	                for (const key of getObjectOrArrayExpressionKeys(property.value)) {
	                    bindings[key] = "props" /* PROPS */;
	                }
	            }
	            // inject
	            else if (property.key.name === 'inject') {
	                // inject: ['foo']
	                // inject: { foo: {} }
	                for (const key of getObjectOrArrayExpressionKeys(property.value)) {
	                    bindings[key] = "options" /* OPTIONS */;
	                }
	            }
	            // computed & methods
	            else if (property.value.type === 'ObjectExpression' &&
	                (property.key.name === 'computed' || property.key.name === 'methods')) {
	                // methods: { foo() {} }
	                // computed: { foo() {} }
	                for (const key of getObjectExpressionKeys(property.value)) {
	                    bindings[key] = "options" /* OPTIONS */;
	                }
	            }
	        }
	        // setup & data
	        else if (property.type === 'ObjectMethod' &&
	            property.key.type === 'Identifier' &&
	            (property.key.name === 'setup' || property.key.name === 'data')) {
	            for (const bodyItem of property.body.body) {
	                // setup() {
	                //   return {
	                //     foo: null
	                //   }
	                // }
	                if (bodyItem.type === 'ReturnStatement' &&
	                    bodyItem.argument &&
	                    bodyItem.argument.type === 'ObjectExpression') {
	                    for (const key of getObjectExpressionKeys(bodyItem.argument)) {
	                        bindings[key] =
	                            property.key.name === 'setup'
	                                ? "setup-maybe-ref" /* SETUP_MAYBE_REF */
	                                : "data" /* DATA */;
	                    }
	                }
	            }
	        }
	    }
	    return bindings;
	}
	function getObjectExpressionKeys(node) {
	    const keys = [];
	    for (const prop of node.properties) {
	        if ((prop.type === 'ObjectProperty' || prop.type === 'ObjectMethod') &&
	            !prop.computed) {
	            if (prop.key.type === 'Identifier') {
	                keys.push(prop.key.name);
	            }
	            else if (prop.key.type === 'StringLiteral') {
	                keys.push(prop.key.value);
	            }
	        }
	    }
	    return keys;
	}
	function getArrayExpressionKeys(node) {
	    const keys = [];
	    for (const element of node.elements) {
	        if (element && element.type === 'StringLiteral') {
	            keys.push(element.value);
	        }
	    }
	    return keys;
	}
	function getObjectOrArrayExpressionKeys(value) {
	    if (value.type === 'ArrayExpression') {
	        return getArrayExpressionKeys(value);
	    }
	    if (value.type === 'ObjectExpression') {
	        return getObjectExpressionKeys(value);
	    }
	    return [];
	}
	function extractIdentifiers(param, nodes = []) {
	    switch (param.type) {
	        case 'Identifier':
	            nodes.push(param);
	            break;
	        case 'MemberExpression':
	            let object = param;
	            while (object.type === 'MemberExpression') {
	                object = object.object;
	            }
	            nodes.push(object);
	            break;
	        case 'ObjectPattern':
	            param.properties.forEach(prop => {
	                if (prop.type === 'RestElement') {
	                    extractIdentifiers(prop.argument, nodes);
	                }
	                else {
	                    extractIdentifiers(prop.value, nodes);
	                }
	            });
	            break;
	        case 'ArrayPattern':
	            param.elements.forEach(element => {
	                if (element)
	                    extractIdentifiers(element, nodes);
	            });
	            break;
	        case 'RestElement':
	            extractIdentifiers(param.argument, nodes);
	            break;
	        case 'AssignmentPattern':
	            extractIdentifiers(param.left, nodes);
	            break;
	    }
	    return nodes;
	}

	compilerSfc_cjs.generateCodeFrame = compilerCore.generateCodeFrame;
	compilerSfc_cjs.MagicString = MagicString__default;
	compilerSfc_cjs.babelParse = parser.parse;
	compilerSfc_cjs.walk = estreeWalker.walk;
	compilerSfc_cjs.compileScript = compileScript;
	compilerSfc_cjs.compileStyle = compileStyle;
	compilerSfc_cjs.compileStyleAsync = compileStyleAsync;
	compilerSfc_cjs.compileTemplate = compileTemplate;
	compilerSfc_cjs.parse = parse$2;
	compilerSfc_cjs.rewriteDefault = rewriteDefault;
	compilerSfc_cjs.walkIdentifiers = walkIdentifiers;

	let { parse: parse$1 } = compilerSfc_cjs;
	var parse_1 = (code) => {
	    const ast = parse$1(code, { filename: String(+new Date()) }).descriptor;
	    return ast
	};

	const parse = parse_1;
	const jsCore$1 = core_1$2;
	const htmlCore$2 = core_1$1;
	const NodePath$2 = NodePath_1;
	const core$1 = {
	    getAstsBySelector(ast, selector, { parseOptions } = {}) {
	        parseOptions = Object.assign({}, parseOptions);
	        let newAst = ast;
	        if (selector == '<template></template>') {
	            parseOptions.language = 'html';
	            parseOptions.rootLanguage = 'vue';
	            if (ast.templateAst) {
	                newAst = ast.templateAst;
	            } else {
	                ast.templateAst = core$1.getTemplate(ast);
	                newAst = ast.templateAst;
	            }
	        } else if (selector == '<script></script>') {
	            parseOptions.language = 'js';
	            parseOptions.rootLanguage = 'vue';
	            if (ast.scriptAst) {
	                newAst = ast.scriptAst;
	            } else {
	                ast.scriptAst = core$1.getScript(ast);
	                newAst = ast.scriptAst;
	            }
	        } else if (selector == '<script setup></script>') {
	            parseOptions.language = 'js';
	            parseOptions.rootLanguage = 'vue';
	            if (ast.scriptSetupAst) {
	                newAst = ast.scriptSetupAst;
	            } else {
	                ast.scriptSetupAst = core$1.getScript(ast, { isSetup: true });
	                newAst = ast.scriptSetupAst;
	            }
	        }
	        return { nodePathList: newAst ? [newAst] : [], matchWildCardList: [], extra: { parseOptions } }
	    },
	    getTemplate(ast) {
	        // 仅针对vue，取template，后续通过htmlcore处理
	        if (ast.template) {
	            const template = htmlCore$2.buildAstByAstStr(
	                ast.template.content,
	                {},
	                {
	                    isProgram: true,
	                    parseOptions: { language: 'html' }
	                }
	            );
	            return new NodePath$2(template);
	        } else {
	            return undefined;
	        }
	    },
	    getScript(ast, { isSetup = false } = {} ) {
	        // 仅针对vue，取script，后续通过jscore处理
	        let content;
	        if (isSetup && ast.scriptSetup) {
	            content = ast.scriptSetup.content;
	        } else if (!isSetup && ast.script) {
	            content = ast.script.content;
	            // const content = ast.script.content.replace(/\n/g, '')
	        }
	        if (content) {
	            const script = jsCore$1.buildAstByAstStr(
	                content, {},
	                { isProgram: true }
	            );
	            return new NodePath$2(script);
	        } else {
	            return undefined;
	        }
	    },
	    buildAstByAstStr(str, astPatialMap = {}, { isProgram = false, parseOptions } = {}) {
	        try {
	            const program = parse(str, parseOptions);
	            if (program) {
	                if (isProgram) {
	                    return program;
	                } else {
	                    if (program.template && program.template.ast) {
	                        return program.template
	                    } else return null
	                }
	            } else {
	                return null;
	            }
	        } catch(e) {
	            console.log('buildAstByAstStr failed:' + e);
	        }
	    }
	};

	var core_1 = core$1;

	var _indentString_4_0_0_indentString = (string, count = 1, options) => {
		options = {
			indent: ' ',
			includeEmptyLines: false,
			...options
		};

		if (typeof string !== 'string') {
			throw new TypeError(
				`Expected \`input\` to be a \`string\`, got \`${typeof string}\``
			);
		}

		if (typeof count !== 'number') {
			throw new TypeError(
				`Expected \`count\` to be a \`number\`, got \`${typeof count}\``
			);
		}

		if (typeof options.indent !== 'string') {
			throw new TypeError(
				`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
			);
		}

		if (count === 0) {
			return string;
		}

		const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;

		return string.replace(regex, options.indent.repeat(count));
	};

	const indentString = _indentString_4_0_0_indentString;
	const jsGenerate = generate$8;
	const htmlGenerate$1 = serializeNode_1;
	/**
	 * The following function is adapted from https://github.com/psalaets/vue-sfc-descriptor-to-string/blob/master/index.js
	 */

	/**
	 * The MIT License (MIT)
	 * Copyright (c) 2018 Paul Salaets
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var generate$1 = function toString(sfcDescriptor, options = {}) {
	    let { template, script, scriptSetup, styles = [], customBlocks = [], templateAst, scriptAst, scriptSetupAst } = sfcDescriptor;
	    if (templateAst && templateAst.node) {
	        template.content = htmlGenerate$1(templateAst.node);
	    } 
	    if (scriptAst && scriptAst.node) {
	        script.content = jsGenerate(scriptAst.node);
	    }

	    if (scriptSetupAst && scriptSetupAst.node) {
	        scriptSetup.content = jsGenerate(scriptSetupAst.node);
	    }

	    const indents = Object.assign(
	        {
	            template: 2,
	            script: 0,
	            style: 0
	        },
	        options.indents
	    );

	    return (
	        [template, script, scriptSetup, ...styles, ...customBlocks]
	            // discard blocks that don't exist
	            .filter((block) => block != null)
	            // sort blocks by source position
	            .sort((a, b) => a.start - b.start)
	            // figure out exact source positions of blocks
	            .map((block) => {
	                const openTag = makeOpenTag(block);
	                const closeTag = makeCloseTag(block);

	                return Object.assign({}, block, {
	                    openTag,
	                    closeTag,

	                    startOfOpenTag: block.start - openTag.length,
	                    endOfOpenTag: block.start,

	                    startOfCloseTag: block.end,
	                    endOfCloseTag: block.end + closeTag.length
	                });
	            })
	            // generate sfc source
	            .reduce((sfcCode, block, index, array) => {
	                const first = index === 0;

	                let newlinesBefore = 0;

	                if (first) {
	                    newlinesBefore = block.startOfOpenTag;
	                } else {
	                    const prevBlock = array[index - 1];
	                    newlinesBefore =
	                        block.startOfOpenTag - prevBlock.endOfCloseTag;
	                }

	                return (
	                    sfcCode +
	                    '\n'.repeat(newlinesBefore) +
	                    block.openTag +
	                    indentString(block.content, indents[block.type] || 0) +
	                    block.closeTag
	                );
	            }, '')
	    );
	};

	function makeOpenTag(block) {
	    let source = '<' + block.type;

	    source += Object.keys(block.attrs)
	        .sort()
	        .map((name) => {
	            const value = block.attrs[name];

	            if (value === true) {
	                return name;
	            } else {
	                return `${name}="${value}"`;
	            }
	        })
	        .map((attr) => ' ' + attr)
	        .join('');

	    return source + '>';
	}

	function makeCloseTag(block) {
	    return `</${block.type}>\n`;
	}

	const generate = generate$8;
	const htmlGenerate = serializeNode_1;
	const vueGenerate = generate$1;
	const core = core_1$2;
	const htmlCore$1 = core_1$1;
	const vueCore$1 = core_1;
	const NodePath$1 = NodePath_1;
	const filterProp = filterProp$2;
	const { isObject } = util$8;

	const languageMap = {
	    'js': { 
	        generate,
	        core
	    },
	    'html': { 
	        generate: htmlGenerate,
	        core: htmlCore$1
	    },
	    'vue': { 
	        generate: vueGenerate,
	        core: vueCore$1
	    }
	};

	class AST$1 {
	    constructor(nodePath, { parseOptions, match, rootNode } = {}) {
	        if (nodePath) {
	            this[0] = {
	                nodePath, match
	            };
	        }
	        this.rootNode = rootNode;
	        this.expando = 'g' + ('' + Math.random()).replace( /\D/g, "" ) + 'g';
	        this.parseOptions = parseOptions;
	    }
	    get node() {
	        return this[0].nodePath.node
	    }
	    get value() {
	        return this[0].nodePath.value
	    }
	    get match() {
	        return this[0].match
	    }
	    get isHtml() {
	        return this.parseOptions && (this.parseOptions.html || this.parseOptions.language == 'html');
	    }
	    get language() {
	        return (this.parseOptions && this.parseOptions.language) || 'js';
	    }
	    get core() {
	        return languageMap[this.language].core
	    }
	    get _index() {
	        initParent(this);
	        // todo js
	        return this[0]._index;
	    }
	    get length() {
	        let i = 0;
	        while(this[i]) {
	            i++;
	        }
	        return i;
	    }
	    each(callback) {
	        let i = 0;
	        const newAST = cloneAST(this);
	        while (this[i]) {
	            const { nodePath, match } = this[i];
	            const eachNode = new AST$1(nodePath, { parseOptions: this.parseOptions, match, rootNode: this.rootNode});
	            callback(eachNode, i);
	            newAST[i] = eachNode[0] || null;
	            i++;
	        }
	        return newAST
	    }
	    find(selector, options = {}) {
	        if (!selector) {
	            throw new Error('find failed! first argument should not be null!')
	        }
	        if (!this[0]) {
	            return this;
	        }
	        const { nodePath } = this[0];
	        // if (typeof selector !== 'string' && !Array.isArray(selector)) {
	        //     throw new Error('find failed! Nodepath is null!');
	        // }
	        const pOptions = options.parseOptions || this.parseOptions;
	        const {nodePathList, matchWildCardList, extra = {} } = this.core.getAstsBySelector(
	            nodePath.node,
	            selector, {
	                strictSequence: options.ignoreSequence === false,
	                parseOptions: pOptions,
	                expando: this.expando
	            }
	        );
	        const newAST = cloneAST(this);
	        if (!newAST.rootNode) {
	            newAST.rootNode = this[0].nodePath;
	        }
	        nodePathList.forEach((nodePath, i) => {
	            // 把this里的parentPath接到nodePath上
	            if (this.language == 'js') {
	                let theNodePath = nodePath;
	                while(theNodePath.parentPath) {
	                    if (theNodePath.parentPath && theNodePath.parentPath.name == 'root') {
	                        theNodePath.parentPath = this[0].nodePath;
	                        break;
	                    }
	                    theNodePath = theNodePath.parentPath;
	                }
	            }
	            newAST[i] = { nodePath, parseOptions: extra.parseOptions || pOptions, match: matchWildCardList[i] };
	        });
	        if (extra.parseOptions) {
	            newAST.parseOptions = extra.parseOptions;
	        }
	        return newAST;
	    }
	    parent(level = 0) {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!this[0].parentList) {
	        initParent(this);
	        // }
	        const parent = this[0].parentList[level];
	        const newAST = cloneAST(this);
	        if (parent) {
	            newAST[0] = { nodePath: parent, parseOptions: this.parseOptions };
	            return newAST;
	        } else {
	            return this;
	        }
	    }
	    parents() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!this[0].parentList) {
	        initParent(this);
	        // }
	        const { parentList } = this[0];
	        const newAST = cloneAST(this);
	        parentList.forEach((nodePath, i) => {
	            newAST[i] = { nodePath, parseOptions: this.parseOptions, match: null };
	        });
	        return newAST;
	    }
	    root(option) {
	        if (!this.rootNode) {
	            return this;
	        }
	        const newAST = cloneAST(this);
	        newAST[0] = { nodePath: this.rootNode };
	        newAST.rootNode = null;
	        if (this.parseOptions && this.parseOptions.rootLanguage == 'vue') {
	            if (option == 'template') {
	                newAST[0] = { nodePath: this.rootNode.node.templateAst };
	            } else if (option == 'script') {
	                newAST[0] = { nodePath: this.rootNode.node.scriptAst };
	            } else {
	                newAST.parseOptions = { language: 'vue' };
	            }
	        }
	        return newAST;
	    }
	    has(selector, options) {
	        return !!this.find(selector, options)[0]
	    }
	    siblings() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!Array.isArray(this[0].siblings)) {
	        initSiblings(this);
	        // }
	        const siblings = this[0].siblings || [];
	        const newAST = cloneAST(this);
	        siblings.forEach((sibling, i) => {
	            newAST[i] = sibling;
	        });
	        return newAST;
	    }
	    prevAll() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!Array.isArray(this[0].siblings)) {
	        initSiblings(this);
	        // }
	        const prevAll = this[0].prevAll || [];
	        const newAST = cloneAST(this);
	        prevAll.forEach((prev, i) => {
	            newAST[i] = prev;
	        });
	        return newAST;
	    }
	    prev() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!Array.isArray(this[0].siblings)) {
	        initSiblings(this);
	        // }
	        const prevAll = this[0].prevAll || [];
	        const newAST = cloneAST(this);
	        newAST[0] = prevAll[prevAll.length - 1];
	        return newAST;
	    }

	    nextAll() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!Array.isArray(this[0].siblings)) {
	        initSiblings(this);
	        // }
	        const nextAll = this[0].nextAll || [];
	        const newAST = cloneAST(this);
	        nextAll.forEach((next, i) => {
	            newAST[i] = next;
	        });
	        return newAST;
	    }
	    next() {
	        if (!this[0]) {
	            return this;
	        }
	        // if (!Array.isArray(this[0].siblings)) {
	        initSiblings(this);
	        // }
	        const nextAll = this[0].nextAll || [];
	        const newAST = cloneAST(this);
	        newAST[0] = nextAll[0];
	        return newAST;
	    }
	    eq(index) {
	        index = index || 0;
	        const { nodePath, match } = this[index] || {};
	        const newAST = cloneAST(this);
	        newAST[0] = { nodePath, parseOptions: this.parseOptions, match };
	        return newAST;
	    }
	    attr(arg1, arg2) {
	        if (!this[0] || !this[0].nodePath || !this[0].nodePath.node) {
	            return this;
	        }
	        let attrMap = {};
	        if (arg2) {
	            // arg1是key arg2是value
	            if (typeof arg1 == 'string') {
	                attrMap = { [arg1]: arg2 };
	            } else {
	                throw new Error('attr failed! args[0] should be string!')
	            }
	        } else {
	            if (typeof arg1 == 'string') {
	                // 取某个属性
	                return getAttrValue(this[0].nodePath.node, arg1);
	            } else if (typeof arg1 == 'object') {
	                attrMap = arg1;
	            }
	        }
	        setAttrValue(this[0].nodePath.node, attrMap);
	        return this;
	    }
	    clone() {
	        if (!this[0]) {
	            return this;
	        }
	        let nodePath;
	        // html深度克隆时需要忽略parentRef
	        if (this.isHtml) {
	            const parentRefList = [];
	            markParent(this[0].nodePath.node);
	            const newNode = JSON.parse(JSON.stringify(this[0].nodePath.node));
	            resetParent(newNode);
	            resetParent(this[0].nodePath.node);
	            nodePath = new NodePath$1(
	                newNode, 
	                this[0].nodePath.parent, 
	                this[0].nodePath.parentPath 
	            );
	            function resetParent(node) {
	                for (let key in node) {
	                    if (key == 'parentRef') {
	                        node[key] = parentRefList[node[key]];
	                    } else if (isObject(node[key])) {
	                        if (Array.isArray(node[key])) {
	                            node[key].forEach(n => {
	                                resetParent(n);
	                            });
	                        } else {
	                            resetParent(node[key]);
	                        }
	                    }
	                }
	            }
	            function markParent(node) {
	                for (let key in node) {
	                    if (key == 'parentRef') {
	                        parentRefList.push(node[key]);
	                        node[key] = parentRefList.length - 1;
	                    } else if (isObject(node[key])) {
	                        if (Array.isArray(node[key])) {
	                            node[key].forEach(n => {
	                                markParent(n);
	                            });
	                        } else {
	                            markParent(node[key]);
	                        }
	                    }
	                }
	            }
	            
	        } else {
	            const node = {};
	            // js需要做一层属性过滤，否则会有环形依赖
	            filterProp(this[0].nodePath.node, node, [
	                'computed',
	                'range',
	                'loc',
	                'start',
	                'end',
	                'leadingComments',
	                'shorthand',
	                'extra',
	                'static',
	                'typeParameters'
	            ]);
	            nodePath = new NodePath$1(
	                // JSON.parse(JSON.stringify(this[0].nodePath.node)), 
	                JSON.parse(JSON.stringify(node)), 
	                this[0].nodePath.parent, 
	                this[0].nodePath.parentPath 
	            );
	        }
	        const { match } = this[0];
	        const newAST = cloneAST(this);
	        newAST[0] = { nodePath, parseOptions: this.parseOptions, match };
	        return newAST;
	    }
	    replace(selector, replacer, { ignoreSequence, parseOptions } = {}) {
	        if (!this[0]) {
	            // throw new Error('replace failed! Nodepath is null!');
	            return this;
	        }
	        this.core.replaceSelBySel(this[0].nodePath, selector, replacer, ignoreSequence === false, parseOptions, this.expando);
	        return this;
	    }
	    replaceBy(replacer) {
	        if (!this[0]) {
	            return this.root();
	        }
	        if (replacer[0] && replacer[0].nodePath) {
	            replacer = replacer[0].nodePath.node;
	        }
	        if (typeof replacer == 'string') {
	            replacer = this.core.buildAstByAstStr(replacer);
	        }
	        if (replacer.type == 'File') {
	            replacer = replacer.program.body[0];
	        }
	        let i = 0;
	        while(this[i]) {
	            this.core.replaceAstByAst(this[i].nodePath, replacer);
	            i++;
	        }
	        
	        return this;
	    }
	    insertSiblingNode(node, type) {
	        if (!this[0]) {
	            return this;
	        }
	        if (!node.type && !node.nodeType) {
	            throw new Error('insert failed! Unexpected node for insert!')
	        }
	        // if (!this[0].parentList) {
	        initParent(this);
	        // }
	        if (this.isHtml) {
	            let p;
	            let index = -1;
	            if (this.node.nodeType == 'document') {
	                p = this.node.content.children;
	                index = type == 'before' ? 0 : p.length - 1;
	            } else {
	                const parent = this.parent();
	                // todotodo
	                p = parent.attr('content.children') || [];
	                p.forEach((item, i) => {
	                    if (item == this.node) {
	                        index = i;
	                    }
	                });
	            }
	            if (type == 'before') {
	                p.splice(index, 0, node);
	            } else {
	                p.splice(index + 1, 0, node);
	            }
	        } else {
	            const parentList = this[0].parentList;
	            if ((!parentList || parentList.length == 0) && this.node.type == 'File') {
	                if (type == 'before') {
	                    this.attr('program.body').unshift(node);
	                } else {
	                    this.attr('program.body').push(node);
	                }
	                return;
	            }
	            let getArrayParent = false;
	            let i = 0;
	            let selfPathNode = this[0].nodePath.value;
	            let selfIndex = -1;
	            while(!getArrayParent) {
	                if (!parentList[i] || !parentList[i].value) {
	                    getArrayParent = true;
	                } else if (Array.isArray(parentList[i].value)) {
	                    getArrayParent = true;
	                    parentList[i].value.forEach((nodePath, index) => {
	                        if (nodePath == selfPathNode) {
	                            selfIndex = index;
	                        }
	                    });
	                    if (type == 'after') {
	                        parentList[i].value.splice(selfIndex + 1, 0, node);
	                    } else {
	                        parentList[i].value.splice(selfIndex, 0, node);
	                    }
	                }
	                selfPathNode = parentList[i].value;
	                i++;
	            }
	        }
	    }
	    after(node) {
	        if (!node) {
	            throw new Error('after failed! Unexpected node for insert!')
	        }
	        if (typeof node == 'string') {
	            node = this.core.buildAstByAstStr(node);
	        }
	        if (node[0] && node[0].nodePath) {
	            node = node[0].nodePath.value;
	        }
	        if (node.type == 'File') {
	            if (node.program.body.length > 0) {
	                node.program.body.forEach(item => {
	                    this.insertSiblingNode(item, 'after');
	                });
	                return this;
	            } else {
	                return this;
	            }
	        }
	        if (!Array.isArray(node)) {
	            node = [node];
	        }
	        node.forEach(n => {
	            this.insertSiblingNode(n, 'after');
	        });
	        return this;
	    }
	    before(node) {
	        if (!node) {
	            throw new Error('before failed! Unexpected node for insert!')
	        }
	        if (typeof node == 'string') {
	            node = this.core.buildAstByAstStr(node);
	        }
	        if (node[0] && node[0].nodePath) {
	            node = node[0].nodePath.value;
	        }
	        if (node.type == 'File') {
	            if (node.program.body.length > 0) {
	                node.program.body.reverse().forEach(item => {
	                    this.insertSiblingNode(item, 'before');
	                });
	                return this;
	            } else {
	                return this;
	            }
	        }
	        if (!Array.isArray(node)) {
	            node = [node];
	        }
	        node.reverse().forEach(n => {
	            this.insertSiblingNode(n, 'before');
	        });
	        return this;
	    }
	    insertChildNode(attr, node, type) {
	        if (!this[0] || !this[0].nodePath) {
	            return;
	        }
	        let selfNode = this[0].nodePath.value;
	        if (!Array.isArray(selfNode)) {
	            // for(let key in selfNode) {
	            //     if (Array.isArray(selfNode[key])) {
	            //         selfNode = selfNode[key]
	            //     }
	            // }
	            if (attr == 'content.children') {
	                selfNode = selfNode.content.children;
	            } else if (attr == 'program.body' && selfNode.program && selfNode.program.body) {
	                selfNode = selfNode.program.body;
	            } else {
	                selfNode = selfNode[attr];
	                if (!Array.isArray(selfNode)) {
	                    selfNode = selfNode.body;
	                }
	            }
	            
	        }

	        if (node.type == 'File' && node.program.body) {
	            node = node.program.body[0];
	            if (!node) return;
	        }
	        if (selfNode) {
	            if (type == 'append') {
	                selfNode.push(node);
	            } else {
	                selfNode.unshift(node);
	            }
	        }
	    }
	    append(attr, node) {
	        if (!attr) {
	            return this;
	        }
	        if (this.isHtml) {
	            node = attr;
	            attr = 'content.children';
	        }
	        if (!node) {
	            node = attr;
	            attr = 'program.body';
	        }
	        if (typeof node == 'string') {
	            node = this.core.buildAstByAstStr(node);
	        }
	        if (node[0] && node[0].nodePath) {
	            node = node[0].nodePath.value;
	        }
	        if (!Array.isArray(node)) {
	            node = [node];
	        }
	        node.forEach(n => {
	            this.insertChildNode(attr, n, 'append');
	        });
	        return this;

	    }
	    prepend(attr, node) {
	        if (this.isHtml) {
	            node = attr;
	            attr = 'content.children';
	        }
	        if (!node) {
	            node = attr;
	            attr = 'program.body';
	        }
	        if (typeof node == 'string') {
	            node = this.core.buildAstByAstStr(node);
	        }
	        if (node[0] && node[0].nodePath) {
	            node = node[0].nodePath.value;
	        }
	        if (!Array.isArray(node)) {
	            node = [node];
	        }
	        node.reverse().forEach(n => {
	            this.insertChildNode(attr, n, 'prepend');
	        });
	        return this;
	    }
	    empty() {
	        if (Array.isArray(this[0].nodePath.value)) {
	            this[0].nodePath.value = [];
	        } else if (this.node.type == 'File') {
	            this.attr('program.body', []);
	        }
	        return this
	    }
	    remove(selector, options = {}) {
	        if (!this[0]) {
	            return this.root()
	        }
	        if (typeof selector == 'string' || Array.isArray(selector)) {
	            const pOptions = options.parseOptions || this.parseOptions;
	            let i = 0;
	            while(this[i]) {
	                this.core.removeAst(this.node, selector, { 
	                    strictSequence: options.ignoreSequence === false, 
	                    parseOptions: pOptions, 
	                    expando: this.expando
	                });
	                i++;
	            }
	        } else {
	            let i = 0;
	            while(this[i]) {
	                this.core.remove(this[i].nodePath);
	                i++;
	            }
	            
	        }
	        return this.root()
	    }
	    generate({ isPretty = false } = {}) {
	        if (!this[0]) {
	            return '';
	        }
	        if (this.language == 'js') {
	            return generate(this[0].nodePath.node, isPretty)
	        } else {
	            return (languageMap[this.language].generate)(this[0].nodePath.value);
	        }
	    }
	}

	function cloneAST(ast) {
	    const newAST = new AST$1('', { parseOptions: ast.parseOptions, rootNode: ast.rootNode});
	    if (ast.sfc) {
	        newAST.sfc = ast.sfc;
	    }
	    return newAST
	}

	function getAttrValue(node, attr) {
	    const keyList = attr.split('.');
	    let currentNode = node;
	    let deep = 0;
	    keyList.forEach(attr => {
	        if (currentNode[attr]) {
	            currentNode = currentNode[attr];
	            deep++;
	        }
	    });
	    if (deep == keyList.length) {
	        return currentNode;
	    } else {
	        return null
	    }
	}

	function initParent(ast) {
	    if (ast.isHtml) {
	        ast[0].parentList =  ast.core.getParentListByAst(ast[0].nodePath);
	        ast[0]._index = ast[0].parentList[0] ? ast[0].parentList[0].node.content.children.indexOf(ast[0].nodePath.node) : 0;
	    } else {
	        ast[0].parentList =  core.getParentListByAst(ast[0].nodePath);
	    }
	    return ast[0].parentList
	}

	function initSiblings(ast) {
	    if (ast.language == 'html') {
	        const parent = ast.parent();
	        const siblings = (parent.attr('content.children') || []).map((node, index) => {
	            return {
	                _index: index,
	                nodePath: new NodePath$1(node, parent[0].nodePath, parent[0].nodePath),
	                parseOptions: ast.parseOptions
	            }
	        });
	        
	        ast[0].siblings = siblings;
	        ast[0].prevAll = siblings.filter(s => s._index < ast._index);
	        ast[0].nextAll = siblings.filter(s => s._index > ast._index);
	    } else {
	        const parentList = initParent(ast);
	        if (!parentList || parentList.length == 0) {
	            return;
	        }
	        const parseOptions = ast.parseOptions;
	        let getArrayParent = false;
	        let i = 0;
	        const siblings = [];
	        const prevAll = [];
	        const nextAll = [];
	        let selfPathNode = ast[0].nodePath.value;
	        while(!getArrayParent) {
	            if (!parentList[i] || !parentList[i].value) {
	                getArrayParent = true;
	            } else if (Array.isArray(parentList[i].value)) {
	                getArrayParent = true;
	                let isPrev = true;
	                let childIndex = 0;
	                while (parentList[i].__childCache[childIndex]) {
	                    const nodePath = parentList[i].__childCache[childIndex];
	                    if (nodePath.value == selfPathNode) {
	                        // find self
	                        isPrev = false;
	                    } else {
	                        siblings.push({ nodePath, parseOptions });
	                        if (isPrev) {
	                            prevAll.push({ nodePath, parseOptions });
	                        } else {
	                            nextAll.push({ nodePath, parseOptions });
	                        }
	                    }
	                    childIndex++;
	                }
	                ast[0].siblings = siblings;
	                ast[0].prevAll = prevAll;
	                ast[0].nextAll = nextAll;
	            }
	            selfPathNode = parentList[i].value;
	            i++;
	        }
	    }   
	}
	function setAttrValue(node, attrMap) {
	    for(const key in attrMap) {
	        const value = attrMap[key];
	        const keyList = key.split('.');
	        let currentNode = node;
	        keyList.forEach((attr, index) => {
	            if (index == keyList.length - 1) {
	                currentNode[attr] = value;
	            } else if (currentNode[attr]) {
	                currentNode = currentNode[attr];
	            }
	        });
	    }
	    
	}
	var Ast = AST$1;

	const fs$1 = require$$0$5;
	const code = function(filename = 'src/code/input.js') {
	    return fs$1.readFileSync(filename);
	};
	var readFile = code;

	// 写入code
	const fs = require$$0$5;
	const writeCode = function(code, filename = 'src/code/output.js') {
	    fs.writeFileSync(filename, code);
	    console.log(`write code to ${filename} success!`);
	};

	var writeFile$1 = writeCode;

	var name = "gogocode";
	var version = "1.0.9";
	var description = "The simplest tool to parse/transform/generate code on ast";
	var keywords = [
		"babel",
		"jscodeshift",
		"acorn",
		"babylon",
		"recast",
		"babel-generator",
		"babel-template",
		"babel-traverse",
		"babel-types",
		"esprima",
		"html-ast-transform",
		"htmlparser-to-html",
		"htmlparser2",
		"parse5",
		"ast"
	];
	var main$1 = "index.js";
	var browser = "umd/gogocode.js";
	var types = "types/index.d.ts";
	var scripts = {
		test: "jest --coverage",
		build: "rollup -c",
		prepublishOnly: "npm run build && npm run test"
	};
	var repository = {
		type: "git",
		url: "git@github.com:thx/gogocode.git"
	};
	var author = "yexi";
	var license = "ISC";
	var devDependencies = {
		"@rollup/plugin-commonjs": "^19.0.0",
		"@rollup/plugin-json": "^4.1.0",
		"@rollup/plugin-node-resolve": "^13.0.0",
		"@rollup/plugin-replace": "^2.4.2",
		jest: "^26.6.3",
		lerna: "^3.22.1",
		rollup: "^2.52.3",
		"rollup-plugin-modify": "^3.0.0",
		"rollup-plugin-node-builtins": "^2.1.2",
		"rollup-plugin-terser": "^7.0.2",
		typescript: "^3.5.2"
	};
	var dependencies = {
		"@babel/parser": "^7.7.7",
		glob: "^7.1.6",
		"hyntax-yx": "^1.0.3",
		"indent-string": "^4.0.0",
		recast: "^0.18.5",
		"vue3-browser-compiler-yx": "^1.0.1"
	};
	var jest = {
		collectCoverage: true,
		coverageDirectory: "./coverage/",
		collectCoverageFrom: [
			"src/**/*.js",
			"index.js",
			"!**/node_modules/**",
			"!src/browser.js",
			"!src/run-html-plugin.js",
			"!src/run-js-plugin.js",
			"!src/serialize-node.js",
			"!src/file-tool/read-file.js",
			"!src/file-tool/write-file.js",
			"!src/js-core/build-node.js",
			"!src/js-core/get-absolute-value.js"
		],
		testPathIgnorePatterns: [
			"/node_modules/"
		]
	};
	var require$$7 = {
		name: name,
		version: version,
		description: description,
		keywords: keywords,
		main: main$1,
		browser: browser,
		types: types,
		scripts: scripts,
		repository: repository,
		author: author,
		license: license,
		devDependencies: devDependencies,
		dependencies: dependencies,
		jest: jest
	};

	const jsCore = core_1$2;
	const htmlCore = core_1$1;
	const vueCore = core_1;
	const NodePath = NodePath_1;
	const AST = Ast;
	// const build = require('./build-node');
	const loadFile = readFile;
	const writeFile = writeFile$1;
	const pkg = require$$7;

	const langCoreMap = {
	    'vue': vueCore,
	    'html': htmlCore,
	    'js': jsCore
	};

	function getCore(parseOptions = {}) {
	    let core = jsCore;
	    if (parseOptions.language && langCoreMap[parseOptions.language]) {
	        core = langCoreMap[parseOptions.language];
	    }
	    if (parseOptions.html) {
	        core = htmlCore;
	        parseOptions.language = 'html';
	    }
	    return core
	}

	const main = (code, options = {}) => {
	    code = code || '';
	    let node;
	    let nodePath;
	    let parseOptions;
	    let astFragment;
	    let isProgram = 
	        options.isProgram === undefined || options.isProgram === true;
	    if (typeof options.parseOptions == 'object') {
	        parseOptions = options.parseOptions;
	    }

	    if (typeof options.astFragment == 'object') {
	        astFragment = options.astFragment;
	    }

	    if (typeof code == 'string') {
	        try {
	            const core = getCore(parseOptions);
	            node = core.buildAstByAstStr(
	                code,
	                astFragment,                 
	                {
	                    parseOptions,
	                    isProgram
	                }
	            );
	        } catch (e) {
	            return { 
	                src: code,
	                error: `Only correct js / html / vue could be parse successfully, please check the code or parseOptions!`
	            }
	        }
	        nodePath = new NodePath(node);
	    } else if (code.nodeType) {
	        nodePath = new NodePath(code);
	    } else if (code.type) {
	        // 传入ast node对象
	        nodePath = new NodePath(code);
	    } else if (code.node && code.parent) {
	        // 传入nodePath对象
	        nodePath = code;
	    } else {
	        throw new Error('$ failed! invalid input! accept code / ast node / nodePath');
	    }

	    let ast = new AST(nodePath, { parseOptions, rootNode: nodePath });
	    return ast;
	};

	main.loadFile = (filePath, { parseOptions } = {}) => {
	    const code = loadFile(filePath).toString();
	    return main(code, { parseOptions })
	};

	main.writeFile = writeFile;

	main.version = pkg.version;

	var $$1 = main;

	const $ = $$1;
	var gogocodeCore = $;

	return gogocodeCore;

})));
